Program.Sub.ScreenSU.Start
Gui.Form..Create
Gui.Form..Caption("Estimator 4986 22.05.05.00")
Gui.Form..Size(20760,11265)
Gui.Form..MinX(0)
Gui.Form..MinY(0)
Gui.Form..Position(0,15)
Gui.Form..BackColor(16777215)
Gui.Form..MousePointer(0)
Gui.Form..Event(UnLoad,Form_UnLoad)
Gui.Form.frameTree.Create(Frame)
Gui.Form.frameTree.Size(5445,10125)
Gui.Form.frameTree.Position(15015,840)
Gui.Form.frameTree.BackColor(16777215)
Gui.Form.frameTree.Anchor(11)
Gui.Form.frameTreeTop.Create(Frame)
Gui.Form.frameTreeTop.Size(5295,2040)
Gui.Form.frameTreeTop.Position(120,705)
Gui.Form.frameTreeTop.Parent("frameTree")
Gui.Form.frameTreeTop.BackColor(16777215)
Gui.Form.frameTreeTop.BorderStyle(0)
Gui.Form.frameTreeTop.Anchor(13)
Gui.Form.cmdBomCompare.Create(Button)
Gui.Form.cmdBomCompare.Size(1275,345)
Gui.Form.cmdBomCompare.Position(75,1275)
Gui.Form.cmdBomCompare.Caption("Bom Compare")
Gui.Form.cmdBomCompare.Event(Click,cmdBomCompare_Click)
Gui.Form.cmdBomCompare.FontStyle(True,False,False,False,False)
Gui.Form.cmdBomCompare.ControlGroup(2)
Gui.Form.cmdBomCompare.BackColor(15453831)
Gui.Form.cmdBomCompare.ToolTip("Open BOM Compare to Save Bom to  GSS")
Gui.Form.cmdBomCompare.Parent("frameTreeTop")
Gui.Form.cmdBomCompare.ForeColor(16777215)
Gui.Form.cmdBomCompare.FontSize(7)
Gui.Form.cmdBomCompare.TabStop(True)
Gui.Form.cmdBomCompare.TabIndex(40)
Gui.Form.cmdSaveBomToGSS.Create(Button)
Gui.Form.cmdSaveBomToGSS.Size(1275,345)
Gui.Form.cmdSaveBomToGSS.Position(75,150)
Gui.Form.cmdSaveBomToGSS.Parent("frameTreeTop")
Gui.Form.cmdSaveBomToGSS.Caption("Save Bom")
Gui.Form.cmdSaveBomToGSS.BackColor(15453831)
Gui.Form.cmdSaveBomToGSS.ForeColor(16777215)
Gui.Form.cmdSaveBomToGSS.ToolTip("Save Bom tree to GSS")
Gui.Form.cmdSaveBomToGSS.ControlGroup(2)
Gui.Form.cmdSaveBomToGSS.FontStyle(True,False,False,False,False)
Gui.Form.cmdSaveBomToGSS.Event(Click,cmdSaveBomToGSS_Click)
Gui.Form.cmdSaveBomToGSS.FontSize(7)
Gui.Form.cmdSaveBomToGSS.TabStop(True)
Gui.Form.cmdSaveBomToGSS.TabIndex(37)
Gui.Form.cmdClearBom.Create(Button)
Gui.Form.cmdClearBom.Size(1275,345)
Gui.Form.cmdClearBom.Position(75,1650)
Gui.Form.cmdClearBom.Parent("frameTreeTop")
Gui.Form.cmdClearBom.Caption("Clear Bom")
Gui.Form.cmdClearBom.BackColor(8036607)
Gui.Form.cmdClearBom.ForeColor(16777215)
Gui.Form.cmdClearBom.ToolTip("Clear all Bom section")
Gui.Form.cmdClearBom.Event(Click,cmdClearBom_Click)
Gui.Form.cmdClearBom.FontStyle(True,False,False,False,False)
Gui.Form.cmdClearBom.FontSize(7)
Gui.Form.cmdClearBom.TabStop(True)
Gui.Form.cmdClearBom.TabIndex(1)
Gui.Form.gsBookMarks.Create(GsGridControl)
Gui.Form.gsBookMarks.Size(3015,1875)
Gui.Form.gsBookMarks.Position(5100,120)
Gui.Form.gsBookMarks.Parent("frameTreeTop")
Gui.Form.gsBookMarks.Event(RowCellClick,gsBookMarks_RowCellClick)
Gui.Form.gsBookMarks.Event(CellValueChanged,gsBookMarks_CellValueChanged)
Gui.Form.tabBomHead.Create(Tab)
Gui.Form.tabBomHead.Size(3660,1860)
Gui.Form.tabBomHead.Position(1395,135)
Gui.Form.tabBomHead.Parent("frameTreeTop")
Gui.Form.tabBomHead.Tabs(4)
Gui.Form.tabBomHead.SetTab(0)
Gui.Form.tabBomHead.Caption("Gen.1")
Gui.Form.tabBomHead.SetTab(1)
Gui.Form.tabBomHead.Caption("Gen.2")
Gui.Form.tabBomHead.SetTab(2)
Gui.Form.tabBomHead.Caption("Memo")
Gui.Form.tabBomHead.SetTab(3)
Gui.Form.tabBomHead.Caption("Comments")
Gui.Form.picBomDocs.Create(PictureBox)
Gui.Form.picBomDocs.Size(345,240)
Gui.Form.picBomDocs.Position(0,0)
Gui.Form.picBomDocs.Parent("tabBomHead",0)
Gui.Form.picBomDocs.BackColor(-2147483626)
Gui.Form.picBomDocs.ToolTip("Bom Document Control")
Gui.Form.picBomDocs.Event(Click,picBomDocs_Click)
Gui.Form.picBomMaster.Create(PictureBox)
Gui.Form.picBomMaster.Size(285,240)
Gui.Form.picBomMaster.Position(330,0)
Gui.Form.picBomMaster.Parent("tabBomHead",0)
Gui.Form.picBomMaster.BackColor(-2147483626)
Gui.Form.picBomMaster.ToolTip("Open/New/Copy/Delete  Bom Master")
Gui.Form.picBomMaster.Event(Click,picBomMaster_Click)
Gui.Form.picBomBookmarks.Create(PictureBox)
Gui.Form.picBomBookmarks.Size(270,285)
Gui.Form.picBomBookmarks.Position(645,-45)
Gui.Form.picBomBookmarks.Parent("tabBomHead",0)
Gui.Form.picBomBookmarks.BackColor(-2147483626)
Gui.Form.picBomBookmarks.ToolTip("Add Bom to Bookmarks")
Gui.Form.picBomBookmarks.Event(Click,picBomBookmarks_Click)
Gui.Form.lblBom.Create(Label,"Bom",True,1050,255,0,1020,75,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblBom.Parent("tabBomHead",0)
Gui.Form.lblBom.FontStyle(True,False,False,False,False)
Gui.Form.lblBomRev.Create(Label,"Rev",True,1155,255,0,2055,60,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblBomRev.Parent("tabBomHead",0)
Gui.Form.lblBomRev.FontStyle(True,False,False,False,False)
Gui.Form.txtParent.Create(TextBox,"",True,1995,300,0,30,270,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtParent.Parent("tabBomHead",0)
Gui.Form.txtParent.MaxLength(17)
Gui.Form.txtParent.ControlGroup(3)
Gui.Form.txtParent.defaultvalue("")
Gui.Form.txtParent.Event(LostFocus,txtParent_LostFocus)
Gui.Form.txtParent.ToolTip("Enter an existing Bom number (17 chars) and hit Tab to move the cursor to Rev and enter Rev. Alternatively, use the Browse button.")
Gui.Form.txtParent.TabStop(True)
Gui.Form.txtParent.TabIndex(42)
Gui.Form.txtParentRev.Create(TextBox,"",True,465,300,0,2040,270,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtParentRev.Parent("tabBomHead",0)
Gui.Form.txtParentRev.MaxLength(3)
Gui.Form.txtParentRev.ControlGroup(3)
Gui.Form.txtParentRev.defaultvalue("")
Gui.Form.txtParentRev.Event(LostFocus,txtParentRev_LostFocus)
Gui.Form.txtParentRev.ToolTip("Enter the Rev (3 chars) then hit Tab, the Bom/Router will be loaded. Alternatively, use the Browser button.")
Gui.Form.txtParentRev.TabStop(True)
Gui.Form.txtParentRev.TabIndex(43)
Gui.Form.cmdBrwBom.Create(Button)
Gui.Form.cmdBrwBom.Size(360,300)
Gui.Form.cmdBrwBom.Position(2520,270)
Gui.Form.cmdBrwBom.Parent("tabBomHead",0)
Gui.Form.cmdBrwBom.Caption("^")
Gui.Form.cmdBrwBom.ToolTip("Select an existing BOM")
Gui.Form.cmdBrwBom.Event(Click,cmdBrwBom_Click)
Gui.Form.cmdBrwBom.BackColor(16777215)
Gui.Form.cmdBrwBom.TabStop(True)
Gui.Form.cmdBrwBom.TabIndex(44)
Gui.Form.cmdRefreshBomTreeLoad.Create(Button)
Gui.Form.cmdRefreshBomTreeLoad.Size(360,300)
Gui.Form.cmdRefreshBomTreeLoad.Position(2880,270)
Gui.Form.cmdRefreshBomTreeLoad.Parent("tabBomHead",0)
Gui.Form.cmdRefreshBomTreeLoad.Caption("Refresh")
Gui.Form.cmdRefreshBomTreeLoad.ToolTip("Reload the existing Bom/Router specified by the Bom and Rev textboxes")
Gui.Form.cmdRefreshBomTreeLoad.Event(Click,cmdRefreshBomTreeLoad_Click)
Gui.Form.cmdRefreshBomTreeLoad.BackColor(16777215)
Gui.Form.cmdRefreshBomTreeLoad.TabStop(True)
Gui.Form.cmdRefreshBomTreeLoad.TabIndex(45)
Gui.Form.txtParentDescr.Create(TextBox,"",True,3510,300,0,30,870,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtParentDescr.Parent("tabBomHead",0)
Gui.Form.txtParentDescr.MaxLength(30)
Gui.Form.txtParentDescr.ControlGroup(3)
Gui.Form.txtParentDescr.defaultvalue("")
Gui.Form.txtParentDescr.Event(Change,txtParentDescr_Change)
Gui.Form.txtParentDescr.ToolTip("Bom Description")
Gui.Form.txtParentDescr.TabStop(True)
Gui.Form.txtParentDescr.TabIndex(46)
Gui.Form.lblWeight.Create(Label,"Weight",True,1590,255,0,45,720,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblWeight.Parent("tabBomHead",1)
Gui.Form.lblWeight.FontStyle(True,False,False,False,False)
Gui.Form.txtParentWeight.Create(TextBox,"",True,1590,300,0,60,945,True,1,"Arial",8,-2147483643,1)
Gui.Form.txtParentWeight.Parent("tabBomHead",1)
Gui.Form.txtParentWeight.DefaultValue("")
Gui.Form.txtParentWeight.ControlGroup(3)
Gui.Form.txtParentWeight.ToolTip("Bom Weight")
Gui.Form.txtParentWeight.TabStop(True)
Gui.Form.txtParentWeight.TabIndex(51)
Gui.Form.txtParentWeight.NumericOnly(1)
Gui.Form.chkBomComp.Create(CheckBox)
Gui.Form.chkBomComp.Size(1410,375)
Gui.Form.chkBomComp.Position(30,1155)
Gui.Form.chkBomComp.Parent("tabBomHead",0)
Gui.Form.chkBomComp.Caption("BOM Compl.")
Gui.Form.chkBomComp.Event(Click,chkBomComp_Click)
Gui.Form.chkBomComp.ToolTip("Mark the Bom Completed/Uncompleted")
Gui.Form.chkBomComp.FontStyle(True,False,False,False,False)
Gui.Form.chkBomComp.FontSize(7)
Gui.Form.chkBomComp.TabStop(True)
Gui.Form.chkBomComp.TabIndex(47)
Gui.Form.lblBomDescription.Create(Label,"Description",True,3510,255,0,30,675,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblBomDescription.Parent("tabBomHead",0)
Gui.Form.lblBomDescription.FontStyle(True,False,False,False,False)
Gui.Form.lblBomUm.Create(Label,"UM",True,390,255,0,75,120,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblBomUm.Parent("tabBomHead",1)
Gui.Form.lblBomUm.FontStyle(True,False,False,False,False)
Gui.Form.txtBomUM.Create(TextBox,"",True,390,300,0,75,345,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtBomUM.Parent("tabBomHead",1)
Gui.Form.txtBomUM.DefaultValue("")
Gui.Form.txtBomUM.ControlGroup(3)
Gui.Form.txtBomUM.TabStop(True)
Gui.Form.txtBomUM.TabIndex(48)
Gui.Form.txtBomUM.MaxLength(3)
Gui.Form.txtBomUM.Event(LostFocus,txtBomUM_LostFocus)
Gui.Form.lblBomUnitCost.Create(Label,"Unit Cost",True,1245,255,0,435,120,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblBomUnitCost.Parent("tabBomHead",1)
Gui.Form.lblBomUnitCost.FontStyle(True,False,False,False,False)
Gui.Form.txtBomUnitCost.Create(TextBox,"",True,1170,300,0,480,345,True,1,"Arial",8,-2147483643,1)
Gui.Form.txtBomUnitCost.Parent("tabBomHead",1)
Gui.Form.txtBomUnitCost.DefaultValue("")
Gui.Form.txtBomUnitCost.ControlGroup(3)
Gui.Form.txtBomUnitCost.TabStop(True)
Gui.Form.txtBomUnitCost.TabIndex(49)
Gui.Form.txtBomUnitCost.NumericOnly(1)
Gui.Form.ddlBomSource.Create(DropDownList)
Gui.Form.ddlBomSource.Size(1785,330)
Gui.Form.ddlBomSource.Position(1680,330)
Gui.Form.ddlBomSource.Parent("tabBomHead",1)
Gui.Form.ddlBomSource.TabStop(True)
Gui.Form.ddlBomSource.TabIndex(50)
Gui.Form.lblBomSource.Create(Label,"Source",True,1815,255,0,1650,135,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblBomSource.Parent("tabBomHead",1)
Gui.Form.lblBomSource.FontStyle(True,False,False,False,False)
Gui.Form.txtMemo1.Create(TextBox,"",True,3495,300,0,30,270,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtMemo1.Parent("tabBomHead",2)
Gui.Form.txtMemo1.TabStop(True)
Gui.Form.txtMemo1.TabIndex(52)
Gui.Form.txtMemo1.ControlGroup(3)
Gui.Form.txtMemo1.MaxLength(30)
Gui.Form.txtMemo2.Create(TextBox,"",True,3495,300,0,30,870,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtMemo2.Parent("tabBomHead",2)
Gui.Form.txtMemo2.TabStop(True)
Gui.Form.txtMemo2.TabIndex(53)
Gui.Form.txtMemo2.ControlGroup(3)
Gui.Form.txtMemo2.MaxLength(30)
Gui.Form.lblMemo1.Create(Label,"Memo 1",True,3510,255,0,30,75,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblMemo1.Parent("tabBomHead",2)
Gui.Form.lblMemo1.FontStyle(True,False,False,False,False)
Gui.Form.lblMemo2.Create(Label,"Memo 2",True,3510,255,0,30,675,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblMemo2.Parent("tabBomHead",2)
Gui.Form.lblMemo2.FontStyle(True,False,False,False,False)
Gui.Form.txtBomExtraDescr.Create(TextBoxR)
Gui.Form.txtBomExtraDescr.Size(3435,1365)
Gui.Form.txtBomExtraDescr.Position(45,45)
Gui.Form.txtBomExtraDescr.Parent("tabBomHead",3)
Gui.Form.txtBomExtraDescr.TabStop(True)
Gui.Form.txtBomExtraDescr.TabIndex(54)
Gui.Form.txtBomExtraDescr.ControlGroup(3)
Gui.Form.cmdCreateRouterFromBom.Create(Button)
Gui.Form.cmdCreateRouterFromBom.Size(1275,345)
Gui.Form.cmdCreateRouterFromBom.Position(75,900)
Gui.Form.cmdCreateRouterFromBom.Parent("frameTreeTop")
Gui.Form.cmdCreateRouterFromBom.Caption("Create Router")
Gui.Form.cmdCreateRouterFromBom.BackColor(9157775)
Gui.Form.cmdCreateRouterFromBom.ForeColor(16777215)
Gui.Form.cmdCreateRouterFromBom.FontSize(7)
Gui.Form.cmdCreateRouterFromBom.ToolTip("Go to Bom Comments")
Gui.Form.cmdCreateRouterFromBom.Event(Click,cmdCreateRouterFromBom_Click)
Gui.Form.cmdCreateRouterFromBom.TabStop(True)
Gui.Form.cmdCreateRouterFromBom.TabIndex(39)
Gui.Form.cmdCreateRouterFromBom.FontStyle(True,False,False,False,False)
Gui.Form.cmdCreateMfgPartsForBomNode.Create(Button)
Gui.Form.cmdCreateMfgPartsForBomNode.Size(1275,345)
Gui.Form.cmdCreateMfgPartsForBomNode.Position(75,525)
Gui.Form.cmdCreateMfgPartsForBomNode.Parent("frameTreeTop")
Gui.Form.cmdCreateMfgPartsForBomNode.Caption("Create Parts")
Gui.Form.cmdCreateMfgPartsForBomNode.BackColor(15128749)
Gui.Form.cmdCreateMfgPartsForBomNode.FontSize(7)
Gui.Form.cmdCreateMfgPartsForBomNode.ToolTip("Create Inventory MFG Parts from Bom Nodes")
Gui.Form.cmdCreateMfgPartsForBomNode.Event(Click,cmdCreateMfgPartsForBomNode_Click)
Gui.Form.cmdCreateMfgPartsForBomNode.TabStop(True)
Gui.Form.cmdCreateMfgPartsForBomNode.TabIndex(38)
Gui.Form.cmdCreateMfgPartsForBomNode.ForeColor(16777215)
Gui.Form.cmdCreateMfgPartsForBomNode.FontStyle(True,False,False,False,False)
Gui.Form.frameTreeBottom.Create(Frame)
Gui.Form.frameTreeBottom.Size(5295,7395)
Gui.Form.frameTreeBottom.Position(90,2685)
Gui.Form.frameTreeBottom.Parent("frameTree")
Gui.Form.frameTreeBottom.BackColor(16777215)
Gui.Form.frameTreeBottom.Anchor(15)
Gui.Form.frameTreeBottom.BorderStyle(0)
Gui.Form.trvBom.Create(TreeView)
Gui.Form.trvBom.Size(5205,7185)
Gui.Form.trvBom.Position(15,165)
Gui.Form.trvBom.Parent("frameTreeBottom")
Gui.Form.trvBom.Anchor(15)
Gui.Form.trvBom.FontStyle(True,False,False,False,False)
Gui.Form.trvBom.Event(NodeClick,trvBom_NodeClick)
Gui.Form.trvBom.TabStop(True)
Gui.Form.trvBom.TabIndex(75)
Gui.Form.chkBomOnly.Create(CheckBox)
Gui.Form.chkBomOnly.Size(1095,360)
Gui.Form.chkBomOnly.Position(210,435)
Gui.Form.chkBomOnly.Parent("frameTree")
Gui.Form.chkBomOnly.Caption("Bom Only")
Gui.Form.chkBomOnly.FontStyle(True,False,False,False,False)
Gui.Form.chkBomOnly.BackColor(16777215)
Gui.Form.chkBomOnly.ToolTip("When checked, will populate Bom Only and NOT populate Router data, Bom tree node click will NOT populate Router")
Gui.Form.chkBomOnly.FontSize(7)
Gui.Form.chkBomOnly.TabStop(True)
Gui.Form.chkBomOnly.TabIndex(36)
Gui.Form.picAltBom.Create(PictureBox)
Gui.Form.picAltBom.Size(375,315)
Gui.Form.picAltBom.Position(405,135)
Gui.Form.picAltBom.Parent("frameTree")
Gui.Form.picAltBom.Event(Click,picAltBom_Click)
Gui.Form.picAltBom.ToolTip("Open a Alternative BOM screen")
Gui.Form.picHideBomHead.Create(PictureBox)
Gui.Form.picHideBomHead.Size(375,315)
Gui.Form.picHideBomHead.Position(45,135)
Gui.Form.picHideBomHead.Parent("frameTree")
Gui.Form.picHideBomHead.ToolTip("Hide/Display Bom  header section")
Gui.Form.picHideBomHead.Event(Click,picHideBomHead_Click)
Gui.Form.picToggleBookmarks.Create(PictureBox)
Gui.Form.picToggleBookmarks.Size(210,255)
Gui.Form.picToggleBookmarks.Position(5205,465)
Gui.Form.picToggleBookmarks.Parent("frameTree")
Gui.Form.picToggleBookmarks.BackColor(-2147483626)
Gui.Form.picToggleBookmarks.ToolTip("Toggle Bookmarks")
Gui.Form.picToggleBookmarks.Event(Click,picToggleBookmarks_Click)
Gui.Form.picLabel.Create(PictureBox)
Gui.Form.picLabel.Size(285,285)
Gui.Form.picLabel.Position(4500,135)
Gui.Form.picLabel.Parent("frameTree")
Gui.Form.picLabel.Event(Click,picLabel_Click)
Gui.Form.picLabel.ToolTip("Label on Node Settings")
Gui.Form.picDecimal.Create(PictureBox)
Gui.Form.picDecimal.Size(285,285)
Gui.Form.picDecimal.Position(4830,135)
Gui.Form.picDecimal.Parent("frameTree")
Gui.Form.picDecimal.ToolTip("Decimal Settings")
Gui.Form.picDecimal.Event(Click,picDecimal_Click)
Gui.Form.picFieldOrder.Create(PictureBox)
Gui.Form.picFieldOrder.Size(285,285)
Gui.Form.picFieldOrder.Position(5160,135)
Gui.Form.picFieldOrder.Parent("frameTree")
Gui.Form.picFieldOrder.Event(Click,picFieldOrder_Click)
Gui.Form.picFieldOrder.ToolTip("Field Order Settings")
Gui.Form.chkDisplayLevel.Create(CheckBox)
Gui.Form.chkDisplayLevel.Size(630,375)
Gui.Form.chkDisplayLevel.Position(855,120)
Gui.Form.chkDisplayLevel.Parent("frameTree")
Gui.Form.chkDisplayLevel.Caption("Lvl")
Gui.Form.chkDisplayLevel.ToolTip("Display Bom Level on the Tree Node")
Gui.Form.chkDisplayLevel.DefaultValue("")
Gui.Form.chkDisplayLevel.FontStyle(True,False,False,False,False)
Gui.Form.chkDisplayLevel.FontSize(7)
Gui.Form.chkDisplayLevel.BackColor(16777215)
Gui.Form.chkDisplayLevel.TabStop(True)
Gui.Form.chkDisplayLevel.TabIndex(31)
Gui.Form.chkDisplayQty.Create(CheckBox)
Gui.Form.chkDisplayQty.Size(615,375)
Gui.Form.chkDisplayQty.Position(1500,120)
Gui.Form.chkDisplayQty.Parent("frameTree")
Gui.Form.chkDisplayQty.Caption("Qty")
Gui.Form.chkDisplayQty.ToolTip("Display Quantity on the Tree Node")
Gui.Form.chkDisplayQty.DefaultValue("")
Gui.Form.chkDisplayQty.FontStyle(True,False,False,False,False)
Gui.Form.chkDisplayQty.FontSize(7)
Gui.Form.chkDisplayQty.BackColor(16777215)
Gui.Form.chkDisplayQty.TabStop(True)
Gui.Form.chkDisplayQty.TabIndex(32)
Gui.Form.chkDisplayPart.Create(CheckBox)
Gui.Form.chkDisplayPart.Size(705,375)
Gui.Form.chkDisplayPart.Position(2130,120)
Gui.Form.chkDisplayPart.Parent("frameTree")
Gui.Form.chkDisplayPart.Caption("Part")
Gui.Form.chkDisplayPart.FontSize(7)
Gui.Form.chkDisplayPart.ToolTip("Display Part on the Tree Node")
Gui.Form.chkDisplayPart.DefaultValue("")
Gui.Form.chkDisplayPart.FontStyle(True,False,False,False,False)
Gui.Form.chkDisplayPart.BackColor(16777215)
Gui.Form.chkDisplayPart.TabStop(True)
Gui.Form.chkDisplayPart.TabIndex(33)
Gui.Form.chkDisplayDescr.Create(CheckBox)
Gui.Form.chkDisplayDescr.Size(735,375)
Gui.Form.chkDisplayDescr.Position(2835,120)
Gui.Form.chkDisplayDescr.Parent("frameTree")
Gui.Form.chkDisplayDescr.Caption("Desc")
Gui.Form.chkDisplayDescr.FontSize(7)
Gui.Form.chkDisplayDescr.ToolTip("Display Description on the Tree Node")
Gui.Form.chkDisplayDescr.DefaultValue("")
Gui.Form.chkDisplayDescr.FontStyle(True,False,False,False,False)
Gui.Form.chkDisplayDescr.BackColor(16777215)
Gui.Form.chkDisplayDescr.TabStop(True)
Gui.Form.chkDisplayDescr.TabIndex(34)
Gui.Form.lblMoreDisplaySettings.Create(Label,"...",True,315,285,0,4185,195,True,0,"Arial",10,16777215,0)
Gui.Form.lblMoreDisplaySettings.Parent("frameTree")
Gui.Form.lblMoreDisplaySettings.FontStyle(True,True,False,False,False)
Gui.Form.lblMoreDisplaySettings.Event(Click,lblMoreDisplaySettings_Click)
Gui.Form.lblMoreDisplaySettings.ForeColor(32768)
Gui.Form.lblMoreDisplaySettings.ToolTip("More Fields")
Gui.Form.chkActivateNodeMenu.Create(CheckBox)
Gui.Form.chkActivateNodeMenu.Size(600,375)
Gui.Form.chkActivateNodeMenu.Position(3570,120)
Gui.Form.chkActivateNodeMenu.Parent("frameTree")
Gui.Form.chkActivateNodeMenu.Caption("Mn")
Gui.Form.chkActivateNodeMenu.ToolTip("Show Menu when clicking Tree Node")
Gui.Form.chkActivateNodeMenu.DefaultValue("")
Gui.Form.chkActivateNodeMenu.FontStyle(True,False,False,False,False)
Gui.Form.chkActivateNodeMenu.FontSize(7)
Gui.Form.chkActivateNodeMenu.BackColor(16777215)
Gui.Form.chkActivateNodeMenu.TabStop(True)
Gui.Form.chkActivateNodeMenu.TabIndex(35)
Gui.Form.frameSource.Create(Frame)
Gui.Form.frameSource.Size(4515,10125)
Gui.Form.frameSource.Position(30,840)
Gui.Form.frameSource.BackColor(16777215)
Gui.Form.frameSource.Anchor(7)
Gui.Form.GGC_Mat.Create(GsGridControl)
Gui.Form.GGC_Mat.Size(4305,8505)
Gui.Form.GGC_Mat.Position(105,1545)
Gui.Form.GGC_Mat.Parent("frameSource")
Gui.Form.GGC_Mat.Event(RowClick,GGC_Mat_RowClick)
Gui.Form.GGC_Mat.Anchor(15)
Gui.Form.GGC_Mat.Event(RowCellClick,GGC_Mat_RowCellClick)
Gui.Form.GGC_OPCODE.Create(GsGridControl)
Gui.Form.GGC_OPCODE.Size(4305,8505)
Gui.Form.GGC_OPCODE.Position(105,1560)
Gui.Form.GGC_OPCODE.Parent("frameSource")
Gui.Form.GGC_OPCODE.Event(RowClick,GGC_OPCODE_RowClick)
Gui.Form.GGC_OPCODE.Anchor(15)
Gui.Form.GGC_WC.Create(GsGridControl)
Gui.Form.GGC_WC.Size(4305,8505)
Gui.Form.GGC_WC.Position(105,1560)
Gui.Form.GGC_WC.Parent("frameSource")
Gui.Form.GGC_WC.Event(RowClick,GGC_WC_RowClick)
Gui.Form.GGC_WC.Anchor(15)
Gui.Form.GGC_Outs.Create(GsGridControl)
Gui.Form.GGC_Outs.Size(4305,8505)
Gui.Form.GGC_Outs.Position(105,1560)
Gui.Form.GGC_Outs.Parent("frameSource")
Gui.Form.GGC_Outs.Event(RowClick,GGC_Outs_RowClick)
Gui.Form.GGC_Outs.Anchor(15)
Gui.Form.optOuts.Create(Option)
Gui.Form.optOuts.Size(1215,300)
Gui.Form.optOuts.Position(150,165)
Gui.Form.optOuts.Parent("frameSource")
Gui.Form.optOuts.Caption("Outside")
Gui.Form.optOuts.Event(Click,optOuts_Click)
Gui.Form.optOuts.FontStyle(True,False,False,False,False)
Gui.Form.optOuts.BackColor(9498256)
Gui.Form.optOuts.TabStop(True)
Gui.Form.optOuts.TabIndex(55)
Gui.Form.optMat.Create(Option)
Gui.Form.optMat.Size(1290,300)
Gui.Form.optMat.Position(1500,165)
Gui.Form.optMat.Parent("frameSource")
Gui.Form.optMat.Caption("Material")
Gui.Form.optMat.Event(Click,optMat_Click)
Gui.Form.optMat.FontStyle(True,False,False,False,False)
Gui.Form.optMat.BackColor(15128749)
Gui.Form.optWC.Create(Option)
Gui.Form.optWC.Size(1215,300)
Gui.Form.optWC.Position(150,525)
Gui.Form.optWC.Parent("frameSource")
Gui.Form.optWC.Caption("WC / WG")
Gui.Form.optWC.FontStyle(True,False,False,False,False)
Gui.Form.optWC.Event(Click,optWC_Click)
Gui.Form.optWC.BackColor(13499135)
Gui.Form.optOPCodes.Create(Option)
Gui.Form.optOPCodes.Size(1290,300)
Gui.Form.optOPCodes.Position(1500,525)
Gui.Form.optOPCodes.Parent("frameSource")
Gui.Form.optOPCodes.Caption("OP Codes")
Gui.Form.optOPCodes.FontStyle(True,False,False,False,False)
Gui.Form.optOPCodes.Event(Click,optOPCodes_Click)
Gui.Form.optOPCodes.BackColor(13499135)
Gui.Form.ddlSourceCategory.Create(DropDownList)
Gui.Form.ddlSourceCategory.Size(1515,330)
Gui.Form.ddlSourceCategory.Position(2895,495)
Gui.Form.ddlSourceCategory.Parent("frameSource")
Gui.Form.ddlSourceCategory.ToolTip("Select Material Category before inserting into Router/Bom grid")
Gui.Form.ddlSourceCategory.TabStop(True)
Gui.Form.ddlSourceCategory.TabIndex(57)
Gui.Form.lblMatLoc.Create(Label,"Loc",True,420,255,0,2865,240,True,0,"Arial",8,16777215,0)
Gui.Form.lblMatLoc.Parent("frameSource")
Gui.Form.lblMatLoc.FontStyle(True,False,False,False,False)
Gui.Form.lblMatLoc.ToolTip("Default Location. If Multi-Location is used, default to User Security Assigned Location.")
Gui.Form.cmdRefreshSource.Create(Button)
Gui.Form.cmdRefreshSource.Size(705,495)
Gui.Form.cmdRefreshSource.Position(3720,960)
Gui.Form.cmdRefreshSource.Parent("frameSource")
Gui.Form.cmdRefreshSource.BackColor(16777215)
Gui.Form.cmdRefreshSource.Event(Click,cmdRefreshSource_Click)
Gui.Form.cmdRefreshSource.ToolTip("Refresh Material/Outside/WC/Op Codes")
Gui.Form.cmdRefreshSource.Caption("Refresh")
Gui.Form.cmdRefreshSource.DisableOnClick(10)
Gui.Form.cmdRefreshSource.TabStop(True)
Gui.Form.cmdRefreshSource.TabIndex(60)
Gui.Form.ddlMatLoc.Create(DropDownList)
Gui.Form.ddlMatLoc.Size(750,300)
Gui.Form.ddlMatLoc.Position(3315,150)
Gui.Form.ddlMatLoc.Parent("frameSource")
Gui.Form.ddlMatLoc.FontSize(7)
Gui.Form.ddlMatLoc.TabStop(True)
Gui.Form.ddlMatLoc.TabIndex(56)
Gui.Form.frInsertType.Create(Frame)
Gui.Form.frInsertType.Size(3555,585)
Gui.Form.frInsertType.Position(105,885)
Gui.Form.frInsertType.Parent("frameSource")
Gui.Form.frInsertType.Caption("Insert")
Gui.Form.frInsertType.BackColor(16777215)
Gui.Form.frInsertType.ToolTip("Method used to insert into the Router grid. Also you'd need to make sure a router row is selected before inserting.")
Gui.Form.frInsertType.FontStyle(True,False,False,False,False)
Gui.Form.optInsertAbove.Create(Option)
Gui.Form.optInsertAbove.Size(825,255)
Gui.Form.optInsertAbove.Position(45,225)
Gui.Form.optInsertAbove.Parent("frInsertType")
Gui.Form.optInsertAbove.Caption("Above")
Gui.Form.optInsertAbove.BackColor(16777215)
Gui.Form.optInsertAbove.Event(Click,optInsertAbove_Click)
Gui.Form.optInsertAbove.FontSize(7)
Gui.Form.optInsertAbove.FontStyle(True,False,False,False,False)
Gui.Form.optInsertAbove.TabStop(True)
Gui.Form.optInsertAbove.TabIndex(58)
Gui.Form.optInsertBelow.Create(Option)
Gui.Form.optInsertBelow.Size(810,255)
Gui.Form.optInsertBelow.Position(915,225)
Gui.Form.optInsertBelow.Parent("frInsertType")
Gui.Form.optInsertBelow.Caption("Below")
Gui.Form.optInsertBelow.BackColor(16777215)
Gui.Form.optInsertBelow.Event(Click,optInsertBelow_Click)
Gui.Form.optInsertBelow.FontSize(7)
Gui.Form.optInsertBelow.FontStyle(True,False,False,False,False)
Gui.Form.optInsertManual.Create(Option)
Gui.Form.optInsertManual.Size(915,255)
Gui.Form.optInsertManual.Position(1845,225)
Gui.Form.optInsertManual.Parent("frInsertType")
Gui.Form.optInsertManual.Caption("Manual")
Gui.Form.optInsertManual.BackColor(16777215)
Gui.Form.optInsertManual.Event(Click,optInsertManual_Click)
Gui.Form.optInsertManual.FontSize(7)
Gui.Form.optInsertManual.FontStyle(True,False,False,False,False)
Gui.Form.txtManualSeq.Create(TextBox,"",True,720,300,0,2775,195,True,1,"Arial",8,16777215,2)
Gui.Form.txtManualSeq.Parent("frInsertType")
Gui.Form.txtManualSeq.MaxLength(6)
Gui.Form.txtManualSeq.NumericOnly(2)
Gui.Form.txtManualSeq.Event(LostFocus,txtManualSeq_LostFocus)
Gui.Form.txtManualSeq.TabStop(True)
Gui.Form.txtManualSeq.TabIndex(59)
Gui.Form.frInsertSeperate.Create(Frame)
Gui.Form.frInsertSeperate.Size(45,495)
Gui.Form.frInsertSeperate.Position(1770,45)
Gui.Form.frInsertSeperate.Parent("frInsertType")
Gui.Form.frInsertSeperate.BackColor(16777215)
Gui.Form.picInvMaster.Create(PictureBox)
Gui.Form.picInvMaster.Size(375,315)
Gui.Form.picInvMaster.Position(4155,135)
Gui.Form.picInvMaster.Parent("frameSource")
Gui.Form.picInvMaster.ToolTip("Open/New/Copy/Delete Inventory Master")
Gui.Form.picInvMaster.Event(Click,picInvMaster_Click)
Gui.Form.frameMiddle.Create(Frame)
Gui.Form.frameMiddle.Size(10515,10125)
Gui.Form.frameMiddle.Position(4530,840)
Gui.Form.frameMiddle.BackColor(16777215)
Gui.Form.frameMiddle.Anchor(15)
Gui.Form.frameQuoteH.Create(Frame)
Gui.Form.frameQuoteH.Size(10395,2040)
Gui.Form.frameQuoteH.Position(75,705)
Gui.Form.frameQuoteH.Parent("frameMiddle")
Gui.Form.frameQuoteH.BackColor(16777215)
Gui.Form.frameQuoteH.Anchor(13)
Gui.Form.frameQuoteH.BorderStyle(0)
Gui.Form.lblQuote.Create(Label,"Quote",True,660,255,0,735,165,True,0,"Arial",8,16777215,0)
Gui.Form.lblQuote.FontStyle(True,False,False,False,False)
Gui.Form.lblQuote.Parent("frameQuoteH")
Gui.Form.txtQuote.Create(TextBox,"",True,1170,300,0,105,390,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtQuote.Parent("frameQuoteH")
Gui.Form.txtQuote.ControlGroup(4)
Gui.Form.txtQuote.defaultvalue("")
Gui.Form.txtQuote.MaxLength(7)
Gui.Form.txtQuote.NumericOnly(2)
Gui.Form.txtQuote.ToolTip("Quote Number in numeric (max 7 digits). Auto left pad with 0")
Gui.Form.txtQuote.Event(LostFocus,txtQuote_LostFocus)
Gui.Form.txtQuote.TabStop(True)
Gui.Form.txtQuote.TabIndex(61)
Gui.Form.lblCustNo.Create(Label,"Cust ID",True,825,255,0,1365,165,True,0,"Arial",8,16777215,0)
Gui.Form.lblCustNo.FontStyle(True,False,False,False,False)
Gui.Form.lblCustNo.Parent("frameQuoteH")
Gui.Form.txtCustNo.Create(TextBox,"",True,1065,300,0,1380,390,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtCustNo.Parent("frameQuoteH")
Gui.Form.txtCustNo.ControlGroup(4)
Gui.Form.txtCustNo.defaultvalue("")
Gui.Form.txtCustNo.MaxLength(6)
Gui.Form.txtCustNo.TabStop(True)
Gui.Form.txtCustNo.TabIndex(62)
Gui.Form.cmdBrwCustomer.Create(Button)
Gui.Form.cmdBrwCustomer.Size(360,360)
Gui.Form.cmdBrwCustomer.Position(4935,360)
Gui.Form.cmdBrwCustomer.Caption("^")
Gui.Form.cmdBrwCustomer.Parent("frameQuoteH")
Gui.Form.cmdBrwCustomer.Event(Click,cmdBrwCustomer_Click)
Gui.Form.cmdBrwCustomer.BackColor(16777215)
Gui.Form.cmdBrwCustomer.ToolTip("Select a Customer")
Gui.Form.cmdBrwCustomer.DisableOnClick(10)
Gui.Form.cmdBrwCustomer.TabStop(True)
Gui.Form.cmdBrwCustomer.TabIndex(64)
Gui.Form.lblCustName.Create(Label,"Customer Name",True,1935,255,0,2535,165,True,0,"Arial",8,16777215,0)
Gui.Form.lblCustName.Parent("frameQuoteH")
Gui.Form.lblCustName.FontStyle(True,False,False,False,False)
Gui.Form.txtCustName.Create(TextBox,"",True,2280,300,0,2580,390,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtCustName.Parent("frameQuoteH")
Gui.Form.txtCustName.ControlGroup(4)
Gui.Form.txtCustName.defaultvalue("")
Gui.Form.txtCustName.MaxLength(30)
Gui.Form.txtCustName.TabStop(True)
Gui.Form.txtCustName.TabIndex(63)
Gui.Form.lblSalesRep.Create(Label,"Sales Person",True,1935,255,0,5385,165,True,0,"Arial",8,16777215,0)
Gui.Form.lblSalesRep.Parent("frameQuoteH")
Gui.Form.lblSalesRep.FontStyle(True,False,False,False,False)
Gui.Form.lblContact.Create(Label,"Customer Contact",True,2010,255,0,7830,165,True,0,"Arial",8,16777215,0)
Gui.Form.lblContact.Parent("frameQuoteH")
Gui.Form.lblContact.FontStyle(True,False,False,False,False)
Gui.Form.cmdQHFComments.Create(Button)
Gui.Form.cmdQHFComments.Size(1215,375)
Gui.Form.cmdQHFComments.Position(5385,960)
Gui.Form.cmdQHFComments.Caption("Comments")
Gui.Form.cmdQHFComments.BackColor(14474460)
Gui.Form.cmdQHFComments.Event(Click,cmdQHFComments_Click)
Gui.Form.cmdQHFComments.FontStyle(True,False,False,False,False)
Gui.Form.cmdQHFComments.Parent("frameQuoteH")
Gui.Form.cmdQHFComments.ForeColor(16777215)
Gui.Form.cmdQHFComments.TabStop(True)
Gui.Form.cmdQHFComments.TabIndex(69)
Gui.Form.cmdCharges.Create(Button)
Gui.Form.cmdCharges.Size(1005,375)
Gui.Form.cmdCharges.Position(6720,960)
Gui.Form.cmdCharges.Caption("Charges")
Gui.Form.cmdCharges.BackColor(14474460)
Gui.Form.cmdCharges.FontStyle(True,False,False,False,False)
Gui.Form.cmdCharges.Event(Click,cmdCharges_Click)
Gui.Form.cmdCharges.Parent("frameQuoteH")
Gui.Form.cmdCharges.ForeColor(16777215)
Gui.Form.cmdCharges.TabStop(True)
Gui.Form.cmdCharges.TabIndex(70)
Gui.Form.lblQuoteLocation.Create(Label,"Locn",True,525,255,0,7815,795,True,0,"Arial",8,16777215,0)
Gui.Form.lblQuoteLocation.Parent("frameQuoteH")
Gui.Form.lblQuoteLocation.FontStyle(True,False,False,False,False)
Gui.Form.ddlQuoteLoc.Create(DropDownList)
Gui.Form.ddlQuoteLoc.Size(810,330)
Gui.Form.ddlQuoteLoc.Position(7845,1005)
Gui.Form.ddlQuoteLoc.Parent("frameQuoteH")
Gui.Form.ddlQuoteLoc.TabStop(True)
Gui.Form.ddlQuoteLoc.TabIndex(71)
Gui.Form.picQuickQuote.Create(PictureBox)
Gui.Form.picQuickQuote.Size(225,285)
Gui.Form.picQuickQuote.Position(480,75)
Gui.Form.picQuickQuote.Parent("frameQuoteH")
Gui.Form.picQuickQuote.BackColor(-2147483626)
Gui.Form.picQuickQuote.ToolTip("Open/New/Copy/Delete  Quick Quote")
Gui.Form.picQuickQuote.Event(Click,picQuickQuote_Click)
Gui.Form.picQuoteDocs.Create(PictureBox)
Gui.Form.picQuoteDocs.Size(345,240)
Gui.Form.picQuoteDocs.Position(105,105)
Gui.Form.picQuoteDocs.Parent("frameQuoteH")
Gui.Form.picQuoteDocs.BackColor(-2147483626)
Gui.Form.picQuoteDocs.ToolTip("Quote Document Control")
Gui.Form.picQuoteDocs.Event(Click,picQuoteDocs_Click)
Gui.Form.cmdClearQuote.Create(Button)
Gui.Form.cmdClearQuote.Size(1215,375)
Gui.Form.cmdClearQuote.Position(9135,960)
Gui.Form.cmdClearQuote.Parent("frameQuoteH")
Gui.Form.cmdClearQuote.Caption("Clear Quote")
Gui.Form.cmdClearQuote.BackColor(8036607)
Gui.Form.cmdClearQuote.ForeColor(16777215)
Gui.Form.cmdClearQuote.Event(Click,cmdClearQuote_Click)
Gui.Form.cmdClearQuote.ToolTip("Clear current Quote entered data")
Gui.Form.cmdClearQuote.FontStyle(True,False,False,False,False)
Gui.Form.cmdClearQuote.TabStop(True)
Gui.Form.cmdClearQuote.TabIndex(73)
Gui.Form.txtQtyDec.Create(TextBox,"0",True,255,300,0,8745,1020,True,1,"Arial",8,-2147483643,2)
Gui.Form.txtQtyDec.Parent("frameQuoteH")
Gui.Form.txtQtyDec.MaxLength(1)
Gui.Form.txtQtyDec.NumericOnly(2)
Gui.Form.txtQtyDec.Event(LostFocus,txtQtyDec_LostFocus)
Gui.Form.txtQtyDec.TabStop(True)
Gui.Form.txtQtyDec.TabIndex(72)
Gui.Form.lblQuoteLocation2.Create(Label,"Dec",True,450,255,0,8670,795,True,1,"Arial",8,16777215,0)
Gui.Form.lblQuoteLocation2.Parent("frameQuoteH")
Gui.Form.lblQuoteLocation2.FontStyle(True,False,False,False,False)
Gui.Form.lblQuoteLocation2.ToolTip("Decimal for Quantity")
Gui.Form.picNewQuote.Create(PictureBox)
Gui.Form.picNewQuote.Size(300,375)
Gui.Form.picNewQuote.Position(105,1545)
Gui.Form.picNewQuote.Parent("frameQuoteH")
Gui.Form.picNewQuote.BackColor(-2147483626)
Gui.Form.picNewQuote.ToolTip("New Quote")
Gui.Form.picNewQuote.Event(Click,picNewQuote_Click)
Gui.Form.picOpenQuote.Create(PictureBox)
Gui.Form.picOpenQuote.Size(420,375)
Gui.Form.picOpenQuote.Position(540,1545)
Gui.Form.picOpenQuote.Parent("frameQuoteH")
Gui.Form.picOpenQuote.BackColor(-2147483626)
Gui.Form.picOpenQuote.ToolTip("Open Quote")
Gui.Form.picOpenQuote.Event(Click,picOpenQuote_Click)
Gui.Form.picSaveQuote.Create(PictureBox)
Gui.Form.picSaveQuote.Size(375,375)
Gui.Form.picSaveQuote.Position(1080,1545)
Gui.Form.picSaveQuote.Parent("frameQuoteH")
Gui.Form.picSaveQuote.BackColor(-2147483626)
Gui.Form.picSaveQuote.ToolTip("Save Quote")
Gui.Form.picSaveQuote.Event(Click,picSaveQuote_Click)
Gui.Form.frQuoteAddLineOpt.Create(Frame)
Gui.Form.frQuoteAddLineOpt.Size(5175,630)
Gui.Form.frQuoteAddLineOpt.Position(105,780)
Gui.Form.frQuoteAddLineOpt.Parent("frameQuoteH")
Gui.Form.frQuoteAddLineOpt.Caption("Add Line Option")
Gui.Form.frQuoteAddLineOpt.BackColor(16777215)
Gui.Form.optAddInvQuote.Create(Option)
Gui.Form.optAddInvQuote.Size(1200,255)
Gui.Form.optAddInvQuote.Position(105,240)
Gui.Form.optAddInvQuote.Parent("frQuoteAddLineOpt")
Gui.Form.optAddInvQuote.Caption("Inventory")
Gui.Form.optAddInvQuote.BackColor(16777215)
Gui.Form.optAddInvQuote.TabStop(True)
Gui.Form.optAddInvQuote.TabIndex(67)
Gui.Form.optAddBomQuote.Create(Option)
Gui.Form.optAddBomQuote.Size(735,255)
Gui.Form.optAddBomQuote.Position(2250,240)
Gui.Form.optAddBomQuote.Parent("frQuoteAddLineOpt")
Gui.Form.optAddBomQuote.Caption("Bom")
Gui.Form.optAddBomQuote.BackColor(16777215)
Gui.Form.optAddRtrQuote.Create(Option)
Gui.Form.optAddRtrQuote.Size(900,255)
Gui.Form.optAddRtrQuote.Position(1305,240)
Gui.Form.optAddRtrQuote.Parent("frQuoteAddLineOpt")
Gui.Form.optAddRtrQuote.Caption("Router")
Gui.Form.optAddRtrQuote.BackColor(16777215)
Gui.Form.optAddNonInvQuote.Create(Option)
Gui.Form.optAddNonInvQuote.Size(960,255)
Gui.Form.optAddNonInvQuote.Position(3030,240)
Gui.Form.optAddNonInvQuote.Parent("frQuoteAddLineOpt")
Gui.Form.optAddNonInvQuote.Caption("Non Inv")
Gui.Form.optAddNonInvQuote.BackColor(16777215)
Gui.Form.cmdQuoteAddLine.Create(Button)
Gui.Form.cmdQuoteAddLine.Size(1110,375)
Gui.Form.cmdQuoteAddLine.Position(4020,180)
Gui.Form.cmdQuoteAddLine.Caption("Add Line")
Gui.Form.cmdQuoteAddLine.BackColor(9157775)
Gui.Form.cmdQuoteAddLine.FontStyle(True,False,False,False,False)
Gui.Form.cmdQuoteAddLine.Event(Click,cmdQuoteAddLine_Click)
Gui.Form.cmdQuoteAddLine.Parent("frQuoteAddLineOpt")
Gui.Form.cmdQuoteAddLine.ForeColor(16777215)
Gui.Form.cmdQuoteAddLine.TabStop(True)
Gui.Form.cmdQuoteAddLine.TabIndex(68)
Gui.Form.frQuoteSeperator.Create(Frame)
Gui.Form.frQuoteSeperator.Size(10215,45)
Gui.Form.frQuoteSeperator.Position(105,1440)
Gui.Form.frQuoteSeperator.Parent("frameQuoteH")
Gui.Form.frQuoteSeperator.BackColor(16777215)
Gui.Form.txtMaxiWait.Create(TextBox,"15",True,345,300,0,9570,1635,True,1,"Arial",8,-2147483643,2)
Gui.Form.txtMaxiWait.Parent("frameQuoteH")
Gui.Form.txtMaxiWait.MaxLength(2)
Gui.Form.txtMaxiWait.NumericOnly(2)
Gui.Form.txtMaxiWait.ToolTip("Wait  seconds before checking the Web Importer Log")
Gui.Form.txtMaxiWait.Event(LostFocus,txtMaxiWait_LostFocus)
Gui.Form.txtMaxiWait.TabStop(True)
Gui.Form.txtMaxiWait.TabIndex(74)
Gui.Form.lblQuoteLocation3.Create(Label,"Maxi Wait",True,945,255,0,8610,1710,True,1,"Arial",8,16777215,0)
Gui.Form.lblQuoteLocation3.Parent("frameQuoteH")
Gui.Form.lblQuoteLocation3.FontStyle(True,False,False,False,False)
Gui.Form.ddlSalesRep.Create(ComboBox)
Gui.Form.ddlSalesRep.Size(2325,330)
Gui.Form.ddlSalesRep.Position(5385,390)
Gui.Form.ddlSalesRep.Parent("frameQuoteH")
Gui.Form.ddlSalesRep.Event(LostFocus,ddlSalesRep_LostFocus)
Gui.Form.ddlSalesRep.TabStop(True)
Gui.Form.ddlSalesRep.TabIndex(65)
Gui.Form.ddlContact.Create(ComboBox)
Gui.Form.ddlContact.Size(2490,330)
Gui.Form.ddlContact.Position(7845,390)
Gui.Form.ddlContact.Parent("frameQuoteH")
Gui.Form.ddlContact.Event(LostFocus,ddlContact_LostFocus)
Gui.Form.ddlContact.TabStop(True)
Gui.Form.ddlContact.TabIndex(66)
Gui.Form.picClockLog.Create(PictureBox)
Gui.Form.picClockLog.Size(315,345)
Gui.Form.picClockLog.Position(10005,1605)
Gui.Form.picClockLog.Parent("frameQuoteH")
Gui.Form.picClockLog.BackColor(-2147483626)
Gui.Form.picClockLog.ToolTip("Quote Upload Log")
Gui.Form.picClockLog.Event(Click,picClockLog_Click)
Gui.Form.txtCustomerPO.Create(TextBox,"",True,2295,300,0,5400,1635,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtCustomerPO.Parent("frameQuoteH")
Gui.Form.txtCustomerPO.MaxLength(15)
Gui.Form.lblCustomerPO.Create(Label,"Customer PO",True,1290,255,0,4080,1710,True,1,"Arial",8,16777215,0)
Gui.Form.lblCustomerPO.Parent("frameQuoteH")
Gui.Form.lblCustomerPO.FontStyle(True,False,False,False,False)
Gui.Form.chkAcceptNonInv.Create(CheckBox)
Gui.Form.chkAcceptNonInv.Size(1560,360)
Gui.Form.chkAcceptNonInv.Position(2445,1635)
Gui.Form.chkAcceptNonInv.Parent("frameQuoteH")
Gui.Form.chkAcceptNonInv.Caption("Accept Non-Inv")
Gui.Form.chkAcceptNonInv.Enabled(False)
Gui.Form.optQuoteHdr.Create(Option)
Gui.Form.optQuoteHdr.Size(1260,255)
Gui.Form.optQuoteHdr.Position(3495,150)
Gui.Form.optQuoteHdr.Caption("Quote")
Gui.Form.optQuoteHdr.FontStyle(True,False,False,False,False)
Gui.Form.optQuoteHdr.Parent("frameMiddle")
Gui.Form.optQuoteHdr.Event(Click,optQuoteHdr_Click)
Gui.Form.optQuoteHdr.ToolTip("Switch to Quote screen")
Gui.Form.optQuoteHdr.BackColor(55295)
Gui.Form.optRouterHdr.Create(Option)
Gui.Form.optRouterHdr.Size(1260,255)
Gui.Form.optRouterHdr.Position(2130,150)
Gui.Form.optRouterHdr.Caption("Router")
Gui.Form.optRouterHdr.FontStyle(True,False,False,False,False)
Gui.Form.optRouterHdr.BackColor(9157775)
Gui.Form.optRouterHdr.Parent("frameMiddle")
Gui.Form.optRouterHdr.Event(Click,optRouterHdr_Click)
Gui.Form.optRouterHdr.ToolTip("Switch to Router/Bom screen")
Gui.Form.optRouterHdr.TabStop(True)
Gui.Form.optRouterHdr.TabIndex(30)
Gui.Form.frameRtrHead.Create(Frame)
Gui.Form.frameRtrHead.Size(10395,2040)
Gui.Form.frameRtrHead.Position(75,705)
Gui.Form.frameRtrHead.Parent("frameMiddle")
Gui.Form.frameRtrHead.BackColor(16777215)
Gui.Form.frameRtrHead.Anchor(13)
Gui.Form.frameRtrHead.BorderStyle(0)
Gui.Form.txtBomQty.Create(TextBox,"",False,1215,300,0,8880,1425,False,0,"Arial",8,-2147483643,1)
Gui.Form.txtBomQty.Parent("frameRtrHead")
Gui.Form.txtBomQty.ControlGroup(1)
Gui.Form.txtBomQty.DefaultValue("")
Gui.Form.txtBomQty.NumericOnly(1)
Gui.Form.txtBomQty.defaultvalue("")
Gui.Form.cmdNewPart.Create(Button)
Gui.Form.cmdNewPart.Size(1275,345)
Gui.Form.cmdNewPart.Position(75,525)
Gui.Form.cmdNewPart.Caption("New Part")
Gui.Form.cmdNewPart.Event(Click,cmdNewPart_Click)
Gui.Form.cmdNewPart.ControlGroup(2)
Gui.Form.cmdNewPart.BackColor(15128749)
Gui.Form.cmdNewPart.Parent("frameRtrHead")
Gui.Form.cmdNewPart.ToolTip("Create a new Part and insert the Part into the grid")
Gui.Form.cmdNewPart.FontSize(7)
Gui.Form.cmdNewPart.TabStop(True)
Gui.Form.cmdNewPart.TabIndex(21)
Gui.Form.cmdNewPart.ForeColor(16777215)
Gui.Form.cmdNewPart.FontStyle(True,False,False,False,False)
Gui.Form.cmdSaveRouterOnly.Create(Button)
Gui.Form.cmdSaveRouterOnly.ToolTip("Save Router to GSS")
Gui.Form.cmdSaveRouterOnly.Size(1275,345)
Gui.Form.cmdSaveRouterOnly.Position(75,900)
Gui.Form.cmdSaveRouterOnly.Caption("Save Rtr")
Gui.Form.cmdSaveRouterOnly.BackColor(9157775)
Gui.Form.cmdSaveRouterOnly.FontStyle(True,False,False,False,False)
Gui.Form.cmdSaveRouterOnly.Event(Click,cmdSaveRouterOnly_Click)
Gui.Form.cmdSaveRouterOnly.ControlGroup(2)
Gui.Form.cmdSaveRouterOnly.Parent("frameRtrHead")
Gui.Form.cmdSaveRouterOnly.ForeColor(16777215)
Gui.Form.cmdSaveRouterOnly.FontSize(7)
Gui.Form.cmdSaveRouterOnly.TabStop(True)
Gui.Form.cmdSaveRouterOnly.TabIndex(22)
Gui.Form.cmdCommit.Create(Button)
Gui.Form.cmdCommit.Size(1275,345)
Gui.Form.cmdCommit.Position(75,1275)
Gui.Form.cmdCommit.Caption("Commit Bom")
Gui.Form.cmdCommit.Event(Click,cmdCommit_Click)
Gui.Form.cmdCommit.FontStyle(True,False,False,False,False)
Gui.Form.cmdCommit.ControlGroup(2)
Gui.Form.cmdCommit.ToolTip("Save the grid to the Bom tree view as preparation to save the Bom to GSS")
Gui.Form.cmdCommit.BackColor(15453831)
Gui.Form.cmdCommit.Parent("frameRtrHead")
Gui.Form.cmdCommit.ForeColor(16777215)
Gui.Form.cmdCommit.FontSize(7)
Gui.Form.cmdCommit.TabStop(True)
Gui.Form.cmdCommit.TabIndex(23)
Gui.Form.chkRtrHighLightSelectedRow.Create(CheckBox)
Gui.Form.chkRtrHighLightSelectedRow.Size(1410,390)
Gui.Form.chkRtrHighLightSelectedRow.Position(10320,435)
Gui.Form.chkRtrHighLightSelectedRow.Parent("frameRtrHead")
Gui.Form.chkRtrHighLightSelectedRow.Caption("Highlight Row")
Gui.Form.chkRtrHighLightSelectedRow.Event(Click,chkRtrHighLightSelectedRow_Click)
Gui.Form.chkRtrHighLightSelectedRow.BackColor(16777215)
Gui.Form.chkRtrHighLightSelectedRow.ToolTip("Check to highlight the selected row of the grid")
Gui.Form.chkRtrHighLightSelectedRow.FontStyle(True,False,False,False,False)
Gui.Form.chkRtrHighLightSelectedRow.FontSize(7)
Gui.Form.chkRtrHighLightSelectedRow.TabStop(True)
Gui.Form.chkRtrHighLightSelectedRow.TabIndex(28)
Gui.Form.frameQty.Create(Frame)
Gui.Form.frameQty.Size(1665,1965)
Gui.Form.frameQty.Position(7260,45)
Gui.Form.frameQty.Parent("frameRtrHead")
Gui.Form.frameQty.BackColor(16777215)
Gui.Form.frameQty.BorderStyle(0)
Gui.Form.cmdRouterCostBuildUp.Create(Button)
Gui.Form.cmdRouterCostBuildUp.Size(675,375)
Gui.Form.cmdRouterCostBuildUp.Position(15,1575)
Gui.Form.cmdRouterCostBuildUp.Caption("RCost")
Gui.Form.cmdRouterCostBuildUp.Event(Click,cmdRouterCostBuildUp_Click)
Gui.Form.cmdRouterCostBuildUp.FontStyle(True,False,False,False,False)
Gui.Form.cmdRouterCostBuildUp.ControlGroup(2)
Gui.Form.cmdRouterCostBuildUp.BackColor(9157775)
Gui.Form.cmdRouterCostBuildUp.ToolTip("Cost Build Up for BOM or Router. Make sure the grid has Quantity. If not, please enter a Quantity and click Save Router to apply the Quantity.")
Gui.Form.cmdRouterCostBuildUp.Parent("frameQty")
Gui.Form.cmdRouterCostBuildUp.ForeColor(16777215)
Gui.Form.cmdRouterCostBuildUp.FontSize(7)
Gui.Form.cmdRouterCostBuildUp.TabStop(True)
Gui.Form.cmdRouterCostBuildUp.TabIndex(25)
Gui.Form.GGC_Quantity.Create(GsGridControl)
Gui.Form.GGC_Quantity.Size(1590,1410)
Gui.Form.GGC_Quantity.Position(30,135)
Gui.Form.GGC_Quantity.Parent("frameQty")
Gui.Form.GGC_Quantity.Event(KeyPressEnter,GGC_Quantity_KeyPressEnter)
Gui.Form.GGC_Quantity.Anchor(15)
Gui.Form.GGC_Quantity.Event(CellValueChanged,GGC_Quantity_CellValueChanged)
Gui.Form.cmdAddQty.Create(Button)
Gui.Form.cmdAddQty.Size(255,375)
Gui.Form.cmdAddQty.Position(1395,1575)
Gui.Form.cmdAddQty.Parent("frameQty")
Gui.Form.cmdAddQty.Caption("+")
Gui.Form.cmdAddQty.Event(Click,cmdAddQty_Click)
Gui.Form.cmdAddQty.ToolTip("Add a line to the Quantity grid. Alternatively, if there is a line, click the cell and hit Enter to add another line. Use Right click to delete lines.")
Gui.Form.cmdAddQty.BackColor(9157775)
Gui.Form.cmdAddQty.ForeColor(16777215)
Gui.Form.cmdAddQty.FontSize(7)
Gui.Form.cmdAddQty.TabStop(True)
Gui.Form.cmdAddQty.TabIndex(26)
Gui.Form.cmdBomCostBuildUp.Create(Button)
Gui.Form.cmdBomCostBuildUp.Size(675,375)
Gui.Form.cmdBomCostBuildUp.Position(705,1575)
Gui.Form.cmdBomCostBuildUp.Parent("frameQty")
Gui.Form.cmdBomCostBuildUp.TabStop(True)
Gui.Form.cmdBomCostBuildUp.TabIndex(25)
Gui.Form.cmdBomCostBuildUp.Caption("BCost")
Gui.Form.cmdBomCostBuildUp.BackColor(15453831)
Gui.Form.cmdBomCostBuildUp.ForeColor(16777215)
Gui.Form.cmdBomCostBuildUp.FontSize(7)
Gui.Form.cmdBomCostBuildUp.ToolTip("Cost Build Up for BOM or Router. Make sure the grid has Quantity. If not, please enter a Quantity and click Save Router to apply the Quantity.")
Gui.Form.cmdBomCostBuildUp.ControlGroup(2)
Gui.Form.cmdBomCostBuildUp.Event(Click,cmdBomCostBuildUp_Click)
Gui.Form.cmdNewRtr.Create(Button)
Gui.Form.cmdNewRtr.Size(1275,345)
Gui.Form.cmdNewRtr.Position(75,150)
Gui.Form.cmdNewRtr.Caption("New Rtr/Bom")
Gui.Form.cmdNewRtr.FontStyle(True,False,False,False,False)
Gui.Form.cmdNewRtr.Event(Click,cmdNewRtr_Click)
Gui.Form.cmdNewRtr.ControlGroup(2)
Gui.Form.cmdNewRtr.BackColor(15130800)
Gui.Form.cmdNewRtr.Parent("frameRtrHead")
Gui.Form.cmdNewRtr.ToolTip("Create a new Router/Bom")
Gui.Form.cmdNewRtr.ForeColor(16777215)
Gui.Form.cmdNewRtr.FontSize(7)
Gui.Form.cmdNewRtr.TabStop(True)
Gui.Form.cmdNewRtr.TabIndex(20)
Gui.Form.optBomView.Create(Option)
Gui.Form.optBomView.Size(1140,375)
Gui.Form.optBomView.Position(8940,105)
Gui.Form.optBomView.Parent("frameRtrHead")
Gui.Form.optBomView.Caption("BOM View")
Gui.Form.optBomView.BackColor(16777215)
Gui.Form.optBomView.Event(Click,optBomView_Click)
Gui.Form.optBomView.ToolTip("Bom View shows the 99XXXX sequences as Manufacture Parts of the Bom")
Gui.Form.optBomView.FontStyle(True,False,False,False,False)
Gui.Form.optBomView.FontSize(7)
Gui.Form.optBomView.TabStop(True)
Gui.Form.optBomView.TabIndex(27)
Gui.Form.optRtrView.Create(Option)
Gui.Form.optRtrView.Size(1305,375)
Gui.Form.optRtrView.Position(8940,390)
Gui.Form.optRtrView.Parent("frameRtrHead")
Gui.Form.optRtrView.Caption("Router View")
Gui.Form.optRtrView.BackColor(16777215)
Gui.Form.optRtrView.Event(Click,optRtrView_Click)
Gui.Form.optRtrView.ToolTip("Router View does not show the 99XXXX sequences as Manufacture Parts of the Bom")
Gui.Form.optRtrView.FontStyle(True,False,False,False,False)
Gui.Form.optRtrView.FontSize(7)
Gui.Form.cmdClearRouter.Create(Button)
Gui.Form.cmdClearRouter.Size(1275,345)
Gui.Form.cmdClearRouter.Position(75,1650)
Gui.Form.cmdClearRouter.Parent("frameRtrHead")
Gui.Form.cmdClearRouter.Caption("Clear Router")
Gui.Form.cmdClearRouter.BackColor(8036607)
Gui.Form.cmdClearRouter.ForeColor(16777215)
Gui.Form.cmdClearRouter.ToolTip("Clear all Router section")
Gui.Form.cmdClearRouter.Event(Click,cmdClearRouter_Click)
Gui.Form.cmdClearRouter.FontStyle(True,False,False,False,False)
Gui.Form.cmdClearRouter.FontSize(7)
Gui.Form.cmdClearRouter.TabStop(True)
Gui.Form.cmdClearRouter.TabIndex(24)
Gui.Form.tabRTRHead.Create(Tab)
Gui.Form.tabRTRHead.Size(5835,1860)
Gui.Form.tabRTRHead.Position(1410,135)
Gui.Form.tabRTRHead.Parent("frameRtrHead")
Gui.Form.tabRTRHead.Tabs(3)
Gui.Form.tabRTRHead.SetTab(0)
Gui.Form.tabRTRHead.Caption("Gen.")
Gui.Form.tabRTRHead.SetTab(1)
Gui.Form.tabRTRHead.Caption("Add'l")
Gui.Form.tabRTRHead.SetTab(2)
Gui.Form.tabRTRHead.Caption("Extra Descr")
Gui.Form.picRtrDocs.Create(PictureBox)
Gui.Form.picRtrDocs.Size(345,240)
Gui.Form.picRtrDocs.Position(0,0)
Gui.Form.picRtrDocs.Parent("tabRTRHead",0)
Gui.Form.picRtrDocs.BackColor(-2147483626)
Gui.Form.picRtrDocs.ToolTip("Router Document Control")
Gui.Form.picRtrDocs.Event(Click,picRtrDocs_Click)
Gui.Form.picRtrMaster.Create(PictureBox)
Gui.Form.picRtrMaster.Size(225,285)
Gui.Form.picRtrMaster.Position(375,-30)
Gui.Form.picRtrMaster.Parent("tabRTRHead",0)
Gui.Form.picRtrMaster.BackColor(-2147483626)
Gui.Form.picRtrMaster.ToolTip("Open/New/Copy/Delete Router Master")
Gui.Form.picRtrMaster.Event(Click,picRtrMaster_Click)
Gui.Form.picRtrBookmarks.Create(PictureBox)
Gui.Form.picRtrBookmarks.Size(270,285)
Gui.Form.picRtrBookmarks.Position(645,-45)
Gui.Form.picRtrBookmarks.Parent("tabRTRHead",0)
Gui.Form.picRtrBookmarks.BackColor(-2147483626)
Gui.Form.picRtrBookmarks.ToolTip("Add Router number to Bookmarks")
Gui.Form.picRtrBookmarks.Event(Click,picRtrBookmarks_Click)
Gui.Form.lblFocusParent.Create(Label,"Router",True,705,255,0,945,75,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblFocusParent.Parent("tabRTRHead",0)
Gui.Form.lblFocusParent.FontStyle(True,False,False,False,False)
Gui.Form.lblFocusParent.ControlGroup(1)
Gui.Form.lblRev.Create(Label,"Rev",True,405,255,0,1650,75,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblRev.Parent("tabRTRHead",0)
Gui.Form.lblRev.FontStyle(True,False,False,False,False)
Gui.Form.lblRev.ControlGroup(1)
Gui.Form.txtFocusParent.Create(TextBox,"",True,1605,300,0,30,270,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtFocusParent.Parent("tabRTRHead",0)
Gui.Form.txtFocusParent.MaxLength(17)
Gui.Form.txtFocusParent.ControlGroup(1)
Gui.Form.txtFocusParent.DefaultValue("")
Gui.Form.txtFocusParent.Event(LostFocus,txtFocusParent_LostFocus)
Gui.Form.txtFocusParent.defaultvalue("")
Gui.Form.txtFocusParent.ToolTip("Enter an existing Router number (17 chars) and hit Tab to move the cursor to Rev and enter Rev. Alternatively, use the Browser button.")
Gui.Form.txtFocusParent.TabStop(True)
Gui.Form.txtFocusParent.TabIndex(1)
Gui.Form.txtFocusRev.Create(TextBox,"",True,405,300,0,1665,270,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtFocusRev.Parent("tabRTRHead",0)
Gui.Form.txtFocusRev.MaxLength(3)
Gui.Form.txtFocusRev.ControlGroup(1)
Gui.Form.txtFocusRev.Event(LostFocus,txtFocusRev_LostFocus)
Gui.Form.txtFocusRev.defaultvalue("")
Gui.Form.txtFocusRev.ToolTip("Enter the Rev (3 chars) then hit Tab, the Router/Bom will be loaded. Alternatively, use the Browser button.")
Gui.Form.txtFocusRev.TabStop(True)
Gui.Form.txtFocusRev.TabIndex(2)
Gui.Form.cmdBrwPart.Create(Button)
Gui.Form.cmdBrwPart.Size(420,300)
Gui.Form.cmdBrwPart.Position(2085,270)
Gui.Form.cmdBrwPart.Parent("tabRTRHead",0)
Gui.Form.cmdBrwPart.Caption("^")
Gui.Form.cmdBrwPart.Event(Click,cmdBrwRouter_Click)
Gui.Form.cmdBrwPart.BackColor(16777215)
Gui.Form.cmdBrwPart.ToolTip("Select an existing Router")
Gui.Form.cmdBrwPart.TabStop(True)
Gui.Form.cmdBrwPart.TabIndex(3)
Gui.Form.picBrwBackupRtr.Create(PictureBox)
Gui.Form.picBrwBackupRtr.Size(300,300)
Gui.Form.picBrwBackupRtr.Position(2160,0)
Gui.Form.picBrwBackupRtr.Parent("tabRTRHead",0)
Gui.Form.picBrwBackupRtr.ToolTip("Select a Router from Backup")
Gui.Form.picBrwBackupRtr.Event(Click,picBrwBackupRtr_Click)
Gui.Form.cmdRefreshRouterLoad.Create(Button)
Gui.Form.cmdRefreshRouterLoad.Size(405,300)
Gui.Form.cmdRefreshRouterLoad.Position(2520,270)
Gui.Form.cmdRefreshRouterLoad.Parent("tabRTRHead",0)
Gui.Form.cmdRefreshRouterLoad.Caption("Refresh")
Gui.Form.cmdRefreshRouterLoad.BackColor(16777215)
Gui.Form.cmdRefreshRouterLoad.ToolTip("Reload the existing Router/Bom specified by the Router and Rev textboxes")
Gui.Form.cmdRefreshRouterLoad.Event(Click,cmdRefreshRouterLoad_Click)
Gui.Form.cmdRefreshRouterLoad.TabStop(True)
Gui.Form.cmdRefreshRouterLoad.TabIndex(4)
Gui.Form.lblFocusDescr.Create(Label,"Description",True,2820,255,0,2925,75,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblFocusDescr.Parent("tabRTRHead",0)
Gui.Form.lblFocusDescr.FontStyle(True,False,False,False,False)
Gui.Form.lblFocusDescr.ControlGroup(1)
Gui.Form.txtFocusDescr.Create(TextBox,"",True,2760,300,0,2955,270,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtFocusDescr.Parent("tabRTRHead",0)
Gui.Form.txtFocusDescr.MaxLength(71)
Gui.Form.txtFocusDescr.ControlGroup(1)
Gui.Form.txtFocusDescr.DefaultValue("")
Gui.Form.txtFocusDescr.defaultvalue("")
Gui.Form.txtFocusDescr.ToolTip("Router Description")
Gui.Form.txtFocusDescr.TabStop(True)
Gui.Form.txtFocusDescr.TabIndex(5)
Gui.Form.txtDescr2.Create(TextBox,"",True,5640,300,0,45,330,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtDescr2.Parent("tabRTRHead",1)
Gui.Form.txtDescr2.ControlGroup(1)
Gui.Form.txtDescr2.DefaultValue("")
Gui.Form.txtDescr2.MaxLength(71)
Gui.Form.txtDescr2.ToolTip("Router Description 2")
Gui.Form.txtDescr2.TabStop(True)
Gui.Form.txtDescr2.TabIndex(17)
Gui.Form.txtDescr3.Create(TextBox,"",True,5640,300,0,45,945,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtDescr3.Parent("tabRTRHead",1)
Gui.Form.txtDescr3.ControlGroup(1)
Gui.Form.txtDescr3.DefaultValue("")
Gui.Form.txtDescr3.MaxLength(71)
Gui.Form.txtDescr3.ToolTip("Router Description 3")
Gui.Form.txtDescr3.TabStop(True)
Gui.Form.txtDescr3.TabIndex(18)
Gui.Form.lblUM.Create(Label,"UM",True,450,255,0,2055,675,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblUM.Parent("tabRTRHead",0)
Gui.Form.lblUM.FontStyle(True,False,False,False,False)
Gui.Form.lblUM.ControlGroup(1)
Gui.Form.txtUM.Create(TextBox,"",True,390,300,0,2085,870,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtUM.Parent("tabRTRHead",0)
Gui.Form.txtUM.MaxLength(3)
Gui.Form.txtUM.ControlGroup(1)
Gui.Form.txtUM.defaultvalue("")
Gui.Form.txtUM.Event(LostFocus,txtUM_LostFocus_MainForm)
Gui.Form.txtUM.ToolTip("Router Unit of Measure")
Gui.Form.txtUM.TabStop(True)
Gui.Form.txtUM.TabIndex(8)
Gui.Form.lblPartID.Create(Label,"Locn",True,450,255,0,5205,675,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblPartID.Parent("tabRTRHead",0)
Gui.Form.lblPartID.ControlGroup(1)
Gui.Form.lblPartID.FontStyle(True,False,False,False,False)
Gui.Form.lblPL.Create(Label,"PL",True,450,255,0,2520,675,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblPL.Parent("tabRTRHead",0)
Gui.Form.lblPL.FontStyle(True,False,False,False,False)
Gui.Form.txtPL.Create(TextBox,"",True,405,300,0,2505,870,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtPL.Parent("tabRTRHead",0)
Gui.Form.txtPL.ControlGroup(1)
Gui.Form.txtPL.defaultvalue("")
Gui.Form.txtPL.MaxLength(2)
Gui.Form.txtPL.Event(LostFocus,txtPL_LostFocus_MainForm)
Gui.Form.txtPL.ToolTip("Router Product Line")
Gui.Form.txtPL.TabStop(True)
Gui.Form.txtPL.TabIndex(9)
Gui.Form.txtPartID.Create(TextBox,"",True,465,300,0,5250,870,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtPartID.Parent("tabRTRHead",0)
Gui.Form.txtPartID.MaxLength(20)
Gui.Form.txtPartID.DefaultValue("")
Gui.Form.txtPartID.ControlGroup(1)
Gui.Form.txtPartID.ToolTip("(Part ID at Router Master)")
Gui.Form.txtPartID.TabStop(True)
Gui.Form.txtPartID.TabIndex(14)
Gui.Form.lblRtrCust.Create(Label,"Customer",True,1125,255,0,2970,675,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblRtrCust.Parent("tabRTRHead",0)
Gui.Form.lblRtrCust.FontStyle(True,False,False,False,False)
Gui.Form.lblRtrCust.ControlGroup(1)
Gui.Form.txtRtrCust.Create(TextBox,"",True,795,300,0,2940,870,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtRtrCust.Parent("tabRTRHead",0)
Gui.Form.txtRtrCust.ControlGroup(1)
Gui.Form.txtRtrCust.MaxLength(6)
Gui.Form.txtRtrCust.TabStop(True)
Gui.Form.txtRtrCust.TabIndex(10)
Gui.Form.cmdBrw_RtrCust.Create(Button)
Gui.Form.cmdBrw_RtrCust.Size(345,300)
Gui.Form.cmdBrw_RtrCust.Position(3750,870)
Gui.Form.cmdBrw_RtrCust.Parent("tabRTRHead",0)
Gui.Form.cmdBrw_RtrCust.Caption("^")
Gui.Form.cmdBrw_RtrCust.Event(Click,cmdBrw_RtrCust_Click)
Gui.Form.cmdBrw_RtrCust.ToolTip("Select a Customer for the Router")
Gui.Form.cmdBrw_RtrCust.DisableOnClick(10)
Gui.Form.cmdBrw_RtrCust.BackColor(16777215)
Gui.Form.cmdBrw_RtrCust.TabStop(True)
Gui.Form.cmdBrw_RtrCust.TabIndex(11)
Gui.Form.lblComm.Create(Label,"Comm",True,600,255,0,4065,675,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblComm.Parent("tabRTRHead",0)
Gui.Form.lblComm.ControlGroup(1)
Gui.Form.lblComm.FontStyle(True,False,False,False,False)
Gui.Form.txtComm.Create(TextBox,"",True,540,300,0,4110,870,True,1,"Arial",8,-2147483643,1)
Gui.Form.txtComm.Parent("tabRTRHead",0)
Gui.Form.txtComm.DefaultValue("")
Gui.Form.txtComm.ControlGroup(1)
Gui.Form.txtComm.NumericOnly(1)
Gui.Form.txtComm.TabStop(True)
Gui.Form.txtComm.TabIndex(12)
Gui.Form.lblScrap.Create(Label,"Scrap",True,570,255,0,4665,675,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblScrap.Parent("tabRTRHead",0)
Gui.Form.lblScrap.ControlGroup(1)
Gui.Form.lblScrap.FontStyle(True,False,False,False,False)
Gui.Form.txtScrap.Create(TextBox,"",True,540,300,0,4680,870,True,1,"Arial",8,-2147483643,1)
Gui.Form.txtScrap.Parent("tabRTRHead",0)
Gui.Form.txtScrap.DefaultValue("")
Gui.Form.txtScrap.ControlGroup(1)
Gui.Form.txtScrap.NumericOnly(1)
Gui.Form.txtScrap.TabStop(True)
Gui.Form.txtScrap.TabIndex(13)
Gui.Form.lblSimilar.Create(Label,"Similar",True,1620,255,0,30,675,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblSimilar.Parent("tabRTRHead",0)
Gui.Form.lblSimilar.ControlGroup(1)
Gui.Form.lblSimilar.FontStyle(True,False,False,False,False)
Gui.Form.txtSimilar.Create(TextBox,"",True,1605,300,0,30,870,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtSimilar.Parent("tabRTRHead",0)
Gui.Form.txtSimilar.MaxLength(17)
Gui.Form.txtSimilar.DefaultValue("")
Gui.Form.txtSimilar.ControlGroup(1)
Gui.Form.txtSimilar.Event(LostFocus,txtSimilar_LostFocus)
Gui.Form.txtSimilar.TabStop(True)
Gui.Form.txtSimilar.TabIndex(6)
Gui.Form.lblRev2.Create(Label,"Rev",True,420,255,0,1650,675,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblRev2.Parent("tabRTRHead",0)
Gui.Form.lblRev2.ControlGroup(1)
Gui.Form.lblRev2.FontStyle(True,False,False,False,False)
Gui.Form.txtSimilarRev.Create(TextBox,"",True,405,300,0,1665,870,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtSimilarRev.Parent("tabRTRHead",0)
Gui.Form.txtSimilarRev.MaxLength(3)
Gui.Form.txtSimilarRev.DefaultValue("")
Gui.Form.txtSimilarRev.ControlGroup(1)
Gui.Form.txtSimilarRev.Event(LostFocus,txtSimilarRev_LostFocus)
Gui.Form.txtSimilarRev.TabStop(True)
Gui.Form.txtSimilarRev.TabIndex(7)
Gui.Form.chkRtrComp.Create(CheckBox)
Gui.Form.chkRtrComp.Size(1425,330)
Gui.Form.chkRtrComp.Position(30,1155)
Gui.Form.chkRtrComp.Parent("tabRTRHead",0)
Gui.Form.chkRtrComp.Caption("Router Compl.")
Gui.Form.chkRtrComp.Event(Click,chkRtrComp_Click)
Gui.Form.chkRtrComp.ToolTip("Mark the Router Completed/Uncompleted")
Gui.Form.chkRtrComp.FontStyle(True,False,False,False,False)
Gui.Form.chkRtrComp.FontSize(7)
Gui.Form.chkRtrComp.TabStop(True)
Gui.Form.chkRtrComp.TabIndex(15)
Gui.Form.chkOmitFromRTRReprice.Create(CheckBox)
Gui.Form.chkOmitFromRTRReprice.Size(1380,390)
Gui.Form.chkOmitFromRTRReprice.Position(1665,1155)
Gui.Form.chkOmitFromRTRReprice.Parent("tabRTRHead",0)
Gui.Form.chkOmitFromRTRReprice.Caption("Omit Reprice")
Gui.Form.chkOmitFromRTRReprice.FontStyle(True,False,False,False,False)
Gui.Form.chkOmitFromRTRReprice.FontSize(7)
Gui.Form.chkOmitFromRTRReprice.TabStop(True)
Gui.Form.chkOmitFromRTRReprice.TabIndex(16)
Gui.Form.lblDescr2.Create(Label,"Alt Description 1",True,5625,255,0,45,120,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblDescr2.Parent("tabRTRHead",1)
Gui.Form.lblDescr2.FontStyle(True,False,False,False,False)
Gui.Form.lblDescr3.Create(Label,"Alt Description 2",True,5625,255,0,45,735,True,0,"Arial",7,-2147483633,1)
Gui.Form.lblDescr3.Parent("tabRTRHead",1)
Gui.Form.lblDescr3.FontStyle(True,False,False,False,False)
Gui.Form.txtRTRExtraDescr.Create(TextBoxR)
Gui.Form.txtRTRExtraDescr.Size(5595,1320)
Gui.Form.txtRTRExtraDescr.Position(60,90)
Gui.Form.txtRTRExtraDescr.Parent("tabRTRHead",2)
Gui.Form.txtRTRExtraDescr.TabStop(True)
Gui.Form.txtRTRExtraDescr.TabIndex(19)
Gui.Form.txtRTRExtraDescr.ControlGroup(1)
Gui.Form.picCreateSubComponent.Create(PictureBox)
Gui.Form.picCreateSubComponent.Size(270,300)
Gui.Form.picCreateSubComponent.Position(8955,885)
Gui.Form.picCreateSubComponent.Parent("frameRtrHead")
Gui.Form.picCreateSubComponent.ToolTip("Create Subcomponent from selected sequences")
Gui.Form.picCreateSubComponent.Event(Click,picCreateSubComponent_Click)
Gui.Form.picCutList.Create(PictureBox)
Gui.Form.picCutList.Size(285,375)
Gui.Form.picCutList.Position(10050,840)
Gui.Form.picCutList.Parent("frameRtrHead")
Gui.Form.picCutList.ToolTip("Go to CutList")
Gui.Form.picCutList.Event(Click,picCutList_Click)
Gui.Form.picLabor.Create(PictureBox)
Gui.Form.picLabor.Size(285,375)
Gui.Form.picLabor.Position(9300,840)
Gui.Form.picLabor.Parent("frameRtrHead")
Gui.Form.picLabor.ToolTip("Go to Labor Drilldown")
Gui.Form.picLabor.Event(Click,picLabor_Click)
Gui.Form.picMQD.Create(PictureBox)
Gui.Form.picMQD.Size(315,375)
Gui.Form.picMQD.Position(9660,855)
Gui.Form.picMQD.Parent("frameRtrHead")
Gui.Form.picMQD.ToolTip("Go to MQD")
Gui.Form.picMQD.Event(Click,picMQD_Click)
Gui.Form.picPowderCoating.Create(PictureBox)
Gui.Form.picPowderCoating.Size(360,375)
Gui.Form.picPowderCoating.Position(10410,870)
Gui.Form.picPowderCoating.Parent("frameRtrHead")
Gui.Form.picPowderCoating.ToolTip("Create Powder Coating Sequence")
Gui.Form.picPowderCoating.Event(Click,picPowderCoating_Click)
Gui.Form.picPowderCoating.Visible(False)
Gui.Form.cmdUndo.Create(Button)
Gui.Form.cmdUndo.Size(375,240)
Gui.Form.cmdUndo.Position(10290,150)
Gui.Form.cmdUndo.Parent("frameRtrHead")
Gui.Form.cmdUndo.BackColor(16777215)
Gui.Form.cmdUndo.ToolTip("Undo Router")
Gui.Form.cmdUndo.TabStop(True)
Gui.Form.cmdUndo.Visible(False)
Gui.Form.cmdRedo.Create(Button)
Gui.Form.cmdRedo.Size(375,240)
Gui.Form.cmdRedo.Position(10680,150)
Gui.Form.cmdRedo.Parent("frameRtrHead")
Gui.Form.cmdRedo.BackColor(16777215)
Gui.Form.cmdRedo.ToolTip("Redo Router")
Gui.Form.cmdRedo.TabStop(True)
Gui.Form.cmdRedo.Visible(False)
Gui.Form.txtBackupNote.Create(TextBox,"",False,3105,300,0,11325,120,True,0,"Arial",8,-2147483643,1)
Gui.Form.txtBackupNote.Parent("frameRtrHead")
Gui.Form.txtBackupNote.MaxLength(30)
Gui.Form.txtBackupNote.defaultvalue("")
Gui.Form.txtBackupNote.ToolTip("Enter backup note for easy referencing later")
Gui.Form.txtBackupNote.Mask("Enter Backup Note for easy referencing Later")
Gui.Form.lbl1.Create(Label,"Bkp Note",False,960,255,0,10335,225,True,0,"Arial",8,16777215,0)
Gui.Form.lbl1.Parent("frameRtrHead")
Gui.Form.lbl1.FontStyle(True,False,False,False,False)
Gui.Form.frameRouterGrid.Create(Frame)
Gui.Form.frameRouterGrid.Size(10395,7395)
Gui.Form.frameRouterGrid.Position(90,2685)
Gui.Form.frameRouterGrid.Parent("frameMiddle")
Gui.Form.frameRouterGrid.BackColor(16777215)
Gui.Form.frameRouterGrid.BorderStyle(0)
Gui.Form.frameRouterGrid.Anchor(15)
Gui.Form.GGC_Quote.Create(GsGridControl)
Gui.Form.GGC_Quote.Visible(False)
Gui.Form.GGC_Quote.Size(10245,7185)
Gui.Form.GGC_Quote.Position(90,165)
Gui.Form.GGC_Quote.Parent("frameRouterGrid")
Gui.Form.GGC_Quote.Anchor(15)
Gui.Form.GGC_Quote.Event(CellValueChanged,GGC_Quote_CellValueChanged)
Gui.Form.GGC_Bom.Create(GsGridControl)
Gui.Form.GGC_Bom.Size(10245,7185)
Gui.Form.GGC_Bom.Position(90,165)
Gui.Form.GGC_Bom.Parent("frameRouterGrid")
Gui.Form.GGC_Bom.Event(RowCellClick,GGC_Bom_RowCellClick)
Gui.Form.GGC_Bom.Event(KeyPress,GGC_Bom_KeyPress)
Gui.Form.GGC_Bom.Event(CellValueChanged,GGC_Bom_CellValueChanged)
Gui.Form.GGC_Bom.Anchor(15)
Gui.Form.GGC_Bom.Event(RowClick,GGC_Bom_RowClick)
Gui.Form.chkRouterOnly.Create(CheckBox)
Gui.Form.chkRouterOnly.Size(1365,360)
Gui.Form.chkRouterOnly.Position(2145,420)
Gui.Form.chkRouterOnly.Parent("frameMiddle")
Gui.Form.chkRouterOnly.Caption("Router Only")
Gui.Form.chkRouterOnly.FontStyle(True,False,False,False,False)
Gui.Form.chkRouterOnly.ToolTip("When checked, will populate Router Only and NOT populate Bom data")
Gui.Form.chkRouterOnly.BackColor(16777215)
Gui.Form.chkRouterOnly.TabStop(True)
Gui.Form.chkRouterOnly.TabIndex(29)
Gui.Form.chkRouterOnly.FontSize(7)
Gui.Form.picHideRtrHead.Create(PictureBox)
Gui.Form.picHideRtrHead.Size(375,315)
Gui.Form.picHideRtrHead.Position(45,135)
Gui.Form.picHideRtrHead.Parent("frameMiddle")
Gui.Form.picHideRtrHead.ToolTip("Hide/Display Router header section")
Gui.Form.picHideRtrHead.Event(Click,picHideRtrHead_Click)
Gui.Form.picClearAll.Create(PictureBox)
Gui.Form.picClearAll.Size(330,300)
Gui.Form.picClearAll.Position(465,135)
Gui.Form.picClearAll.Parent("frameMiddle")
Gui.Form.picClearAll.ToolTip("Clear all entered data")
Gui.Form.picClearAll.Event(Click,picClearAll_Click)
Gui.Form.picClearAll.BackColor(16777215)
Gui.Form.lblResult.Create(Label,"Please wait...",False,3060,345,0,7395,255,True,0,"Arial",9,-2147483633,0)
Gui.Form.lblResult.Parent("frameMiddle")
Gui.Form.lblResult.FontStyle(True,False,False,False,False)
Gui.Form.lblResult.ForeColor(8036607)
Gui.Form.picGV.Create(PictureBox)
Gui.Form.picGV.Size(390,345)
Gui.Form.picGV.Position(900,135)
Gui.Form.picGV.Parent("frameMiddle")
Gui.Form.picGV.BackColor(16777215)
Gui.Form.picGV.ToolTip("Gridview Settings")
Gui.Form.picGV.Event(Click,picGV_Click)
Gui.Form.picRTRDecimal.Create(PictureBox)
Gui.Form.picRTRDecimal.Size(285,285)
Gui.Form.picRTRDecimal.Position(1365,150)
Gui.Form.picRTRDecimal.Parent("frameMiddle")
Gui.Form.picRTRDecimal.ToolTip("Decimal Settings")
Gui.Form.picRTRDecimal.Event(Click,picRTRDecimal_Click)
Gui.Form.picRTRGridFormat.Create(PictureBox)
Gui.Form.picRTRGridFormat.Size(285,285)
Gui.Form.picRTRGridFormat.Position(1725,150)
Gui.Form.picRTRGridFormat.Parent("frameMiddle")
Gui.Form.picRTRGridFormat.ToolTip("Router Grid Format")
Gui.Form.picRTRGridFormat.Event(Click,picRTRGridFormat_Click)
Gui.Form.frameHeader.Create(Frame)
Gui.Form.frameHeader.Size(20430,855)
Gui.Form.frameHeader.Position(15,-30)
Gui.Form.frameHeader.BackColor(16777215)
Gui.Form.frameHeader.ForeColor(0)
Gui.Form.frameHeader.Anchor(13)
Gui.Form.frameHeader.BorderStyle(0)
Gui.Form.picGSSLogo.Create(PictureBox)
Gui.Form.picGSSLogo.Size(4185,630)
Gui.Form.picGSSLogo.Position(8355,150)
Gui.Form.picGSSLogo.Parent("frameHeader")
Gui.Form.picGSSLogo.BackColor(16777215)
Gui.Form.picGSSLogo.Event(Click,picGSSLogo_Click)
Gui.Form.picGSSLogo.Anchor(1)
Gui.Form.picGSSLogo.ToolTip("Go to feedback")
Gui.Form.picHideTree.Create(PictureBox)
Gui.Form.picHideTree.Size(375,315)
Gui.Form.picHideTree.Position(20175,465)
Gui.Form.picHideTree.ToolTip("Hide/Display Bom section")
Gui.Form.picHideTree.Event(Click,picHideTree_Click)
Gui.Form.picHideTree.Anchor(9)
Gui.Form.picHideSource.Create(PictureBox)
Gui.Form.picHideSource.Size(285,285)
Gui.Form.picHideSource.Position(0,465)
Gui.Form.picHideSource.ToolTip("Hide/Display Source section")
Gui.Form.picHideSource.Event(Click,picHideSource_Click)
Gui.Form.picReSize_Left1.Create(PictureBox)
Gui.Form.picReSize_Left1.Size(255,255)
Gui.Form.picReSize_Left1.Position(0,15)
Gui.Form.picReSize_Left1.ToolTip("Decrease Source section width")
Gui.Form.picReSize_Left1.Event(Click,picReSize_Left1_Click)
Gui.Form.picReSize_Right1.Create(PictureBox)
Gui.Form.picReSize_Right1.Size(255,255)
Gui.Form.picReSize_Right1.Position(240,15)
Gui.Form.picReSize_Right1.ToolTip("Increase Source section width")
Gui.Form.picReSize_Right1.Event(Click,picReSize_Right1_Click)
Gui.Form.picReSize_Left2.Create(PictureBox)
Gui.Form.picReSize_Left2.Size(255,255)
Gui.Form.picReSize_Left2.Position(19980,0)
Gui.Form.picReSize_Left2.ToolTip("Increase the Bom section")
Gui.Form.picReSize_Left2.Event(Click,picReSize_Left2_Click)
Gui.Form.picReSize_Left2.Anchor(9)
Gui.Form.picReSize_Right2.Create(PictureBox)
Gui.Form.picReSize_Right2.Size(255,255)
Gui.Form.picReSize_Right2.Position(20220,0)
Gui.Form.picReSize_Right2.ToolTip("Decrease the Bom section")
Gui.Form.picReSize_Right2.Event(Click,picReSize_Right2_Click)
Gui.Form.picReSize_Right2.Anchor(9)
Gui.BOM_DETAIL..Create
Gui.BOM_DETAIL..Caption("BOM COST BUILDUP")
Gui.BOM_DETAIL..Size(15210,9900)
Gui.BOM_DETAIL..MinX(0)
Gui.BOM_DETAIL..MinY(0)
Gui.BOM_DETAIL..Position(0,0)
Gui.BOM_DETAIL..BackColor(16777215)
Gui.BOM_DETAIL..MousePointer(0)
Gui.BOM_DETAIL..Event(UnLoad,BOM_DETAIL_UnLoad)
Gui.BOM_DETAIL.GGC_DETAIL.Create(GsGridControl)
Gui.BOM_DETAIL.GGC_DETAIL.Size(14910,2745)
Gui.BOM_DETAIL.GGC_DETAIL.Position(75,450)
Gui.BOM_DETAIL.GGC_DETAIL.Anchor(13)
Gui.BOM_DETAIL.cmdSaveQuantitiesToQuote.Create(Button)
Gui.BOM_DETAIL.cmdSaveQuantitiesToQuote.Size(1575,375)
Gui.BOM_DETAIL.cmdSaveQuantitiesToQuote.Position(60,9060)
Gui.BOM_DETAIL.cmdSaveQuantitiesToQuote.Caption("Save Quantities")
Gui.BOM_DETAIL.cmdSaveQuantitiesToQuote.BackColor(9157775)
Gui.BOM_DETAIL.cmdSaveQuantitiesToQuote.FontStyle(True,False,False,False,False)
Gui.BOM_DETAIL.cmdSaveQuantitiesToQuote.Event(Click,cmdSaveQuantitiesToQuote_Click)
Gui.BOM_DETAIL.cmdSaveQuantitiesToQuote.Anchor(6)
Gui.BOM_DETAIL.cmdSaveQuantitiesToQuote.DisableOnClick(10)
Gui.BOM_DETAIL.cmdSaveQuantitiesToQuote.ForeColor(16777215)
Gui.BOM_DETAIL.GGC_MARKUP.Create(GsGridControl)
Gui.BOM_DETAIL.GGC_MARKUP.Size(14910,1380)
Gui.BOM_DETAIL.GGC_MARKUP.Position(75,3600)
Gui.BOM_DETAIL.GGC_MARKUP.Anchor(13)
Gui.BOM_DETAIL.lblCost.Create(Label,"Cost Breakdown by Element",True,3330,255,0,60,210,True,0,"Arial",8,16777215,0)
Gui.BOM_DETAIL.lblCost.FontStyle(True,False,False,False,False)
Gui.BOM_DETAIL.lblMarkup.Create(Label,"Markup ",True,1935,255,0,60,3360,True,0,"Arial",8,16777215,0)
Gui.BOM_DETAIL.lblMarkup.FontStyle(True,False,False,False,False)
Gui.BOM_DETAIL.GGC_PRICES.Create(GsGridControl)
Gui.BOM_DETAIL.GGC_PRICES.Size(14910,3570)
Gui.BOM_DETAIL.GGC_PRICES.Position(75,5430)
Gui.BOM_DETAIL.GGC_PRICES.Event(RowCellClick,GGC_PRICES_RowCellClick)
Gui.BOM_DETAIL.GGC_PRICES.Anchor(15)
Gui.BOM_DETAIL.lblPricing.Create(Label,"Suggested Price by Quantity and Markup",True,3585,255,0,60,5190,True,0,"Arial",8,16777215,0)
Gui.BOM_DETAIL.lblPricing.FontStyle(True,False,False,False,False)
Gui.BOM_DETAIL.cmdRefreshBuild.Create(Button)
Gui.BOM_DETAIL.cmdRefreshBuild.Size(1575,375)
Gui.BOM_DETAIL.cmdRefreshBuild.Position(1755,9060)
Gui.BOM_DETAIL.cmdRefreshBuild.Caption("Refresh")
Gui.BOM_DETAIL.cmdRefreshBuild.BackColor(16777215)
Gui.BOM_DETAIL.cmdRefreshBuild.FontStyle(True,False,False,False,False)
Gui.BOM_DETAIL.cmdRefreshBuild.Event(Click,cmdRefreshBuild_Click)
Gui.BOM_DETAIL.cmdRefreshBuild.Anchor(6)
Gui.BOM_DETAIL.cmdRefreshBuild.DisableOnClick(10)
Gui.BOM_DETAIL.cmdPrintBomCost.Create(Button)
Gui.BOM_DETAIL.cmdPrintBomCost.Size(1575,375)
Gui.BOM_DETAIL.cmdPrintBomCost.Position(3450,9060)
Gui.BOM_DETAIL.cmdPrintBomCost.Caption("Print Bom Cost")
Gui.BOM_DETAIL.cmdPrintBomCost.BackColor(16777215)
Gui.BOM_DETAIL.cmdPrintBomCost.FontStyle(True,False,False,False,False)
Gui.BOM_DETAIL.cmdPrintBomCost.Event(Click,cmdPrintBomCost_Click)
Gui.BOM_DETAIL.cmdPrintBomCost.Anchor(6)
Gui.BOM_DETAIL.cmdPrintBomCost.DisableOnClick(10)
Gui.BOM_DETAIL.cmdPrintBomCost.ToolTip("Print Bom Cost Crystal Report")
Gui.BOM_DETAIL.lblRightClick.Create(Label,"** RIGHT CLICK a check box will select all prices for that column",True,4815,255,0,3645,5205,True,0,"Arial",8,16777215,0)
Gui.BOM_DETAIL.lblRightClick.FontStyle(False,True,False,False,False)
Gui.BOM_DETAIL.lblRightClick.ForeColor(32768)
Gui.BOM_DETAIL.lblCostIsBuiltFrom.Create(Label,"",True,3990,255,0,5355,120,True,0,"Arial",8,-2147483633,0)
Gui.BOM_DETAIL.lblCostIsBuiltFrom.Anchor(1)
Gui.BOM_DETAIL.lblCostIsBuiltFrom.ForeColor(8036607)
Gui.BOM_DETAIL.cmdPrintRouterCost.Create(Button)
Gui.BOM_DETAIL.cmdPrintRouterCost.Size(1770,375)
Gui.BOM_DETAIL.cmdPrintRouterCost.Position(3450,9060)
Gui.BOM_DETAIL.cmdPrintRouterCost.Anchor(6)
Gui.BOM_DETAIL.cmdPrintRouterCost.Caption("Print Router Cost")
Gui.BOM_DETAIL.cmdPrintRouterCost.BackColor(16777215)
Gui.BOM_DETAIL.cmdPrintRouterCost.ToolTip("Print Router Cost")
Gui.BOM_DETAIL.cmdPrintRouterCost.DisableOnClick(10)
Gui.BOM_DETAIL.cmdPrintRouterCost.Event(Click,cmdPrintRouterCost_Click)
Gui.NonInv..Create
Gui.NonInv..Caption("Insert New Part")
Gui.NonInv..Size(10260,4365)
Gui.NonInv..MinX(0)
Gui.NonInv..MinY(0)
Gui.NonInv..Position(0,0)
Gui.NonInv..BackColor(16777215)
Gui.NonInv..MaxButton(False)
Gui.NonInv..MousePointer(0)
Gui.NonInv..Sizeable(False)
Gui.NonInv..Event(UnLoad,cmdCancel_Click)
Gui.NonInv.lblPart.Create(Label,"Part",True,1770,255,0,45,195,True,0,"Arial",8,16777215,0)
Gui.NonInv.lblPart.FontStyle(True,False,False,False,False)
Gui.NonInv.txtPart.Create(TextBox,"",True,1770,300,0,45,420,True,0,"Arial",8,16777215,1)
Gui.NonInv.txtPart.MaxLength(17)
Gui.NonInv.txtPart.ControlGroup(1)
Gui.NonInv.txtPart.Event(LostFocus,txtPart_LostFocus)
Gui.NonInv.txtPart.TabStop(True)
Gui.NonInv.txtPart.TabIndex(1)
Gui.NonInv.lblDescr.Create(Label,"Description",True,2400,255,0,2865,195,True,0,"Arial",8,16777215,0)
Gui.NonInv.lblDescr.FontStyle(True,False,False,False,False)
Gui.NonInv.txtDescr.Create(TextBox,"",True,2385,300,0,2880,420,True,0,"Arial",8,16777215,1)
Gui.NonInv.txtDescr.MaxLength(30)
Gui.NonInv.txtDescr.ControlGroup(1)
Gui.NonInv.txtDescr.TabStop(True)
Gui.NonInv.txtDescr.TabIndex(4)
Gui.NonInv.txtUM.Create(TextBox,"",True,510,300,0,45,1095,True,0,"Arial",8,167772153,1)
Gui.NonInv.txtUM.Event(LostFocus,txtUM_LostFocus)
Gui.NonInv.txtUM.ControlGroup(1)
Gui.NonInv.txtUM.MaxLength(3)
Gui.NonInv.txtUM.TabStop(True)
Gui.NonInv.txtUM.TabIndex(7)
Gui.NonInv.lblUM.Create(Label,"UM",True,540,255,0,45,870,True,0,"Arial",8,16777215,0)
Gui.NonInv.lblUM.FontStyle(True,False,False,False,False)
Gui.NonInv.cmdOK.Create(Button)
Gui.NonInv.cmdOK.Size(1005,375)
Gui.NonInv.cmdOK.Position(30,3600)
Gui.NonInv.cmdOK.Caption("OK")
Gui.NonInv.cmdOK.BackColor(9157775)
Gui.NonInv.cmdOK.FontStyle(True,False,False,False,False)
Gui.NonInv.cmdOK.Event(Click,cmdOK_Click)
Gui.NonInv.cmdOK.TabStop(True)
Gui.NonInv.cmdOK.TabIndex(16)
Gui.NonInv.cmdOK.DisableOnClick(10)
Gui.NonInv.cmdOK.ForeColor(16777215)
Gui.NonInv.txtDescr2.Create(TextBox,"",True,2385,300,0,5280,420,True,0,"Arial",8,-2147483643,1)
Gui.NonInv.txtDescr2.MaxLength(30)
Gui.NonInv.txtDescr2.ControlGroup(1)
Gui.NonInv.txtDescr2.TabStop(True)
Gui.NonInv.txtDescr2.TabIndex(5)
Gui.NonInv.txtDescr3.Create(TextBox,"",True,2385,300,0,7680,420,True,0,"Arial",8,-2147483643,1)
Gui.NonInv.txtDescr3.MaxLength(30)
Gui.NonInv.txtDescr3.ControlGroup(1)
Gui.NonInv.txtDescr3.TabStop(True)
Gui.NonInv.txtDescr3.TabIndex(6)
Gui.NonInv.cmdCancel.Create(Button)
Gui.NonInv.cmdCancel.Size(1005,375)
Gui.NonInv.cmdCancel.Position(1140,3600)
Gui.NonInv.cmdCancel.Caption("Cancel")
Gui.NonInv.cmdCancel.BackColor(8036607)
Gui.NonInv.cmdCancel.FontStyle(True,False,False,False,False)
Gui.NonInv.cmdCancel.Event(Click,cmdCancel_Click)
Gui.NonInv.cmdCancel.TabStop(True)
Gui.NonInv.cmdCancel.TabIndex(17)
Gui.NonInv.cmdCancel.DisableOnClick(10)
Gui.NonInv.cmdCancel.ForeColor(16777215)
Gui.NonInv.txtBOM_SEQ.Create(TextBox,"",True,1125,300,0,3555,5145,True,0,"Arial",8,-2147483643,1)
Gui.NonInv.txtBOM_SEQ.ControlGroup(1)
Gui.NonInv.txtRTR_SEQ.Create(TextBox,"",True,1050,300,0,4740,5145,True,0,"Arial",8,-2147483643,1)
Gui.NonInv.txtRTR_SEQ.ControlGroup(1)
Gui.NonInv.lblPL.Create(Label,"PL",True,540,255,0,585,870,True,0,"Arial",8,16777215,0)
Gui.NonInv.lblPL.FontStyle(True,False,False,False,False)
Gui.NonInv.txtPL.Create(TextBox,"",True,510,300,0,585,1095,True,0,"Arial",8,-2147483643,1)
Gui.NonInv.txtPL.Event(LostFocus,txtPL_LostFocus)
Gui.NonInv.txtPL.ControlGroup(1)
Gui.NonInv.txtPL.MaxLength(2)
Gui.NonInv.txtPL.TabStop(True)
Gui.NonInv.txtPL.TabIndex(8)
Gui.NonInv.txtType.Create(TextBox,"",True,1125,300,0,195,5145,True,0,"Arial",8,-2147483643,1)
Gui.NonInv.txtType.ControlGroup(1)
Gui.NonInv.ddlSource.Create(DropDownList)
Gui.NonInv.ddlSource.Size(1395,330)
Gui.NonInv.ddlSource.Position(1830,1080)
Gui.NonInv.ddlSource.BackColor(16777215)
Gui.NonInv.ddlSource.DefaultValue("")
Gui.NonInv.ddlSource.ControlGroup(1)
Gui.NonInv.ddlSource.Event(Click,ddlSource_Change)
Gui.NonInv.ddlSource.TabStop(True)
Gui.NonInv.ddlSource.TabIndex(10)
Gui.NonInv.ddlCategory.Create(DropDownList)
Gui.NonInv.ddlCategory.Size(1395,330)
Gui.NonInv.ddlCategory.Position(3255,1080)
Gui.NonInv.ddlCategory.BackColor(16777215)
Gui.NonInv.ddlCategory.DefaultValue("")
Gui.NonInv.ddlCategory.ControlGroup(1)
Gui.NonInv.ddlCategory.Event(Click,ddlCategory_Change)
Gui.NonInv.ddlCategory.TabStop(True)
Gui.NonInv.ddlCategory.TabIndex(11)
Gui.NonInv.txtExtra.Create(TextboxM)
Gui.NonInv.txtExtra.Size(10020,1680)
Gui.NonInv.txtExtra.Position(45,1830)
Gui.NonInv.txtExtra.BackColor(16777215)
Gui.NonInv.txtExtra.ControlGroup(1)
Gui.NonInv.txtExtra.TabStop(True)
Gui.NonInv.txtExtra.TabIndex(15)
Gui.NonInv.txtRev.Create(TextBox,"",True,510,300,0,1830,420,True,0,"Arial",8,-2147483643,1)
Gui.NonInv.txtRev.MaxLength(3)
Gui.NonInv.txtRev.Event(LostFocus,txtRev_LostFocus)
Gui.NonInv.txtRev.TabStop(True)
Gui.NonInv.txtRev.TabIndex(2)
Gui.NonInv.lblRev.Create(Label,"Rev",True,495,255,0,1830,195,True,0,"Arial",8,16777215,0)
Gui.NonInv.lblRev.FontStyle(True,False,False,False,False)
Gui.NonInv.lblExtraTxt.Create(Label,"Extra Desc",True,1125,255,0,45,1575,True,0,"Arial",8,16777215,0)
Gui.NonInv.lblExtraTxt.FontStyle(True,False,False,False,False)
Gui.NonInv.cmdBrowseInv.Create(Button)
Gui.NonInv.cmdBrowseInv.Size(480,375)
Gui.NonInv.cmdBrowseInv.Position(2370,375)
Gui.NonInv.cmdBrowseInv.Caption("^")
Gui.NonInv.cmdBrowseInv.Event(Click,cmdBrowseInv_Click)
Gui.NonInv.cmdBrowseInv.TabStop(True)
Gui.NonInv.cmdBrowseInv.TabIndex(3)
Gui.NonInv.cmdBrowseInv.DisableOnClick(10)
Gui.NonInv.lblRev2.Create(Label,"Router Seq",True,1035,255,0,4695,4920,True,0,"Arial",8,16777215,0)
Gui.NonInv.txtNoSave.Create(TextBox,"",True,1215,300,0,5865,5145,True,0,"Arial",8,-2147483643,1)
Gui.NonInv.lblloc.Create(Label,"Locn",True,645,255,0,1155,870,True,0,"Arial",8,16777215,0)
Gui.NonInv.lblloc.FontStyle(True,False,False,False,False)
Gui.NonInv.ddlNewPartLoc.Create(DropDownList)
Gui.NonInv.ddlNewPartLoc.Size(675,330)
Gui.NonInv.ddlNewPartLoc.Position(1125,1080)
Gui.NonInv.ddlNewPartLoc.TabStop(True)
Gui.NonInv.ddlNewPartLoc.TabIndex(9)
Gui.NonInv.lblRev3.Create(Label,"Bom Seq",True,1035,255,0,3570,4905,True,0,"Arial",8,16777215,0)
Gui.NonInv.frNonInvInsertType.Create(Frame)
Gui.NonInv.frNonInvInsertType.Size(6870,660)
Gui.NonInv.frNonInvInsertType.Position(45,4050)
Gui.NonInv.frNonInvInsertType.Caption("Insert")
Gui.NonInv.frNonInvInsertType.BackColor(16777215)
Gui.NonInv.frNonInvInsertType.FontStyle(True,False,False,False,False)
Gui.NonInv.frNonInvInsertType.ToolTip("Method used to insert into the Router grid. Also you'd need to make sure a router row is selected before inserting.")
Gui.NonInv.optNonInvInsertAbove.Create(Option)
Gui.NonInv.optNonInvInsertAbove.Size(825,255)
Gui.NonInv.optNonInvInsertAbove.Position(3315,240)
Gui.NonInv.optNonInvInsertAbove.Parent("frNonInvInsertType")
Gui.NonInv.optNonInvInsertAbove.Caption("Above")
Gui.NonInv.optNonInvInsertAbove.FontSize(7)
Gui.NonInv.optNonInvInsertAbove.FontStyle(True,False,False,False,False)
Gui.NonInv.optNonInvInsertAbove.BackColor(16777215)
Gui.NonInv.optNonInvInsertAbove.Event(Click,optNonInvInsertAbove_Click)
Gui.NonInv.optNonInvInsertManual.Create(Option)
Gui.NonInv.optNonInvInsertManual.Size(915,255)
Gui.NonInv.optNonInvInsertManual.Position(5115,240)
Gui.NonInv.optNonInvInsertManual.Parent("frNonInvInsertType")
Gui.NonInv.optNonInvInsertManual.Caption("Manual")
Gui.NonInv.optNonInvInsertManual.FontSize(7)
Gui.NonInv.optNonInvInsertManual.BackColor(16777215)
Gui.NonInv.optNonInvInsertManual.FontStyle(True,False,False,False,False)
Gui.NonInv.optNonInvInsertManual.Event(Click,optNonInvInsertManual_Click)
Gui.NonInv.optNonInvInsertBelow.Create(Option)
Gui.NonInv.optNonInvInsertBelow.Size(810,255)
Gui.NonInv.optNonInvInsertBelow.Position(4185,240)
Gui.NonInv.optNonInvInsertBelow.Parent("frNonInvInsertType")
Gui.NonInv.optNonInvInsertBelow.Caption("Below")
Gui.NonInv.optNonInvInsertBelow.FontSize(7)
Gui.NonInv.optNonInvInsertBelow.BackColor(16777215)
Gui.NonInv.optNonInvInsertBelow.FontStyle(True,False,False,False,False)
Gui.NonInv.optNonInvInsertBelow.Event(Click,optNonInvInsertBelow_Click)
Gui.NonInv.txtNonInvManualSeq.Create(TextBox,"",True,720,300,0,6045,210,True,0,"Arial",8,-2147483643,1)
Gui.NonInv.txtNonInvManualSeq.Parent("frNonInvInsertType")
Gui.NonInv.txtNonInvManualSeq.MaxLength(6)
Gui.NonInv.txtNonInvManualSeq.NumericOnly(2)
Gui.NonInv.txtNonInvManualSeq.Event(LostFocus,txtNonInvManualSeq_LostFocus)
Gui.NonInv.frame1.Create(Frame)
Gui.NonInv.frame1.Size(45,495)
Gui.NonInv.frame1.Position(5025,45)
Gui.NonInv.frame1.Parent("frNonInvInsertType")
Gui.NonInv.lbl2.Create(Label,"Seq Selected",True,1305,255,0,645,300,True,0,"Arial",8,16777215,0)
Gui.NonInv.lbl2.Parent("frNonInvInsertType")
Gui.NonInv.lbl2.FontStyle(True,False,False,False,False)
Gui.NonInv.ddlSelectedSeq.Create(DropDownList)
Gui.NonInv.ddlSelectedSeq.Size(1095,330)
Gui.NonInv.ddlSelectedSeq.Position(1995,210)
Gui.NonInv.ddlSelectedSeq.Parent("frNonInvInsertType")
Gui.NonInv.ddlSelectedSeq.ToolTip("Indicate the selected Seq to insert Above/Below")
Gui.NonInv.cboSort.Create(ComboBox)
Gui.NonInv.cboSort.Size(2370,330)
Gui.NonInv.cboSort.Position(7695,1080)
Gui.NonInv.cboSort.TabStop(True)
Gui.NonInv.cboSort.TabIndex(14)
Gui.NonInv.lblAltDesc1.Create(Label,"Alt Description 1",True,2415,255,0,5280,195,True,0,"Arial",8,16777215,0)
Gui.NonInv.lblAltDesc1.FontStyle(True,False,False,False,False)
Gui.NonInv.lblAltDesc2.Create(Label,"Alt Description 2",True,2355,255,0,7695,195,True,0,"Arial",8,16777215,0)
Gui.NonInv.lblAltDesc2.FontStyle(True,False,False,False,False)
Gui.NonInv.lblSource.Create(Label,"Source",True,1410,255,0,1830,870,True,0,"Arial",8,16777215,0)
Gui.NonInv.lblSource.FontStyle(True,False,False,False,False)
Gui.NonInv.lblCategory.Create(Label,"Category",True,1365,255,0,3255,870,True,0,"Arial",8,16777215,0)
Gui.NonInv.lblCategory.FontStyle(True,False,False,False,False)
Gui.NonInv.lblCost.Create(Label,"Cost",True,1560,255,0,4665,870,True,0,"Arial",8,16777215,0)
Gui.NonInv.lblCost.FontStyle(True,False,False,False,False)
Gui.NonInv.lblQuantity.Create(Label,"Quantity",True,1470,255,0,6210,870,True,0,"Arial",8,16777215,0)
Gui.NonInv.lblQuantity.FontStyle(True,False,False,False,False)
Gui.NonInv.txtCost.Create(TextBox,"",True,1515,300,0,4680,1095,True,1,"Arial",8,-2147483643,1)
Gui.NonInv.txtCost.TabStop(True)
Gui.NonInv.txtCost.TabIndex(12)
Gui.NonInv.txtCost.NumericOnly(1)
Gui.NonInv.txtQty.Create(TextBox,"",True,1470,300,0,6210,1095,True,1,"Arial",8,-2147483643,1)
Gui.NonInv.txtQty.TabStop(True)
Gui.NonInv.txtQty.TabIndex(13)
Gui.NonInv.txtQty.NumericOnly(1)
Gui.NonInv.lblSort.Create(Label,"Sort Code",True,2355,255,0,7680,870,True,0,"Arial",8,16777215,0)
Gui.NonInv.lblSort.FontStyle(True,False,False,False,False)
Gui.Comment..Create
Gui.Comment..Caption("Add / Select Comment")
Gui.Comment..Size(6060,3900)
Gui.Comment..MinX(0)
Gui.Comment..MinY(0)
Gui.Comment..Position(0,0)
Gui.Comment..BackColor(16777215)
Gui.Comment..MaxButton(False)
Gui.Comment..MinButton(False)
Gui.Comment..MousePointer(0)
Gui.Comment..Moveable(False)
Gui.Comment..Event(UnLoad,Comment_UnLoad)
Gui.Comment.txtCode.Create(TextBox,"",True,1215,300,0,90,435,True,0,"Arial",8,-2147483643,1)
Gui.Comment.txtDescr.Create(TextBox,"",True,4065,300,0,1770,435,True,0,"Arial",8,-2147483643,1)
Gui.Comment.txtComment.Create(TextboxM)
Gui.Comment.txtComment.Size(5745,1860)
Gui.Comment.txtComment.Position(90,1125)
Gui.Comment.txtComment.Anchor(15)
Gui.Comment.cmdComOK.Create(Button)
Gui.Comment.cmdComOK.Size(1230,375)
Gui.Comment.cmdComOK.Position(60,3075)
Gui.Comment.cmdComOK.Caption("OK")
Gui.Comment.cmdComOK.BackColor(9157775)
Gui.Comment.cmdComOK.FontStyle(True,False,False,False,False)
Gui.Comment.cmdComOK.Event(Click,cmdComOK_Click)
Gui.Comment.cmdComOK.DisableOnClick(10)
Gui.Comment.cmdComOK.ForeColor(16777215)
Gui.Comment.cmdComOK.Anchor(6)
Gui.Comment.cmdBrwComment.Create(Button)
Gui.Comment.cmdBrwComment.Size(330,330)
Gui.Comment.cmdBrwComment.Position(1365,420)
Gui.Comment.cmdBrwComment.Caption("^")
Gui.Comment.cmdBrwComment.BackColor(16777215)
Gui.Comment.cmdBrwComment.Event(Click,cmdBrwComment_Click)
Gui.Comment.cmdBrwComment.DisableOnClick(10)
Gui.Comment.lblCode.Create(Label,"Op Code",True,1155,255,0,75,210,True,0,"Arial",8,16777215,0)
Gui.Comment.lblCode.FontStyle(True,False,False,False,False)
Gui.Comment.lblDescr.Create(Label,"Description",True,1935,255,0,1740,210,True,0,"Arial",8,16777215,0)
Gui.Comment.lblDescr.FontStyle(True,False,False,False,False)
Gui.Comment.lblCommentText.Create(Label,"Additional Text",True,1935,255,0,105,900,True,0,"Arial",8,16777215,0)
Gui.Comment.lblCommentText.FontStyle(True,False,False,False,False)
Gui.Export..Create
Gui.Export..Caption("Export")
Gui.Export..Size(2895,1215)
Gui.Export..MinX(0)
Gui.Export..MinY(0)
Gui.Export..Position(0,0)
Gui.Export..BackColor(-2147483633)
Gui.Export..MousePointer(0)
Gui.Export.GGC_Export.Create(GsGridControl)
Gui.Export.GGC_Export.Size(2295,1215)
Gui.Export.GGC_Export.Position(225,105)
Gui.POPBOM..Create
Gui.POPBOM..Caption("BOM View")
Gui.POPBOM..Size(10245,9795)
Gui.POPBOM..MinX(0)
Gui.POPBOM..MinY(0)
Gui.POPBOM..Position(0,0)
Gui.POPBOM..BackColor(16777215)
Gui.POPBOM..MousePointer(0)
Gui.POPBOM..Event(UnLoad,POPBOM_UnLoad)
Gui.POPBOM.lblBomParent.Create(Label,"BOM Parent",True,1605,255,0,105,105,True,0,"Arial",8,16777215,0)
Gui.POPBOM.lblBomParent.FontStyle(True,False,False,False,False)
Gui.POPBOM.txtPart.Create(TextBox,"",True,2085,300,0,105,330,True,0,"Arial",8,16777215,1)
Gui.POPBOM.txtPart.TabStop(True)
Gui.POPBOM.txtPart.TabIndex(1)
Gui.POPBOM.cmdBrwDTLBom.Create(Button)
Gui.POPBOM.cmdBrwDTLBom.Size(345,345)
Gui.POPBOM.cmdBrwDTLBom.Position(2295,300)
Gui.POPBOM.cmdBrwDTLBom.Caption("^")
Gui.POPBOM.cmdBrwDTLBom.BackColor(16777215)
Gui.POPBOM.cmdBrwDTLBom.Event(Click,cmdBrwDTLBom_Click)
Gui.POPBOM.cmdBrwDTLBom.ToolTip("Browse a Bom")
Gui.POPBOM.cmdBrwDTLBom.DisableOnClick(10)
Gui.POPBOM.cmdBrwDTLBom.TabStop(True)
Gui.POPBOM.cmdBrwDTLBom.TabIndex(2)
Gui.POPBOM.cmdClosePop.Create(Button)
Gui.POPBOM.cmdClosePop.Size(1260,375)
Gui.POPBOM.cmdClosePop.Position(75,8910)
Gui.POPBOM.cmdClosePop.Caption("Close")
Gui.POPBOM.cmdClosePop.BackColor(8036607)
Gui.POPBOM.cmdClosePop.FontStyle(True,False,False,False,False)
Gui.POPBOM.cmdClosePop.Event(Click,cmdClosePop_Click)
Gui.POPBOM.cmdClosePop.Anchor(6)
Gui.POPBOM.cmdClosePop.DisableOnClick(10)
Gui.POPBOM.cmdClosePop.ForeColor(16777215)
Gui.POPBOM.cmdClosePop.TabStop(True)
Gui.POPBOM.cmdClosePop.TabIndex(4)
Gui.POPBOM.cmdRefreshBomDTL.Create(Button)
Gui.POPBOM.cmdRefreshBomDTL.Size(345,345)
Gui.POPBOM.cmdRefreshBomDTL.Position(2700,300)
Gui.POPBOM.cmdRefreshBomDTL.Caption("Refresh")
Gui.POPBOM.cmdRefreshBomDTL.BackColor(16777215)
Gui.POPBOM.cmdRefreshBomDTL.ToolTip("Browse a Bom")
Gui.POPBOM.cmdRefreshBomDTL.Event(Click,cmdRefreshBomDTL_Click)
Gui.POPBOM.cmdRefreshBomDTL.DisableOnClick(10)
Gui.POPBOM.cmdRefreshBomDTL.TabStop(True)
Gui.POPBOM.cmdRefreshBomDTL.TabIndex(3)
Gui.POPBOM.GGC_BOMDTL.Create(GsGridControl)
Gui.POPBOM.GGC_BOMDTL.Size(9930,8085)
Gui.POPBOM.GGC_BOMDTL.Position(105,735)
Gui.POPBOM.GGC_BOMDTL.Event(RowCellClick,GGC_BOMDTL_RowCellClick)
Gui.POPBOM.GGC_BOMDTL.Event(CellValueChanged,GGC_BOMDTL_CellValueChanged)
Gui.POPBOM.GGC_BOMDTL.Anchor(15)
Gui.POPBOM.GGC_BOMDTL.TabStop(True)
Gui.POPBOM.GGC_BOMDTL.TabIndex(5)
Gui.POPROUTER..Create
Gui.POPROUTER..Caption("Select Router")
Gui.POPROUTER..Size(4305,2910)
Gui.POPROUTER..MinX(0)
Gui.POPROUTER..MinY(0)
Gui.POPROUTER..Position(0,0)
Gui.POPROUTER..BackColor(16777215)
Gui.POPROUTER..MaxButton(False)
Gui.POPROUTER..MousePointer(0)
Gui.POPROUTER..Sizeable(False)
Gui.POPROUTER..Event(UnLoad,POPROUTER_UnLoad)
Gui.POPROUTER.cmdPopRouter_brwRtr.Create(Button)
Gui.POPROUTER.cmdPopRouter_brwRtr.Size(315,330)
Gui.POPROUTER.cmdPopRouter_brwRtr.Position(3780,135)
Gui.POPROUTER.cmdPopRouter_brwRtr.Caption("^")
Gui.POPROUTER.cmdPopRouter_brwRtr.BackColor(16777215)
Gui.POPROUTER.cmdPopRouter_brwRtr.Event(Click,cmdPopRouter_brwRtr_Click)
Gui.POPROUTER.lbl1.Create(Label,"Select Router to copy From",True,2115,255,0,75,255,True,3,"Arial",8,16777215,0)
Gui.POPROUTER.txtRouter.Create(TextBox,"",True,1425,300,0,2310,150,True,0,"Arial",8,-2147483643,1)
Gui.POPROUTER.txtStartSeq.Create(TextBox,"",True,1425,300,0,2310,570,True,0,"Arial",8,-2147483643,1)
Gui.POPROUTER.txtEndSeq.Create(TextBox,"",True,1425,300,0,2310,990,True,0,"Arial",8,-2147483643,1)
Gui.POPROUTER.lbl2.Create(Label,"Select Starting Sequence",True,2115,255,0,75,675,True,3,"Arial",8,16777215,0)
Gui.POPROUTER.lbl3.Create(Label,"Select Ending Sequence",True,2115,255,0,75,1095,True,3,"Arial",8,16777215,0)
Gui.POPROUTER.cmdPopRtr_BrwSeqStart.Create(Button)
Gui.POPROUTER.cmdPopRtr_BrwSeqStart.Size(315,330)
Gui.POPROUTER.cmdPopRtr_BrwSeqStart.Position(3780,555)
Gui.POPROUTER.cmdPopRtr_BrwSeqStart.Caption("^")
Gui.POPROUTER.cmdPopRtr_BrwSeqStart.BackColor(16777215)
Gui.POPROUTER.cmdPopRtr_BrwSeqStart.Event(Click,cmdPopRtr_BrwSeqStart_Click)
Gui.POPROUTER.cmdPopRtr_BrwSeqStop.Create(Button)
Gui.POPROUTER.cmdPopRtr_BrwSeqStop.Size(315,330)
Gui.POPROUTER.cmdPopRtr_BrwSeqStop.Position(3780,975)
Gui.POPROUTER.cmdPopRtr_BrwSeqStop.Caption("^")
Gui.POPROUTER.cmdPopRtr_BrwSeqStop.BackColor(16777215)
Gui.POPROUTER.cmdPopRtr_BrwSeqStop.Event(Click,cmdPopRtr_BrwSeqStop_Click)
Gui.POPROUTER.lbl4.Create(Label,"Insert Above/Below Seq",True,1935,255,0,75,1470,True,3,"Arial",8,16777215,0)
Gui.POPROUTER.txtTargetSeq.Create(TextBox,"",True,1425,300,0,2310,1395,False,0,"Arial",8,-2147483643,1)
Gui.POPROUTER.cmdPopRtr_OK.Create(Button)
Gui.POPROUTER.cmdPopRtr_OK.Size(855,375)
Gui.POPROUTER.cmdPopRtr_OK.Position(75,1875)
Gui.POPROUTER.cmdPopRtr_OK.Caption("OK")
Gui.POPROUTER.cmdPopRtr_OK.BackColor(9157775)
Gui.POPROUTER.cmdPopRtr_OK.Event(Click,cmdPopRtr_OK_Click)
Gui.POPROUTER.cmdPopRtr_OK.FontStyle(True,False,False,False,False)
Gui.POPROUTER.cmdPopRtr_OK.DisableOnClick(10)
Gui.POPROUTER.cmdPopRtr_OK.ForeColor(16777215)
Gui.POPROUTER.cmdPopRtr_Cancel.Create(Button)
Gui.POPROUTER.cmdPopRtr_Cancel.Size(855,375)
Gui.POPROUTER.cmdPopRtr_Cancel.Position(990,1875)
Gui.POPROUTER.cmdPopRtr_Cancel.Caption("Cancel")
Gui.POPROUTER.cmdPopRtr_Cancel.BackColor(8036607)
Gui.POPROUTER.cmdPopRtr_Cancel.Event(Click,cmdPopRtr_Cancel_Click)
Gui.POPROUTER.cmdPopRtr_Cancel.FontStyle(True,False,False,False,False)
Gui.POPROUTER.cmdPopRtr_Cancel.DisableOnClick(10)
Gui.POPROUTER.cmdPopRtr_Cancel.ForeColor(16777215)
Gui.Additional..Create
Gui.Additional..Caption("Additional Charges")
Gui.Additional..Size(7590,5220)
Gui.Additional..MinX(0)
Gui.Additional..MinY(0)
Gui.Additional..Position(0,0)
Gui.Additional..BackColor(16777215)
Gui.Additional..MaxButton(False)
Gui.Additional..MinButton(False)
Gui.Additional..MousePointer(0)
Gui.Additional..Sizeable(False)
Gui.Additional..Event(UnLoad,Additional_UnLoad)
Gui.Additional.cmdAdditionalOK.Create(Button)
Gui.Additional.cmdAdditionalOK.Size(1740,375)
Gui.Additional.cmdAdditionalOK.Position(60,4320)
Gui.Additional.cmdAdditionalOK.Caption("OK")
Gui.Additional.cmdAdditionalOK.BackColor(9157775)
Gui.Additional.cmdAdditionalOK.FontStyle(True,False,False,False,False)
Gui.Additional.cmdAdditionalOK.Event(Click,cmdAdditionalOK_Click)
Gui.Additional.cmdAdditionalOK.DisableOnClick(10)
Gui.Additional.cmdAdditionalOK.ForeColor(16777215)
Gui.Additional.cmdAdditionalOK.Anchor(6)
Gui.Additional.GGC_Additional.Create(GsGridControl)
Gui.Additional.GGC_Additional.Size(7245,4170)
Gui.Additional.GGC_Additional.Position(105,135)
Gui.Additional.GGC_Additional.Event(RowCellClick,GGC_Additional_RowCellClick)
Gui.Additional.GGC_Additional.Anchor(15)
Gui.PNG_Frags..Create
Gui.PNG_Frags..Size(4665,4500)
Gui.PNG_Frags..MinX(0)
Gui.PNG_Frags..MinY(0)
Gui.PNG_Frags..Position(0,0)
Gui.PNG_Frags..BackColor(16777215)
Gui.PNG_Frags..MousePointer(0)
Gui.PNG_Frags..Event(UnLoad,cmdPNGCancel_Click)
Gui.PNG_Frags..Caption("PNG")
Gui.PNG_Frags..MaxButton(False)
Gui.PNG_Frags..Sizeable(False)
Gui.PNG_Frags.ddlPrefix.Create(DropDownList)
Gui.PNG_Frags.ddlPrefix.Size(1530,330)
Gui.PNG_Frags.ddlPrefix.Position(225,765)
Gui.PNG_Frags.ddlPrefix.BackColor(16777215)
Gui.PNG_Frags.ddlPrefix.FontStyle(True,False,False,False,False)
Gui.PNG_Frags.ddlPrefix.Event(Click,ddlPrefix_Change)
Gui.PNG_Frags.ddlPrefix.ControlGroup(1)
Gui.PNG_Frags.ddlPrefix.TabStop(True)
Gui.PNG_Frags.ddlPrefix.TabIndex(1)
Gui.PNG_Frags.txtAutoNum.Create(TextBox,"",True,1530,300,0,2235,765,True,0,"Arial",8,-2147483643,1)
Gui.PNG_Frags.txtAutoNum.ControlGroup(1)
Gui.PNG_Frags.lbl1.Create(Label,"Prefix",True,1395,255,0,300,480,True,0,"Arial",8,16777215,0)
Gui.PNG_Frags.lbl2.Create(Label," - ",True,315,255,0,1860,825,True,0,"Arial",8,-2147483633,0)
Gui.PNG_Frags.lbl3.Create(Label,"Auto Number",True,1440,255,0,2295,495,True,0,"Arial",8,16777215,0)
Gui.PNG_Frags.lbl3.FontStyle(True,False,False,False,False)
Gui.PNG_Frags.txtDesc.Create(TextBox,"",True,4260,300,0,120,2400,True,0,"Arial",8,-2147483643,1)
Gui.PNG_Frags.txtDesc.MaxLength(30)
Gui.PNG_Frags.txtDesc.ControlGroup(1)
Gui.PNG_Frags.txtDesc.TabStop(True)
Gui.PNG_Frags.txtDesc.TabIndex(3)
Gui.PNG_Frags.txtPUofM.Create(TextBox,"",True,495,300,0,3090,2025,True,0,"Arial",8,-2147483643,1)
Gui.PNG_Frags.txtPUofM.ControlGroup(1)
Gui.PNG_Frags.txtPUofM.TabStop(True)
Gui.PNG_Frags.txtPUofM.TabIndex(8)
Gui.PNG_Frags.txtPUofM.Event(LostFocus,txtPUofM_LostFocus_PNG_Form)
Gui.PNG_Frags.txtJUofM.Create(TextBox,"",True,495,300,0,3855,2025,True,0,"Arial",8,-2147483643,1)
Gui.PNG_Frags.txtJUofM.ControlGroup(1)
Gui.PNG_Frags.txtJUofM.TabStop(True)
Gui.PNG_Frags.txtJUofM.TabIndex(9)
Gui.PNG_Frags.txtJUofM.Event(LostFocus,txtJUofM_LostFocus_PNG_Form)
Gui.PNG_Frags.txtDesc2.Create(TextBox,"",True,4260,300,0,120,2775,True,0,"Arial",8,-2147483643,1)
Gui.PNG_Frags.txtDesc2.MaxLength(30)
Gui.PNG_Frags.txtDesc2.ControlGroup(1)
Gui.PNG_Frags.txtDesc2.TabStop(True)
Gui.PNG_Frags.txtDesc2.TabIndex(4)
Gui.PNG_Frags.txtDesc3.Create(TextBox,"",True,4260,300,0,120,3150,True,0,"Arial",8,-2147483643,1)
Gui.PNG_Frags.txtDesc3.MaxLength(30)
Gui.PNG_Frags.txtDesc3.ControlGroup(1)
Gui.PNG_Frags.txtDesc3.TabStop(True)
Gui.PNG_Frags.txtDesc3.TabIndex(5)
Gui.PNG_Frags.ddlCategory1.Create(DropDownList)
Gui.PNG_Frags.ddlCategory1.Size(1500,330)
Gui.PNG_Frags.ddlCategory1.Position(240,1230)
Gui.PNG_Frags.ddlCategory1.FontStyle(True,False,False,False,False)
Gui.PNG_Frags.ddlCategory1.Event(Click,ddlCategory1_Change)
Gui.PNG_Frags.ddlCategory1.ControlGroup(1)
Gui.PNG_Frags.ddlCategory1.TabStop(True)
Gui.PNG_Frags.ddlCategory1.TabIndex(2)
Gui.PNG_Frags.txtIUofM.Create(TextBox,"",True,495,300,0,2280,2025,True,0,"Arial",8,-2147483643,1)
Gui.PNG_Frags.txtIUofM.ControlGroup(1)
Gui.PNG_Frags.txtIUofM.TabStop(True)
Gui.PNG_Frags.txtIUofM.TabIndex(7)
Gui.PNG_Frags.txtIUofM.Event(LostFocus,txtIUofM_LostFocus_PNG_Form)
Gui.PNG_Frags.lbl4.Create(Label,"INV",True,570,255,0,2325,1770,True,0,"Arial",8,16777215,0)
Gui.PNG_Frags.lbl4.FontStyle(True,False,False,False,False)
Gui.PNG_Frags.lbl5.Create(Label,"PUR",True,570,255,0,3090,1770,True,0,"Arial",8,16777215,0)
Gui.PNG_Frags.lbl5.FontStyle(True,False,False,False,False)
Gui.PNG_Frags.lbl6.Create(Label,"ISS",True,570,255,0,3885,1770,True,0,"Arial",8,16777215,0)
Gui.PNG_Frags.lbl6.FontStyle(True,False,False,False,False)
Gui.PNG_Frags.lblDesc.Create(Label,"DESCRIPTION",True,1935,255,0,180,2115,True,0,"Arial",8,16777215,0)
Gui.PNG_Frags.lblDesc.FontStyle(True,False,False,False,False)
Gui.PNG_Frags.cmdPNGSave.Create(Button)
Gui.PNG_Frags.cmdPNGSave.Size(1740,375)
Gui.PNG_Frags.cmdPNGSave.Position(390,3630)
Gui.PNG_Frags.cmdPNGSave.Caption("Save")
Gui.PNG_Frags.cmdPNGSave.BackColor(9157775)
Gui.PNG_Frags.cmdPNGSave.FontStyle(True,False,False,False,False)
Gui.PNG_Frags.cmdPNGSave.Event(Click,cmdPNGSave_Click)
Gui.PNG_Frags.cmdPNGSave.TabStop(True)
Gui.PNG_Frags.cmdPNGSave.TabIndex(10)
Gui.PNG_Frags.cmdPNGSave.DisableOnClick(10)
Gui.PNG_Frags.cmdPNGSave.ForeColor(16777215)
Gui.PNG_Frags.cmdPNGCancel.Create(Button)
Gui.PNG_Frags.cmdPNGCancel.Size(1740,375)
Gui.PNG_Frags.cmdPNGCancel.Position(2220,3630)
Gui.PNG_Frags.cmdPNGCancel.Caption("Cancel")
Gui.PNG_Frags.cmdPNGCancel.BackColor(8036607)
Gui.PNG_Frags.cmdPNGCancel.FontStyle(True,False,False,False,False)
Gui.PNG_Frags.cmdPNGCancel.Event(Click,cmdPNGCancel_Click)
Gui.PNG_Frags.cmdPNGCancel.TabStop(True)
Gui.PNG_Frags.cmdPNGCancel.TabIndex(11)
Gui.PNG_Frags.cmdPNGCancel.DisableOnClick(10)
Gui.PNG_Frags.cmdPNGCancel.ForeColor(16777215)
Gui.PNG_Frags.txtPL.Create(TextBox,"",True,495,300,0,2760,1245,True,0,"Arial",8,-2147483643,1)
Gui.PNG_Frags.txtPL.ControlGroup(1)
Gui.PNG_Frags.txtPL.TabStop(True)
Gui.PNG_Frags.txtPL.TabIndex(6)
Gui.PNG_Frags.txtPL.Event(LostFocus,txtPL_LostFocus_PNG_Form)
Gui.PNG_Frags.lbl7.Create(Label,"PL",True,405,255,0,2235,1335,True,0,"Arial",8,16777215,0)
Gui.PNG_Frags.lbl7.FontStyle(True,False,False,False,False)
Gui.PNG_Frags.txtType.Create(TextBox,"",True,1215,300,0,450,5805,True,0,"Arial",8,-2147483643,1)
Gui.PNG_Frags.txtType.ControlGroup(1)
Gui.PNG_Frags.txtBSEQ.Create(TextBox,"",True,1215,300,0,1725,5805,True,0,"Arial",8,-2147483643,1)
Gui.PNG_Frags.txtBSEQ.ControlGroup(1)
Gui.PNG_Frags.txtRSEQ.Create(TextBox,"",True,1215,300,0,2985,5805,True,0,"Arial",8,-2147483643,1)
Gui.PNG_Frags.txtRSEQ.ControlGroup(1)
Gui.PNG_Frags.txtSource.Create(TextBox,"",True,1215,300,0,435,6150,True,0,"Arial",8,-2147483643,1)
Gui.Conversion..Create
Gui.Conversion..Size(4755,2685)
Gui.Conversion..MinX(0)
Gui.Conversion..MinY(0)
Gui.Conversion..Position(0,0)
Gui.Conversion..BackColor(16777215)
Gui.Conversion..MaxButton(False)
Gui.Conversion..MinButton(False)
Gui.Conversion..MousePointer(0)
Gui.Conversion..Sizeable(False)
Gui.Conversion..Event(UnLoad,Conversion_UnLoad)
Gui.Conversion..Caption("Cost to Apply")
Gui.Conversion.lblCostSource.Create(Label,"Cost  /  Source",True,1455,255,0,150,780,True,0,"Arial",8,16777215,0)
Gui.Conversion.lblCostSource.FontStyle(True,False,False,False,False)
Gui.Conversion.lblRouterSource.Create(Label,"Router",True,705,255,0,2400,780,True,1,"Arial",8,16777215,0)
Gui.Conversion.lblRouterSource.FontStyle(True,False,False,False,False)
Gui.Conversion.lblInvSource.Create(Label,"Inventory",True,975,255,0,3555,780,True,1,"Arial",8,16777215,0)
Gui.Conversion.lblInvSource.FontStyle(True,False,False,False,False)
Gui.Conversion.lblInvCost.Create(Label,"Inventory Cost",True,1410,255,0,150,1110,True,0,"Arial",8,16777215,0)
Gui.Conversion.lblInvCost.FontStyle(True,False,False,False,False)
Gui.Conversion.lblPurchCost.Create(Label,"Purchase Cost",True,1365,255,0,150,1485,True,0,"Arial",8,16777215,0)
Gui.Conversion.lblPurchCost.FontStyle(True,False,False,False,False)
Gui.Conversion.cmdSelectInventoryCost.Create(Button)
Gui.Conversion.cmdSelectInventoryCost.Size(1260,375)
Gui.Conversion.cmdSelectInventoryCost.Position(3270,1830)
Gui.Conversion.cmdSelectInventoryCost.BackColor(16436871)
Gui.Conversion.cmdSelectInventoryCost.Caption("Select Inv")
Gui.Conversion.cmdSelectInventoryCost.FontStyle(True,False,False,False,False)
Gui.Conversion.cmdSelectInventoryCost.Event(Click,cmdSelectInventoryCost_Click)
Gui.Conversion.cmdSelectInventoryCost.DisableOnClick(10)
Gui.Conversion.cmdSelectInventoryCost.ForeColor(16777215)
Gui.Conversion.cmdSelectRouterCost.Create(Button)
Gui.Conversion.cmdSelectRouterCost.Size(1260,375)
Gui.Conversion.cmdSelectRouterCost.Position(1830,1830)
Gui.Conversion.cmdSelectRouterCost.BackColor(9157775)
Gui.Conversion.cmdSelectRouterCost.Caption("Select Rtr")
Gui.Conversion.cmdSelectRouterCost.FontStyle(True,False,False,False,False)
Gui.Conversion.cmdSelectRouterCost.Event(Click,cmdSelectRouterCost_Click)
Gui.Conversion.cmdSelectRouterCost.DisableOnClick(10)
Gui.Conversion.cmdSelectRouterCost.ForeColor(16777215)
Gui.Conversion.txtPartRev.Create(TextBox,"",True,1560,300,0,165,330,True,0,"Arial",8,16777215,1)
Gui.Conversion.txtPartRev.Locked(True)
Gui.Conversion.txtDescr.Create(TextBox,"",True,2655,300,0,1860,330,True,0,"Arial",8,16777215,1)
Gui.Conversion.txtDescr.Locked(True)
Gui.Conversion.lblPart.Create(Label,"Part",True,1125,255,0,150,105,True,0,"Arial",8,16777215,0)
Gui.Conversion.lblPart.FontStyle(True,False,False,False,False)
Gui.Conversion.lblDescription.Create(Label,"Description",True,1935,255,0,1830,105,True,0,"Arial",8,16777215,0)
Gui.Conversion.lblDescription.FontStyle(True,False,False,False,False)
Gui.Conversion.txtRtrInv.Create(TextBox,"",True,1215,300,0,1860,990,False,1,"Arial",8,-2147483643,1)
Gui.Conversion.txtRtrPur.Create(TextBox,"",True,1215,300,0,1860,1395,True,1,"Arial",8,-2147483643,1)
Gui.Conversion.txtRtrPur.Event(LostFocus,txtRtrPur_LostFocus)
Gui.Conversion.txtInvInv.Create(TextBox,"",True,1215,300,0,3300,990,False,1,"Arial",8,-2147483643,1)
Gui.Conversion.txtInvInv.Locked(True)
Gui.Conversion.txtInvPur.Create(TextBox,"",True,1215,300,0,3300,1395,False,1,"Arial",8,-2147483643,1)
Gui.Conversion.txtInvPur.Locked(True)
Gui.Conversion.txtFactor.Create(TextBox,"",False,1215,300,0,165,1815,False,0,"Arial",8,-2147483643,1)
Gui.CellComments..Create
Gui.CellComments..Caption("Cell Comments")
Gui.CellComments..Size(9870,10320)
Gui.CellComments..MinX(0)
Gui.CellComments..MinY(0)
Gui.CellComments..Position(0,0)
Gui.CellComments..BackColor(-2147483633)
Gui.CellComments..MousePointer(0)
Gui.CellComments..Event(UnLoad,CellComments_UnLoad)
Gui.CellComments.lbl1.Create(Label,"Sequence",True,945,255,0,60,240,True,0,"Arial",8,-2147483633,0)
Gui.CellComments.lbl1.FontStyle(True,False,False,False,False)
Gui.CellComments.txtCmtSeq.Create(TextBox,"",True,885,300,0,75,465,False,0,"Arial",8,-2147483643,1)
Gui.CellComments.txtCmtSeq.MaxLength(6)
Gui.CellComments.lbl2.Create(Label,"Part",True,630,255,0,1065,240,True,0,"Arial",8,-2147483633,0)
Gui.CellComments.lbl2.FontStyle(True,False,False,False,False)
Gui.CellComments.lbl3.Create(Label,"Description",True,1200,255,0,4365,240,True,0,"Arial",8,-2147483633,0)
Gui.CellComments.lbl3.FontStyle(True,False,False,False,False)
Gui.CellComments.lbl4.Create(Label,"LMO",True,525,255,0,9165,240,True,0,"Arial",8,-2147483633,0)
Gui.CellComments.lbl4.FontStyle(True,False,False,False,False)
Gui.CellComments.txtCmtLMO.Create(TextBox,"",True,525,300,0,9165,465,False,0,"Arial",8,-2147483643,1)
Gui.CellComments.txtCmtLMO.MaxLength(1)
Gui.CellComments.txtCmtDesc.Create(TextBox,"",True,4665,300,0,4365,465,False,0,"Arial",8,-2147483643,1)
Gui.CellComments.txtCmtDesc.MaxLength(30)
Gui.CellComments.txtCmtPart.Create(TextBox,"",True,3165,300,0,1065,465,False,0,"Arial",8,-2147483643,1)
Gui.CellComments.txtCmtPart.MaxLength(20)
Gui.CellComments.txtCmtComments.Create(TextBoxR)
Gui.CellComments.txtCmtComments.Size(9615,8190)
Gui.CellComments.txtCmtComments.Position(75,1215)
Gui.CellComments.txtCmtComments.Anchor(15)
Gui.CellComments.lbl5.Create(Label,"Comments",True,1020,255,0,90,975,True,0,"Arial",8,-2147483633,0)
Gui.CellComments.lbl5.FontStyle(True,False,False,False,False)
Gui.CellComments.cmdCellCmtSave.Create(Button)
Gui.CellComments.cmdCellCmtSave.Size(1575,375)
Gui.CellComments.cmdCellCmtSave.Position(45,9480)
Gui.CellComments.cmdCellCmtSave.Caption("Save")
Gui.CellComments.cmdCellCmtSave.Event(Click,cmdCellCmtSave_Click)
Gui.CellComments.cmdCellCmtSave.Anchor(6)
Gui.CellComments.cmdCellCmtSave.DisableOnClick(10)
Gui.CellComments.cmdCellCmtSave.BackColor(9157775)
Gui.CellComments.cmdCellCmtSave.ForeColor(16777215)
Gui.CellComments.cmdCellCmtSave.FontStyle(True,False,False,False,False)
Gui.CellComments.txtCmtIndex.Create(TextBox,"",False,1215,300,0,2355,135,True,0,"Arial",8,-2147483643,1)
Gui.Debug..Create
Gui.Debug..Caption("Debug (for Developer Only)")
Gui.Debug..Size(4935,1440)
Gui.Debug..MinX(0)
Gui.Debug..MinY(0)
Gui.Debug..Position(0,0)
Gui.Debug..BackColor(-2147483633)
Gui.Debug..MousePointer(0)
Gui.Debug..Event(UnLoad,Debug_UnLoad)
Gui.Debug.txtPass.Create(TextBox,"",True,1125,300,0,150,210,True,0,"Arial",8,-2147483643,1)
Gui.Debug.txtPass.PasswordChar("*")
Gui.Debug.txtSub.Create(TextBox,"",True,3345,300,0,1365,210,True,0,"Arial",8,-2147483643,1)
Gui.Debug.cmdDebugOK.Create(Button)
Gui.Debug.cmdDebugOK.Size(1155,375)
Gui.Debug.cmdDebugOK.Position(120,615)
Gui.Debug.cmdDebugOK.Caption("OK")
Gui.Debug.cmdDebugOK.Event(Click,cmdDebugOK_Click)
Gui.Debug.cmdDebugOK.DisableOnClick(10)
Gui.Debug.cmdDebugOK.BackColor(9157775)
Gui.Debug.cmdDebugOK.ForeColor(16777215)
Gui.Debug.cmdDebugOK.FontStyle(True,False,False,False,False)
Gui.FieldOrder..Create
Gui.FieldOrder..Caption("Bom Field Order on Nodes")
Gui.FieldOrder..Size(11940,1920)
Gui.FieldOrder..MinX(0)
Gui.FieldOrder..MinY(0)
Gui.FieldOrder..Position(0,0)
Gui.FieldOrder..BackColor(-2147483633)
Gui.FieldOrder..MousePointer(0)
Gui.FieldOrder..Event(UnLoad,FieldOrder_UnLoad)
Gui.FieldOrder..Sizeable(False)
Gui.FieldOrder.gsFieldOrder.Create(GsGridControl)
Gui.FieldOrder.gsFieldOrder.Size(11550,1020)
Gui.FieldOrder.gsFieldOrder.Position(135,465)
Gui.FieldOrder.lbl1.Create(Label,"Fields on Tree Node will be rearranged by the column order. Drag and drop columns to get order.",True,11535,255,0,150,240,True,0,"Arial",8,-2147483633,0)
Gui.FieldOrder.lbl1.FontStyle(False,True,False,False,False)
Gui.FieldOrder.lbl1.ForeColor(32768)
Gui.Log..Create
Gui.Log..Size(14490,10560)
Gui.Log..MinX(0)
Gui.Log..MinY(0)
Gui.Log..Position(0,0)
Gui.Log..BackColor(16777215)
Gui.Log..MousePointer(0)
Gui.Log..Event(UnLoad,Log_UnLoad)
Gui.Log..Caption("Log")
Gui.Log.txtLog.Create(TextBoxR)
Gui.Log.txtLog.Size(7080,9225)
Gui.Log.txtLog.Position(15,765)
Gui.Log.txtLog.Anchor(15)
Gui.Log.txtEstimatorLog.Create(TextBoxR)
Gui.Log.txtEstimatorLog.Size(7155,9225)
Gui.Log.txtEstimatorLog.Position(7125,765)
Gui.Log.txtEstimatorLog.Anchor(11)
Gui.Log.cmdReadAllLog.Create(Button)
Gui.Log.cmdReadAllLog.Size(1110,375)
Gui.Log.cmdReadAllLog.Position(30,345)
Gui.Log.cmdReadAllLog.Caption("Read All")
Gui.Log.cmdReadAllLog.Event(Click,cmdReadAllLog_Click)
Gui.Log.cmdReadAllLog.ToolTip("Read full text of Web Importer Log")
Gui.Log.cmdReadAllLog.BackColor(9157775)
Gui.Log.cmdReadAllLog.ForeColor(16777215)
Gui.Log.cmdReadAllLog.FontStyle(True,False,False,False,False)
Gui.Log.picLogIncrease.Create(PictureBox)
Gui.Log.picLogIncrease.Size(240,240)
Gui.Log.picLogIncrease.Position(240,15)
Gui.Log.picLogIncrease.BackColor(16777215)
Gui.Log.picLogIncrease.Event(Click,picLogIncrease_Click)
Gui.Log.picLogDecrease.Create(PictureBox)
Gui.Log.picLogDecrease.Size(240,240)
Gui.Log.picLogDecrease.Position(0,15)
Gui.Log.picLogDecrease.BackColor(16777215)
Gui.Log.picLogDecrease.Event(Click,picLogDecrease_Click)
Gui.Log.lbl1.Create(Label,"Web Importer Log Files\ORDUPCCC.ERR",True,3330,255,0,1185,495,True,0,"Arial",8,16777215,0)
Gui.Log.lbl1.FontStyle(False,True,False,False,False)
Gui.Log.lbl1.ForeColor(32768)
Gui.Log.lbl2.Create(Label,"4986\CCC\QuoteUPL.txt",True,1935,255,0,12345,495,True,1,"Arial",8,16777215,0)
Gui.Log.lbl2.Anchor(9)
Gui.Log.lbl2.FontStyle(False,True,False,False,False)
Gui.Log.lbl2.ForeColor(32768)
Gui.DecimalRTR..Create
Gui.DecimalRTR..Caption("Decimal Settings")
Gui.DecimalRTR..Size(11400,6240)
Gui.DecimalRTR..MinX(0)
Gui.DecimalRTR..MinY(0)
Gui.DecimalRTR..Position(0,0)
Gui.DecimalRTR..BackColor(-2147483633)
Gui.DecimalRTR..MousePointer(0)
Gui.DecimalRTR..Event(UnLoad,DecimalRTR_UnLoad)
Gui.DecimalRTR.gsDec.Create(GsGridControl)
Gui.DecimalRTR.gsDec.Size(11160,4965)
Gui.DecimalRTR.gsDec.Position(75,375)
Gui.DecimalRTR.gsDec.Anchor(15)
Gui.DecimalRTR.gsDec.Event(CellValueChanged,gsDec_CellValueChanged)
Gui.DecimalRTR.lbl1.Create(Label,"Router Grid Decimal Settings",True,2625,255,0,60,150,True,0,"Arial",8,-2147483633,0)
Gui.DecimalRTR.lbl1.FontStyle(False,True,False,False,False)
Gui.DecimalRTR.lbl1.ForeColor(32768)
Gui.DecimalRTR.cmdResetRTRDecimal.Create(Button)
Gui.DecimalRTR.cmdResetRTRDecimal.Size(1410,375)
Gui.DecimalRTR.cmdResetRTRDecimal.Position(45,5415)
Gui.DecimalRTR.cmdResetRTRDecimal.Anchor(6)
Gui.DecimalRTR.cmdResetRTRDecimal.Caption("Reset")
Gui.DecimalRTR.cmdResetRTRDecimal.BackColor(9157775)
Gui.DecimalRTR.cmdResetRTRDecimal.ForeColor(16777215)
Gui.DecimalRTR.cmdResetRTRDecimal.ToolTip("Set Decimals to Default")
Gui.DecimalRTR.cmdResetRTRDecimal.DisableOnClick(10)
Gui.DecimalRTR.cmdResetRTRDecimal.Event(Click,cmdResetRTRDecimal_Click)
Gui.DecimalRTR.cmdResetRTRDecimal.FontStyle(True,False,False,False,False)
Gui.RTRGridFormat..Create
Gui.RTRGridFormat..Caption("Router Grid Format")
Gui.RTRGridFormat..Size(20835,10320)
Gui.RTRGridFormat..MinX(0)
Gui.RTRGridFormat..MinY(0)
Gui.RTRGridFormat..Position(0,0)
Gui.RTRGridFormat..BackColor(-2147483633)
Gui.RTRGridFormat..MousePointer(0)
Gui.RTRGridFormat..Event(UnLoad,RTRGridFormat_UnLoad)
Gui.RTRGridFormat.gsRTRGridFormat.Create(GsGridControl)
Gui.RTRGridFormat.gsRTRGridFormat.Size(20550,9000)
Gui.RTRGridFormat.gsRTRGridFormat.Position(75,375)
Gui.RTRGridFormat.gsRTRGridFormat.Anchor(15)
Gui.RTRGridFormat.gsRTRGridFormat.Event(RowCellClick,gsRTRGridFormat_RowCellClick)
Gui.RTRGridFormat.gsRTRGridFormat.Event(CellValueChanged,gsRTRGridFormat_CellValueChanged)
Gui.RTRGridFormat.lbl1.Create(Label,"Router Grid Format",True,2625,255,0,60,150,True,0,"Arial",8,-2147483633,0)
Gui.RTRGridFormat.lbl1.FontStyle(False,True,False,False,False)
Gui.RTRGridFormat.lbl1.ForeColor(32768)
Gui.RTRGridFormat.cmdResetRTRGridFormat.Create(Button)
Gui.RTRGridFormat.cmdResetRTRGridFormat.Size(1410,375)
Gui.RTRGridFormat.cmdResetRTRGridFormat.Position(45,9480)
Gui.RTRGridFormat.cmdResetRTRGridFormat.Anchor(6)
Gui.RTRGridFormat.cmdResetRTRGridFormat.Caption("Reset")
Gui.RTRGridFormat.cmdResetRTRGridFormat.BackColor(9157775)
Gui.RTRGridFormat.cmdResetRTRGridFormat.ForeColor(16777215)
Gui.RTRGridFormat.cmdResetRTRGridFormat.ToolTip("Set Format to Default")
Gui.RTRGridFormat.cmdResetRTRGridFormat.DisableOnClick(10)
Gui.RTRGridFormat.cmdResetRTRGridFormat.Event(Click,cmdResetRTRGridFormat_Click)
Gui.RTRGridFormat.cmdResetRTRGridFormat.FontStyle(True,False,False,False,False)
Gui.trvStyle..Create
Gui.trvStyle..Caption("Treeview")
Gui.trvStyle..Size(5430,3105)
Gui.trvStyle..MinX(0)
Gui.trvStyle..MinY(0)
Gui.trvStyle..Position(0,0)
Gui.trvStyle..BackColor(-2147483633)
Gui.trvStyle..MousePointer(0)
Gui.trvStyle..Event(UnLoad,trvStyle_UnLoad)
Gui.trvStyle..MaxButton(False)
Gui.trvStyle.cmdResettrvStyle.Create(Button)
Gui.trvStyle.cmdResettrvStyle.Size(1410,375)
Gui.trvStyle.cmdResettrvStyle.Position(60,2265)
Gui.trvStyle.cmdResettrvStyle.Anchor(6)
Gui.trvStyle.cmdResettrvStyle.Caption("Reset")
Gui.trvStyle.cmdResettrvStyle.BackColor(9157775)
Gui.trvStyle.cmdResettrvStyle.ForeColor(16777215)
Gui.trvStyle.cmdResettrvStyle.ToolTip("Set Format to Default")
Gui.trvStyle.cmdResettrvStyle.DisableOnClick(10)
Gui.trvStyle.cmdResettrvStyle.Event(Click,cmdResettrvStyle_Click)
Gui.trvStyle.cmdResettrvStyle.FontStyle(True,False,False,False,False)
Gui.trvStyle.cmdResettrvStyle.TabStop(True)
Gui.trvStyle.cmdResettrvStyle.TabIndex(4)
Gui.trvStyle.ddlFontSize.Create(DropDownList)
Gui.trvStyle.ddlFontSize.Size(1590,330)
Gui.trvStyle.ddlFontSize.Position(3615,1815)
Gui.trvStyle.ddlFontSize.Event(Click,ddlFontSize_Click)
Gui.trvStyle.ddlFontSize.TabStop(True)
Gui.trvStyle.ddlFontSize.TabIndex(3)
Gui.trvStyle.ddlForeColor.Create(DropDownList)
Gui.trvStyle.ddlForeColor.Size(1590,330)
Gui.trvStyle.ddlForeColor.Position(1845,1815)
Gui.trvStyle.ddlForeColor.Event(Click,ddlForeColor_Click)
Gui.trvStyle.ddlForeColor.TabStop(True)
Gui.trvStyle.ddlForeColor.TabIndex(2)
Gui.trvStyle.lbl2.Create(Label,"Fore Color",True,1080,255,0,1830,1590,True,0,"Arial",8,-2147483633,0)
Gui.trvStyle.lbl2.FontStyle(True,False,False,False,False)
Gui.trvStyle.lbl2.ForeColor(0)
Gui.trvStyle.lbl4.Create(Label,"Font Size",True,1065,255,0,3600,1590,True,0,"Arial",8,-2147483633,0)
Gui.trvStyle.lbl4.FontStyle(True,False,False,False,False)
Gui.trvStyle.lbl4.ForeColor(0)
Gui.trvStyle.lbl3.Create(Label,"Font Name",True,1080,255,0,75,1590,True,0,"Arial",8,-2147483633,0)
Gui.trvStyle.lbl3.ForeColor(0)
Gui.trvStyle.lbl3.FontStyle(True,False,False,False,False)
Gui.trvStyle.ddlFontName.Create(DropDownList)
Gui.trvStyle.ddlFontName.Size(1590,330)
Gui.trvStyle.ddlFontName.Position(90,1815)
Gui.trvStyle.ddlFontName.TabStop(True)
Gui.trvStyle.ddlFontName.TabIndex(1)
Gui.trvStyle.ddlFontName.Event(Click,ddlFontName_Click)
Gui.trvStyle.lbl5.Create(Label,"Font Name  in the next program restart",True,3585,255,0,1845,540,True,0,"Arial",8,-2147483633,0)
Gui.trvStyle.lbl5.ForeColor(32768)
Gui.trvStyle.lbl5.FontStyle(False,True,False,False,False)
Gui.trvStyle.lbl6.Create(Label,"Font Color instantly",True,3555,255,0,1845,855,True,0,"Arial",8,-2147483633,0)
Gui.trvStyle.lbl6.ForeColor(32768)
Gui.trvStyle.lbl6.FontStyle(False,True,False,False,False)
Gui.trvStyle.lbl7.Create(Label,"Font will be applied:",True,1620,255,0,165,210,True,0,"Arial",8,-2147483633,0)
Gui.trvStyle.lbl7.ForeColor(32768)
Gui.trvStyle.lbl7.FontStyle(False,True,False,False,False)
Gui.trvStyle.lbl8.Create(Label,"Font Size in the next Bom load",True,3555,255,0,1845,1185,True,0,"Arial",8,-2147483633,0)
Gui.trvStyle.lbl8.ForeColor(32768)
Gui.trvStyle.lbl8.FontStyle(False,True,False,False,False)
Gui.trvStyle.chktrvStyleStayOnTop.Create(CheckBox)
Gui.trvStyle.chktrvStyleStayOnTop.Size(1275,360)
Gui.trvStyle.chktrvStyleStayOnTop.Position(3885,75)
Gui.trvStyle.chktrvStyleStayOnTop.Anchor(9)
Gui.trvStyle.chktrvStyleStayOnTop.Caption("Stay On Top")
Gui.trvStyle.chktrvStyleStayOnTop.Value(1)
Gui.trvStyle.chktrvStyleStayOnTop.Event(Click,chktrvStyleStayOnTop_Click)
Gui.StdColor..Create
Gui.StdColor..Caption("Standard Color")
Gui.StdColor..Size(3435,9855)
Gui.StdColor..MinX(0)
Gui.StdColor..MinY(0)
Gui.StdColor..Position(0,0)
Gui.StdColor..BackColor(-2147483633)
Gui.StdColor..MousePointer(0)
Gui.StdColor..Event(UnLoad,StdColor_UnLoad)
Gui.StdColor.gsColor.Create(GsGridControl)
Gui.StdColor.gsColor.Size(3180,9000)
Gui.StdColor.gsColor.Position(75,375)
Gui.StdColor.gsColor.Anchor(15)
Gui.StdColor.gsColor.Event(RowCellClick,gsColor_RowCellClick)
Gui.StdColor.lbl1.Create(Label,"Click to Select a Color",True,2625,255,0,60,150,True,0,"Arial",8,-2147483633,0)
Gui.StdColor.lbl1.FontStyle(False,True,False,False,False)
Gui.StdColor.lbl1.ForeColor(32768)
Gui.StdColor.lbl1.ForeColor(32768)
Gui.StdFont..Create
Gui.StdFont..Caption("Standard Font")
Gui.StdFont..Size(3435,9855)
Gui.StdFont..MinX(0)
Gui.StdFont..MinY(0)
Gui.StdFont..Position(0,0)
Gui.StdFont..BackColor(-2147483633)
Gui.StdFont..MousePointer(0)
Gui.StdFont..Event(UnLoad,StdFont_UnLoad)
Gui.StdFont..MaxButton(False)
Gui.StdFont..Sizeable(False)
Gui.StdFont.gsFont.Create(GsGridControl)
Gui.StdFont.gsFont.Size(3180,9000)
Gui.StdFont.gsFont.Position(75,375)
Gui.StdFont.gsFont.Anchor(15)
Gui.StdFont.gsFont.Event(RowCellClick,gsFont_RowCellClick)
Gui.StdFont.lbl1.Create(Label,"Click to Select a Color",True,2625,255,0,60,150,True,0,"Arial",8,-2147483633,0)
Gui.StdFont.lbl1.FontStyle(False,True,False,False,False)
Gui.BookM..Create
Gui.BookM..Caption("Bookmarks")
Gui.BookM..Size(3690,9720)
Gui.BookM..MinX(0)
Gui.BookM..MinY(0)
Gui.BookM..Position(0,0)
Gui.BookM..BackColor(-2147483633)
Gui.BookM..MousePointer(0)
Gui.BookM..Event(UnLoad,BookM_Unload)
Gui.BookM.gsBookM.Create(GsGridControl)
Gui.BookM.gsBookM.Size(3405,8925)
Gui.BookM.gsBookM.Position(90,420)
Gui.BookM.gsBookM.Event(RowCellClick,gsBookM_RowCellClick)
Gui.BookM.gsBookM.Anchor(15)
Gui.BookM.gsBookM.Event(CellValueChanged,gsBookM_CellValueChanged)
Gui.BookM.chkStayOnTop.Create(CheckBox)
Gui.BookM.chkStayOnTop.Size(1275,360)
Gui.BookM.chkStayOnTop.Position(2250,45)
Gui.BookM.chkStayOnTop.Caption("Stay On Top")
Gui.BookM.chkStayOnTop.Value(1)
Gui.BookM.chkStayOnTop.Event(Click,chkStayOnTop_Click)
Gui.BookM.chkStayOnTop.Anchor(9)
Gui.QuickNonInv..Create
Gui.QuickNonInv..Caption("Enter a Part number")
Gui.QuickNonInv..Size(5400,1545)
Gui.QuickNonInv..MinX(0)
Gui.QuickNonInv..MinY(0)
Gui.QuickNonInv..Position(0,0)
Gui.QuickNonInv..BackColor(16777215)
Gui.QuickNonInv..ControlBox(False)
Gui.QuickNonInv..MaxButton(False)
Gui.QuickNonInv..MousePointer(0)
Gui.QuickNonInv..Sizeable(False)
Gui.QuickNonInv.lbl1.Create(Label,"Rev",True,510,255,0,1995,75,True,0,"Arial",8,16777215,0)
Gui.QuickNonInv.lbl1.FontStyle(True,False,False,False,False)
Gui.QuickNonInv.lbl2.Create(Label,"Part",True,510,255,0,60,75,True,0,"Arial",8,16777215,0)
Gui.QuickNonInv.lbl2.FontStyle(True,False,False,False,False)
Gui.QuickNonInv.txtQPart17.Create(TextBox,"",True,1815,300,0,105,285,True,0,"Arial",8,-2147483643,1)
Gui.QuickNonInv.txtQPart17.MaxLength(17)
Gui.QuickNonInv.txtQPart17.TabStop(True)
Gui.QuickNonInv.txtQPart17.TabIndex(1)
Gui.QuickNonInv.txtQPart17.ControlGroup(1)
Gui.QuickNonInv.txtQRev.Create(TextBox,"",True,480,300,0,2040,285,True,0,"Arial",8,-2147483643,1)
Gui.QuickNonInv.txtQRev.MaxLength(3)
Gui.QuickNonInv.txtQRev.TabStop(True)
Gui.QuickNonInv.txtQRev.TabIndex(2)
Gui.QuickNonInv.txtQRev.ControlGroup(1)
Gui.QuickNonInv.cmdOKQuickNonInv.Create(Button)
Gui.QuickNonInv.cmdOKQuickNonInv.Size(855,375)
Gui.QuickNonInv.cmdOKQuickNonInv.Position(90,720)
Gui.QuickNonInv.cmdOKQuickNonInv.Caption("OK")
Gui.QuickNonInv.cmdOKQuickNonInv.BackColor(9157775)
Gui.QuickNonInv.cmdOKQuickNonInv.ForeColor(16777215)
Gui.QuickNonInv.cmdOKQuickNonInv.FontStyle(True,False,False,False,False)
Gui.QuickNonInv.cmdOKQuickNonInv.DisableOnClick(10)
Gui.QuickNonInv.cmdOKQuickNonInv.Event(Click,cmdOKQuickNonInv_Click)
Gui.QuickNonInv.cmdOKQuickNonInv.TabStop(True)
Gui.QuickNonInv.cmdOKQuickNonInv.TabIndex(4)
Gui.QuickNonInv.cmdCancelQuickNonInv.Create(Button)
Gui.QuickNonInv.cmdCancelQuickNonInv.Size(855,375)
Gui.QuickNonInv.cmdCancelQuickNonInv.Position(1080,720)
Gui.QuickNonInv.cmdCancelQuickNonInv.Caption("Cancel")
Gui.QuickNonInv.cmdCancelQuickNonInv.BackColor(8036607)
Gui.QuickNonInv.cmdCancelQuickNonInv.ForeColor(16777215)
Gui.QuickNonInv.cmdCancelQuickNonInv.DisableOnClick(10)
Gui.QuickNonInv.cmdCancelQuickNonInv.Event(Click,cmdCancelQuickNonInv_Click)
Gui.QuickNonInv.cmdCancelQuickNonInv.TabStop(True)
Gui.QuickNonInv.cmdCancelQuickNonInv.TabIndex(5)
Gui.QuickNonInv.cmdCancelQuickNonInv.FontStyle(True,False,False,False,False)
Gui.QuickNonInv.txtQDescription.Create(TextBox,"",True,2520,300,0,2655,285,True,0,"Arial",8,-2147483643,1)
Gui.QuickNonInv.txtQDescription.TabStop(True)
Gui.QuickNonInv.txtQDescription.TabIndex(3)
Gui.QuickNonInv.txtQDescription.MaxLength(30)
Gui.QuickNonInv.txtQDescription.ControlGroup(1)
Gui.QuickNonInv.lbl3.Create(Label,"Description",True,1185,255,0,2625,75,True,0,"Arial",8,16777215,0)
Gui.QuickNonInv.lbl3.FontStyle(True,False,False,False,False)
Gui.MFGPart..Create
Gui.MFGPart..Caption("Insert Manufacture Part")
Gui.MFGPart..Size(9825,4785)
Gui.MFGPart..MinX(0)
Gui.MFGPart..MinY(0)
Gui.MFGPart..Position(0,0)
Gui.MFGPart..BackColor(16777215)
Gui.MFGPart..MaxButton(False)
Gui.MFGPart..MousePointer(0)
Gui.MFGPart..Sizeable(False)
Gui.MFGPart..Event(UnLoad,MfgPart_UnLoad)
Gui.MFGPart.lblPart.Create(Label,"Part",True,1770,255,0,105,600,True,0,"Arial",8,16777215,0)
Gui.MFGPart.lblPart.FontStyle(True,False,False,False,False)
Gui.MFGPart.txtMfgPart.Create(TextBox,"",True,1770,300,0,105,810,True,0,"Arial",8,16777215,1)
Gui.MFGPart.txtMfgPart.MaxLength(17)
Gui.MFGPart.txtMfgPart.ControlGroup(1)
Gui.MFGPart.txtMfgPart.TabStop(True)
Gui.MFGPart.txtMfgPart.TabIndex(4)
Gui.MFGPart.txtMfgPart.Event(LostFocus,txtMfgPart_LostFocus)
Gui.MFGPart.lblDescr.Create(Label,"Description",True,2385,255,0,2415,600,True,0,"Arial",8,16777215,0)
Gui.MFGPart.lblDescr.FontStyle(True,False,False,False,False)
Gui.MFGPart.txtMfgDescr.Create(TextBox,"",True,2385,300,0,2415,810,True,0,"Arial",8,16777215,1)
Gui.MFGPart.txtMfgDescr.MaxLength(30)
Gui.MFGPart.txtMfgDescr.ControlGroup(1)
Gui.MFGPart.txtMfgDescr.TabStop(True)
Gui.MFGPart.txtMfgDescr.TabIndex(6)
Gui.MFGPart.txtMfgUM.Create(TextBox,"",True,510,300,0,105,1440,True,0,"Arial",8,167772153,1)
Gui.MFGPart.txtMfgUM.ControlGroup(1)
Gui.MFGPart.txtMfgUM.MaxLength(3)
Gui.MFGPart.txtMfgUM.TabStop(True)
Gui.MFGPart.txtMfgUM.TabIndex(9)
Gui.MFGPart.txtMfgUM.Event(LostFocus,txtMfgUM_LostFocus)
Gui.MFGPart.lblUM.Create(Label,"UM",True,525,255,0,105,1215,True,0,"Arial",8,16777215,0)
Gui.MFGPart.lblUM.FontStyle(True,False,False,False,False)
Gui.MFGPart.cmdMfgPartOK.Create(Button)
Gui.MFGPart.cmdMfgPartOK.Size(1005,375)
Gui.MFGPart.cmdMfgPartOK.Position(105,3975)
Gui.MFGPart.cmdMfgPartOK.Caption("OK")
Gui.MFGPart.cmdMfgPartOK.BackColor(9157775)
Gui.MFGPart.cmdMfgPartOK.FontStyle(True,False,False,False,False)
Gui.MFGPart.cmdMfgPartOK.TabStop(True)
Gui.MFGPart.cmdMfgPartOK.TabIndex(17)
Gui.MFGPart.cmdMfgPartOK.DisableOnClick(10)
Gui.MFGPart.cmdMfgPartOK.ForeColor(16777215)
Gui.MFGPart.cmdMfgPartOK.Event(Click,cmdMfgPartOk_Click)
Gui.MFGPart.lblPL.Create(Label,"PL",True,450,255,0,660,1215,True,0,"Arial",8,16777215,0)
Gui.MFGPart.lblPL.FontStyle(True,False,False,False,False)
Gui.MFGPart.txtMfgPL.Create(TextBox,"",True,465,300,0,645,1440,True,0,"Arial",8,-2147483643,1)
Gui.MFGPart.txtMfgPL.ControlGroup(1)
Gui.MFGPart.txtMfgPL.MaxLength(2)
Gui.MFGPart.txtMfgPL.TabStop(True)
Gui.MFGPart.txtMfgPL.TabIndex(10)
Gui.MFGPart.txtMfgPL.Event(LostFocus,txtMfgPL_LostFocus)
Gui.MFGPart.ddlMfgSource.Create(DropDownList)
Gui.MFGPart.ddlMfgSource.Size(1305,330)
Gui.MFGPart.ddlMfgSource.Position(1770,1425)
Gui.MFGPart.ddlMfgSource.BackColor(16777215)
Gui.MFGPart.ddlMfgSource.DefaultValue("")
Gui.MFGPart.ddlMfgSource.ControlGroup(1)
Gui.MFGPart.ddlMfgSource.TabStop(True)
Gui.MFGPart.ddlMfgSource.TabIndex(12)
Gui.MFGPart.txtMfgRev.Create(TextBox,"",True,510,300,0,1875,810,True,0,"Arial",8,-2147483643,1)
Gui.MFGPart.txtMfgRev.MaxLength(3)
Gui.MFGPart.txtMfgRev.TabStop(True)
Gui.MFGPart.txtMfgRev.TabIndex(5)
Gui.MFGPart.txtMfgRev.Event(LostFocus,txtMfgRev_LostFocus)
Gui.MFGPart.lblRev.Create(Label,"Rev",True,585,255,0,1860,600,True,0,"Arial",8,16777215,0)
Gui.MFGPart.lblRev.FontStyle(True,False,False,False,False)
Gui.MFGPart.lbl1.Create(Label,"Locn",True,660,255,0,1125,1215,True,0,"Arial",8,16777215,0)
Gui.MFGPart.lbl1.FontStyle(True,False,False,False,False)
Gui.MFGPart.ddlMfgLoc.Create(DropDownList)
Gui.MFGPart.ddlMfgLoc.Size(600,330)
Gui.MFGPart.ddlMfgLoc.Position(1140,1425)
Gui.MFGPart.ddlMfgLoc.TabStop(True)
Gui.MFGPart.ddlMfgLoc.TabIndex(11)
Gui.MFGPart.lbl2.Create(Label,"Source",True,1365,255,0,1755,1215,True,0,"Arial",8,16777215,0)
Gui.MFGPart.lbl2.FontStyle(True,False,False,False,False)
Gui.MFGPart.cmdFromInventory.Create(Button)
Gui.MFGPart.cmdFromInventory.Size(1395,375)
Gui.MFGPart.cmdFromInventory.Position(105,60)
Gui.MFGPart.cmdFromInventory.Caption("From Inventory")
Gui.MFGPart.cmdFromInventory.Event(Click,cmdFromInventory_Click)
Gui.MFGPart.cmdFromInventory.TabStop(True)
Gui.MFGPart.cmdFromInventory.TabIndex(1)
Gui.MFGPart.cmdFromRouter.Create(Button)
Gui.MFGPart.cmdFromRouter.Size(1140,375)
Gui.MFGPart.cmdFromRouter.Position(1575,60)
Gui.MFGPart.cmdFromRouter.Caption("From Router")
Gui.MFGPart.cmdFromRouter.Event(Click,cmdFromRouter_Click)
Gui.MFGPart.cmdFromRouter.TabStop(True)
Gui.MFGPart.cmdFromRouter.TabIndex(2)
Gui.MFGPart.cmdFromBom.Create(Button)
Gui.MFGPart.cmdFromBom.Size(1140,375)
Gui.MFGPart.cmdFromBom.Position(2775,60)
Gui.MFGPart.cmdFromBom.Caption("From Bom")
Gui.MFGPart.cmdFromBom.Event(Click,cmdFromBom_Click)
Gui.MFGPart.cmdFromBom.TabStop(True)
Gui.MFGPart.cmdFromBom.TabIndex(3)
Gui.MFGPart.txtMfgDescr2.Create(TextBox,"",True,2400,300,0,4815,810,True,0,"Arial",8,-2147483643,1)
Gui.MFGPart.txtMfgDescr2.TabStop(True)
Gui.MFGPart.txtMfgDescr2.TabIndex(7)
Gui.MFGPart.txtMfgDescr2.MaxLength(71)
Gui.MFGPart.txtMfgDescr2.ToolTip("Router/Inventory Alt 1 Description")
Gui.MFGPart.txtMfgDescr3.Create(TextBox,"",True,2385,300,0,7230,810,True,0,"Arial",8,-2147483643,1)
Gui.MFGPart.txtMfgDescr3.TabStop(True)
Gui.MFGPart.txtMfgDescr3.TabIndex(8)
Gui.MFGPart.txtMfgDescr3.MaxLength(71)
Gui.MFGPart.txtMfgDescr3.ToolTip("Inventory Sort Code")
Gui.MFGPart.txtMfgExtra.Create(TextBoxR)
Gui.MFGPart.txtMfgExtra.Size(9480,1785)
Gui.MFGPart.txtMfgExtra.Position(135,2100)
Gui.MFGPart.txtMfgExtra.TabStop(True)
Gui.MFGPart.txtMfgExtra.TabIndex(16)
Gui.MFGPart.txtMfgExtra.ToolTip("Inventory Extra Description")
Gui.MFGPart.txtMfgUnitCost.Create(TextBox,"",True,1695,300,0,3105,1440,True,1,"Arial",8,-2147483643,1)
Gui.MFGPart.txtMfgUnitCost.NumericOnly(1)
Gui.MFGPart.txtMfgUnitCost.TabStop(True)
Gui.MFGPart.txtMfgUnitCost.TabIndex(13)
Gui.MFGPart.txtMfgQty.Create(TextBox,"",True,1395,300,0,4815,1440,True,1,"Arial",8,-2147483643,1)
Gui.MFGPart.txtMfgQty.NumericOnly(1)
Gui.MFGPart.txtMfgQty.TabStop(True)
Gui.MFGPart.txtMfgQty.TabIndex(14)
Gui.MFGPart.txtMfgQty.ToolTip("Quantity for Bom node")
Gui.MFGPart.lblCost.Create(Label,"Cost",True,1725,255,0,3120,1215,True,0,"Arial",8,16777215,0)
Gui.MFGPart.lblCost.FontStyle(True,False,False,False,False)
Gui.MFGPart.lblUM3.Create(Label,"Quantity",True,1395,255,0,4830,1215,True,0,"Arial",8,16777215,0)
Gui.MFGPart.lblUM3.FontStyle(True,False,False,False,False)
Gui.MFGPart.lblUM4.Create(Label,"Extra Description",True,9495,255,0,105,1890,True,0,"Arial",8,16777215,0)
Gui.MFGPart.lblUM4.FontStyle(True,False,False,False,False)
Gui.MFGPart.lblDescr2.Create(Label,"Alt Description 1",True,2400,255,0,4815,600,True,0,"Arial",8,16777215,0)
Gui.MFGPart.lblDescr2.FontStyle(True,False,False,False,False)
Gui.MFGPart.lblDescr3.Create(Label,"Alt Description 2",True,2385,255,0,7245,600,True,0,"Arial",8,16777215,0)
Gui.MFGPart.lblDescr3.FontStyle(True,False,False,False,False)
Gui.MFGPart.lblSort.Create(Label,"Sort Code",True,3375,255,0,6255,1215,True,0,"Arial",8,16777215,0)
Gui.MFGPart.lblSort.FontStyle(True,False,False,False,False)
Gui.MFGPart.cboCodeSort.Create(ComboBox)
Gui.MFGPart.cboCodeSort.Size(3390,330)
Gui.MFGPart.cboCodeSort.Position(6225,1425)
Gui.MFGPart.cboCodeSort.TabStop(True)
Gui.MFGPart.cboCodeSort.TabIndex(15)
Gui.MFGPart.cboCodeSort.ToolTip("Inventory Sort Code")
Gui.MFGPart.txtType.Create(TextBox,"",False,540,300,0,4065,90,True,0,"Arial",8,-2147483643,1)
Gui.MFGPart.chkEditInv.Create(CheckBox)
Gui.MFGPart.chkEditInv.Size(1290,360)
Gui.MFGPart.chkEditInv.Position(150,45)
Gui.MFGPart.chkEditInv.Caption("Inventory")
Gui.MFGPart.chkEditInv.FontStyle(True,False,False,False,False)
Gui.MFGPart.chkEditInv.BackColor(16777215)
Gui.MFGPart.chkEditRouter.Create(CheckBox)
Gui.MFGPart.chkEditRouter.Size(1050,360)
Gui.MFGPart.chkEditRouter.Position(1455,45)
Gui.MFGPart.chkEditRouter.Caption("Router")
Gui.MFGPart.chkEditRouter.BackColor(16777215)
Gui.MFGPart.chkEditRouter.FontStyle(True,False,False,False,False)
Gui.MFGPart.chkEditBom.Create(CheckBox)
Gui.MFGPart.chkEditBom.Size(975,360)
Gui.MFGPart.chkEditBom.Position(2520,45)
Gui.MFGPart.chkEditBom.Caption("Bom")
Gui.MFGPart.chkEditBom.BackColor(16777215)
Gui.MFGPart.chkEditBom.FontStyle(True,False,False,False,False)
Gui.GVSettings..Create
Gui.GVSettings..Caption("Gridview Settings")
Gui.GVSettings..Size(16350,5505)
Gui.GVSettings..MinX(0)
Gui.GVSettings..MinY(0)
Gui.GVSettings..Position(7995,1995)
Gui.GVSettings..BackColor(-2147483633)
Gui.GVSettings..MousePointer(0)
Gui.GVSettings..Event(UnLoad,GVSettings_UnLoad)
Gui.GVSettings.lbl1.Create(Label,"Save Status of Gridviews (column width, visible index, sorting and filtering). Click Apply to render the gridview immediately and also this will be saved and applied for the next launch of the Estimator.",True,15960,255,0,135,180,True,0,"Arial",8,-2147483633,0)
Gui.GVSettings.lbl1.FontStyle(False,True,False,False,False)
Gui.GVSettings.lbl1.ForeColor(9157775)
Gui.GVSettings.lbl2.Create(Label,"Material",True,1830,255,0,5430,540,True,0,"Arial",8,-2147483633,0)
Gui.GVSettings.lbl2.FontStyle(True,False,False,False,False)
Gui.GVSettings.lbl3.Create(Label,"WC",True,1830,255,0,8145,540,True,0,"Arial",8,-2147483633,0)
Gui.GVSettings.lbl3.FontStyle(True,False,False,False,False)
Gui.GVSettings.lbl4.Create(Label,"Outside",True,1815,255,0,10800,540,True,0,"Arial",8,-2147483633,0)
Gui.GVSettings.lbl4.FontStyle(True,False,False,False,False)
Gui.GVSettings.lbl5.Create(Label,"Opcode",True,1875,255,0,13500,540,True,0,"Arial",8,-2147483633,0)
Gui.GVSettings.lbl5.FontStyle(True,False,False,False,False)
Gui.GVSettings.lbl6.Create(Label,"Quote",True,1845,255,0,2730,540,True,0,"Arial",8,-2147483633,0)
Gui.GVSettings.lbl6.FontStyle(True,False,False,False,False)
Gui.GVSettings.lbl7.Create(Label,"Router",True,1830,255,0,60,540,True,0,"Arial",8,-2147483633,0)
Gui.GVSettings.lbl7.FontStyle(True,False,False,False,False)
Gui.GVSettings.gsGVRTR.Create(GsGridControl)
Gui.GVSettings.gsGVRTR.Size(2610,3885)
Gui.GVSettings.gsGVRTR.Position(75,1095)
Gui.GVSettings.gsGVRTR.Event(RowCellClick,gsGVRTR_RowCellClick)
Gui.GVSettings.gsGVOpc.Create(GsGridControl)
Gui.GVSettings.gsGVOpc.Size(2610,3885)
Gui.GVSettings.gsGVOpc.Position(13515,1095)
Gui.GVSettings.gsGVOpc.Event(RowCellClick,gsGVOpc_RowCellClick)
Gui.GVSettings.gsGVQuote.Create(GsGridControl)
Gui.GVSettings.gsGVQuote.Size(2610,3885)
Gui.GVSettings.gsGVQuote.Position(2760,1095)
Gui.GVSettings.gsGVQuote.Event(RowCellClick,gsGVQuote_RowCellClick)
Gui.GVSettings.gsGVMat.Create(GsGridControl)
Gui.GVSettings.gsGVMat.Size(2610,3885)
Gui.GVSettings.gsGVMat.Position(5460,1095)
Gui.GVSettings.gsGVMat.Event(RowCellClick,gsGVMat_RowCellClick)
Gui.GVSettings.gsGVWC.Create(GsGridControl)
Gui.GVSettings.gsGVWC.Size(2610,3885)
Gui.GVSettings.gsGVWC.Position(8145,1095)
Gui.GVSettings.gsGVWC.Event(RowCellClick,gsGVWC_RowCellClick)
Gui.GVSettings.gsGVOut.Create(GsGridControl)
Gui.GVSettings.gsGVOut.Size(2610,3885)
Gui.GVSettings.gsGVOut.Position(10830,1095)
Gui.GVSettings.gsGVOut.Event(RowCellClick,gsGVOut_RowCellClick)
Gui.GVSettings.txtRTR.Create(TextBox,"",True,2295,300,0,75,750,True,0,"Arial",8,-2147483643,1)
Gui.GVSettings.txtRTR.MaxLength(50)
Gui.GVSettings.cmdSaveGVRTR.Create(Button)
Gui.GVSettings.cmdSaveGVRTR.Size(300,345)
Gui.GVSettings.cmdSaveGVRTR.Position(2400,720)
Gui.GVSettings.cmdSaveGVRTR.Caption("+")
Gui.GVSettings.cmdSaveGVRTR.BackColor(9157775)
Gui.GVSettings.cmdSaveGVRTR.ForeColor(16777215)
Gui.GVSettings.cmdSaveGVRTR.FontStyle(True,False,False,False,False)
Gui.GVSettings.cmdSaveGVRTR.Event(Click,cmdSaveGVRTR_Click)
Gui.GVSettings.txtQuote.Create(TextBox,"",True,2295,300,0,2760,750,True,0,"Arial",8,-2147483643,1)
Gui.GVSettings.txtQuote.MaxLength(50)
Gui.GVSettings.txtMat.Create(TextBox,"",True,2295,300,0,5460,750,True,0,"Arial",8,-2147483643,1)
Gui.GVSettings.txtMat.MaxLength(50)
Gui.GVSettings.txtWC.Create(TextBox,"",True,2295,300,0,8145,750,True,0,"Arial",8,-2147483643,1)
Gui.GVSettings.txtWC.MaxLength(50)
Gui.GVSettings.txtOut.Create(TextBox,"",True,2295,300,0,10830,750,True,0,"Arial",8,-2147483643,1)
Gui.GVSettings.txtOut.MaxLength(50)
Gui.GVSettings.txtOp.Create(TextBox,"",True,2295,300,0,13515,750,True,0,"Arial",8,-2147483643,1)
Gui.GVSettings.txtOp.MaxLength(50)
Gui.GVSettings.cmdSaveGVQuote.Create(Button)
Gui.GVSettings.cmdSaveGVQuote.Size(300,345)
Gui.GVSettings.cmdSaveGVQuote.Position(5085,720)
Gui.GVSettings.cmdSaveGVQuote.Caption("+")
Gui.GVSettings.cmdSaveGVQuote.BackColor(9157775)
Gui.GVSettings.cmdSaveGVQuote.ForeColor(16777215)
Gui.GVSettings.cmdSaveGVQuote.Event(Click,cmdSaveGVQuote_Click)
Gui.GVSettings.cmdSaveGVQuote.FontStyle(True,False,False,False,False)
Gui.GVSettings.cmdSaveGVMat.Create(Button)
Gui.GVSettings.cmdSaveGVMat.Size(300,345)
Gui.GVSettings.cmdSaveGVMat.Position(7785,720)
Gui.GVSettings.cmdSaveGVMat.Caption("+")
Gui.GVSettings.cmdSaveGVMat.BackColor(9157775)
Gui.GVSettings.cmdSaveGVMat.ForeColor(16777215)
Gui.GVSettings.cmdSaveGVMat.Event(Click,cmdSaveGVMat_Click)
Gui.GVSettings.cmdSaveGVMat.FontStyle(True,False,False,False,False)
Gui.GVSettings.cmdSaveGVWC.Create(Button)
Gui.GVSettings.cmdSaveGVWC.Size(300,345)
Gui.GVSettings.cmdSaveGVWC.Position(10470,720)
Gui.GVSettings.cmdSaveGVWC.Caption("+")
Gui.GVSettings.cmdSaveGVWC.BackColor(9157775)
Gui.GVSettings.cmdSaveGVWC.ForeColor(16777215)
Gui.GVSettings.cmdSaveGVWC.Event(Click,cmdSaveGVWC_Click)
Gui.GVSettings.cmdSaveGVWC.FontStyle(True,False,False,False,False)
Gui.GVSettings.cmdSaveGVOut.Create(Button)
Gui.GVSettings.cmdSaveGVOut.Size(300,345)
Gui.GVSettings.cmdSaveGVOut.Position(13155,720)
Gui.GVSettings.cmdSaveGVOut.Caption("+")
Gui.GVSettings.cmdSaveGVOut.BackColor(9157775)
Gui.GVSettings.cmdSaveGVOut.ForeColor(16777215)
Gui.GVSettings.cmdSaveGVOut.Event(Click,cmdSaveGVOut_Click)
Gui.GVSettings.cmdSaveGVOut.FontStyle(True,False,False,False,False)
Gui.GVSettings.cmdSaveOp.Create(Button)
Gui.GVSettings.cmdSaveOp.Size(300,345)
Gui.GVSettings.cmdSaveOp.Position(15840,720)
Gui.GVSettings.cmdSaveOp.Caption("+")
Gui.GVSettings.cmdSaveOp.BackColor(9157775)
Gui.GVSettings.cmdSaveOp.ForeColor(16777215)
Gui.GVSettings.cmdSaveOp.Event(Click,cmdSaveOp_Click)
Gui.GVSettings.cmdSaveOp.FontStyle(True,False,False,False,False)
Gui.NewInvPart..Create
Gui.NewInvPart..Caption("Create Inventory Manufacture Part from Bom Nodes")
Gui.NewInvPart..Size(16200,9270)
Gui.NewInvPart..MinX(0)
Gui.NewInvPart..MinY(0)
Gui.NewInvPart..Position(0,0)
Gui.NewInvPart..BackColor(-2147483633)
Gui.NewInvPart..MousePointer(0)
Gui.NewInvPart..Event(UnLoad,NewInvPart_UnLoad)
Gui.NewInvPart.gsNewInvPart.Create(GsGridControl)
Gui.NewInvPart.gsNewInvPart.Size(15900,8235)
Gui.NewInvPart.gsNewInvPart.Position(135,75)
Gui.NewInvPart.gsNewInvPart.Event(RowCellClick,gsNewInvPart_RowCellClick)
Gui.NewInvPart.gsNewInvPart.Event(CellValueChanged,gsNewInvPart_CellValueChanged)
Gui.NewInvPart.gsNewInvPart.Anchor(15)
Gui.NewInvPart.cmdCreateNewInvParts.Create(Button)
Gui.NewInvPart.cmdCreateNewInvParts.Size(1965,375)
Gui.NewInvPart.cmdCreateNewInvParts.Position(105,8415)
Gui.NewInvPart.cmdCreateNewInvParts.Caption("Create New Parts")
Gui.NewInvPart.cmdCreateNewInvParts.BackColor(9157775)
Gui.NewInvPart.cmdCreateNewInvParts.ForeColor(16777215)
Gui.NewInvPart.cmdCreateNewInvParts.FontStyle(True,False,False,False,False)
Gui.NewInvPart.cmdCreateNewInvParts.Event(Click,cmdCreateNewInvParts_Click)
Gui.NewInvPart.cmdCreateNewInvParts.Anchor(6)
Gui.NewInvPart.lblResult.Create(Label,"",True,12765,255,0,2160,8550,True,0,"Arial",8,-2147483633,0)
Gui.NewInvPart.lblResult.ForeColor(8036607)
Gui.NewInvPart.lblResult.Anchor(6)
Gui.Powder..Create
Gui.Powder..Caption("Powder Coating")
Gui.Powder..Size(12360,8025)
Gui.Powder..MinX(0)
Gui.Powder..MinY(0)
Gui.Powder..Position(0,0)
Gui.Powder..BackColor(-2147483633)
Gui.Powder..MousePointer(0)
Gui.Powder..Event(UnLoad,Powder_UnLoad)
Gui.Powder.lbl1.Create(Label,"Powder Material List",True,2310,255,0,75,120,True,0,"Arial",8,-2147483633,0)
Gui.Powder.lbl1.FontStyle(True,False,False,False,False)
Gui.Powder.txtPowderQty.Create(TextBox,"",True,1305,300,0,75,6780,True,1,"Arial",8,-2147483643,1)
Gui.Powder.txtPowderQty.NumericOnly(1)
Gui.Powder.txtPowderQty.Event(LostFocus,txtPowderQty_LostFocus)
Gui.Powder.txtPowderQty.TabStop(True)
Gui.Powder.txtPowderQty.TabIndex(9)
Gui.Powder.txtPowderQty.Anchor(6)
Gui.Powder.lbl2.Create(Label,"Quantity",True,1335,255,0,75,6555,True,0,"Arial",8,-2147483633,0)
Gui.Powder.lbl2.FontStyle(True,False,False,False,False)
Gui.Powder.lbl2.Anchor(6)
Gui.Powder.lbl3.Create(Label,"Cost",True,1245,255,0,4125,6555,True,1,"Arial",8,-2147483633,0)
Gui.Powder.lbl3.FontStyle(True,False,False,False,False)
Gui.Powder.lbl3.Anchor(6)
Gui.Powder.txtPowderCost.Create(TextBox,"",True,1425,300,0,3960,6780,True,1,"Arial",8,-2147483643,1)
Gui.Powder.txtPowderCost.NumericOnly(1)
Gui.Powder.txtPowderCost.Event(LostFocus,txtPowderCost_LostFocus)
Gui.Powder.txtPowderCost.TabStop(True)
Gui.Powder.txtPowderCost.TabIndex(12)
Gui.Powder.txtPowderCost.Anchor(6)
Gui.Powder.lbl4.Create(Label,"Percent",True,945,255,0,1440,6555,True,2,"Arial",8,-2147483633,0)
Gui.Powder.lbl4.FontStyle(True,False,False,False,False)
Gui.Powder.lbl4.Anchor(6)
Gui.Powder.txtExtended.Create(TextBox,"",True,1380,300,0,5415,6780,True,1,"Arial",8,-2147483643,1)
Gui.Powder.txtExtended.NumericOnly(1)
Gui.Powder.txtExtended.TabStop(True)
Gui.Powder.txtExtended.TabIndex(13)
Gui.Powder.txtExtended.Anchor(6)
Gui.Powder.lbl5.Create(Label,"Extended",True,1350,255,0,5445,6555,True,1,"Arial",8,-2147483633,0)
Gui.Powder.lbl5.FontStyle(True,False,False,False,False)
Gui.Powder.lbl5.Anchor(6)
Gui.Powder.txtPowderMaterial.Create(TextBox,"",True,1905,300,0,75,5445,True,0,"Arial",8,-2147483643,1)
Gui.Powder.txtPowderMaterial.TabStop(True)
Gui.Powder.txtPowderMaterial.TabIndex(1)
Gui.Powder.txtPowderMaterial.Anchor(6)
Gui.Powder.cmdAddPowder.Create(Button)
Gui.Powder.cmdAddPowder.Size(1155,375)
Gui.Powder.cmdAddPowder.Position(60,7185)
Gui.Powder.cmdAddPowder.Caption("Add")
Gui.Powder.cmdAddPowder.Event(Click,cmdAddPowder_Click)
Gui.Powder.cmdAddPowder.TabStop(True)
Gui.Powder.cmdAddPowder.TabIndex(14)
Gui.Powder.cmdAddPowder.BackColor(9157775)
Gui.Powder.cmdAddPowder.ForeColor(16777215)
Gui.Powder.cmdAddPowder.FontStyle(True,False,False,False,False)
Gui.Powder.cmdAddPowder.Anchor(6)
Gui.Powder.cmdBrowsePowderMaterial.Create(Button)
Gui.Powder.cmdBrowsePowderMaterial.Size(420,375)
Gui.Powder.cmdBrowsePowderMaterial.Position(5310,5400)
Gui.Powder.cmdBrowsePowderMaterial.Caption("^")
Gui.Powder.cmdBrowsePowderMaterial.TabStop(True)
Gui.Powder.cmdBrowsePowderMaterial.TabIndex(4)
Gui.Powder.cmdBrowsePowderMaterial.Event(Click,cmdBrowsePowderMaterial_Click)
Gui.Powder.cmdBrowsePowderMaterial.Anchor(6)
Gui.Powder.gsPowderMaterialList.Create(GsGridControl)
Gui.Powder.gsPowderMaterialList.Size(12030,4710)
Gui.Powder.gsPowderMaterialList.Position(75,345)
Gui.Powder.gsPowderMaterialList.Event(RowCellClick,gsPowderMaterialList_RowCellClick)
Gui.Powder.gsPowderMaterialList.TabStop(True)
Gui.Powder.gsPowderMaterialList.TabIndex(15)
Gui.Powder.gsPowderMaterialList.Anchor(15)
Gui.Powder.lbl6.Create(Label,"Powder",True,1230,255,0,75,5220,True,0,"Arial",8,-2147483633,0)
Gui.Powder.lbl6.FontStyle(True,False,False,False,False)
Gui.Powder.lbl6.Anchor(6)
Gui.Powder.cboPercentage.Create(ComboBox)
Gui.Powder.cboPercentage.Size(975,330)
Gui.Powder.cboPercentage.Position(1425,6765)
Gui.Powder.cboPercentage.Event(LostFocus,cboPercentage_LostFocus)
Gui.Powder.cboPercentage.Event(Click,cboPercentage_LostFocus)
Gui.Powder.cboPercentage.Event(Change,cboPercentage_LostFocus)
Gui.Powder.cboPercentage.TabStop(True)
Gui.Powder.cboPercentage.TabIndex(10)
Gui.Powder.cboPercentage.Anchor(6)
Gui.Powder.txtDescription.Create(TextBox,"",True,2745,300,0,2550,5445,True,0,"Arial",8,-2147483643,1)
Gui.Powder.txtDescription.TabStop(True)
Gui.Powder.txtDescription.TabIndex(3)
Gui.Powder.txtDescription.Anchor(6)
Gui.Powder.txtQtybyPct.Create(TextBox,"",True,1470,300,0,2445,6780,True,1,"Arial",8,-2147483643,1)
Gui.Powder.txtQtybyPct.TabStop(True)
Gui.Powder.txtQtybyPct.TabIndex(11)
Gui.Powder.txtQtybyPct.NumericOnly(1)
Gui.Powder.txtQtybyPct.Event(LostFocus,txtQtybyPct_LostFocus)
Gui.Powder.txtQtybyPct.Anchor(6)
Gui.Powder.lbl7.Create(Label,"Qty by Pct",True,1290,255,0,2610,6555,True,1,"Arial",8,-2147483633,0)
Gui.Powder.lbl7.FontStyle(True,False,False,False,False)
Gui.Powder.lbl7.Anchor(6)
Gui.Powder.lbl8.Create(Label,"Description",True,1530,255,0,2535,5220,True,0,"Arial",8,-2147483633,0)
Gui.Powder.lbl8.FontStyle(True,False,False,False,False)
Gui.Powder.lbl8.Anchor(6)
Gui.Powder.txtRev.Create(TextBox,"",True,510,300,0,2010,5445,True,0,"Arial",8,-2147483643,1)
Gui.Powder.txtRev.TabStop(True)
Gui.Powder.txtRev.TabIndex(2)
Gui.Powder.txtRev.Anchor(6)
Gui.Powder.txtUM.Create(TextBox,"",True,510,300,0,75,6120,True,0,"Arial",8,-2147483643,1)
Gui.Powder.txtUM.TabStop(True)
Gui.Powder.txtUM.TabIndex(5)
Gui.Powder.txtUM.Anchor(6)
Gui.Powder.txtUM.MaxLength(2)
Gui.Powder.txtPL.Create(TextBox,"",True,465,300,0,615,6120,True,0,"Arial",8,-2147483643,1)
Gui.Powder.txtPL.TabStop(True)
Gui.Powder.txtPL.TabIndex(6)
Gui.Powder.txtPL.Anchor(6)
Gui.Powder.ddlSource.Create(DropDownList)
Gui.Powder.ddlSource.Size(2160,330)
Gui.Powder.ddlSource.Position(1755,6105)
Gui.Powder.ddlSource.TabStop(True)
Gui.Powder.ddlSource.TabIndex(8)
Gui.Powder.ddlSource.Anchor(6)
Gui.Powder.lbl9.Create(Label,"Rev",True,540,255,0,2010,5220,True,0,"Arial",8,-2147483633,0)
Gui.Powder.lbl9.FontStyle(True,False,False,False,False)
Gui.Powder.lbl9.Anchor(6)
Gui.Powder.ddlPowderLoc.Create(DropDownList)
Gui.Powder.ddlPowderLoc.Size(600,330)
Gui.Powder.ddlPowderLoc.Position(1110,6105)
Gui.Powder.ddlPowderLoc.TabStop(True)
Gui.Powder.ddlPowderLoc.TabIndex(7)
Gui.Powder.ddlPowderLoc.Anchor(6)
Gui.Powder.lbl10.Create(Label,"Loc",True,435,255,0,1110,5880,True,0,"Arial",8,-2147483633,0)
Gui.Powder.lbl10.FontStyle(True,False,False,False,False)
Gui.Powder.lbl10.Anchor(6)
Gui.Powder.lbl11.Create(Label,"UM",True,450,255,0,75,5880,True,0,"Arial",8,-2147483633,0)
Gui.Powder.lbl11.FontStyle(True,False,False,False,False)
Gui.Powder.lbl11.Anchor(6)
Gui.Powder.lbl12.Create(Label,"PL",True,450,255,0,630,5880,True,0,"Arial",8,-2147483633,0)
Gui.Powder.lbl12.FontStyle(True,False,False,False,False)
Gui.Powder.lbl12.Anchor(6)
Gui.Powder.lbl13.Create(Label,"Source",True,900,255,0,1740,5880,True,0,"Arial",8,-2147483633,0)
Gui.Powder.lbl13.FontStyle(True,False,False,False,False)
Gui.Powder.lbl13.Anchor(6)
Gui.Powder.frInsert.Create(Frame)
Gui.Powder.frInsert.Size(6300,1110)
Gui.Powder.frInsert.Position(5790,5370)
Gui.Powder.frInsert.Anchor(6)
Gui.Powder.frInsert.Caption("Insert")
Gui.Powder.lbl14.Create(Label,"Seq Selected",True,1110,255,0,75,495,True,0,"Arial",7,-2147483633,0)
Gui.Powder.lbl14.Parent("frInsert")
Gui.Powder.lbl14.FontStyle(True,False,False,False,False)
Gui.Powder.ddlPowderSelectedSeq.Create(DropDownList)
Gui.Powder.ddlPowderSelectedSeq.Size(1140,330)
Gui.Powder.ddlPowderSelectedSeq.Position(1230,405)
Gui.Powder.ddlPowderSelectedSeq.Parent("frInsert")
Gui.Powder.optPowderAbove.Create(Option)
Gui.Powder.optPowderAbove.Size(870,255)
Gui.Powder.optPowderAbove.Position(2430,435)
Gui.Powder.optPowderAbove.Parent("frInsert")
Gui.Powder.optPowderAbove.Caption("Above")
Gui.Powder.optPowderAbove.FontSize(7)
Gui.Powder.optPowderAbove.FontStyle(True,False,False,False,False)
Gui.Powder.optPowderAbove.Event(Click,optPowderAbove_Click)
Gui.Powder.optPowderManual.Create(Option)
Gui.Powder.optPowderManual.Size(945,255)
Gui.Powder.optPowderManual.Position(4275,435)
Gui.Powder.optPowderManual.Parent("frInsert")
Gui.Powder.optPowderManual.Caption("Manual")
Gui.Powder.optPowderManual.FontSize(7)
Gui.Powder.optPowderManual.Event(Click,optPowderManual_Click)
Gui.Powder.optPowderBelow.Create(Option)
Gui.Powder.optPowderBelow.Size(840,255)
Gui.Powder.optPowderBelow.Position(3315,435)
Gui.Powder.optPowderBelow.Parent("frInsert")
Gui.Powder.optPowderBelow.Caption("Below")
Gui.Powder.optPowderBelow.FontSize(7)
Gui.Powder.optPowderBelow.Event(Click,optPowderBelow_Click)
Gui.Powder.txtPowderManualSeq.Create(TextBox,"",True,975,300,0,5235,435,True,0,"Arial",8,-2147483643,1)
Gui.Powder.txtPowderManualSeq.Parent("frInsert")
Gui.Powder.txtPowderManualSeq.Event(LostFocus,txtPowderManualSeq_LostFocus)
Gui.Powder.frSeperate.Create(Frame)
Gui.Powder.frSeperate.Size(15,900)
Gui.Powder.frSeperate.Position(4185,75)
Gui.Powder.frSeperate.Parent("frInsert")
Program.Sub.ScreenSU.End

Program.Sub.ProjectComments.Start
'PROGRAM NOTES
'MAIN COMPONENTS
'GCG_4986_BOM_ROUTER is the main application
'GCG_4986_DATATABLES.lib stores the majority of the datatables, views, and LOADING functions.
'GCG_4986_BOMINUSE is a SQL table for setting user locks

'CALLWRAPPER LIBRARIES - these are standard lib files and are not needed in the ARC project.  They should already exist in the GAB\GAS folder
'1500 - router cost buildup
'3500 - open inventory master
'6021 - router upload
'300010 - supply and demand
'251000 - open quick quote

'CONNECTION
'Open only 1 connection is easier to manage, although user may leave the program open for a long time, so as the connection. 
'However, with one connection, the UNLOAD sub is set up to assure that the connection will be closed whenever you unload the program or an error is thrown (by using If v.ODBC.conx.State = 1 Then close)
'In contrast, opening multiple connections within multiple sub every time you need a connection has 3 drawbacks:
'1/ More line of codes, and paying more attention to close the connection
'2/ Recursive call must be carefully used as the second call will crash if the same connection name is open
'3/	you still have more risk that the sub crashes leaving the connection not closed and becomes a garbage object in memory. You may put the connection closing name in the catching of the sub, but it will give you messier codes
'Balancing the pros and cons, I am using one connection only

'SECURITY
'User has to be in group ADM4986 in order to save options at option script
'there are 2 parts to security.  User groups "ESTIMATE" and "ENGINEER", and a custom table GCG_4986_BOMINUSE.
'the user groups determine who can edit what details, the custom table is used to create a lock.  If a record exists in that table for a specific bom, then someone else is using it.  The person trying to access will get a read only view of the bom/router, no edit capability.
'buttons are enabled/disabled based on group membership as well.  If you're not in one of those groups, about all you can do is load a bom and look at it.

'TREE NODES
'whether loading, updating, or adding new nodes, BOLD nodes represent something that needs attention. ie:  it's a BOM parent and it's not flagged as complete. In that case, the parent AND the children will still be in bold lettering.  If a parent is flagged as complete, it will no longer be bold, it's puchased components will no longer be bold.  if the component is a parent of another bom, then it's bom complete flag will determine it's BOLD font.

'MAIN WORK SPACE
'columns with colored backgrounds have unique context menu's for each column activated from the right mouse button.
'all other columns will bring up the standard context menu for the main work space.

'SAVING ROUTERS AND BOMS
'from the main grid section, viewing router data, there are 2 ways to save the router.  COMMIT TO BOM, and SAVE ROUTER ONLY.  The difference between the two is that "commit to bom" will either update the BOM you are currently viewing in the tree, or, convert this single level router to a BOM Parent.
	'NOTE: automatic function - if a manufacture to job item is added to a single level router, and the user is not currently viewing a BOM, it will be converted to a BOM View automatically and load the tree view with all the children for the manufacture to job part.  (works like insert bom)

'ADDITIONAL CHARGES
'pulls the data from V_QTE_PRC_MSG and displays in a form
'also Material Lines flagged as tooling in the router, and flagged as exclude in the BOM.

'BOM COMPARE
'there is a global map that's used for exporting data so BOM Compare can load the bom instead of using the callwrapper.  That map is located in the DataTable.lib file.  If we add any fields in the BOM datatable that should be included in the BOM Compare upload, edit that map instead of creating a new one. 

'OPTIONS PROGRAM = GCG_4986_OPTIONS.g2u
'options screen for selecting product lines to "include" in the inventory list.  Since some customers have many product lines and might only need to view RM, or component items, and they may want to exclude things like shop supplies, and other expense type items.
'controls their part numbering method but the programming for that method is in this script, or the part generator

Program.Sub.ProjectComments.End

Program.Sub.Preflight.Start
'user for indentifying rows in CHILD datatable rowIndex
v.Global.iBomRow.Declare(Long,0)
'router seqeuncing
v.Global.iRSeq.Declare(Long,0)
v.Global.iBSeq.Declare(Long,0)
'used in context menus
v.Global.sBomOrRouterToBuildCost.Declare(String,"")
'affected by bom/router complete flag - controls the edit status of the router or BOM
v.Global.bReadOnly.Declare(Boolean,False)
v.Global.bEdit.Declare(Boolean,False)
'status 0,1,or 2 - view only, estimator, engineer 
V.Global.iRights.Declare(Long,0)
'used in the context menu to move rows without retyping the sequence number.
v.Global.sMove.Declare(String,"")
v.Global.sNormalSourceRowToMove.Declare
v.Global.s99SourceRowToMove.Declare

'are locations used
v.Global.bLoc.Declare(Boolean,False)
'IF LOCATIONS ARE USED
'are they validated?
v.Global.bLocVal.Declare(Boolean,False)
'is blank allowed?  If = false, blank is allowed
v.Global.bLocNoBlank.Declare(Boolean,False)
'For Prohibit Blank Location
v.Global.bProhibitBlankLoc.Declare

'global.ipart a bitwise method to instruct the system how to ASSIGN part numbers based on the method specified in gcg_4986_options.
'1 = Manual
'2 = AutoNumber
'4 = (Custom) defined by a secondary script with a subroutine "buildpartnum"
'8 = PartNumber Generator
v.Global.iPart.Declare
'variables used for calculating run times
v.Global.sHppPph.Declare
v.Global.sHppSub.Declare
v.Global.sPphSub.Declare
v.Global.sType.Declare
v.Global.sLaborType.Declare
v.Global.bWireLaborLookup.Declare

'do not resequence material lines - stored t/f after the company option is checked - affects the way material lines are sequenced in the router
V.Global.bHoldSeq.Declare(Boolean,False)

'used for insert lines
V.Global.sInsRtrSeq.Declare(String,"000000")

'used in passing parent items from the POPBOM screen to the main screen
'also used to store values when using the part number generator
V.Global.sPart.Declare(String,"")

'used in creating new parts in inventory
'1			DONT SAVE NEW PARTS
'2			SAVE NEW PARTS NOW
'4			BATCH SAVE ON ESTIMATOR EXIT
'8			ASK EACH TIME
V.Global.iNewPart.Declare
v.Global.iTempCreate.Declare

'used for setting and restoring BOM Compare loading options
v.Global.sBOMCompare.Declare
v.Global.bBOMSilent.Declare(Boolean,False)
v.Global.bQtySaved.Declare(Boolean,False)

'standard TASK work center
v.Global.sTask.Declare

'Use this for error handling, grid must be created before serialization when unload.
v.Global.bTableGridLoaded.Declare
'For hiding frame source
v.Global.bHideFrameSource.Declare
'For hiding frame tree
v.Global.bHideFrameTree.Declare
'For hiding header
v.Global.bHideHeader.Declare
v.Global.iSizeIncrement.Declare(Long,1500)
'For setting the toggle hide/resize. iY is the position just right below frame Header
v.Global.iY.Declare(Long,840)

'For hiding router header
v.Global.bHideRouterHeader.Declare
'For hiding bom header
v.Global.bHideTreeTop.Declare

v.Global.bRouterChanged.Declare

'For option Add Comment Blocks On Parent Routers for Phantom Parts
V.Global.bAddCommentBlockPhantom.Declare
'For location assigned to user in User security
v.Global.sLoc.Declare
v.Global.sDefaultLoc.Declare

v.Global.sCustomNum4Dec.Declare(String,"###,###,###,##0.0000")
v.Global.sCustomNum2Dec.Declare(String,"###,###,###,##0.00")

'To delete stage
v.Global.sDeleteExplodeStageSQL.Declare
f.Intrinsic.String.Build("Delete from GCG_4986_Stge where UserID = '{0}' and TRMNL = '{1}'",v.Caller.User,v.Caller.Terminal,v.Global.sDeleteExplodeStageSQL)

v.Global.ddlMatLoc.Declare(String)
v.Global.ddlNewPartLoc.Declare(String)
v.Global.ddlQuoteLoc.Declare(String)
v.Global.ddlMfgLoc.Declare(String)
v.Global.ddlPowderLoc.Declare(String)

'Long Part
V.Global.bLongPart.Declare
v.Global.bLargeLongPart.Declare
v.Global.bSmallLongPart.Declare
v.Global.sRowToMove.Declare
v.Global.sSeqtoMove.Declare

v.Global.sBomTreeNodeClickKey.Declare
v.Global.sWhiteSpaceNode.Declare("String","      ")

'Settings per user & company code that can be dynamically changed in runtime
'Decimal settings
v.Global.sDecimalQty.Declare
v.Global.sDecimalCost.Declare
v.Global.sDecimalWeight.Declare
'Display fields on the tree view node settings
v.Global.bDisplayUM.Declare
v.Global.bDisplaySource.Declare
v.Global.bDisplayCategory.Declare
v.Global.bDisplayCost.Declare
v.Global.bDisplayPL.Declare
v.Global.bDisplayComplete.Declare
v.Global.bBoldComplete.Declare
v.Global.bDisplayLoc.Declare
'Display fields Label
v.Global.bQtyLabel.Declare
v.Global.bPartLabel.Declare
v.Global.bDescrLabel.Declare
v.Global.bUMLabel.Declare
v.Global.bSourceLabel.Declare
v.Global.bCategoryLabel.Declare
v.Global.bCostLabel.Declare
v.Global.bPLLabel.Declare
v.Global.bLocLabel.Declare
'Order of fields displayed on tree node
v.Global.iNodeIndex.Declare
v.Global.iQtyIndex.Declare
v.Global.iPartIndex.Declare
v.Global.iDescrIndex.Declare
v.Global.iUMIndex.Declare
v.Global.iSourceIndex.Declare
v.Global.iCategoryIndex.Declare
v.Global.iCostIndex.Declare
v.Global.iPLIndex.Declare
v.Global.iLocIndex.Declare
v.Global.iCompleteIndex.Declare

'Set image ON/OFF for Document control
v.Global.sDocsON.Declare
v.Global.sDocsOFF.Declare
v.Global.bDocsON.Declare
v.Global.bDocsOFF.Declare

v.Global.iMaterialSourceRowClicked.Declare

'Environment screen width, height
v.Global.sEnvironmentScreenWidth.Declare
v.Global.sEnvironmentScreenHeight.Declare
v.Global.sInitialWidth.Declare
v.Global.sInitialHeight.Declare

'Log
v.Global.sWebImporterLog.Declare
v.Global.sEstimatorQuoteLog.Declare
v.Global.sNullSample.Declare
v.Global.sNull.Declare

v.Global.iSelectFormat.Declare

v.Global.iRouterLimitSize.Declare
v.Global.iRouterLimitSize.Set(1600)
v.Global.iSourceLimitSize.Declare
v.Global.iSourceLimitSize.Set(1600)
v.Global.iBomLimitSize.Declare
v.Global.iBomLimitSize.Set(1600)

f.Intrinsic.String.Build("{0}\ORDUP{1}.ERR",V.Caller.FilesDir,V.Caller.CompanyCode,v.Global.sWebImporterLog)
f.Intrinsic.String.Build("{0}\Custom\4986\{1}\QuoteUPL.txt",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Global.sEstimatorQuoteLog)
f.Intrinsic.String.Build("{0}\GCG_4986_NullSample.txt",v.Caller.GasDir,v.Global.sNullSample)

v.Global.bRTRGridFormat_Load.Declare
v.Global.bStdColor_Load.Declare
v.Global.bStdFont_Load.Declare
v.Global.sColumn.Declare

'Router file
v.Global.sMRMSTccc.Declare
f.Intrinsic.String.Build("{0}\MRMST{1}",V.Caller.FilesDir,V.Caller.CompanyCode,V.Global.sMRMSTccc)
v.Global.sBMastccc.Declare
f.Intrinsic.String.Build("{0}\BMAST{1}",V.Caller.FilesDir,V.Caller.CompanyCode,V.Global.sMRMSTccc)
v.Global.sBENGRccc.Declare
f.Intrinsic.String.Build("{0}\BENGR{1}",V.Caller.FilesDir,V.Caller.CompanyCode,V.Global.sBENGRccc)

'Form first load variables
v.Global.bFirstBookmarks2Load.Declare
v.Global.bFirstBookmarks2Load.Set(True)
v.Global.bFirstLoadTrvStyle.Declare
v.Global.bFirstLoadTrvStyle.Set(True)
v.Global.bFirstRTRGridFormatLoad.Declare
v.Global.bFirstRTRGridFormatLoad.Set(True)
v.Global.bFirstDecimalLoad.Declare
v.Global.bFirstDecimalLoad.Set(True)
v.Global.bFirstLoadQuickNonInv.Declare
v.Global.bFirstLoadQuickNonInv.Set(True)
v.Global.bFirstLoadAltBom.Declare
v.Global.bFirstLoadAltBom.Set(True)
v.Global.bFirstCutlistLoad.Declare
v.Global.bFirstCutlistLoad.Set(True)
v.Global.bMfgPartFirstLoad.Declare
v.Global.bMfgPartFirstLoad.Set(True)

v.Global.sBookMarkIndex.Declare

'For Angola Wire
v.Global.bUseCutList.Declare
v.Global.bAutoDisplayCutlist.Declare
v.Global.bBindCutList.Declare
V.Global.bUseWireLaborRuntime.Declare

v.Global.bPhantomComments.Declare

'For Cutlist and create subcomponent from cutlist
v.Global.iCutListIndex.Declare
v.Global.iSerieCutList.Declare
v.Global.sItemCutList.Declare
v.Global.fMaterialQty.Declare
v.Global.sMaterialSeq.Declare
v.Global.sParentPartCutList.Declare
v.Global.sComponentPartCutList.Declare
v.Global.fTotalItemCutListQty.Declare

'For creating subcomponent by selecting sequence
v.Global.iSerieSubCompList.Declare

v.Global.sCutlistSeries.Declare

v.Global.bPassedNonInvScreen.Declare

v.Global.fStdDayLength.Declare

'For Insert New MFG Part
v.Global.sParentInsertNewMfgPart.Declare
v.Global.sParentInsertNewMfgDescr.Declare
v.Global.sParentInsertNewMfgUM.Declare
v.Global.sParentInsertNewMfgPL.Declare
v.Global.sParentInsertNewMfgSourceCode.Declare
v.Global.sParentInsertNewMfgCost.Declare

'GVSettings
v.Global.bGVSettingsFirstLoad.Declare
v.Global.bGVSettingsFirstLoad.Set(True)
v.Global.bNewPartFirstLoad.Declare
v.Global.bNewPartFirstLoad.Set(True)

v.Global.sEditRouterBomInvParent.Declare

'Enable/Disable button when clicked will shift the control focus to the next control which makes confusion. So we use these flags instead:
v.Global.bActiveNewRTR.Declare
v.Global.bActiveNewPart.Declare
v.Global.bActiveSaveRTR.Declare
v.Global.bActiveCommit.Declare
v.Global.bActiveClearRTR.Declare
v.Global.bActiveBomCostBuildUp.Declare
v.Global.bActiveRouterCostBuildUp.Declare
v.Global.bActiveAddQty.Declare
v.Global.bActiveSaveBom.Declare
v.Global.bActiveCreateParts.Declare
v.Global.bActiveCreateRouter.Declare
v.Global.bActiveBrwBom.Declare
v.Global.bActiveBomCompare.Declare
v.Global.bActiveClearBom.Declare
v.Global.bActiveCharges.Declare
v.Global.bActiveClearQuote.Declare
v.Global.bActiveComments.Declare
v.Global.bActiveCreateNewInvParts.Declare
v.Global.bActiveBrowseRouter.Declare
v.Global.bActiveRefresRouter.Declare
v.Global.bActiveRefreshBomTree.Declare

v.Global.bLoadingPleaseWait.Declare

v.Global.bPowderCoatingClick.Declare
v.Global.bPowderCoatingFirstLoad.Declare
v.Global.bPowderCoatingFirstLoad.Set(True)

v.Global.sSeriesToExpand.Declare

v.Global.bIncludeWCFactorInExtended.Declare
v.Global.bIncludeWCFactorInExtended.Set(True)

V.Global.bDoNotCopySortCode.Declare

v.Global.bAllowPartChgQuote.Declare
v.Global.bAcceptNonInvQuote.Declare

v.Global.sRouterCost.Declare

'For Router Upload token
'When progress form is closed to force to stop
v.Global.bForcedToStop.Declare

v.Global.sSupervsrID.Declare
f.Global.Security.GetUserId("SUPERVSR",v.Caller.CompanyCode,v.Global.sSupervsrID)

v.Global.sWebImporterDir.Declare
f.Intrinsic.Control.CallSub(WebImporterPreflight)

'library file for creating all the datatables required
'callwrapper for supply and demand
'callwrapper to open quick quote
'callwrapper for web importer - used for uploading quotes
'callwrapper to open inventory master Open OR Edit
'callwrapper to upload router
'callwrapper for router cost buildup
'callwrapper for BOM Cost buildup
Program.External.Include.Library("GCG_4986_DataTables.lib",False)
Program.External.Include.Library("GCG_4986_RUPL.lib",False)
Program.External.Include.Library("GCG_4986_QProBar.lib",False)
Program.External.Include.Library("300010.lib",False)
Program.External.Include.Library("251000.lib",False)
Program.External.Include.Library("3500.lib",False)
Program.External.Include.Library("1500.lib",False)
Program.Sub.Preflight.End

Program.Sub.WebImporterPreflight.Start
'This lib file assists with using the one shot program ORDUPL. The program uses a text file located in the Global\Files directory to determine whhere to find the files to upload exist. This file has two different possible names. 
'If there are multiple company codes that all have to have their own file location then GSSPARAMccc.txt will be used. If there is only one location, then GSSPARAM.txt should be used. Only one or the other should exist. 
'The CORE program will always default to using GSSPARAMccc.txt if it exists. The contents of the GSSPARAM(ccc).txt file should be:
'
'WEB ORDER DIRECTORY   = files to be uploaded location
'WEB ERROR DIRECTORY   = where files are copied to if there is an error
'WEB CONVERTED DIR     = converted files copied here
'WEB UPLOADED DIRECTORY= uploaded files copied here
'EMAIL FROM ADDRESS    = 
'EMAIL TO ADDRESS      = 
'
'In order for this lib file to work these directories must be present.

'Due to the way ORDUPL functions it is not possible to add multiple calls to the datatable like other callwrappers support. It is assumed that there will be 1 row in ORDUPL and 1 row in ORDUPLExtra. Every line in ORDUPLLines will be uploaded
'with the header and extra data that is provided.
'
'The ORDUPL Header datatable is structured as follows:
'Column					=	Parameter						=	Possible Values
'=======================================================================================================================
'Transaction			=	Transaction Code				=	"O" for Sales Order
'															=	"Q" for Quote
'CustomerNo				=	Customer Number					=	"000100"
'OrderNumber			=	Order Number					=	"0000001"
'Freight				=	Freight							=	"0000000250" 2.50 implied decimal after 8 characters
'TaxFreightFlag			=	Tax Freight Flag				=	"Y" or Blank
'FreightPerPiece		=	Freight Per Piece				=	"Y" or Blank
'OrderDueDate			=	Order Due Date					=	"CCYYMMDD"
'OrderDate				=	Order Date						=	"CCYYMMDD"
'UserField1Head			=	User Field 1 Header				=	30 Character String
'UserField2Head			=	User Field 2 Header				=	30 Character String
'UserField3Head			=	User Field 3 Header				=	30 Character String
'UserField4Head			=	User Field 4 Header				=	30 Character String
'UserField5Head			=	User Field 5 Header				=	30 Character String
'UserId					=	User ID							=	8 Character String
'CustomerPO				=	Customer Purchase Order			=	15 Character String
'Filler1													=	15 Characters
'FreightCurrFlag		=	Freight Currency Flag			=	"Y" or "N" or Blank
'DataType				=	DataType						=	"S" for Shipping Data
'ShipVia				=	Ship Via						=	20 Character String
'Carrier				=	Carrier							=	6 Character String
'ShipToName				=	Ship To Name					=	30 Character String
'ShipToAddress1			=	Ship To Address 1				=	30 Character String
'ShipToAddress2			=	Ship To Address 2				=	30 Character String
'ShipToAddress3			=	Ship To Address 3				=	30 Character String
'ShipToCity				=	Ship To City					=	25 Character String
'ShipToState			=	Ship To State					=	2 Character String
'ShipToZip				=	Ship To Zip						=	13 Character String
'ShipToCountry			=	Ship To Country					=	3 Character String
'ShipToAttention		=	Ship To Attention				=	30 Character String
'Filler2													=	11 Characters
'OrderType				=	Order Type						=	"X" For Invoice
'															=	Space for Regular
'															=	"T" for Transfer
'															=	"B" for Blanket
'OrderDiscPercentage	=	Order Discount Percentage		=	"04500" - 45% implied decimal after first character
'Salesman				=	Salesman						=	3 Character String
'Filler3													=	75 Characters
'OverrideAutoNumbering	=	Override Auto Numbering			=	"1" to override
'ShipToID				=	Ship To ID						=	6 Character String
'MarkShipment			=	Mark Shipment					=	30 Character String
'ContactName			=	Contact Name					=	30 Character String
'FromLocation			= 	Order Location					= 	2 Character String
'CashAmount				=   Cash Amount						=   000000001500000  1.50 implied decimal after 9 characters
'Project				=   Project							= 	7 Character String
'Filler4													=	63 Characters
'=======================================================================================================================

'The ORDUPLExtra datatable is structured as follows:
'Column					=	Parameter						=	Possible Values
'=======================================================================================================================
'ShipToInternationalFlag=	Ship To International Flag		=	"Y" or blank
'ShipToName				=	Ship To Name					=	40 Character String
'ShipToAddress1			=	Ship To Address 1				=	40 Character String
'ShipToAddress2			=	Ship To Address 2				=	40 Character String
'ShipToAddress3			=	Ship To Address 3				=	40 Character String
'ShipToAddress4			=	Ship To Address 4				=	40 Character String
'ShipToAddress5			=	Ship To Address 5				=	40 Character String
'ShipToCity				=	Ship To City					=	25 Character String
'ShipToState			=	Ship To State					=	2 Character String
'ShipToZip				=	Ship To Zip						=	13 Character String
'ShipToCountry			=	Ship To Country					=	25 Character String
'ShipToAttention		=	Ship To Attention				=	40 Character String
'BillToInternationalFlag=	Bill To International Flag		=	"Y" or blank
'BillToName				=	Bill To Name					=	40 Character String
'BillToAddress1			=	Bill To Address 1				=	40 Character String
'BillToAddress2			=	Bill To Address 2				=	40 Character String
'BillToAddress3			=	Bill To Address 3				=	40 Character String
'BillToAddress4			=	Bill To Address 4				=	40 Character String
'BillToAddress5			=	Bill To Address 5				=	40 Character String
'BillToCity				=	Bill To City					=	25 Character String
'BillToState			=	Bill To State					=	2 Character String
'BillToZip				=	Bill To Zip						=	13 Character String
'BillToCountry			=	Bill To Country					=	25 Character String
'BillToAttention		=	Bill To Attention				=	40 Character String
'ContactEmail			=	Contact Email					=	100 Character String
'ContactPhone			=	Contact Phone					=	20 Character String
'ExtraTextLine1			=	Text Line 1						=	30 Character String
'ExtraTextLine2			=	Text Line 2						=	30 Character String
'ExtraTextLine3			=	Text Line 3						=	30 Character String
'ExtraTextLine4			=	Text Line 4						=	30 Character String
'ExtraTextLine5			=	Text Line 5						=	30 Character String
'ExtraTextLine6			=	Text Line 6						=	30 Character String
'ExtraTextLine7			=	Text Line 7						=	30 Character String
'ExtraTextLine8			=	Text Line 8						=	30 Character String
'ExtraTextLine9			=	Text Line 9						=	30 Character String
'ExtraTextLine10		=	Text Line 10					=	30 Character String
'TextPosition			=	Text Position					=	"H" for Header
'															=	"F" for Footer
'ApplyTextToSalesOrder	=	Apply Text To SalesOrder		=	"Y" or Blank
'ApplyTextToPackList	=	Apply Text To Packlist			=	"Y" or Blank
'ApplyTextToInvoice		=	Apply Text To Invoice			=	"Y" or Blank
'ApplyTextToQuote		=	Apply Text To Quote				=	"Y" or Blank
'ApplyTextToRouter		=	Apply Text To Router			=	"Y" or Blank
'ApplyTextToWO			=	Apply Text To WO				=	"Y" or Blank
'OrderSort				=	Order Sort						=	20 Characters
'OrderSort2				=	Order Sort 2					=	20 Characters
'Filler														=	1960 Characters
'=======================================================================================================================

'The ORDUPLLines datatable is structured as follows:
'Column					=	Parameter						=	Possible Values
'=======================================================================================================================
'LineNumber				=	Line Number						=	"001" - Line Number 1
'Filler1													=	1 Character
'QtyOrdered				=	Quantity Ordered 				=	"0000000010000" - Quantity of 1 implied decimal after 9 characters
'Weight					=	Weight							=	"0000001000" - Weight of 1 implied decimal after 7 characters
'UM						=	Unit of Measure					=	2 Character String
'PartNumber				=	Part Number						=	17 Character String
'PartRev				=	Part Revision					=	3 Character String
'Filler2													=	18 Characters
'PartLoc				=	Part Location					=	2 Character String
'QuotedPrice			=	Quoted Price					=	"0000000001000000" - Price of 1 implied decimal after 10 characters (if price sent must be in customer's currency)
'OverridePrice			=	Override Price					=	"0000000001000000" - Price of 1 implied decimal after 10 characters (if price sent must be in customer's currency)
'Cost					=	Cost							=	"0000000001000000" - Cost of 1 implied decimal after 10 characters (if cost must be in company's currency)
'PartDesc				=	Part Description				=	30 Character String
'PL						=	Product Line					=	3 Character String
'LineOrderDate			=	Line Order Date					=	"CCYYMMDD"
'LinePromiseDate		=	Line Promise Date				=	"CCYYMMDD"
'UserField1				=	User Field 1					=	30 Character String
'UserField2				=	User Field 2					=	30 Character String
'UserField3				=	User Field 3					=	30 Character String
'UserField4				=	User Field 4					=	30 Character String
'UserField5				=	User Field 5					=	30 Character String
'Extension				=	Extension						=	"0000000001000000" - Extension of 1 implied decimal after 10 characters (If extended amount sent must be in customer's currency)
'NoDeliveryBeforeDate	=	No Delivery Before Date			=	"CCYYMMDD"
'MustDeliverByDate		=	Must Deliver By Date			=	"CCYYMMDD"
'DataType				=	Data Type						=	"T" for sales order Text
'TextLine1				=	Text Line 1						=	30 Character String
'TextLine2				=	Text Line 2						=	30 Character String
'TextLine3				=	Text Line 3						=	30 Character String
'TextLine4				=	Text Line 4						=	30 Character String
'TextLine5				=	Text Line 5						=	30 Character String
'TextLine6				=	Text Line 6						=	30 Character String
'TextLine7				=	Text Line 7						=	30 Character String
'TextLine8				=	Text Line 8						=	30 Character String
'TextLine9				=	Text Line 9						=	30 Character String
'TextLine10				=	Text Line 10					=	30 Character String
'TaxStatusFlag			=	Tax Status Flag					=	"E" for Exempt
'															=	"T" for Taxable
'LineType				=	Line Type						=	"B" for Buyout
'															=	"D" for Dropship
'															=	"S" for Standard
'															=	"C" for Consignment
'NegativeFlag			=	Negative Flag					=	"1" Order Quantity is Negative
'PriceFlag				=	Price Flag						=	"1" Accept Zero Price for Line
'SufficientInvCheck		=	Sufficient Inventory Check		=	"1" Check to make sure inventory level is sufficient
'SurveyNo				=	Survey Number					=	"00000001"
'RouterValFlag			=	Router Validate Flag			=	"V" for Validate
'															=	"B" for Buyout
'															=	"N" for No Validate
'Router					=	Router							=	20 Characters
'RouterSeq				=	Router Sequence					=	"000001"
'StockXRef				=	Stock Cross Reference			=	1 Character String
'OriginalOrd			=	Original Order					=	"0000001"
'OriginalLine			=	Original Line					=	"001"
'Length					=	Length							=	"000000010000" - 1 Length implied decimal after 8 characters
'Width					=	Width							=	"000000010000" - 1 Width implied decimal after 8 characters
'CurrFlag				=	Currency Flag					=	"Y" Company's Currency
'															=	Blank Orders Currency
'OrderDiscPercentage	=	Order Discount Percentage		=	"00500" - 5% implied decimal after the first character
'Filler3													=	86 Characters
'=======================================================================================================================
V.Global.sORDUPLError.Declare(String)

F.Data.DataTable.Create("ORDUPL",True)
F.Data.DataTable.AddColumn("ORDUPL","Transaction","String","O")
F.Data.DataTable.AddColumn("ORDUPL","CustomerNo","String","       ")
F.Data.DataTable.AddColumn("ORDUPL","OrderNumber","String","       ")
F.Data.DataTable.AddColumn("ORDUPL","Freight","String","0000000000")
F.Data.DataTable.AddColumn("ORDUPL","TaxFreightFlag","String"," ")
F.Data.DataTable.AddColumn("ORDUPL","FreightPerPiece","String"," ")
F.Data.DataTable.AddColumn("ORDUPL","OrderDueDate","String","00000000")
F.Data.DataTable.AddColumn("ORDUPL","OrderDate","String","00000000")
F.Data.DataTable.AddColumn("ORDUPL","UserField1Head","String","                              ")
F.Data.DataTable.AddColumn("ORDUPL","UserField2Head","String","                              ")
F.Data.DataTable.AddColumn("ORDUPL","UserField3Head","String","                              ")
F.Data.DataTable.AddColumn("ORDUPL","UserField4Head","String","                              ")
F.Data.DataTable.AddColumn("ORDUPL","UserField5Head","String","                              ")
F.Data.DataTable.AddColumn("ORDUPL","UserId","String","        ")
F.Data.DataTable.AddColumn("ORDUPL","CustomerPO","String","               ")
F.Data.DataTable.AddColumn("ORDUPL","Filler1","String","               ")
F.Data.DataTable.AddColumn("ORDUPL","FreightCurrFlag","String"," ")
F.Data.DataTable.AddColumn("ORDUPL","DataType","String","S")
F.Data.DataTable.AddColumn("ORDUPL","ShipVia","String","                     ")
F.Data.DataTable.AddColumn("ORDUPL","Carrier","String","      ")
F.Data.DataTable.AddColumn("ORDUPL","ShipToName","String","                              ")
F.Data.DataTable.AddColumn("ORDUPL","ShipToAddress1","String","                              ")
F.Data.DataTable.AddColumn("ORDUPL","ShipToAddress2","String","                              ")
F.Data.DataTable.AddColumn("ORDUPL","ShipToAddress3","String","                              ")
F.Data.DataTable.AddColumn("ORDUPL","ShipToCity","String","                         ")
F.Data.DataTable.AddColumn("ORDUPL","ShipToState","String","  ")
F.Data.DataTable.AddColumn("ORDUPL","ShipToZip","String","             ")
F.Data.DataTable.AddColumn("ORDUPL","ShipToCountry","String","   ")
F.Data.DataTable.AddColumn("ORDUPL","ShipToAttention","String","                              ")
F.Data.DataTable.AddColumn("ORDUPL","Filler2","String","           ")
F.Data.DataTable.AddColumn("ORDUPL","OrderType","String"," ")
F.Data.DataTable.AddColumn("ORDUPL","OrderDiscPercentage","String","00000")
F.Data.DataTable.AddColumn("ORDUPL","Salesman","String","   ")
F.Data.DataTable.AddColumn("ORDUPL","Filler3","String","                                                                           ")
F.Data.DataTable.AddColumn("ORDUPL","OverrideAutoNumbering","String"," ")
F.Data.DataTable.AddColumn("ORDUPL","ShipToID","String","      ")
F.Data.DataTable.AddColumn("ORDUPL","MarkShipment","String","                              ")
F.Data.DataTable.AddColumn("ORDUPL","ContactName","String","                              ")
F.Data.DataTable.AddColumn("ORDUPL","FromLocation","String","  ")
f.Data.DataTable.AddColumn("ORDUPL","CashAmount","String","000000000000000")
f.Data.DataTable.AddColumn("ORDUPL","Project","String","       ")
F.Data.DataTable.AddColumn("ORDUPL","Filler4","String","?")

'ORDUPLExtra
F.Data.DataTable.Create("ORDUPLExtra",True)
F.Data.DataTable.AddColumn("ORDUPLExtra","ShipToInternationalFlag","String"," ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ShipToName","String","                                        ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ShipToAddress1","String","                                        ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ShipToAddress2","String","                                        ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ShipToAddress3","String","                                        ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ShipToAddress4","String","                                        ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ShipToAddress5","String","                                        ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ShipToCity","String","                         ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ShipToState","String","  ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ShipToZip","String","             ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ShipToCountry","String","                         ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ShipToAttention","String","                                        ")
F.Data.DataTable.AddColumn("ORDUPLExtra","BillToInternationalFlag","String"," ")
F.Data.DataTable.AddColumn("ORDUPLExtra","BillToName","String","                                        ")
F.Data.DataTable.AddColumn("ORDUPLExtra","BillToAddress1","String","                                        ")
F.Data.DataTable.AddColumn("ORDUPLExtra","BillToAddress2","String","                                        ")
F.Data.DataTable.AddColumn("ORDUPLExtra","BillToAddress3","String","                                        ")
F.Data.DataTable.AddColumn("ORDUPLExtra","BillToAddress4","String","                                        ")
F.Data.DataTable.AddColumn("ORDUPLExtra","BillToAddress5","String","                                        ")
F.Data.DataTable.AddColumn("ORDUPLExtra","BillToCity","String","                         ")
F.Data.DataTable.AddColumn("ORDUPLExtra","BillToState","String","  ")
F.Data.DataTable.AddColumn("ORDUPLExtra","BillToZip","String","             ")
F.Data.DataTable.AddColumn("ORDUPLExtra","BillToCountry","String","                         ")
F.Data.DataTable.AddColumn("ORDUPLExtra","BillToAttention","String","                                        ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ContactEmail","String","                                                                                                    ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ContactPhone","String","                    ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ExtraTextLine1","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ExtraTextLine2","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ExtraTextLine3","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ExtraTextLine4","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ExtraTextLine5","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ExtraTextLine6","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ExtraTextLine7","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ExtraTextLine8","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ExtraTextLine9","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ExtraTextLine10","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLExtra","TextPosition","String"," ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ApplyTextToSalesOrder","String"," ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ApplyTextToPackList","String"," ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ApplyTextToInvoice","String"," ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ApplyTextToQuote","String"," ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ApplyTextToRouter","String"," ")
F.Data.DataTable.AddColumn("ORDUPLExtra","ApplyTextToWO","String"," ")
F.Data.DataTable.AddColumn("ORDUPLExtra","OrderSort","String","                    ")
F.Data.DataTable.AddColumn("ORDUPLExtra","OrderSort2","String","                    ")
F.Data.DataTable.AddColumn("ORDUPLExtra","Filler","String

'ORDUPLLines
F.Data.DataTable.Create("ORDUPLLines",True)
F.Data.DataTable.AddColumn("ORDUPLLines","LineNumber","String","   ")
F.Data.DataTable.AddColumn("ORDUPLLines","Filler1","String"," ")
F.Data.DataTable.AddColumn("ORDUPLLines","QtyOrdered","String","0000000000000")
F.Data.DataTable.AddColumn("ORDUPLLines","Weight","String","0000000000")
F.Data.DataTable.AddColumn("ORDUPLLines","UM","String","  ")
F.Data.DataTable.AddColumn("ORDUPLLines","PartNumber","String","                    ")
F.Data.DataTable.AddColumn("ORDUPLLines","PartRev","String","   ")
F.Data.DataTable.AddColumn("ORDUPLLines","Filler2","String","                  ")
F.Data.DataTable.AddColumn("ORDUPLLines","PartLoc","String","  ")
F.Data.DataTable.AddColumn("ORDUPLLines","QuotedPrice","String","0000000000000000")
F.Data.DataTable.AddColumn("ORDUPLLines","OverridePrice","String","0000000000000000")
F.Data.DataTable.AddColumn("ORDUPLLines","Cost","String","0000000000000000")
F.Data.DataTable.AddColumn("ORDUPLLines","PartDesc","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLLines","PL","String","   ")
F.Data.DataTable.AddColumn("ORDUPLLines","LineOrderDate","String","        ")
F.Data.DataTable.AddColumn("ORDUPLLines","LinePromiseDate","String","        ")
F.Data.DataTable.AddColumn("ORDUPLLines","UserField1","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLLines","UserField2","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLLines","UserField3","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLLines","UserField4","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLLines","UserField5","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLLines","Extension","String","0000000000000000")
F.Data.DataTable.AddColumn("ORDUPLLines","NoDeliveryBeforeDate","String","        ")
F.Data.DataTable.AddColumn("ORDUPLLines","MustDeliverByDate","String","        ")
F.Data.DataTable.AddColumn("ORDUPLLines","DataType","String"," ")
F.Data.DataTable.AddColumn("ORDUPLLines","TextLine1","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLLines","TextLine2","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLLines","TextLine3","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLLines","TextLine4","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLLines","TextLine5","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLLines","TextLine6","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLLines","TextLine7","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLLines","TextLine8","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLLines","TextLine9","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLLines","TextLine10","String","                              ")
F.Data.DataTable.AddColumn("ORDUPLLines","TaxStatusFlag","String"," ")
F.Data.DataTable.AddColumn("ORDUPLLines","LineType","String"," ")
F.Data.DataTable.AddColumn("ORDUPLLines","NegativeFlag","String"," ")
F.Data.DataTable.AddColumn("ORDUPLLines","PriceFlag","String"," ")
F.Data.DataTable.AddColumn("ORDUPLLines","SufficientInvCheck","String"," ")
F.Data.DataTable.AddColumn("ORDUPLLines","SurveyNo","String","00000000")
F.Data.DataTable.AddColumn("ORDUPLLines","RouterValFlag","String"," ")
F.Data.DataTable.AddColumn("ORDUPLLines","Router","String","                    ")
F.Data.DataTable.AddColumn("ORDUPLLines","RouterSeq","String","000000")
F.Data.DataTable.AddColumn("ORDUPLLines","StockXRef","String"," ")
F.Data.DataTable.AddColumn("ORDUPLLines","OriginalOrd","String","       ")
F.Data.DataTable.AddColumn("ORDUPLLines","OriginalLine","String","   ")
F.Data.DataTable.AddColumn("ORDUPLLines","Length","String","000000000000")
F.Data.DataTable.AddColumn("ORDUPLLines","Width","String","000000000000")
F.Data.DataTable.AddColumn("ORDUPLLines","CurrFlag","String"," ")
F.Data.DataTable.AddColumn("ORDUPLLines","OrderDiscPercentage","String","00000")
F.Data.DataTable.AddColumn("ORDUPLLines","Filler3","String","                                                                                      ")
Program.Sub.WebImporterPreflight.End

Program.Sub.ORDUPLCreateFile.Start
F.Intrinsic.Control.Try
	V.Local.sRet.Declare(String)
	V.Local.iCount.Declare(Long)
	V.Local.sFileContent.Declare(String)
	V.Local.sFileName.Declare(String)
	V.Local.sFilePath.Declare(String)
	V.Local.sHeader.Declare(String)
	V.Local.sExtra.Declare(String)
	V.Local.sDelimiter.Declare(String)
	V.Local.sDataViewContent.Declare(String)
	v.Local.sDate.Declare
	v.Local.sCompanyCode.Declare
	v.Local.sUser.Declare
	v.Local.sQuoteNumber.Declare	

	'First we are going to pad all the fields that are in the datatables with the data that is already in it.
	'Header
	F.Intrinsic.Control.For(V.Local.iCount,0,V.DataTable.ORDUPL.RowCount--,1)
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).Transaction!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"Transaction",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).CustomerNo!FieldVal," ",7,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"CustomerNo",V.Local.sRet)
		
		F.Intrinsic.String.LPad(V.DataTable.ORDUPL(V.Local.iCount).OrderNumber!FieldVal,"0",7,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"OrderNumber",V.Local.sRet)
		
		F.Intrinsic.String.LPad(V.DataTable.ORDUPL(V.Local.iCount).Freight!FieldVal,"0",10,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"Freight",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).TaxFreightFlag!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"TaxFreightFlag",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).FreightPerPiece!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"FreightPerPiece",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).OrderDueDate!FieldVal," ",8,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"OrderDueDate",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).OrderDate!FieldVal," ",8,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"OrderDate",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).UserField1Head!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"UserField1Head",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).UserField2Head!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"UserField2Head",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).UserField3Head!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"UserField3Head",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).UserField4Head!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"UserField4Head",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).UserField5Head!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"UserField5Head",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).UserId!FieldVal," ",8,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"UserId",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).CustomerPO!FieldVal," ",15,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"CustomerPO",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).Filler1!FieldVal," ",15,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"Filler1",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).FreightCurrFlag!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"FreightCurrFlag",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).DataType!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"DataType",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).ShipVia!FieldVal," ",20,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"ShipVia",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).Carrier!FieldVal," ",6,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"Carrier",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).ShipToName!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"ShipToName",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).ShipToAddress1!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"ShipToAddress1",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).ShipToAddress2!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"ShipToAddress2",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).ShipToAddress3!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"ShipToAddress3",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).ShipToCity!FieldVal," ",25,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"ShipToCity",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).ShipToState!FieldVal," ",2,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"ShipToState",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).ShipToZip!FieldVal," ",13,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"ShipToZip",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).ShipToCountry!FieldVal," ",3,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"ShipToCountry",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).ShipToAttention!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"ShipToAttention",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).Filler2!FieldVal," ",11,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"Filler2",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).OrderType!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"OrderType",V.Local.sRet)
		
		F.Intrinsic.String.LPad(V.DataTable.ORDUPL(V.Local.iCount).OrderDiscPercentage!FieldVal,"0",5,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"OrderDiscPercentage",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).Salesman!FieldVal," ",3,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"Salesman",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).Filler3!FieldVal," ",75,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"Filler3",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).OverrideAutoNumbering!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"OverrideAutoNumbering",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).ShipToID!FieldVal," ",6,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"ShipToID",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).MarkShipment!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"MarkShipment",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).ContactName!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"ContactName",V.Local.sRet)
		
		f.Intrinsic.String.RPad(v.DataTable.ORDUPL(v.Local.iCount).FromLocation!FieldVal," ",2,v.Local.sRet)
		f.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"FromLocation",V.Local.sRet)
		
		f.Intrinsic.String.Format(v.DataTable.ORDUPL(v.Local.iCount).CashAmount!FieldVal,"000000000.000000",v.Local.sRet)
		f.Intrinsic.String.Replace(v.Local.sRet,".","",v.Local.sRet)
		f.Data.DataTable.SetValue("ORDUPL",v.Local.iCount,"CashAmount",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).Project!FieldVal," ",7,v.Local.sRet)
		f.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"Project",v.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPL(V.Local.iCount).Filler4!FieldVal," ",63,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPL",V.Local.iCount,"Filler4",V.Local.sRet)
		
	F.Intrinsic.Control.Next(V.Local.iCount)
	
	'Extra
	F.Intrinsic.Control.For(V.Local.iCount,0,V.DataTable.ORDUPLExtra.RowCount--,1)
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ShipToInternationalFlag!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ShipToInternationalFlag",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ShipToName!FieldVal," ",40,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ShipToName",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ShipToAddress1!FieldVal," ",40,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ShipToAddress1",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ShipToAddress2!FieldVal," ",40,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ShipToAddress2",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ShipToAddress3!FieldVal," ",40,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ShipToAddress3",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ShipToAddress4!FieldVal," ",40,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ShipToAddress4",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ShipToAddress5!FieldVal," ",40,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ShipToAddress5",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ShipToCity!FieldVal," ",25,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ShipToCity",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ShipToState!FieldVal," ",2,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ShipToState",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ShipToZip!FieldVal," ",13,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ShipToZip",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ShipToCountry!FieldVal," ",25,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ShipToCountry",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ShipToAttention!FieldVal," ",40,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ShipToAttention",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).BillToInternationalFlag!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"BillToInternationalFlag",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).BillToName!FieldVal," ",40,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"BillToName",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).BillToAddress1!FieldVal," ",40,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"BillToAddress1",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).BillToAddress2!FieldVal," ",40,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"BillToAddress2",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).BillToAddress3!FieldVal," ",40,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"BillToAddress3",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).BillToAddress4!FieldVal," ",40,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"BillToAddress4",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).BillToAddress5!FieldVal," ",40,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"BillToAddress5",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).BillToCity!FieldVal," ",25,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"BillToCity",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).BillToState!FieldVal," ",2,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"BillToState",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).BillToZip!FieldVal," ",13,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"BillToZip",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).BillToCountry!FieldVal," ",25,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"BillToCountry",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).BillToAttention!FieldVal," ",40,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"BillToAttention",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ContactEmail!FieldVal," ",100,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ContactEmail",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ContactPhone!FieldVal," ",20,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ContactPhone",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ExtraTextLine1!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ExtraTextLine1",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ExtraTextLine2!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ExtraTextLine2",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ExtraTextLine3!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ExtraTextLine3",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ExtraTextLine4!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ExtraTextLine4",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ExtraTextLine5!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ExtraTextLine5",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ExtraTextLine6!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ExtraTextLine6",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ExtraTextLine7!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ExtraTextLine7",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ExtraTextLine8!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ExtraTextLine8",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ExtraTextLine9!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ExtraTextLine9",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ExtraTextLine10!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ExtraTextLine10",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).TextPosition!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"TextPosition",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ApplyTextToSalesOrder!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ApplyTextToSalesOrder",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ApplyTextToPackList!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ApplyTextToPackList",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ApplyTextToInvoice!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ApplyTextToInvoice",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ApplyTextToQuote!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ApplyTextToQuote",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ApplyTextToRouter!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ApplyTextToRouter",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).ApplyTextToWO!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"ApplyTextToWO",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).OrderSort!FieldVal," ",20,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"OrderSort",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).OrderSort2!FieldVal," ",20,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"OrderSort2",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLExtra(V.Local.iCount).Filler!FieldVal," ",1960,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLExtra",V.Local.iCount,"Filler",V.Local.sRet)
		
	F.Intrinsic.Control.Next(V.Local.iCount)
	
	'Lines
	F.Intrinsic.Control.For(V.Local.iCount,0,V.DataTable.ORDUPLLines.RowCount--,1)
	
		F.Intrinsic.String.LPad(V.DataTable.ORDUPLLines(V.Local.iCount).LineNumber!FieldVal,"0",3,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"LineNumber",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).Filler1!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"Filler1",V.Local.sRet)
		
		F.Intrinsic.String.LPad(V.DataTable.ORDUPLLines(V.Local.iCount).QtyOrdered!FieldVal,"0",13,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"QtyOrdered",V.Local.sRet)
		
		F.Intrinsic.String.LPad(V.DataTable.ORDUPLLines(V.Local.iCount).Weight!FieldVal,"0",10,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"Weight",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).UM!FieldVal," ",2,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"UM",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).PartNumber!FieldVal," ",17,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"PartNumber",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).PartRev!FieldVal," ",3,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"PartRev",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).Filler2!FieldVal," ",18,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"Filler2",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).PartLoc!FieldVal," ",2,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"PartLoc",V.Local.sRet)
		
		F.Intrinsic.String.LPad(V.DataTable.ORDUPLLines(V.Local.iCount).QuotedPrice!FieldVal,"0",16,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"QuotedPrice",V.Local.sRet)
		
		F.Intrinsic.String.LPad(V.DataTable.ORDUPLLines(V.Local.iCount).OverridePrice!FieldVal,"0",16,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"OverridePrice",V.Local.sRet)
		
		F.Intrinsic.String.LPad(V.DataTable.ORDUPLLines(V.Local.iCount).Cost!FieldVal,"0",16,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"Cost",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).PartDesc!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"PartDesc",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).PL!FieldVal," ",3,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"PL",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).LineOrderDate!FieldVal," ",8,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"LineOrderDate",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).LinePromiseDate!FieldVal," ",8,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"LinePromiseDate",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).UserField1!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"UserField1",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).UserField2!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"UserField2",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).UserField3!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"UserField3",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).UserField4!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"UserField4",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).UserField5!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"UserField5",V.Local.sRet)
		
		F.Intrinsic.String.LPad(V.DataTable.ORDUPLLines(V.Local.iCount).Extension!FieldVal,"0",16,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"Extension",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).NoDeliveryBeforeDate!FieldVal," ",8,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"NoDeliveryBeforeDate",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).MustDeliverByDate!FieldVal," ",8,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"MustDeliverByDate",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).DataType!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"DataType",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).TextLine1!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"TextLine1",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).TextLine2!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"TextLine2",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).TextLine3!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"TextLine3",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).TextLine4!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"TextLine4",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).TextLine5!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"TextLine5",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).TextLine6!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"TextLine6",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).TextLine7!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"TextLine7",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).TextLine8!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"TextLine8",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).TextLine9!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"TextLine9",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).TextLine10!FieldVal," ",30,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"TextLine10",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).TaxStatusFlag!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"TaxStatusFlag",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).LineType!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"LineType",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).NegativeFlag!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"NegativeFlag",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).PriceFlag!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"PriceFlag",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).SufficientInvCheck!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"SufficientInvCheck",V.Local.sRet)
		
		F.Intrinsic.String.LPad(V.DataTable.ORDUPLLines(V.Local.iCount).SurveyNo!FieldVal,"0",8,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"SurveyNo",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).RouterValFlag!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"RouterValFlag",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).Router!FieldVal," ",20,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"Router",V.Local.sRet)
		
		F.Intrinsic.String.LPad(V.DataTable.ORDUPLLines(V.Local.iCount).RouterSeq!FieldVal,"0",6,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"RouterSeq",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).StockXRef!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"StockXRef",V.Local.sRet)
		
		F.Intrinsic.String.LPad(V.DataTable.ORDUPLLines(V.Local.iCount).OriginalOrd!FieldVal,"0",7,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"OriginalOrd",V.Local.sRet)
		
		F.Intrinsic.String.LPad(V.DataTable.ORDUPLLines(V.Local.iCount).OriginalLine!FieldVal,"0",3,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"OriginalLine",V.Local.sRet)
		
		F.Intrinsic.String.LPad(V.DataTable.ORDUPLLines(V.Local.iCount).Length!FieldVal,"0",12,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"Length",V.Local.sRet)
		
		F.Intrinsic.String.LPad(V.DataTable.ORDUPLLines(V.Local.iCount).Width!FieldVal,"0",12,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"Width",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).CurrFlag!FieldVal," ",1,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"CurrFlag",V.Local.sRet)
		
		F.Intrinsic.String.LPad(V.DataTable.ORDUPLLines(V.Local.iCount).OrderDiscPercentage!FieldVal,"0",5,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"OrderDiscPercentage",V.Local.sRet)
		
		F.Intrinsic.String.RPad(V.DataTable.ORDUPLLines(V.Local.iCount).Filler3!FieldVal," ",86,V.Local.sRet)
		F.Data.DataTable.SetValue("ORDUPLLines",V.Local.iCount,"Filler3",V.Local.sRet)
		
	F.Intrinsic.Control.Next(V.Local.iCount)
	
	'The file format that ORDUPL requires is HEADER-Line-EXTRA, where HEADER and EXTRA are the same every line. To accomplish this we will make a very strange outer delimter which we will use with the DataView.ToString method.
	'The delimiter will be EXTRA+New Line+HEADER. This will create a string which has exactly what we need for the file content except there will be no HEADER at the beginning and no EXTRA at the end. We will just append those manually.
	
	'Here we extract the HEADER and EXTRA from the datatables.
	F.Data.DataView.Create("ORDUPL","ORDUPLView",22)
	F.Data.DataView.ToString("ORDUPL","ORDUPLView","",V.Ambient.NewLine,V.Local.sHeader)
	F.Data.DataView.Close("ORDUPL","ORDUPLView")
	
	F.Data.DataView.Create("ORDUPLExtra","ORDUPLExtraView",22)
	F.Data.DataView.ToString("ORDUPLExtra","ORDUPLExtraView","",V.Ambient.NewLine,V.Local.sExtra)
	F.Data.DataView.Close("ORDUPLExtra","ORDUPLExtraView")
	
	'And now we create the delimiter 
	F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sExtra,V.Ambient.NewLine,V.Local.sHeader,V.Local.sDelimiter)
	
	'Extract data for lines using the appropriate delimiter
	F.Data.DataView.Create("ORDUPLLines","ORDUPLLinesView",22)
	F.Data.DataView.ToString("ORDUPLLines","ORDUPLLinesView","",V.Local.sDelimiter,V.Local.sFileContent)
	F.Data.DataView.Close("ORDUPLLines","ORDUPLLinesView")
	
	'And now manually append HEADER AND EXTRA to the file content since the first row won't have the HEADER and the last row won't have the EXTRA
	F.Intrinsic.String.Build("{0}{1}{2}{3}",V.Local.sHeader,V.Local.sFileContent,V.Local.sExtra,V.Ambient.NewLine,V.Local.sFileContent)
	
	'Now we need to write the file with a unique file name. We use customer name+date+time in the file name to accomplish this. If we happen to clash with another order then the writefile sub will prevent us from overwriting the existing file

	v.Local.sCompanyCode.Set(v.Caller.CompanyCode.Trim)
	v.Local.sUser.Set(v.Caller.User.Trim)	
	v.Local.sQuoteNumber.Set(v.Args.sQuoteNumber)
	
	v.Local.sDate.Set(v.Ambient.Now.FormatYYYYMMDD)
	F.Intrinsic.String.Build("{0}{1}{2}_{3}_{4}.txt",v.Local.sQuoteNumber,v.Local.sUser,v.Caller.Terminal,v.Local.sDate.Right6,v.Ambient.Now.FormatHHNNSS,V.Local.sFileName)
	F.Intrinsic.String.Build("{0}\{1}",v.Global.sWebImporterDir,v.Local.sFileName,V.Local.sFilePath)	
		
	F.Intrinsic.File.String2File(V.Local.sFilePath,V.Local.sFileContent)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(CatchErrorORDUPL, "Sub", V.Ambient.CurrentSubroutine, "ErrNo", V.Ambient.ErrorNumber, "ErrDesc", V.Ambient.ErrorDescription)
F.Intrinsic.Control.EndTry
Program.Sub.ORDUPLCreateFile.End

Program.Sub.Main.Start
F.Intrinsic.Control.Try	
	v.Local.sInput.Declare
	v.Local.sHold.Declare		
''	
'	f.Intrinsic.Debug.BenchmarkModeEnable
'	f.Intrinsic.Debug.BenchmarkThreshold(1000)	

	f.Intrinsic.Control.CallSub(Cutlist_Option)		
			
	f.ODBC.Connection!conx.OpencompanyConnection(3000)
	
	f.Intrinsic.Control.CallSub(Get_First_Options)
	
	f.Intrinsic.Control.CallSub(Adapter_2019_1)
	
	F.Intrinsic.Control.If(V.Caller.Switches,=,"ADM4986",or,v.Caller.Hook,=,-9)
		gui.Debug..Visible(True)
		gui.Debug..WaitForDismiss
		v.Local.sInput.Set(v.Screen.Debug!txtPass.Text.Trim)
		f.Intrinsic.Control.If(v.Local.sInput.UCase,=,"NOW")
			gui.Debug.txtPass.Text("")
			'Always put debugger here, just in case you clear by Project > Clear All InvokeDebuggers (Ctrl + Shift + R) and Clear All Breakpoints (Ctrl + Shift + B)
			Function.Intrinsic.Debug.InvokeDebugger
			Function.Intrinsic.Debug.Stop		
		f.Intrinsic.Control.EndIf		
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.BlockEvents	
	F.Intrinsic.UI.InvokeWaitDialog("Initializing .......")	
	
	f.Intrinsic.UI.ChangeWaitStatus("Building Required Datatables .......",1,1,10)
	'GCG_4986_DataTab.lib/Build_Required_DataTables (create tables:  MATERIAL,WCENTER,OPERATIONS,OUTS,BOM,CHILD,BUILDQTY)	
	f.Intrinsic.Control.CallSub(Build_Required_DataTables)
	
	
	'Check Web Importer Directory
	F.Intrinsic.Control.CallSub(Check_WebImporter_Directory)

	f.Intrinsic.UI.ChangeWaitStatus("Building Required Security/Folder/Database/Logo .......",1,1,10)
	f.Intrinsic.Control.CallSub(Check_Security_Groups)
	f.Intrinsic.Control.CallSub(Check_And_Create_Tables)	
	f.Intrinsic.Control.CallSub(Check_Folder)
	f.Intrinsic.Control.CallSub(Set_Logo)	
	
	'check user permissions
	f.Intrinsic.UI.ChangeWaitStatus("Getting Permissions/Options, clear UserLocks .......",2,1,10)
	f.Intrinsic.Control.CallSub(Permissions)	
	f.Intrinsic.Control.CallSub(GetOptions)	
	
	'f.Intrinsic.Control.CallSub(ClearUserLocks)
	f.Intrinsic.Control.CallSub(ContextMenu_MainGrid)

	'Quantities grid	
	f.Intrinsic.UI.ChangeWaitStatus("Building data ....... Quantities grid",3,1,10)	
	f.Intrinsic.Control.CallSub(BuildV_Qty)
	f.Intrinsic.Control.CallSub(Get_BookMarks)
	f.Intrinsic.Control.CallSub(BuildV_BookMarks)
	f.Intrinsic.Control.CallSub(BuildV_BookM)
	
	'building the inventory list
	f.Intrinsic.UI.ChangeWaitStatus("Building data ....... Getting Core Source - Materials",3,1,10)	
	F.Intrinsic.Control.CallSub(BuildV_Material)	
	f.Intrinsic.Control.CallSub(getMaterial)	
	
	'building work center list
	f.Intrinsic.UI.ChangeWaitStatus("Building data ....... Getting Core Source - Work Centers / Work Groups / Labor Op Codes",4,1,10)
	f.Intrinsic.Control.CallSub(buildV_WCenter)	
	'building work group list
	f.Intrinsic.Control.CallSub(buildV_OPERATIONS)
	'Get data for WC and operation OpCodes
	f.Intrinsic.Control.CallSub(getLabor)
	
	'building list of outside services
	f.Intrinsic.UI.ChangeWaitStatus("Building data ....... Getting Core Source - Outside Service Codes",5,1,10)
	f.Intrinsic.Control.CallSub(BuildV_Outs)
	f.Intrinsic.Control.CallSub(getOutside)	
	
	'builds the structure of the BOM datatable and dataview
	f.Intrinsic.UI.ChangeWaitStatus("Building Router grid and Quote grid...",6,1,10)
	f.Intrinsic.Control.CallSub(BuildV_Child)
	gui.form.GGC_Bom.MainView("GV_Child")
	
	'Get Quote Decimal setting	
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"SDECIMALQUOTEQTY",4986,1032,5,"0",v.Local.sHold)
	f.Intrinsic.Control.If(v.Local.sHold.Trim,=,"")
		v.Local.sHold.Set("0")
	f.Intrinsic.Control.EndIf
	gui.Form.txtQtyDec.Text(v.Local.sHold)	
	f.Intrinsic.Control.CallSub(BuildV_Quote)	
	
	f.Intrinsic.Control.CallSub(GridSeqViews)
	
	'builds a small set of dictionaries used for auto fill.
	f.Intrinsic.UI.ChangeWaitStatus("Building Dictionaries...",7,1,10)
	f.Intrinsic.Control.CallSub(build_Dictionaries)	
	gui.Form.ddlSourceCategory.ClearItems
	gui.Form.ddlSourceCategory.AddItems("DICTIONARY","ddLCategr")	
	gui.Form.ddlSourceCategory.Text("NORMAL")
	
	'ddls
	gui.Form.ddlBomSource.AddItem("")
	gui.Form.ddlBomSource.AddItem("MFG-STOCK")
	gui.Form.ddlBomSource.AddItem("MFG-JOB")
	gui.Form.ddlBomSource.AddItem("PUR-STOCK")
	gui.Form.ddlBomSource.AddItem("PUR-JOB")
	gui.Form.ddlBomSource.ListIndex(0)
	
	'load user settings - dataview settings - default field values
	f.Intrinsic.UI.ChangeWaitStatus("Deserializing grids...",8,1,10)
	'After all grids are initialized, bTableGridLoaded as a flag for serialization
	v.Global.bTableGridLoaded.Set(True)		
	f.Intrinsic.Control.CallSub(Deserialize)
	
	f.Intrinsic.UI.ChangeWaitStatus("Setting default view...",9,1,10)

	'Load dropdowns
	f.Intrinsic.Control.CallSub(Load_Dropdown_SalePersons)	
	f.Intrinsic.Control.CallSub(Bind_Form_To_Form)
	f.Intrinsic.Control.CallSub(Show_Default_Main_Form)	

	f.Intrinsic.Control.UnBlockEvents	
	f.Intrinsic.UI.CloseWaitDialog
	
	'we need an IPM handler here to work with bom compare and part number generator
	F.Intrinsic.Control.AddEventHandler("IPMDATAIN",ipmReceived)	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.Check_WebImporter_Directory.Start
F.Intrinsic.Control.Try	
	v.Local.sFile.Declare
	v.Local.bEx.Declare
	v.Local.sFileContent.Declare
	v.Local.iCnt.Declare
	v.Local.sLine.Declare
	v.Local.bWebImporter.Declare
	v.Local.bErrorDir.Declare
	v.Local.bConvertedDir.Declare
	v.Local.bUploadedDir.Declare
	v.Local.sMsg.Declare

	F.Intrinsic.String.Build("{0}\GSSParam{1}.txt",V.Caller.FilesDir,V.Caller.CompanyCode,V.Local.sFile)
	F.Intrinsic.File.Exists(V.Local.sFile,V.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx.Not)
		f.Data.DataTable.DeleteRow("MsgItemsCheck")
		f.Data.DataTable.AcceptChanges("MsgItemsCheck")
		f.Intrinsic.String.Build("Web Importer Param File GSSParam{0}.txt for Quote upload is not found.",V.Caller.CompanyCode,V.Local.sMsg)
		f.Data.DataTable.AddRow("MsgItemsCheck","Item",v.Local.sMsg)
		f.Data.DataTable.AddRow("MsgItemsCheck","Item","The file should be in Files folder")
		f.Data.DataTable.AddRow("MsgItemsCheck","Item","The content of the file should be like following, YOUR ROOT FOLDER should be a shared folder under your Global directory, and all folders mentioned in the files must be valid:")
		f.Data.DataTable.AddRow("MsgItemsCheck","Item","")
		
		f.Data.DataTable.AddRow("MsgItemsCheck","Item","***Note: Make sure to have the exact labels before the equal sign, including spaces before the equal sign.")
		
		f.Data.DataTable.AddRow("MsgItemsCheck","Item","")
		
		f.Intrinsic.String.Build("WEB ORDER DIRECTORY   = YOUR ROOT FOLDER\\{0}\\WebImporter",V.Caller.CompanyCode,V.Local.sMsg)
		f.Data.DataTable.AddRow("MsgItemsCheck","Item",v.Local.sMsg)
	
		f.Intrinsic.String.Build("WEB ERROR DIRECTORY   = YOUR ROOT FOLDER\\{0}\\WebImporter\\errors",V.Caller.CompanyCode,V.Local.sMsg)
		f.Data.DataTable.AddRow("MsgItemsCheck","Item",v.Local.sMsg)
		
		f.Intrinsic.String.Build("WEB CONVERTED DIR     = YOUR ROOT FOLDER\\{0}\\WebImporter\\converted",V.Caller.CompanyCode,V.Local.sMsg)
		f.Data.DataTable.AddRow("MsgItemsCheck","Item",v.Local.sMsg)

		f.Intrinsic.String.Build("WEB UPLOADED DIRECTORY= YOUR ROOT FOLDER\\{0}\\WebImporter\\uploaded",V.Caller.CompanyCode,V.Local.sMsg)
		f.Data.DataTable.AddRow("MsgItemsCheck","Item",v.Local.sMsg)
		
		f.Data.DataTable.AddRow("MsgItemsCheck","Item","EMAIL FROM ADDRESS    = ")
		f.Data.DataTable.AddRow("MsgItemsCheck","Item","EMAIL TO ADDRESS      = ")
		
		f.Intrinsic.String.Build("GSSParam{0}.txt not found",v.Caller.CompanyCode,v.Local.sMsg)
		f.Intrinsic.Control.CallSub(MsgUnlimittedList,"Title","Invalid Setup","MainLine",v.Local.sMsg,"Size",True,"W",20000,"H",5000)
		f.Intrinsic.Control.CallSub(Unload)
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.File.File2String(V.Local.sFile,V.Local.sFileContent)
				
	f.Intrinsic.String.Split(v.Local.sFileContent,v.Ambient.NewLine,v.Local.sFileContent)
	f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.sFileContent.UBound,1)		
		v.Local.sLine.Set(v.Local.sFileContent(v.Local.iCnt).Trim)
		f.Intrinsic.String.Split(v.Local.sLine,=,v.Local.sLine)
		
		'WEB ORDER DIRECTORY
		f.Intrinsic.Control.If(v.Local.sLine(0),=,"WEB ORDER DIRECTORY   ")
			f.Intrinsic.Control.If(v.Local.sLine.UBound,>=,1)
				f.Intrinsic.File.DirExists(v.Local.sLine(1).Trim,v.Local.bWebImporter)
				f.Intrinsic.Control.If(v.Local.bWebImporter)
					v.Global.sWebImporterDir.Set(v.Local.sLine(1).Trim)
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
		
		'WEB ORDER DIRECTORY
		f.Intrinsic.Control.If(v.Local.sLine(0),=,"WEB ERROR DIRECTORY   ")
			f.Intrinsic.Control.If(v.Local.sLine.UBound,>=,1)
				f.Intrinsic.File.DirExists(v.Local.sLine(1).Trim,v.Local.bErrorDir)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
		
		'WEB ORDER DIRECTORY
		f.Intrinsic.Control.If(v.Local.sLine(0),=,"WEB CONVERTED DIR     ")
			f.Intrinsic.Control.If(v.Local.sLine.UBound,>=,1)
				f.Intrinsic.File.DirExists(v.Local.sLine(1).Trim,v.Local.bConvertedDir)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
		
		'WEB ORDER DIRECTORY
		f.Intrinsic.Control.If(v.Local.sLine(0),=,"WEB UPLOADED DIRECTORY")
			f.Intrinsic.Control.If(v.Local.sLine.UBound,>=,1)
				f.Intrinsic.File.DirExists(v.Local.sLine(1).Trim,v.Local.bUploadedDir)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf		
		
	f.Intrinsic.Control.Next(v.Local.iCnt)
	
	f.Intrinsic.Control.If(v.Local.bWebImporter,=,False,or,v.Local.bErrorDir,=,False,v.Local.bConvertedDir,=,False,v.Local.bUploadedDir,=,False)	
	
		f.Data.DataTable.DeleteRow("MsgItemsCheck")
		f.Data.DataTable.AcceptChanges("MsgItemsCheck")
		
		f.Data.DataTable.AddRow("MsgItemsCheck","Item","Web Importer folders is invalid.")
		f.Intrinsic.String.Build("Please check if all the folders mentioned in your {0} are valid. Here is the file content:",v.Local.sFile,v.Local.sMsg)
		f.Intrinsic.String.Replace(v.Local.sMsg,"\","\\",v.Local.sMsg)
		f.Data.DataTable.AddRow("MsgItemsCheck","Item",v.Local.sMsg)
		f.Data.DataTable.AddRow("MsgItemsCheck","Item","")
		
		f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.sFileContent.UBound,1)
			f.Intrinsic.String.Replace(v.Local.sFileContent(v.Local.iCnt),"\","\\",v.Local.sMsg)
			f.Data.DataTable.AddRow("MsgItemsCheck","Item",v.Local.sMsg)
		f.Intrinsic.Control.Next(v.Local.iCnt)		
		
		f.Data.DataTable.AddRow("MsgItemsCheck","Item","")
		
		f.Data.DataTable.AddRow("MsgItemsCheck","Item","The content of the file should be like following, YOUR ROOT FOLDER should be a shared folder under your Global directory, and all folders mentioned in the files must be valid:")
		f.Data.DataTable.AddRow("MsgItemsCheck","Item","")
		
		f.Data.DataTable.AddRow("MsgItemsCheck","Item","***Note: Make sure to have the exact labels before the equal sign, including spaces before the equal sign.")
		
		f.Data.DataTable.AddRow("MsgItemsCheck","Item","")
		
		f.Intrinsic.String.Build("WEB ORDER DIRECTORY   = YOUR ROOT FOLDER\\{0}\\WebImporter",V.Caller.CompanyCode,V.Local.sMsg)
		f.Data.DataTable.AddRow("MsgItemsCheck","Item",v.Local.sMsg)
	
		f.Intrinsic.String.Build("WEB ERROR DIRECTORY   = YOUR ROOT FOLDER\\{0}\\WebImporter\\errors",V.Caller.CompanyCode,V.Local.sMsg)
		f.Data.DataTable.AddRow("MsgItemsCheck","Item",v.Local.sMsg)
		
		f.Intrinsic.String.Build("WEB CONVERTED DIR     = YOUR ROOT FOLDER\\{0}\\WebImporter\\converted",V.Caller.CompanyCode,V.Local.sMsg)
		f.Data.DataTable.AddRow("MsgItemsCheck","Item",v.Local.sMsg)

		f.Intrinsic.String.Build("WEB UPLOADED DIRECTORY= YOUR ROOT FOLDER\\{0}\\WebImporter\\uploaded",V.Caller.CompanyCode,V.Local.sMsg)
		f.Data.DataTable.AddRow("MsgItemsCheck","Item",v.Local.sMsg)
		
		f.Data.DataTable.AddRow("MsgItemsCheck","Item","EMAIL FROM ADDRESS    = ")
		f.Data.DataTable.AddRow("MsgItemsCheck","Item","EMAIL TO ADDRESS      = ")	
		
		f.Intrinsic.Control.CallSub(MsgUnlimittedList,"Title","Invalid Setup","MainLine","Folder not found","Size",True,"W",20000,"H",10000)
		f.Intrinsic.Control.CallSub(Unload)	
	
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.Check_WebImporter_Directory.End

'Essential 1*********************************************** Report Error/Debug Turn on/Catching/Serialize/Unload/Hide*********************************************
Program.Sub.Adapter_2019_1.Start
gui.Log..Visible(True)
gui.Log..WindowState(2)
gui.Log..Visible(False)	
v.Global.sEnvironmentScreenWidth.Set(v.Screen.Log.Width)
v.Global.sEnvironmentScreenHeight.Set(v.Screen.Log.Height)	

f.Intrinsic.Control.If(v.Caller.GSSVersion,>=,"2019.1")
	'gui.Form.picBomDocs.Position(90,165)
	'Gui.Form.picRtrMaster.Position(475,75)
	'Gui.Form.picBomMaster.Position(475,105)
	gui.Form.picRTRDocs.Position(40,15)
	
	Gui.Form.lblFocusParent.Position(945, 75)
	Gui.Form.lblRev.Position(1650, 75)
	Gui.Form.lblFocusDescr.Position(2925, 75)
	Gui.Form.lblSimilar.Position(30, 675)
	Gui.Form.lblRev2.Position(1650,675)
	Gui.Form.lblUM.Position(2055,675)
	Gui.Form.lblPL.Position(2520,675)
	Gui.Form.lblRtrCust.Position(2970,675)
	Gui.Form.lblComm.Position(4065,675)
	Gui.Form.lblScrap.Position(4665,675)
	Gui.Form.lblPartID.Position(5250,675)
	Gui.Form.lblDescr2.Position(45,150)
	Gui.Form.lblDescr3.Position(45,765)
	
	Gui.Form.lblBom.Position(1020,75)
	gui.Form.lblBomRev.Position(2055,75)
	gui.Form.lblBomDescription.Position(30,720)
	gui.Form.lblBomUM.Position(75,150)
	gui.Form.lblBomUnitCost.Position(435,150)
	gui.Form.lblBomSource.Position(1650,150)
	gui.Form.lblWeight.Position(45,735)
	gui.Form.lblMemo1.Position(30,135)
	gui.Form.lblMemo2.Position(30,735)	
	
f.Intrinsic.Control.EndIf
Program.Sub.Adapter_2019_1.End

Program.Sub.Cutlist_Option.Start
F.Intrinsic.Control.Try	
	v.Local.sHold.Declare
	V.Local.sSupervsrID.Declare

	F.Global.Security.GetUserID("SUPERVSR",v.Caller.CompanyCode,v.Local.sSupervsrID)
	
	'Use CutList (for Angola Wire as originator)
	F.Global.General.ReadOption("402471",0,False,"0000",V.Global.bUseCutList)
	'Auto Display CutList
	f.Global.Registry.ReadValue(V.Local.sSupervsrID,V.Caller.CompanyCode,"USECUTLIST",4986,8001,0,"False",V.Local.sHold)
	f.Intrinsic.Control.If(v.Local.sHold,=,"True")
		v.Global.bAutoDisplayCutlist.Set(True)
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(v.Global.bUseCutList,=,True,and,v.Global.bAutoDisplayCutlist,=,True)
		v.Global.bBindCutList.Set(True)		
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.End
f.Intrinsic.Control.EndTry	
	
Program.Sub.Cutlist_Option.End

Program.Sub.picGSSLogo_Click.Start
f.Intrinsic.Control.Try
	v.Local.sInput.Declare
	V.Local.iX.Declare
	v.Local.iY.Declare
	
	'I put this here so I can popup the debugger when ever I need it.  Before release this will be removed.===========================================================================================
	f.Intrinsic.Control.If(v.Args.button.UCase,=,"RIGHT",AND,v.Caller.Switches,=,"ADM4986")
		'this first opitons allows you to change the flag on the custom menu, then you'll be able to open the debugger by right clicking on the logo in the header of the program.
		gui.Form..Enabled(False)
		GUI.Debug..Visible(True)
		gui.Debug.txtPass.SetFocus
		gui.Debug..WaitForDismiss
		gui.Form..Enabled(True)
		gui.Form..AlwaysOnTop(True)
		gui.Form..AlwaysOnTop(False)
		v.Local.sInput.Set(v.Screen.Debug!txtPass.Text.Trim)
		f.Intrinsic.Control.If(v.Local.sInput.UCase,=,"NOW")
			gui.Debug.txtPass.Text("")
			'Always put debugger here, just in case you clear by Project > Clear All InvokeDebuggers (Ctrl + Shift + R) and Clear All Breakpoints (Ctrl + Shift + B)
			Function.Intrinsic.Debug.InvokeDebugger
			Function.Intrinsic.Debug.Stop		
		f.Intrinsic.Control.EndIf			
		
	f.Intrinsic.Control.ElseIf(v.Args.button.UCase,=,"RIGHT",AND,V.System.UserDomain,=,"GSS")
		'installed on a GSS computer
		gui.Form..Enabled(False)
		gui.Debug..Visible(True)
		gui.Debug.txtPass.SetFocus
		gui.Debug..WaitForDismiss
		gui.Form..Enabled(True)
		gui.Form..AlwaysOnTop(True)
		gui.Form..AlwaysOnTop(False)		
		v.Local.sInput.Set(v.Screen.Debug!txtPass.Text.Trim)
		f.Intrinsic.Control.If(v.Local.sInput.UCase,=,"NOW")
			gui.Debug.txtPass.Text("")
			'Always put debugger here, just in case you clear by Project > Clear All InvokeDebuggers (Ctrl + Shift + R) and Clear All Breakpoints (Ctrl + Shift + B)
			Function.Intrinsic.Debug.InvokeDebugger
			Function.Intrinsic.Debug.Stop		
		f.Intrinsic.Control.EndIf		
			
	F.Intrinsic.Control.ElseIf(v.Args.button.UCase,=,"LEFT")

		f.Intrinsic.API.GetMousePosition(v.Local.iX,v.Local.iY)
		f.Intrinsic.Math.Sub(v.Local.iX,100,v.Local.iX)
		f.Intrinsic.Math.Add(v.Local.iY,15,v.Local.iY)	
		gui.Form..ContextMenuShow("LogoMenu",v.Local.iX,v.Local.iY)			

	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picGSSLogo_Click.End

Program.Sub.GotoFeedBack.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	f.Intrinsic.Task.ShellExec(0,"OPEN",https://app.smartsheet.com/b/form/1060716c466f42d68a2086156bb4a5b5,"","","")
		
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry		
Program.Sub.GotoFeedBack.End

Program.Sub.Debug_UnLoad.Start
GUI.Debug..Visible(False)
Program.Sub.Debug_UnLoad.End

Program.Sub.cmdDebugOK_Click.Start
GUI.Debug..Visible(False)
Program.Sub.cmdDebugOK_Click.End

Program.Sub.Call_Debug.Start
f.Intrinsic.Control.If(v.Screen.Debug!txtSub.Text.UCase,=,v.Args.sSub.UCase)
	'Always put debugger here, just in case you clear by Project > Clear All InvokeDebuggers (Ctrl + Shift + R) and Clear All Breakpoints (Ctrl + Shift + B)
	Function.Intrinsic.Debug.InvokeDebugger
	Function.Intrinsic.Debug.Stop	
f.Intrinsic.Control.EndIf
Program.Sub.Call_Debug.End

Program.Sub.Catching.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sMsg.Declare
	v.Local.sPath.Declare
	v.Local.sErrorDescr.Declare
	v.Local.sTitle.Declare
	f.Intrinsic.String.Replace(v.Ambient.ScriptPath,"\","\\",v.Local.sPath)
	f.Intrinsic.String.Build("{0}\\GCG_4986_Bom_Router.g2u",v.Local.sPath,v.Local.sPath)
	f.Intrinsic.String.Replace(v.Args.ErrorDesc,"\","\\",v.Local.sErrorDescr)
	
	f.Intrinsic.String.Build("RTF{\rtf1\fbidis\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset1 Segoe UI Symbol;}{\f1\fnil Times New Roman;}{\f2\fnil\fcharset0 Times New Roman;}{\f3\fnil\fcharset1 Segoe UI Emoji;}}{0}{\colortbl ;\red247\green150\blue70;\red0\green176\blue80;\red0\green128\blue0;}{0}{\*\generator Riched20 10.0.18362}\viewkind4\uc1{0}\pard\sl240\slmult1\cf1\b\f0\fs20\u-10179?\u-9026?\cf0\f1  \b0\f2 {1}\tab\par{0}\f3\u9881?\u-497?\f1  \f2 {2}\par{0}\cf2\f3\u-10178?\u-8706?\cf0\f1  \f2 {3}\cf3\lang9\par{0}GAB Version: {4}}",v.Ambient.NewLine,v.Local.sPath,v.Args.Sub,v.Local.sErrorDescr,v.Ambient.GABVersion,v.Local.sMsg)
	f.Intrinsic.String.Build("GAB Error Number {0}",v.Args.errorno,v.Local.sTitle)
	f.Intrinsic.UI.MsgboxExt(v.Local.sTitle,v.Local.sMsg,1)
	F.Intrinsic.Control.CallSub("Unload")
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription)
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.End
f.Intrinsic.Control.EndTry
Program.Sub.Catching.End

Program.Sub.MsgMainLine.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sMsg.Declare

	f.Intrinsic.String.Build("RTF{\rtf1\fbidis\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset1 Segoe UI Emoji;}{\f1\fnil Calibri;}{\f2\fnil\fcharset0 Times New Roman;}}{0}{\colortbl ;\red255\green128\blue64;\red0\green128\blue0;}{0}{\*\generator Riched20 10.0.18362}\viewkind4\uc1{0}\pard\sl240\slmult1\tx810\tx1080\cf1\b\f0\fs28\u9888?\u-497?\f1  \cf0\b0\f2\fs20\lang9 {1} \cf2\lang1033\par{0}}",v.Ambient.NewLine,v.Args.MainLine,v.Local.sMsg)		
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.UI.MsgboxExt(v.Args.Title,v.Local.sMsg,1)
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.MsgMainLine.End

Program.Sub.Msg2Lines.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sMsg.Declare

	f.Intrinsic.String.Build("RTF{\rtf1\fbidis\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset1 Segoe UI Emoji;}{\f1\fnil Calibri;}{\f2\fnil\fcharset0 Times New Roman;}{\f3\fnil\fcharset1 Segoe UI Symbol;}{\f4\fnil Times New Roman;}}{0}{\colortbl ;\red255\green128\blue64;\red0\green128\blue0;\red247\green150\blue70;\red255\green0\blue0;}{0}{\*\generator Riched20 10.0.18362}\viewkind4\uc1 {0}\pard\sl240\slmult1\tx810\tx1080\cf1\b\f0\fs28\u9888?\u-497?\f1  \cf0\b0\f2\fs20\lang9 {1} \par{0}\cf2\lang1033\tab\cf3\f3\fs22\u-10180?\u-8366?\f4  \cf2\fs20  \cf0\f2 {2}\par{0}\cf2\tab\cf3\f3\fs22\u-10180?\u-8366?\cf4\f4  \cf2\fs20  \cf0\f2 {3}\cf4\par{0}}",v.Ambient.NewLine,v.Args.MainLine,v.Args.FirstLine,v.Args.SecondLine,v.Local.sMsg)	
	
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.UI.MsgboxExt(v.Args.Title,v.Local.sMsg,1)
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.Msg2Lines.End

Program.Sub.Msg2LinesBalls.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sMsg.Declare

	f.Intrinsic.String.Build("RTF{\rtf1\fbidis\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset1 Segoe UI Emoji;}{\f1\fnil Calibri;}{\f2\fnil\fcharset0 Times New Roman;}{\f3\fnil\fcharset1 Segoe UI Symbol;}{\f4\fnil Times New Roman;}}{0}{\colortbl ;\red255\green128\blue64;\red0\green128\blue0;\red158\green124\blue124;\red255\green0\blue0;}{0}{\*\generator Riched20 10.0.18362}\viewkind4\uc1 {0}\pard\sl240\slmult1\tx810\tx1080\cf1\b\f0\fs28\u9888?\u-497?\f1  \cf0\b0\f2\fs20\lang9 {1} \par{0}\cf2\lang1033\tab\cf3\f3\fs22\u-10180?\u-8248?\cf4\f4  \cf2\fs20  \cf0\f2 {2}\par{0}\cf2\tab\cf3\f3\fs22\u-10180?\u-8248?\cf4\f4  \cf2\fs20  \cf0\f2 {3}\cf4\par{0}}",v.Ambient.NewLine,v.Args.MainLine,v.Args.FirstLine,v.Args.SecondLine,v.Local.sMsg)	
	
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.UI.MsgboxExt(v.Args.Title,v.Local.sMsg,1)
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Msg2LinesBalls.End

Program.Sub.Msg3Lines.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sMsg.Declare

	f.Intrinsic.String.Build("RTF{\rtf1\fbidis\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset1 Segoe UI Emoji;}{\f1\fnil Calibri;}{\f2\fnil\fcharset0 Times New Roman;}{\f3\fnil\fcharset1 Segoe UI Symbol;}{\f4\fnil Times New Roman;}}{0}{\colortbl ;\red255\green128\blue64;\red0\green128\blue0;\red247\green150\blue70;\red255\green0\blue0;}{0}{\*\generator Riched20 10.0.18362}\viewkind4\uc1 {0}\pard\sl240\slmult1\tx810\tx1080\cf1\b\f0\fs28\u9888?\u-497?\f1  \cf0\b0\f2\fs20\lang9 {1} \par{0}\cf2\lang1033\tab\cf3\f3\fs22\u-10180?\u-8366?\f4  \cf2\fs20  \cf0\f2 {2}\par{0}\cf2\tab\cf3\f3\fs22\u-10180?\u-8366?\cf4\f4  \cf2\fs20  \cf0\f2 {3}\cf4\par{0}\cf2\tab\cf3\f3\fs22\u-10180?\u-8366?\cf4\f4  \cf2\fs20  \cf0\f2 {4}\cf4\par{0}}",v.Ambient.NewLine,v.Args.MainLine,v.Args.FirstLine,v.Args.SecondLine,v.Args.ThirdLine,v.Local.sMsg)	
	
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.UI.MsgboxExt(v.Args.Title,v.Local.sMsg,1)
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.Msg3Lines.End

Program.Sub.Msg3LinesSoccer.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sMsg.Declare

	f.Intrinsic.String.Build("RTF{\rtf1\fbidis\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset1 Segoe UI Emoji;}{\f1\fnil Times New Roman;}{\f2\fnil\fcharset0 Times New Roman;}{\f3\fnil\fcharset1 Segoe UI Symbol;}}{0}{\colortbl ;\red255\green128\blue64;\red0\green128\blue255;\red0\green128\blue128;\red0\green128\blue0;}{0}{\*\generator Riched20 10.0.18362}\viewkind4\uc1{0} \pard\sl240\slmult1\tx810\tx1080\cf1\b\f0\fs20\u9888?\u-497?\f1  \cf0\b0\f2\lang9 {1}\par{0}\cf2\lang1033\tab\cf3\f3\fs16\lang9\u9917?\f1\fs20\lang1033   \cf0\f2 {2}\cf4\par{0}\cf2\lang1033\tab\cf3\f3\fs16\lang9\u9917?\f1\fs20\lang1033   \cf0\f2 {3}\cf4\par{0}\cf2\lang1033\tab\cf3\f3\fs16\lang9\u9917?\f1\fs20\lang1033   \cf0\f2 {4}\cf4\par{0}}",v.Ambient.NewLine,v.Args.MainLine,v.Args.FirstLine,v.Args.SecondLine,v.Args.ThirdLine,v.Local.sMsg)	
	
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.UI.MsgboxExt(v.Args.Title,v.Local.sMsg,1)
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.Msg3LinesSoccer.End

Program.Sub.Msg2LinesSoccer.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sMsg.Declare

	f.Intrinsic.String.Build("RTF{\rtf1\fbidis\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset1 Segoe UI Emoji;}{\f1\fnil Times New Roman;}{\f2\fnil\fcharset0 Times New Roman;}{\f3\fnil\fcharset1 Segoe UI Symbol;}}{0}{\colortbl ;\red255\green128\blue64;\red0\green128\blue255;\red0\green128\blue128;\red0\green128\blue0;}{0}{\*\generator Riched20 10.0.18362}\viewkind4\uc1{0} \pard\sl240\slmult1\tx810\tx1080\cf1\b\f0\fs20\u9888?\u-497?\f1  \cf0\b0\f2\lang9 {1}\par{0}\cf2\lang1033\tab\cf3\f3\fs16\lang9\u9917?\f1\fs20\lang1033   \cf0\f2 {2}\cf4\par{0}\cf2\lang1033\tab\cf3\f3\fs16\lang9\u9917?\f1\fs20\lang1033   \cf0\f2 {3}\cf4\par{0}}",v.Ambient.NewLine,v.Args.MainLine,v.Args.FirstLine,v.Args.SecondLine,v.Local.sMsg)	
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.UI.MsgboxExt(v.Args.Title,v.Local.sMsg,1)
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.Msg2LinesSoccer.End

Program.Sub.MsgItemsCreated.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sMsg.Declare
	V.Local.sItems.Declare
	v.Local.iCnt.Declare

	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.MsgItemsCheck.RowCount--,1)
		f.Intrinsic.Control.If(v.DataTable.MsgItemsCheck(v.Local.iCnt).Found!FieldValString,=,"True")
			'Exist with Check Mark
			f.Intrinsic.String.Build("{0}{1}\cf2\tab\f0\u10004?\u-497?\cf0\f2\lang1033 {2}{3}\cf2\par",v.Local.sItems,v.Ambient.NewLine,v.DataTable.MsgItemsCheck(v.Local.iCnt).Item!FieldValString,v.DataTable.MsgItemsCheck(v.Local.iCnt).Description!FieldValSTring,v.Local.sItems)
		f.Intrinsic.Control.Else
			'Not found with Cross Mark
			f.Intrinsic.String.Build("{0}{1}\lang9\tab\cf3\f3\u10060?\cf0\f1\lang1033  \f2        {2}{3}\cf4\par",v.Local.sItems,v.Ambient.NewLine,v.DataTable.MsgItemsCheck(v.Local.iCnt).Item!FieldValString,v.DataTable.MsgItemsCheck(v.Local.iCnt).Description!FieldValSTring,v.Local.sItems)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.iCnt)
	
	f.Intrinsic.String.Build("RTF{\rtf1\fbidis\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset1 Segoe UI Emoji;}{\f1\fnil Times New Roman;}{\f2\fnil\fcharset0 Times New Roman;}{\f3\fnil\fcharset1 Segoe UI Symbol;}}{0}{\colortbl ;\red255\green128\blue64;\red0\green128\blue0;\red247\green150\blue70;\red255\green0\blue0;}{0}{\*\generator Riched20 10.0.18362}\viewkind4\uc1 {0}\pard\sl240\slmult1\tx810\tx1080\cf1\b\f0\fs20\u9888?\u-497?\f1  \cf0\f2\lang9 {1} \par{0}\b0\par {2}{0}}",v.Ambient.NewLine,v.Args.MainLine,v.Local.sItems,v.Local.sMsg)	
	
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.UI.MsgboxExt(v.Args.Title,v.Local.sMsg,1)
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.MsgItemsCreated.End

Program.Sub.MsgUnlimittedList.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sMsg.Declare
	V.Local.sItems.Declare
	v.Local.iCnt.Declare
	v.Local.bSizeExist.Declare

	f.Intrinsic.Control.For(v.Local.iCnt,0,V.DataTable.MsgItemsCheck.RowCount--,1)
		f.Intrinsic.String.Build("{0}{1}\cf2\lang1033\tab\f3\u-10179?\u-9074?\cf3\f1   \cf0\f2 {2}\cf3\par",v.Local.sItems,v.Ambient.NewLine,v.DataTable.MsgItemsCheck(v.Local.iCnt).Item!FieldValTrim,v.Local.sItems)	
	f.Intrinsic.Control.Next(v.Local.iCnt)
	
	f.Intrinsic.String.Build("RTF{\rtf1\fbidis\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset1 Segoe UI Emoji;}{\f1\fnil Times New Roman;}{\f2\fnil\fcharset0 Times New Roman;}{\f3\fnil\fcharset1 Segoe UI Symbol;}}{0}{\colortbl ;\red255\green128\blue64;\red0\green128\blue255;\red0\green128\blue0;}{0}{\*\generator Riched20 10.0.18362}\viewkind4\uc1 {0}\pard\sl240\slmult1\tx810\tx1080\cf1\b\f0\fs20\u9888?\u-497?\f1  \cf0\b0\f2\lang9 {1}\par {2}{0}}",v.Ambient.NewLine,v.Args.MainLine,v.Local.sItems,v.Local.sMsg)	
	
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.Variable.ArgExists("Size",v.Local.bSizeExist)
	f.Intrinsic.Control.If(v.Local.bSizeExist)
		f.Intrinsic.UI.MsgboxExt(v.Args.Title,v.Local.sMsg,1,v.Args.W,v.Args.H)
	f.Intrinsic.Control.Else
		f.Intrinsic.UI.MsgboxExt(v.Args.Title,v.Local.sMsg,1)
	f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.MsgUnlimittedList.End

Program.Sub.Form_UnLoad.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	
	F.Intrinsic.Control.IF(V.Global.iNewPart,=,4)
		'Should pop up asking before PostPartBatch
		f.Intrinsic.UI.InvokeWaitDialog("Posting Part Batch. Please wait...")
		f.Global.Inventory.PostPartBatch
		f.Intrinsic.UI.CloseWaitDialog
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.CallSub(Save_Registry)

	f.Intrinsic.Control.CallSub("Unload")

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription,"Form_UnLoad error")
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.If(v.ODBC.conx.State,=,1)
		f.ODBC.Connection!conx.Close
	f.Intrinsic.Control.EndIf
    f.Intrinsic.Control.End
f.Intrinsic.Control.EndTry
Program.Sub.Form_UnLoad.End

Program.Sub.Unload.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'clear all bom/router locks for this user
	'f.Intrinsic.Control.CallSub(ClearUserLocks)
		
	f.ODBC.Connection!conx.Close	
	F.Intrinsic.Control.End

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription,"UnLoad error")
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.If(v.ODBC.conx.State,=,1)
		f.ODBC.Connection!conx.Close
	f.Intrinsic.Control.EndIf
    f.Intrinsic.Control.End
f.Intrinsic.Control.EndTry
Program.Sub.Unload.End

Program.Sub.Save_Registry.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSerialize.Declare
	
	'Save checkbox options
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"CHKROUTERONLY",4986,1006,False,"Checkbox",v.Screen.Form!chkRouterOnly.CheckedAsBoolean,0,-1,v.Ambient.Date,12:00:00 AM)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"CHKBOMONLY",4986,1007,False,"Checkbox",v.Screen.Form!chkBomOnly.CheckedAsBoolean,0,-1,v.Ambient.Date,12:00:00 AM)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"CHKDISPLAYLEVEL",4986,1008,False,"Checkbox",v.Screen.Form!chkDisplayLevel.CheckedAsBoolean,0,-1,v.Ambient.Date,12:00:00 AM)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"CHKDISPLAYQTY",4986,1009,False,"Checkbox",v.Screen.Form!chkDisplayQty.CheckedAsBoolean,0,-1,v.Ambient.Date,12:00:00 AM)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"CHKACTIVATENODEMENU",4986,1010,False,"Checkbox",v.Screen.Form!chkActivateNodeMenu.CheckedAsBoolean,0,-1,v.Ambient.Date,12:00:00 AM)
	
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"CHKDISPLAYPART",4986,1011,False,"Checkbox",V.Screen.Form!chkDisplayPart.CheckedAsBoolean,0,-1,v.Ambient.Date,12:00:00 AM)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"CHKDISPLAYDESCR",4986,1012,False,"Checkbox",V.Screen.Form!chkDisplayDescr.CheckedAsBoolean,0,-1,v.Ambient.Date,12:00:00 AM)	
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BDISPLAYUM",4986,1013,False,"NoControlBoolean",V.Global.bDisplayUM,0,-1,v.Ambient.Date,12:00:00 AM)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BDISPLAYSOURCE",4986,1014,False,"NoControlBoolean",V.Global.bDisplaySource,0,-1,v.Ambient.Date,12:00:00 AM)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BDISPLAYCATEGORY",4986,1015,False,"NoControlBoolean",v.Global.bDisplayCategory,0,-1,v.Ambient.Date,12:00:00 AM)	
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BDISPLAYCOST",4986,1016,False,"NoControlBoolean",v.Global.bDisplayCost,0,-1,v.Ambient.Date,12:00:00 AM)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BDISPLAYPL",4986,1017,False,"NoControlBoolean",v.Global.bDisplayPL,0,-1,v.Ambient.Date,12:00:00 AM)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BDISPLAYCOMPLETE",4986,1018,False,"NoControlBoolean",v.Global.bDisplayComplete,0,-1,v.Ambient.Date,12:00:00 AM)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BDISPLAYLOC",4986,1035,False,"NoControlBoolean",v.Global.bDisplayLoc,0,-1,v.Ambient.Date,12:00:00 AM)	
	'Decimal
	
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"SDECIMALQTY",4986,1019,False,V.Global.sDecimalQty,False,0,-1,v.Ambient.Date,12:00:00 AM)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"SDECIMALCOST",4986,1020,False,V.Global.sDecimalCost,False,0,-1,v.Ambient.Date,12:00:00 AM)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"SDECIMALWEIGHT",4986,1021,False,V.Global.sDecimalWeight,False,0,-1,v.Ambient.Date,12:00:00 AM)	
	'Label
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BQTYLABEL",4986,1022,False,"NoControlBoolean",v.Global.bQtyLabel,0,-1,v.Ambient.Date,12:00:00 AM)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BPARTLABEL",4986,1023,False,"NoControlBoolean",v.Global.bPartLabel,0,-1,v.Ambient.Date,12:00:00 AM)	
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BDESCRLABEL",4986,1024,False,"NoControlBoolean",v.Global.bDescrLabel,0,-1,v.Ambient.Date,12:00:00 AM)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BUMLABEL",4986,1025,False,"NoControlBoolean",v.Global.bUMLabel,0,-1,v.Ambient.Date,12:00:00 AM)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BSOURCELABEL",4986,1026,False,"NoControlBoolean",v.Global.bSourceLabel,0,-1,v.Ambient.Date,12:00:00 AM)	
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BCATEGORYLABEL",4986,1027,False,"NoControlBoolean",v.Global.bCategoryLabel,0,-1,v.Ambient.Date,12:00:00 AM)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BCOSTLABEL",4986,1028,False,"NoControlBoolean",v.Global.bCostLabel,0,-1,v.Ambient.Date,12:00:00 AM)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BPLLABEL",4986,1029,False,"NoControlBoolean",v.Global.bPLLabel,0,-1,v.Ambient.Date,12:00:00 AM)	
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BLOCLABEL",4986,1036,False,"NoControlBoolean",v.Global.bLocLabel,0,-1,v.Ambient.Date,12:00:00 AM)	
	'1030 is for the order of column, reserved for serialization of FieldOrd grid
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BBOLDCOMPLETE",4986,1031,False,"NoControlBoolean",v.Global.bBoldComplete,0,-1,v.Ambient.Date,12:00:00 AM)
	
	'2001 IS FOR WEBIMPORTER status
	'2002 is for the order of column, reserved for serialization of FieldOrd grid
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"MAXIWAIT",4986,2002,False,v.Screen.Form!txtMaxiWait.Text.Trim,False,0,-1,v.Ambient.Date,12:00:00 AM)	
	
	f.Intrinsic.Control.If(v.Screen.Form!txtQtyDec.Text.Trim,=,"")
		gui.Form.txtQtyDec.Text("0")
	f.Intrinsic.Control.EndIf
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"SDECIMALQUOTEQTY",4986,1032,False,v.Screen.Form!txtQtyDec.Text.Trim,False,0,-1,v.Ambient.Date,12:00:00 AM)
	
	gui.Form.gsBookMarks.Serialize("GV_BOOKMARKS",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GV_BOOKMARKS",4986,9001,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)	

	gui.BookM.gsBookM.Serialize("GV_BOOKM",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GV_BOOKM",4986,9002,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)		
	
	'Stay on top
	'BookM
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"BOOKM",4986,1033,False,"Checkbox",v.Screen.BookM!chkStayOnTop.CheckedAsBoolean,0,-1,v.Ambient.Date,12:00:00 AM)
	'TrvStyle
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"TRVSTYLE",4986,1034,False,"Checkbox",v.Screen.trvStyle!chktrvStyleStayOnTop.CheckedAsBoolean,0,-1,v.Ambient.Date,12:00:00 AM)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription,"UnLoad error")
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.If(v.ODBC.conx.State,=,1)
		f.ODBC.Connection!conx.Close
	f.Intrinsic.Control.EndIf
    f.Intrinsic.Control.End
f.Intrinsic.Control.EndTry
Program.Sub.Save_Registry.End

Program.Sub.Show_Default_Main_Form.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sHold.Declare
	V.Local.bEx.Declare
	

	'------------PART I-------------------
	'chkRouterOnly
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"CHKROUTERONLY",4986,1006,0,"False",V.Local.sHold)
	GUI.Form.chkRouterOnly.Value(V.Local.sHold)	
	'chkBomOnly
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"CHKBOMONLY",4986,1007,0,"False",V.Local.sHold)
	GUI.Form.chkBomOnly.Value(V.Local.sHold)	
	'chkDisplayLevel
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"CHKDISPLAYLEVEL",4986,1008,0,"False",V.Local.sHold)
	gui.Form.chkDisplayLevel.Value(V.Local.sHold)	
	'chkDisplayQty
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"CHKDISPLAYQTY",4986,1009,0,"False",V.Local.sHold)
	gui.Form.chkDisplayQty.Value(V.Local.sHold)
	'chkDisplayPart
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"CHKDISPLAYPART",4986,1011,0,"False",V.Local.sHold)
	gui.Form.chkDisplayPart.Value(V.Local.sHold)
	'chkDisplayDescr
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"CHKDISPLAYDESCR",4986,1012,0,"False",V.Local.sHold)
	gui.Form.chkDisplayDescr.Value(V.Local.sHold)
	'Activate Node Menu	
	f.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"CHKACTIVATENODEMENU",4986,1010,0,"False",V.Local.sHold)
	GUI.Form.chkActivateNodeMenu.Value(V.Local.sHold)
	
	'Always on Top Bookmarks	
	f.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BOOKM",4986,1033,0,"False",V.Local.sHold)
	GUi.BookM.chkStayOnTop.Value(V.Local.sHold)		
	
	f.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"TRVSTYLE",4986,1034,0,"False",V.Local.sHold)
	GUi.trvStyle.chktrvStyleStayOnTop.Value(V.Local.sHold)		
	
	'Other display on node
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BDISPLAYUM",4986,1013,0,"False",v.Global.bDisplayUM)
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BDISPLAYSOURCE",4986,1014,0,"False",v.Global.bDisplaySource)
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BDISPLAYCATEGORY",4986,1015,0,"False",v.Global.bDisplayCategory)
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BDISPLAYCOST",4986,1016,0,"False",v.Global.bDisplayCost)
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BDISPLAYPL",4986,1017,0,"False",v.Global.bDisplayPL)
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BDISPLAYCOMPLETE",4986,1018,0,"False",v.Global.bDisplayComplete)	
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BDISPLAYLOC",4986,1035,0,"False",v.Global.bDisplayLoc)
	
	'DECIMAL
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"SDECIMALQTY",4986,1019,5,"0",V.Global.sDecimalQty)
	F.Intrinsic.Control.If(V.Global.sDecimalQty,=,"")
		V.Global.sDecimalQty.Set("0")
	F.Intrinsic.Control.EndIf
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"SDECIMALCOST",4986,1020,5,"0",V.Global.sDecimalCost)
	F.Intrinsic.Control.If(V.Global.sDecimalCost,=,"")
		V.Global.sDecimalCost.Set("0")
	F.Intrinsic.Control.EndIf	
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"SDECIMALWEIGHT",4986,1021,5,"0",V.Global.sDecimalWeight)	
	F.Intrinsic.Control.If(V.Global.sDecimalWeight,=,"")
		V.Global.sDecimalWeight.Set("0")
	F.Intrinsic.Control.EndIf
	
	'LABEL
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BQTYLABEL",4986,1022,0,"False",V.Global.bQtyLabel)
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BPARTLABEL",4986,1023,0,"False",V.Global.bPartLabel)
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BDESCRLABEL",4986,1024,0,"False",V.Global.bDescrLabel)
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BUMLABEL",4986,1025,0,"False",V.Global.bUMLabel)		
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BSOURCELABEL",4986,1026,0,"False",V.Global.bSourceLabel)
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BCATEGORYLABEL",4986,1027,0,"False",V.Global.bCategoryLabel)
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BCOSTLABEL",4986,1028,0,"False",V.Global.bCostLabel)
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BPLLABEL",4986,1029,0,"False",V.Global.bPLLabel)
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BLOCLABEL",4986,1036,0,"False",V.Global.bLocLabel)
	
	'MaxiWait
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"MAXIWAIT",4986,2002,5,"",V.Local.sHold)	
	F.Intrinsic.Control.If(V.Local.sHold,<>,"")
		v.Local.sHold.Set(v.Local.sHold.Trim)
		f.Intrinsic.Control.If(v.Local.sHold.Length,<=,2)
			GUI.Form.txtMaxiWait.Text(V.Local.sHold)
		f.Intrinsic.Control.EndIf		
	F.Intrinsic.Control.EndIf
	
	'Field Order on Node
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GV_ORD",4986,1030,6,"",v.Local.sHold)
	f.Intrinsic.Control.If(v.Local.sHold,<>,"")
		gui.FieldOrder.gsFieldOrder.Deserialize(v.Local.sHold)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.CallSub("Set_Current_FieldOrder")
	
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"BBOLDCOMPLETE",4986,1031,0,"False",V.Global.bBoldComplete)		
	f.Intrinsic.Control.CallSub(ContextMenu_Plus)
	
	f.Intrinsic.Control.CallSub(Show_Form_Program_FirstLoad)
	
	'Treeview Style Format Settings
	'FontName
	f.Intrinsic.Control.If(v.DataTable.BasicName.Exists)
		f.Data.DataTable.Close("BasicName")
	f.Intrinsic.Control.EndIf	
	f.Data.DataTable.CreateFromString("BasicName","0*!*Abadi MT Condensed,1*!*Agency FB,2*!*Aharoni,3*!*Aldhabi,4*!*Algerian,5*!*Almanac MT,6*!*American Uncial,7*!*Andale Mono,8*!*Andalus,9*!*Andy,10*!*AngsanaUPC,11*!*Angsana New,12*!*Aparajita,13*!*Arabic Transparent,14*!*Arabic Typesetting,15*!*Arial,16*!*Arial Black,17*!*Arial Narrow,18*!*Arial Narrow Special,19*!*Arial Nova,20*!*Arial Rounded MT,21*!*Arial Special,22*!*Arial Unicode MS,23*!*Augsburger Initials,24*!*Avenir Next LT Pro,25*!*Bahnschrift,26*!*Baskerville Old Face,27*!*Batang & BatangChe,28*!*Bauhaus 93,29*!*Beesknees ITC,30*!*Bell MT,31*!*Bembo,32*!*Berlin Sans FB,33*!*Bernard MT Condensed,34*!*Bickley Script,35*!*Biome,36*!*BIZ UDGothic,37*!*BIZ UDMincho Medium,38*!*Blackadder ITC,39*!*Bodoni MT,40*!*Bodoni MT Condensed,41*!*Bon Apetit MT,42*!*Bookman Old Style,43*!*Bookshelf Symbol,44*!*Book Antiqua,45*!*Bradley Hand ITC,46*!*Braggadocio,47*!*BriemScript,48*!*Britannic Bold,49*!*Broadway,50*!*BrowalliaUPC,51*!*Browallia New,52*!*Brush Script MT,53*!*Calibri,54*!*Californian FB,55*!*Calisto MT,56*!*Cambria,57*!*Cambria Math,58*!*Candara,59*!*Cariadings,60*!*Castellar,61*!*Cavolini,62*!*Centaur,63*!*Century,64*!*Century Gothic,65*!*Century Schoolbook,66*!*Chiller,67*!*Colonna MT,68*!*Comic Sans MS,69*!*Consolas,70*!*Constantia,71*!*Contemporary Brush,72*!*Cooper Black,73*!*Copperplate Gothic,74*!*Corbel,75*!*CordiaUPC,76*!*Cordia New,77*!*Courier New,78*!*Curlz MT,79*!*Dante,80*!*DaunPenh,81*!*David,82*!*Daytona,83*!*DengXian,84*!*Desdemona,85*!*DFKai-SB,86*!*DilleniaUPC,87*!*Directions MT,88*!*DokChampa,89*!*Dotum & DotumChe,90*!*Ebrima,91*!*Eckmann,92*!*Edda,93*!*Edwardian Script ITC,94*!*Elephant,95*!*Engravers MT,96*!*Enviro,97*!*Eras ITC,98*!*Estrangelo Edessa,99*!*EucrosiaUPC,100*!*Euphemia,101*!*Eurostile,102*!*FangSong,103*!*Felix Titling,104*!*Fine Hand,105*!*Fixed Miriam Transparent,106*!*Flexure,107*!*Footlight MT,108*!*Forte,109*!*Franklin Gothic,110*!*Franklin Gothic Medium,111*!*FrankRuehl,112*!*FreesiaUPC,113*!*Freestyle Script,114*!*French Script MT,115*!*Futura,116*!*Gabriola,117*!*Gadugi,118*!*Garamond,119*!*Garamond MT,120*!*Gautami,121*!*Georgia,122*!*Georgia Pro,123*!*Georgia Ref,124*!*Gigi,125*!*Gill Sans MT,126*!*Gill Sans MT Condensed,127*!*Gill Sans Nova,128*!*Gisha,129*!*Gloucester,130*!*Goudy Old Style,131*!*Goudy Stout,132*!*Gradl,133*!*Grotesque,134*!*Gulim & GulimChe,135*!*Gungsuh & GungsuhChe,136*!*Hadassah Friedlaender,137*!*Haettenschweiler,138*!*Harlow Solid Italic,139*!*Harrington,140*!*HGGothicE,141*!*HGMinchoE,142*!*HGSoeiKakugothicUB,143*!*High Tower Text,144*!*Holidays MT,145*!*HoloLens MDL2 Assets,146*!*Impact,147*!*Imprint MT Shadow,148*!*Informal Roman,149*!*Ink Free,150*!*IrisUPC,151*!*Iskoola Pota,152*!*JasmineUPC,153*!*Javanese Text,154*!*Jokerman,155*!*Juice ITC,156*!*KaiTi,157*!*Kalinga,158*!*Kartika,159*!*Keystrokes MT,160*!*Khmer UI,161*!*Kino MT,162*!*KodchiangUPC,163*!*Kokila,164*!*Kristen ITC,165*!*Kunstler Script,166*!*Lao UI,167*!*Latha,168*!*LCD,169*!*Leelawadee,170*!*Leelawadee UI,171*!*Levenim MT,172*!*LilyUPC,173*!*Lucida Blackletter,174*!*Lucida Bright,175*!*Lucida Bright Math,176*!*Lucida Calligraphy,177*!*Lucida Console,178*!*Lucida Fax,179*!*Lucida Handwriting,180*!*Lucida Sans,181*!*Lucida Sans Typewriter,182*!*Lucida Sans Unicode,183*!*Magneto,184*!*Maiandra GD,185*!*Malgun Gothic,186*!*Mangal,187*!*Map Symbols,188*!*Marlett,189*!*Matisse ITC,190*!*Matura MT Script Capitals,191*!*McZee,192*!*Mead Bold,193*!*Meiryo,194*!*Mercurius Script MT Bold,195*!*Microsoft GothicNeo,196*!*Microsoft Himalaya,197*!*Microsoft JhengHei,198*!*Microsoft New Tai Lue,199*!*Microsoft PhagsPa,200*!*Microsoft Sans Serif,201*!*Microsoft Tai Le,202*!*Microsoft Uighur,203*!*Microsoft YaHei,204*!*Microsoft Yi Baiti,205*!*MingLiU,206*!*Minion Web,207*!*Miriam,208*!*Miriam Fixed,209*!*Mistral,210*!*Modern Love,211*!*Modern No. 20,212*!*Mongolian Baiti,213*!*Monotype.com,214*!*Monotype Corsiva,215*!*Monotype Sorts,216*!*MoolBoran,217*!*MS Gothic,218*!*MS LineDraw,219*!*MS Mincho,220*!*MS Outlook,221*!*MS PGothic,222*!*MS PMincho,223*!*MS Reference,224*!*MS UI Gothic,225*!*MT Extra,226*!*MV Boli,227*!*Myanmar Text,228*!*Narkisim,229*!*Neue Haas Grotesk Text Pro,230*!*News Gothic MT,231*!*New Caledonia,232*!*Niagara,233*!*Nirmala UI,234*!*Nyala,235*!*OCR-B-Digits,236*!*OCRB,237*!*OCR A Extended,238*!*Old English Text MT,239*!*Onyx,240*!*Palace Script MT,241*!*Palatino Linotype,242*!*Papyrus,243*!*Parade,244*!*Parchment,245*!*Parties MT,246*!*Peignot Medium,247*!*Pepita MT,248*!*Perpetua,249*!*Perpetua Titling MT,250*!*Placard Condensed,251*!*Plantagenet Cherokee,252*!*Playbill,253*!*Poor Richard,254*!*Posterama,255*!*Pristina,256*!*Quire Sans,257*!*Raavi,258*!*Rage Italic,259*!*Ransom,260*!*Ravie,261*!*RefSpecialty,262*!*Rockwell,263*!*Rockwell Nova,264*!*Rod,265*!*Runic MT Condensed,266*!*Sabon Next LT,267*!*Sagona,268*!*Sakkal Majalla,269*!*Sanskrit Text,270*!*Script MT Bold,271*!*Segoe Chess,272*!*Segoe MDL2 Assets,273*!*Segoe Print,274*!*Segoe Script,275*!*Segoe UI,276*!*Segoe UI Emoji,277*!*Segoe UI Historic,278*!*Segoe UI Symbol,279*!*Selawik,280*!*Shonar Bangla,281*!*Showcard Gothic,282*!*Shruti,283*!*Signs MT,284*!*SimHei,285*!*Simplified Arabic Fixed,286*!*SimSun,287*!*Sitka,288*!*Snap ITC,289*!*Sports MT,290*!*STCaiyun,291*!*Stencil,292*!*STFangsong,293*!*STHupo,294*!*STKaiti,295*!*Stop,296*!*STXihei,297*!*STXingkai,298*!*STXinwei,299*!*STZhongsong,300*!*Sylfaen,301*!*Symbol,302*!*Tahoma,303*!*Tempo Grunge,304*!*Tempus Sans ITC,305*!*Temp Installer Font,306*!*The Hand,307*!*The Serif Hand,308*!*Times New Roman,309*!*Times New Roman Special,310*!*Tisa Offc Serif Pro,311*!*Traditional Arabic,312*!*Transport MT,313*!*Trebuchet MS,314*!*Tunga,315*!*Tw Cen MT,316*!*UD Digi Kyokasho,317*!*Univers,318*!*Urdu Typesetting,319*!*Utsaah,320*!*Vacation MT,321*!*Vani,322*!*Verdana,323*!*Verdana Pro,324*!*Verdana Ref,325*!*Vijaya,326*!*Viner Hand ITC,327*!*Vivaldi,328*!*Vixar ASCI,329*!*Vladimir Script,330*!*Vrinda,331*!*Walbaum,332*!*Webdings,333*!*Westminster,334*!*Wide Latin,335*!*Wingdings,336*!*Yu Gothic,337*!*Yu Mincho","Num*!*Name","String*!*String","*!*",",",True)
	f.Data.Dictionary.Exists("dBasicName",v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		f.Data.Dictionary.Close("dBasicName")
	f.Intrinsic.Control.EndIf	
	f.Data.Dictionary.CreateFromDatatable("dBasicName","BasicName","Num","Name")		
	gui.trvStyle.ddlFontName.AddItems("DICTIONARY","dBasicname")
	
	'ForeColor
	f.Intrinsic.Control.If(v.DataTable.BasicColor.Exists)
		f.Data.DataTable.Close("BasicColor")
	f.Intrinsic.Control.EndIf	
	f.Data.DataTable.CreateFromString("BasicColor","0*!*BLACK,1*!*BLUE,2*!*GREEN,3*!*CYAN,4*!*RED,5*!*MAGENTA,6*!*ORANGE,7*!*LTGREY,8*!*LTGRAY,9*!*GREY,10*!*GRAY,11*!*LTBLUE,12*!*LTGREEN,13*!*LTCYAN,14*!*LTRED,15*!*LTMAGENTA,16*!*YELLOW,17*!*WHITE,18*!*GSS,19*!*GLOBALSHOPGREEN,20*!*PINK,21*!*MANHATTANMIST,22*!*PRI-GSS-00,23*!*PRI-GSS-01,24*!*PRI-GSS-02,25*!*PRI-GSS-03,26*!*SEC-GSS-00,27*!*SEC-GSS-01,28*!*SEC-GSS-02,29*!*SEC-GSS-03,30*!*SEC-GSS-04,31*!*SEC-GSS-05,32*!*SEC-GSS-06,33*!*SEC-GSS-07,34*!*SEC-GSS-08,35*!*SEC-GSS-09,36*!*SEC-GSS-10,37*!*SEC-GSS-11,38*!*SEC-GSS-12,39*!*SEC-GSS-13,40*!*SEC-GSS-14,41*!*SEC-GSS-15","Num*!*Color","String*!*String","*!*",",",True)
	f.Data.Dictionary.Exists("dBasicColor",v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		f.Data.Dictionary.Close("dBasicColor")
	f.Intrinsic.Control.EndIf	
	f.Data.Dictionary.CreateFromDatatable("dBasicColor","BasicColor","Num","Color")		
	gui.trvStyle.ddlForeColor.AddItems("DICTIONARY","dBasicColor")	
		
	'FontSize	
	gui.trvStyle.ddlFontSize.AddItem("6.00") 
	gui.trvStyle.ddlFontSize.AddItem("6.25") 
	gui.trvStyle.ddlFontSize.AddItem("6.50") 
	gui.trvStyle.ddlFontSize.AddItem("6.75")  
	gui.trvStyle.ddlFontSize.AddItem("7.00") 
	gui.trvStyle.ddlFontSize.AddItem("7.25")
	gui.trvStyle.ddlFontSize.AddItem("7.50")
	gui.trvStyle.ddlFontSize.AddItem("7.75")
	gui.trvStyle.ddlFontSize.AddItem("8.00")  
	gui.trvStyle.ddlFontSize.AddItem("8.25")
	gui.trvStyle.ddlFontSize.AddItem("8.50")
	gui.trvStyle.ddlFontSize.AddItem("8.75")	
	gui.trvStyle.ddlFontSize.AddItem("9.00") 
	gui.trvStyle.ddlFontSize.AddItem("9.25") 
	gui.trvStyle.ddlFontSize.AddItem("9.50") 
	gui.trvStyle.ddlFontSize.AddItem("9.75") 
	gui.trvStyle.ddlFontSize.AddItem("10.00")   
	gui.trvStyle.ddlFontSize.AddItem("10.25") 
	gui.trvStyle.ddlFontSize.AddItem("10.50") 
	gui.trvStyle.ddlFontSize.AddItem("10.75") 	
	gui.trvStyle.ddlFontSize.AddItem("11.00") 
	gui.trvStyle.ddlFontSize.AddItem("11.25")  
	gui.trvStyle.ddlFontSize.AddItem("11.50")  
	gui.trvStyle.ddlFontSize.AddItem("11.75") 	
	gui.trvStyle.ddlFontSize.AddItem("12.00")	
	gui.trvStyle.ddlFontSize.AddItem("12.25")	
	gui.trvStyle.ddlFontSize.AddItem("12.50")	
	gui.trvStyle.ddlFontSize.AddItem("12.75")	
	
	v.Local.sColor.Declare
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"TRVSTYLE",4986,7001,5,"BLACK*!*8.25*!*Tahoma",V.Local.sHold)	
	F.Intrinsic.String.Split(V.Local.sHold,"*!*",V.Local.sHold)
	
	v.Local.sColor.Set(v.Local.sHold(0))
	gui.trvStyle.ddlForeColor.Text(v.Local.sColor)	
	gui.Form.trvBom.ForeColor(v.Color.[v.Local.sColor])
	
	gui.trvStyle.ddlFontSize.Text(v.Local.sHold(1))
	gui.Form.trvBom.FontSize(v.Local.sHold(1))
	
	gui.trvStyle.ddlFontName.Text(v.Local.sHold(2))
	gui.Form.trvBom.FontName(v.Local.sHold(2))
	gui.Form.tabRTRHead.SetTab(0)
	gui.Form.tabBomHead.SetTab(0)
	gui.Form.txtFocusParent.SetFocus

	gui.Form..AlwaysOnTop(True)
	gui.Form..AlwaysOnTop(False)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Show_Default_Main_Form.End

Program.Sub.Show_Form_Program_FirstLoad.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sFormFrame.Declare
	v.Local.sHold.Declare
	v.Local.sWidth.Declare
	v.Local.sHeight.Declare
	'------------PART II -------------------
	'THE ORDER OF POSITION, SHOW, RESIZE, WINDOWSTATE MUST BE LIKE THAT IN 2019.1, OTHERWISE NOT WORKING
	'1/ POSITION
	gui.Form..Position(-120,-120)	
	
	'2/ SHOW
	gui.Form..Show
	
	'3/ Resize from serialize FORMFRAME
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"FORMFRAME",4986,"1005",5,"",V.Local.sFormFrame)	
	f.Intrinsic.Control.If(v.Local.sFormFrame.Trim,=,"")
		'Default and show full screen
		gui.Form..WindowState(2)
	F.Intrinsic.Control.Else		
		F.Intrinsic.String.Split(v.Local.sFormFrame,"~",V.Local.sHold)		
		f.Intrinsic.Control.If(v.Local.sHold.UBound,=,17)	
			v.Local.sWidth.Set(v.Local.sHold(0))
			v.Local.sHeight.Set(v.Local.sHold(1))
			
			f.Intrinsic.Math.Sub(v.Local.sHold(0),120,v.Global.sInitialWidth)
			f.Intrinsic.Math.Sub(v.Local.sHold(1),180,v.Global.sInitialHeight)
			gui.Form..Size(v.Global.sInitialWidth,v.Global.sInitialHeight)			
			
			'These section must be put before frameMiddle.Size as the frameMiddle.Size will affect the frameTree position which will cause logic error later when displaying the frametree back!!!!!!!!!!!!!
			f.Intrinsic.Control.If(v.Local.sHold(14),=,"False")
				f.Intrinsic.Control.CallSub(picHideSource_Click)
			f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.If(v.Local.sHold(15),=,"False")
				f.Intrinsic.Control.CallSub(picHideTree_Click)
			f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.If(v.Local.sHold(16),=,"False")
				f.Intrinsic.Control.CallSub(picHideRtrHead_Click)
			f.Intrinsic.Control.EndIf
			
			f.Intrinsic.Control.If(v.Local.sHold(17),=,"False")
				f.Intrinsic.Control.CallSub(picHideBomHead_Click)
			f.Intrinsic.Control.EndIf			
			'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! End warning!!!!!!!!!!!!!!!!!!
			
			gui.Form.frameSource.Position(v.Local.sHold(2),v.Local.sHold(3))
			gui.Form.frameSource.Size(v.Local.sHold(4),v.Local.sHold(5))			
			
			gui.Form.frameMiddle.Position(v.Local.sHold(6),v.Local.sHold(7))
			gui.Form.frameMiddle.Size(v.Local.sHold(8),v.Local.sHold(9))
			gui.Form.frameTree.Position(v.Local.sHold(10),v.Local.sHold(11))
			gui.Form.frameTree.Size(v.Local.sHold(12),v.Local.sHold(13))	

			'WindowsState
			f.Intrinsic.Control.If(v.Local.sWidth,=,v.Global.sEnvironmentScreenWidth,and,v.Local.sHeight,=,v.Global.sEnvironmentScreenHeight)
				gui.Form..WindowState(2)
			f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.EndIf	
	
	''''''PART III------------
	'Default view and selection
	f.Intrinsic.Control.CallSub(optRouterHdr_Click)		
	gui.Form.optBomView.Value(1)		
	f.Intrinsic.Control.CallSub(optMat_click)
	gui.Form.optInsertBelow.Value(1)
	gui.NonInv.optNonInvInsertBelow.Value(1)
	f.Intrinsic.Control.CallSub(optNonInvInsertBelow_Click)
	gui.Form.txtManualSeq.BackColor(v.Color.LtGray)
	gui.Form.txtManualSeq.Enabled(False)	
	gui.Form.txtFocusParent.SetFocus	
	gui.Form.optAddInvQuote.Value(1)
		
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Show_Form_Program_FirstLoad.End

Program.Sub.DisplayFavoriteFormLayout.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sFormFrame.Declare
	v.Local.sHold.Declare
	v.Local.sWidth.Declare
	v.Local.sHeight.Declare
	
	'3/ Resize from serialize FORMFRAME
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"FORMFRAME",4986,"1005",5,"",V.Local.sFormFrame)	
	f.Intrinsic.Control.If(v.Local.sFormFrame.Trim,=,"")
		'Default and show full screen
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Favorite Form Layout found.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf			
		
	F.Intrinsic.String.Split(v.Local.sFormFrame,"~",V.Local.sHold)		
	f.Intrinsic.Control.If(v.Local.sHold.UBound,<>,17)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Error in Form Layout Registry.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf

	gui.Form..Position(-120,-120)
	v.Local.sWidth.Set(v.Local.sHold(0))
	v.Local.sHeight.Set(v.Local.sHold(1))
	
	f.Intrinsic.Math.Sub(v.Local.sHold(0),120,v.Global.sInitialWidth)
	f.Intrinsic.Math.Sub(v.Local.sHold(1),180,v.Global.sInitialHeight)
	gui.Form..WindowState(0)
	gui.Form..Size(v.Global.sInitialWidth,v.Global.sInitialHeight)

	
	'These section must be put before frameMiddle.Size as the frameMiddle.Size will affect the frameTree position which will cause logic error later when displaying the frametree back!!!!!!!!!!!!!
	f.Intrinsic.Control.If(v.Local.sHold(14))
		f.Intrinsic.Control.If(v.Screen.Form!frameSource.Visible,=,False)
			f.Intrinsic.Control.CallSub(picHideSource_Click)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.If(v.Screen.Form!frameSource.Visible,=,True)
			f.Intrinsic.Control.CallSub(picHideSource_Click)
		f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Local.sHold(15))
		f.Intrinsic.Control.If(v.Screen.Form!frameTree.Visible,=,False)
			f.Intrinsic.Control.CallSub(picHideTree_Click)				
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else		
		f.Intrinsic.Control.If(v.Screen.Form!frameTree.Visible,=,True)
			f.Intrinsic.Control.CallSub(picHideTree_Click)				
		f.Intrinsic.Control.EndIf		
		
	f.Intrinsic.Control.EndIf
	
	'RTR Head
	f.Intrinsic.Control.If(v.Screen.Form!frameSource.Visible,=,True)
		f.Intrinsic.Control.If(v.Local.sHold(16))
			f.Intrinsic.Control.If(v.Global.bHideRouterHeader)
				f.Intrinsic.Control.CallSub(picHideRtrHead_Click)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.If(v.Global.bHideRouterHeader.Not)
				f.Intrinsic.Control.CallSub(picHideRtrHead_Click)
			f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.EndIf			
	f.Intrinsic.Control.EndIf
	
	'Bom head
	f.Intrinsic.Control.If(v.Screen.Form!frameTree.Visible,=,True)
	
		f.Intrinsic.Control.If(v.Local.sHold(17))
			f.Intrinsic.Control.If(v.Global.bHideTreeTop)
				f.Intrinsic.Control.CallSub(picHideBomHead_Click)
			f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.If(v.Global.bHideTreeTop.Not)
				f.Intrinsic.Control.CallSub(picHideBomHead_Click)
			f.Intrinsic.Control.EndIf					
		f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.EndIf
	'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! End warning!!!!!!!!!!!!!!!!!!
	
	gui.Form.frameSource.Position(v.Local.sHold(2),v.Local.sHold(3))
	gui.Form.frameSource.Size(v.Local.sHold(4),v.Local.sHold(5))			
	
	gui.Form.frameMiddle.Position(v.Local.sHold(6),v.Local.sHold(7))
	gui.Form.frameMiddle.Size(v.Local.sHold(8),v.Local.sHold(9))
	gui.Form.frameTree.Position(v.Local.sHold(10),v.Local.sHold(11))
	gui.Form.frameTree.Size(v.Local.sHold(12),v.Local.sHold(13))	

	'WindowsState
	f.Intrinsic.Control.If(v.Local.sWidth,=,v.Global.sEnvironmentScreenWidth,and,v.Local.sHeight,=,v.Global.sEnvironmentScreenHeight)
		gui.Form..WindowState(2)
	f.Intrinsic.Control.EndIf	
	
	''''''PART III------------
	'Default view and selection
	f.Intrinsic.Control.CallSub(optRouterHdr_Click)		
	gui.Form.optBomView.Value(1)		
	f.Intrinsic.Control.CallSub(optMat_click)
	gui.Form.optInsertBelow.Value(1)
	gui.Form.txtManualSeq.BackColor(v.Color.LtGray)
	gui.Form.txtManualSeq.Enabled(False)	
	gui.Form.txtFocusParent.SetFocus	
	gui.Form.optAddInvQuote.Value(1)		
		
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.DisplayFavoriteFormLayout.End

Program.Sub.Serialize.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sSerialize.Declare
	v.Local.sControl.Declare
	v.Local.sGrid.Declare
	v.Local.iCnt.Declare
	v.Local.sItemControl.Declare
	v.Local.sItemGrid.Declare
	v.Local.sSQL.Declare
	v.Local.sSeq.Declare
	
	f.Intrinsic.String.Split("GGC_MAT,GGC_OPCODE,GGC_WC,GGC_OUTS,GGC_BOM",",",v.Local.sControl)
	f.Intrinsic.String.Split("GV_MATERIAL,GV_OPERATIONS,GV_WCENTER,GV_OUTS,GV_CHILD",",",v.Local.sGrid)
	
	f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.sControl.UBound,1)
		v.Local.sItemControl.Set(v.Local.sControl(v.Local.iCnt))
		v.Local.sItemGrid.Set(v.Local.sGrid(v.Local.iCnt))	
		f.Intrinsic.String.Build("100{0}",v.Local.iCnt,v.Local.sSeq)
		'Serialize		
		gui.Form.[v.Local.sItemControl].Serialize(v.Local.sItemGrid,V.Local.sSerialize)
		F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,v.Local.sItemGrid,4986,v.Local.sSeq,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)		
	f.Intrinsic.Control.Next(v.Local.iCnt)	
	
	gui.Form.gsBookMarks.Serialize("GV_BOOKMARKS",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GV_BOOKMARKS",4986,9001,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)	

	gui.BookM.gsBookM.Serialize("GV_BOOKM",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GV_BOOKM",4986,9002,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)		

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription,"Serialize error")
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.If(v.ODBC.conx.State,=,1)
		f.ODBC.Connection!conx.Close
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.End
f.Intrinsic.Control.EndTry
Program.Sub.Serialize.End

Program.Sub.SerializeRouterGrid.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sSerialize.Declare
	
	f.Intrinsic.UI.InvokeWaitDialog("Saving Router Grid layout...")
	'Serialize		
	gui.Form.GGC_Bom.Serialize("GV_CHILD",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GV_CHILD",4986,1004,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	f.Intrinsic.UI.CloseWaitDialog
	
f.Intrinsic.Control.Catch
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription,"Serialize error")
	f.Intrinsic.Control.End
f.Intrinsic.Control.EndTry
Program.Sub.SerializeRouterGrid.End

Program.Sub.Deserialize.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sSerialize.Declare
	v.Local.sControl.Declare
	v.Local.sGrid.Declare
	v.Local.iCnt.Declare
	v.Local.sItemControl.Declare
	v.Local.sItemGrid.Declare
	v.Local.sSeq.Declare
	v.Local.sDT.Declare
	v.Local.sItemDT.Declare
	v.Local.sRet.Declare
		
	f.Intrinsic.String.Split("GGC_BOM,GGC_QUOTE,GGC_MAT,GGC_WC,GGC_OUTS,GGC_OPCODE",",",v.Local.sControl)
	f.Intrinsic.String.Split("GV_CHILD,GV_QLINES,GV_MATERIAL,GV_WCENTER,GV_OUTS,GV_OPERATIONS",",",v.Local.sGrid)
	f.Intrinsic.String.Split("GVRTR,GVQUOTE,GVMAT,GVWC,GVOUT,GVOPC",",",v.Local.sDT)
	
	f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.sControl.UBound,1)
		v.Local.sItemControl.Set(v.Local.sControl(v.Local.iCnt))
		v.Local.sItemGrid.Set(v.Local.sGrid(v.Local.iCnt))
		v.Local.sItemDT.Set(v.Local.sDT(v.Local.iCnt))
		f.Data.DataTable.Select(v.Local.sItemDT,"Apply = 1",v.Local.sRet)
		f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			v.Local.sRet.Set(v.Local.sRet(0))
			v.Local.sSerialize.Set(v.DataTable.[v.Local.sItemDT](v.Local.sRet).SerVal!FieldValString)
			f.Intrinsic.Control.If(v.Local.sSerialize.Trim,<>,"")
				gui.Form.[v.Local.sItemControl].Deserialize(v.Local.sSerialize)
			f.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.Next(v.Local.iCnt)	

	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GV_BOOKMARKS",4986,"9001",6,"",V.Local.sSerialize)		
	F.Intrinsic.Control.If(V.Local.sSerialize,<>,"")
		gui.Form.gsBookMarks.Deserialize(V.Local.sSerialize)
	F.Intrinsic.Control.EndIf	
	
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GV_BOOKM",4986,"9002",6,"",V.Local.sSerialize)		
	F.Intrinsic.Control.If(V.Local.sSerialize,<>,"")
		gui.BookM.gsBookM.Deserialize(V.Local.sSerialize)
	F.Intrinsic.Control.EndIf		
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Deserialize.End

Program.Sub.DeleteGridLayouts.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sUserID.Declare
	v.Local.sSQL.Declare
	
	f.Intrinsic.UI.InvokeWaitDialog("Deleting All Grid Layouts in Registry...")
	
	F.Global.Security.GetUserID(v.Caller.User,v.Caller.CompanyCode,v.Local.sUserID)
	'Delete old registry records
	F.ODBC.Connection!common.OpenCommonConnection(300)

	'MATERIAL
	f.Intrinsic.String.Build("Delete From Gs_Registry Where User_ID = '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '{2}' and Program = '{3}';",v.Local.sUserID,v.Caller.CompanyCode,"1000","GV_MATERIAL",v.Local.sSQL)
	F.ODBC.Connection!common.Execute(v.Local.sSQL)
	'OPCODES (GV_OPERATIONS)
	f.Intrinsic.String.Build("Delete From Gs_Registry Where User_ID = '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '{2}' and Program = '{3}';",v.Local.sUserID,v.Caller.CompanyCode,"1001","GV_OPERATIONS",v.Local.sSQL)
	F.ODBC.Connection!common.Execute(v.Local.sSQL)	
	'WC
	f.Intrinsic.String.Build("Delete From Gs_Registry Where User_ID = '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '{2}' and Program = '{3}';",v.Local.sUserID,v.Caller.CompanyCode,"1002","GV_WCENTER",v.Local.sSQL)
	F.ODBC.Connection!common.Execute(v.Local.sSQL)		
	'OUTSIDE
	f.Intrinsic.String.Build("Delete From Gs_Registry Where User_ID = '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '{2}' and Program = '{3}';",v.Local.sUserID,v.Caller.CompanyCode,"1003","GV_OUTS",v.Local.sSQL)
	F.ODBC.Connection!common.Execute(v.Local.sSQL)		
	'MAIN GRID
	f.Intrinsic.String.Build("Delete From Gs_Registry Where User_ID = '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '{2}' and Program = '{3}';",v.Local.sUserID,v.Caller.CompanyCode,"1004","GV_CHILD",v.Local.sSQL)
	F.ODBC.Connection!common.Execute(v.Local.sSQL)	
	
	'GV_BOOKMARKS
	f.Intrinsic.String.Build("Delete From Gs_Registry Where User_ID = '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '{2}' and Program = '{3}';",v.Local.sUserID,v.Caller.CompanyCode,"9001","GV_BOOKMARKS",v.Local.sSQL)
	F.ODBC.Connection!common.Execute(v.Local.sSQL)	
	
	'GV_BOOKM
	f.Intrinsic.String.Build("Delete From Gs_Registry Where User_ID = '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '{2}' and Program = '{3}';",v.Local.sUserID,v.Caller.CompanyCode,"9002","GV_BOOKM",v.Local.sSQL)
	F.ODBC.Connection!common.Execute(v.Local.sSQL)		
	
	F.ODBC.Connection!common.Close		

	f.Intrinsic.UI.CloseWaitDialog
	f.Intrinsic.UI.Msgbox("All Grid Layouts have been reset successfully. This will be applied the next time you launch the program.","Attention")

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.DeleteGridLayouts.End

Program.Sub.SaveFormLayoutAsFavorite.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSizePosition.Declare
	v.Local.sHold.Declare

	'Form Width,Height,Frame Position Left,Top,Frame Width,Height
	f.Intrinsic.String.Build("{0}~{1}~{2}~{3}~{4}~{5}~{6}~{7}~{8}~{9}~{10}~{11}~{12}~{13}~{14}~{15}~{16}~{17}",v.Screen.Form.Width,v.Screen.Form.Height,v.Screen.Form!frameSource.Left,v.Screen.Form!frameSource.Top,v.Screen.Form!frameSource.Width,v.Screen.Form!frameSource.Height,v.Screen.Form!frameMiddle.Left,v.Screen.Form!frameMiddle.Top,v.Screen.Form!frameMiddle.Width,v.Screen.Form!frameMiddle.Height,v.Screen.Form!frameTree.Left,v.Screen.Form!frameTree.Top,v.Screen.Form!frameTree.Width,v.Screen.Form!frameTree.Height,v.Screen.Form!frameSource.Visible,v.Screen.Form!frameTree.Visible,v.Screen.Form!frameRtrHead.Visible,v.Screen.Form!frameTreeTop.Visible,v.Local.sSizePosition)
	
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"FORMFRAME",4986,"1005",False,V.Local.sSizePosition,False,0,-1,v.Ambient.Date,12:00:00 AM)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.SaveFormLayoutAsFavorite.End

Program.Sub.DeleteFavoriteFormLayout.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sUserID.Declare
	v.Local.sSQL.Declare
	
	F.Global.Security.GetUserID(v.Caller.User,v.Caller.CompanyCode,v.Local.sUserID)
	F.ODBC.Connection!common.OpenCommonConnection(300)
	f.Intrinsic.String.Build("Delete From Gs_Registry Where User_ID = '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '{2}' and Program = '{3}';",v.Local.sUserID,v.Caller.CompanyCode,"1005","FORMFRAME",v.Local.sSQL)
	F.ODBC.Connection!common.Execute(v.Local.sSQL)
	F.ODBC.Connection!common.Close

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.DeleteFavoriteFormLayout.End

Program.Sub.ContextMenu_MainGrid.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	'Break does not work in 2019.1 so here use dash
	Gui.Form..ContextMenuCreate("lines")
	Gui.Form..ContextMenuAddItem("lines","CLEARALLSELECT",0,"  Clear Selection")	
	Gui.Form..ContextMenuAddItem("lines","M",0,"  Move")
	Gui.Form..ContextMenuAddItem("lines","PA",0,"  Place Row Above")
	Gui.Form..ContextMenuAddItem("lines","PU",0,"  Place Row Below")
	Gui.Form..ContextMenuAddItem("lines","break0",0,"----------------------------------------")
	Gui.Form..ContextMenuAddItem("lines","SELECTPHANTOMBLOC",0,"  Select Phantom Block")
	Gui.Form..ContextMenuAddItem("lines","PLACEBLOCABOVE",0,"  Place Router Seq Block Above")
	Gui.Form..ContextMenuAddItem("lines","PLACEBLOCBELOW",0,"  Place Router Seq Block Below")
	Gui.Form..ContextMenuAddItem("lines","break0",0,"----------------------------------------")
	Gui.Form..ContextMenuAddItem("lines","D",0,"  Delete Highlighted Row")
	Gui.Form..ContextMenuAddItem("lines","DELETESELECTEDSEQ",0,"  Delete Selected Seqs")
	Gui.Form..ContextMenuAddItem("lines","break1",0,"----------------------------------------")
	Gui.Form..ContextMenuAddItem("lines","ResequenceNormalsMenu",0,"  Resequence Normals")	
	Gui.Form..ContextMenuAddItem("lines","Resequence99sMenu",0,"  Resequence 99XXXXs")
	Gui.Form..ContextMenuSetItemEventHandler("lines","CLEARALLSELECT","CLEARALLSELECT")
	Gui.Form..ContextMenuSetItemEventHandler("lines","M","MoveChildRow")
	Gui.Form..ContextMenuSetItemEventHandler("lines","PA","PlaceRowAbove")
	Gui.Form..ContextMenuSetItemEventHandler("lines","PU","PlaceRowBelow")
	
	Gui.Form..ContextMenuSetItemEventHandler("lines","SELECTPHANTOMBLOC","BLOCMENU")
	Gui.Form..ContextMenuSetItemEventHandler("lines","PLACEBLOCABOVE","BLOCMENU")
	Gui.Form..ContextMenuSetItemEventHandler("lines","PLACEBLOCBELOW","BLOCMENU")
	
	Gui.Form..ContextMenuSetItemEventHandler("lines","D","DeleteLine")
	Gui.Form..ContextMenuSetItemEventHandler("lines","DELETESELECTEDSEQ","DELETESELECTEDSEQ")
	Gui.Form..ContextMenuSetItemEventHandler("lines","ResequenceNormalsMenu","ResequenceNormalsMenu")
	Gui.Form..ContextMenuSetItemEventHandler("lines","Resequence99sMenu","Resequence99sMenu")
	
	Gui.Form..ContextMenuAddItem("lines","break2",0,"----------------------------------------")
	Gui.Form..ContextMenuAddItem("lines","CR",0,"  Insert Router Lines")
	Gui.Form..ContextMenuAddItem("lines","CRH",0,"  Insert Router as Component")
	Gui.Form..ContextMenuAddItem("lines","COM",0,"  Insert Comment")
	Gui.Form..ContextMenuAddItem("lines","EX",0,"  Add Text Code")
	Gui.Form..ContextMenuAddItem("lines","I",0,"  Insert Non Inventory")
	Gui.Form..ContextMenuAddItem("lines","InsertPhantomAsBlockOfComments",0,"  Insert Phantom as Block of Comments")
	Gui.Form..ContextMenuAddItem("lines","InsertReferencePartAsComment",0,"  Insert Reference Part as Comment")
	
	Gui.Form..ContextMenuAddItem("lines","break4",0,"----------------------------------------")
	Gui.Form..ContextMenuAddItem("lines","SaveGridLayouts",0,"  Save All Grid Layouts")
	Gui.Form..ContextMenuAddItem("lines","ExportGrid",0,"  Export Grid to Excel/Csv")
	Gui.Form..ContextMenuSetItemEventHandler("lines","I","InsNonInventory")
	Gui.Form..ContextMenuSetItemEventHandler("lines","CR","CopyRouter_pop")
	Gui.Form..ContextMenuSetItemEventHandler("lines","CRH","CopyRouterHeader_pop")
	Gui.Form..ContextMenuSetItemEventHandler("lines","COM","InsComment")
	Gui.Form..ContextMenuSetItemEventHandler("lines","EX","addTextCode")
	Gui.Form..ContextMenuSetItemEventHandler("lines","SaveGridLayouts","SaveGridLayouts")
	Gui.Form..ContextMenuSetItemEventHandler("lines","ExportGrid","ExportGrid")
	Gui.Form..ContextMenuSetItemEventHandler("lines","InsertPhantomAsBlockOfComments","InsertPhantomAsBlockOfComments")
	Gui.Form..ContextMenuSetItemEventHandler("lines","InsertReferencePartAsComment","InsertReferencePartAsComment")			

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ContextMenu_MainGrid.End

Program.Sub.ContextMenu_Plus.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sItem.Declare
	v.Local.sFile.Declare
	v.Local.bEx.Declare
	v.Local.sFileContent.Declare
	
	v.Local.sItem.Set("")
	'Display more field on Bom Node
	Gui.Form..ContextMenuCreate("DSPL")	
	Gui.Form..ContextMenuAddItem("DSPL","Display",0,"DISPLAY FIELD")
	Gui.Form..ContextMenuAddItem("DSPL","break1",3)
	
	Gui.Form..ContextMenuAddItem("DSPL","DISPLAYUM",0,v.Local.sItem)
	Gui.Form..ContextMenuAddItem("DSPL","DISPLAYSOURCE",0,v.Local.sItem)
	Gui.Form..ContextMenuAddItem("DSPL","DISPLAYCATEGORY",0,v.Local.sItem)
	Gui.Form..ContextMenuAddItem("DSPL","DISPLAYCOST",0,v.Local.sItem)
	Gui.Form..ContextMenuAddItem("DSPL","DISPLAYPL",0,v.Local.sItem)	
	Gui.Form..ContextMenuAddItem("DSPL","DISPLAYCOMPLETE",0,v.Local.sItem)
	Gui.Form..ContextMenuAddItem("DSPL","BOLDCOMPLETE",0,v.Local.sItem)
	Gui.Form..ContextMenuAddItem("DSPL","DISPLAYLOC",0,v.Local.sItem)
	
	Gui.Form..ContextMenuSetItemEventHandler("DSPL","DISPLAYUM","DSPL_Click")
	Gui.Form..ContextMenuSetItemEventHandler("DSPL","DISPLAYSOURCE","DSPL_Click")
	Gui.Form..ContextMenuSetItemEventHandler("DSPL","DISPLAYCATEGORY","DSPL_Click")
	Gui.Form..ContextMenuSetItemEventHandler("DSPL","DISPLAYCOST","DSPL_Click")
	Gui.Form..ContextMenuSetItemEventHandler("DSPL","DISPLAYPL","DSPL_Click")	
	Gui.Form..ContextMenuSetItemEventHandler("DSPL","DISPLAYCOMPLETE","DSPL_Click")	
	Gui.Form..ContextMenuSetItemEventHandler("DSPL","BOLDCOMPLETE","DSPL_Click")
	Gui.Form..ContextMenuSetItemEventHandler("DSPL","DISPLAYLOC","DSPL_Click")
	
	'Decimal settings
	Gui.Form..ContextMenuCreate("DEC")	
	Gui.Form..ContextMenuAddItem("DEC","Qty",0,"QTY DECIMAL")
	Gui.Form..ContextMenuAddItem("DEC","0",0,"        0")
	Gui.Form..ContextMenuAddItem("DEC","1",0,"        1")
	Gui.Form..ContextMenuAddItem("DEC","2",0,"        2")
	Gui.Form..ContextMenuAddItem("DEC","3",0,"        3")
	Gui.Form..ContextMenuAddItem("DEC","4",0,"        4")
	Gui.Form..ContextMenuAddItem("DEC","5",0,"        5")
	Gui.Form..ContextMenuAddItem("DEC","6",0,"        6")
	Gui.Form..ContextMenuAddItem("DEC","Cost",0,"COST DECIMAL")
	Gui.Form..ContextMenuAddItem("DEC","00",0,"        0")
	Gui.Form..ContextMenuAddItem("DEC","10",0,"        1")
	Gui.Form..ContextMenuAddItem("DEC","20",0,"        2")
	Gui.Form..ContextMenuAddItem("DEC","30",0,"        3")
	Gui.Form..ContextMenuAddItem("DEC","40",0,"        4")
	Gui.Form..ContextMenuAddItem("DEC","50",0,"        5")
	Gui.Form..ContextMenuAddItem("DEC","60",0,"        6")
	Gui.Form..ContextMenuAddItem("DEC","Weight",0,"WEIGHT DECIMAL")
	Gui.Form..ContextMenuAddItem("DEC","000",0,"        0")
	Gui.Form..ContextMenuAddItem("DEC","100",0,"        1")
	Gui.Form..ContextMenuAddItem("DEC","200",0,"        2")
	Gui.Form..ContextMenuAddItem("DEC","300",0,"        3")
	Gui.Form..ContextMenuAddItem("DEC","400",0,"        4")
	Gui.Form..ContextMenuAddItem("DEC","500",0,"        5")
	Gui.Form..ContextMenuAddItem("DEC","600",0,"        6")
	
	Gui.Form..ContextMenuSetItemEventHandler("DEC","0","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","1","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","2","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","3","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","4","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","5","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","6","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","00","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","10","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","20","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","30","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","40","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","50","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","60","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","000","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","100","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","200","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","300","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","400","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","500","DECIMAL_CLICK")
	Gui.Form..ContextMenuSetItemEventHandler("DEC","600","DECIMAL_CLICK")
	
	'Label on Bom Node settings
	Gui.Form..ContextMenuCreate("LAB")	
	Gui.Form..ContextMenuAddItem("LAB","MenuHeader",0,"DISPLAY LABEL")
	Gui.Form..ContextMenuAddItem("LAB","Qty",0,v.Local.sItem)
	Gui.Form..ContextMenuAddItem("LAB","Part",0,v.Local.sItem)
	Gui.Form..ContextMenuAddItem("LAB","Descr",0,v.Local.sItem)
	Gui.Form..ContextMenuAddItem("LAB","UM",0,v.Local.sItem)
	Gui.Form..ContextMenuAddItem("LAB","Source",0,v.Local.sItem)
	Gui.Form..ContextMenuAddItem("LAB","Category",0,v.Local.sItem)
	Gui.Form..ContextMenuAddItem("LAB","Cost",0,v.Local.sItem)
	Gui.Form..ContextMenuAddItem("LAB","PL",0,v.Local.sItem)
	Gui.Form..ContextMenuAddItem("LAB","LOC",0,v.Local.sItem)
	Gui.Form..ContextMenuAddItem("LAB","MORE",0,"         More Treeview Format...")
	
	Gui.Form..ContextMenuSetItemEventHandler("LAB","Qty","Label_click")
	Gui.Form..ContextMenuSetItemEventHandler("LAB","Part","Label_click")	
	Gui.Form..ContextMenuSetItemEventHandler("LAB","Descr","Label_click")	
	Gui.Form..ContextMenuSetItemEventHandler("LAB","UM","Label_click")	
	Gui.Form..ContextMenuSetItemEventHandler("LAB","Source","Label_click")
	Gui.Form..ContextMenuSetItemEventHandler("LAB","Category","Label_click")	
	Gui.Form..ContextMenuSetItemEventHandler("LAB","Cost","Label_click")	
	Gui.Form..ContextMenuSetItemEventHandler("LAB","PL","Label_click")	
	Gui.Form..ContextMenuSetItemEventHandler("LAB","LOC","Label_click")
	Gui.Form..ContextMenuSetItemEventHandler("LAB","MORE","Label_click")	
	
	Gui.Form..ContextMenuCreate("BomTreeMenu")
	Gui.Form..ContextMenuAddItem("BomTreeMenu","LOADBOM",0,"  Load Bom")
	Gui.Form..ContextMenuAddItem("BomTreeMenu","LOADROUTER",0,"  Load Router")
	Gui.Form..ContextMenuAddItem("BomTreeMenu","LOADBOMROUTER",0,"  Load Bom and Router")
	Gui.Form..ContextMenuAddItem("BomTreeMenu","DOCUMENTCONTROL",0,"  Document Control")
	Gui.Form..ContextMenuAddItem("BomTreeMenu","break1",0,"------------------------------")
	Gui.Form..ContextMenuAddItem("BomTreeMenu","BOOKMARK",0,"  Bookmark")
	Gui.Form..ContextMenuAddItem("BomTreeMenu","COPYPART",0,"  Copy Part to Clipboard")
	Gui.Form..ContextMenuAddItem("BomTreeMenu","VIEWPART",0,"  View Part Master")
	Gui.Form..ContextMenuAddItem("BomTreeMenu","EDITPART",0,"  Edit Part Master")
	Gui.Form..ContextMenuAddItem("BomTreeMenu","SUPPLYDEMAND",0,"  Supply and Demand")
	
	Gui.Form..ContextMenuAddItem("BomTreeMenu","break2",0,"------------------------------")	
	gui.form..ContextMenuAddItem("BomTreeMenu","InsertNewMFGPart",0,"  Insert MFG Part")
	gui.form..ContextMenuAddItem("BomTreeMenu","EditRouterBomInv",0,"  Edit Router/Bom/Inventory")
	gui.form..ContextMenuAddItem("BomTreeMenu","MOVESEQ",0,"  Move Seq into") 
	Gui.Form..ContextMenuAddItem("BomTreeMenu","break3",0,"------------------------------")
	
 	gui.form..ContextMenuAddItem("BomTreeMenu","Qty",0,v.Local.sItem)
 	gui.form..ContextMenuAddItem("BomTreeMenu","Part",0,v.Local.sItem)
 	gui.form..ContextMenuAddItem("BomTreeMenu","Description",0,v.Local.sItem)
 	gui.form..ContextMenuAddItem("BomTreeMenu","UM",0,v.Local.sItem)
 	gui.form..ContextMenuAddItem("BomTreeMenu","SOURCE",0,v.Local.sItem)
 	gui.form..ContextMenuAddItem("BomTreeMenu","CATEGORY",0,v.Local.sItem)
 	gui.form..ContextMenuAddItem("BomTreeMenu","COST",0,v.Local.sItem)
 	gui.form..ContextMenuAddItem("BomTreeMenu","PL",0,v.Local.sItem)
 	gui.form..ContextMenuAddItem("BomTreeMenu","COMPLETE",0,v.Local.sItem) 	
	
	Gui.Form..ContextMenuSetItemEventHandler("BomTreeMenu","LOADROUTER","BomTreeMenu")
	Gui.Form..ContextMenuSetItemEventHandler("BomTreeMenu","LOADBOM","BomTreeMenu")
	Gui.Form..ContextMenuSetItemEventHandler("BomTreeMenu","LOADBOMROUTER","BomTreeMenu")
	Gui.Form..ContextMenuSetItemEventHandler("BomTreeMenu","DOCUMENTCONTROL","BomTreeMenu")
	Gui.Form..ContextMenuSetItemEventHandler("BomTreeMenu","COPYPART","BomTreeMenu")	
	Gui.Form..ContextMenuSetItemEventHandler("BomTreeMenu","VIEWPART","BomTreeMenu")
	Gui.Form..ContextMenuSetItemEventHandler("BomTreeMenu","EDITPART","BomTreeMenu")
	Gui.Form..ContextMenuSetItemEventHandler("BomTreeMenu","SUPPLYDEMAND","BomTreeMenu")
	Gui.Form..ContextMenuSetItemEventHandler("BomTreeMenu","BOOKMARK","BomTreeMenu")	
	Gui.Form..ContextMenuSetItemEventHandler("BomTreeMenu","InsertNewMFGPart","BomTreeMenu")
	Gui.Form..ContextMenuSetItemEventHandler("BomTreeMenu","EditRouterBomInv","BomTreeMenu")
	Gui.Form..ContextMenuSetItemEventHandler("BomTreeMenu","MOVESEQ","BomTreeMenu")

	
	'Material left click on Material Source grid
	Gui.Form..ContextMenuCreate("MaterialSourceMenu")
	Gui.Form..ContextMenuAddItem("MaterialSourceMenu","BOOKMARK",0,"  Bookmark")
	Gui.Form..ContextMenuAddItem("MaterialSourceMenu","VIEWPART",0,"  View Part Master")
	Gui.Form..ContextMenuAddItem("MaterialSourceMenu","EDITPART",0,"  Edit Part Master")
	Gui.Form..ContextMenuAddItem("MaterialSourceMenu","SUPPLYANDDEMAND",0,"  Supply and Demand")
	Gui.Form..ContextMenuAddItem("MaterialSourceMenu","DOCUMENTCONTROL",0,"  Document Control")
	
	Gui.Form..ContextMenuSetItemEventHandler("MaterialSourceMenu","VIEWPART","MaterialSourceMenu")
	Gui.Form..ContextMenuSetItemEventHandler("MaterialSourceMenu","EDITPART","MaterialSourceMenu")
	Gui.Form..ContextMenuSetItemEventHandler("MaterialSourceMenu","DOCUMENTCONTROL","MaterialSourceMenu")
	Gui.Form..ContextMenuSetItemEventHandler("MaterialSourceMenu","BOOKMARK","MaterialSourceMenu")
	Gui.Form..ContextMenuSetItemEventHandler("MaterialSourceMenu","SUPPLYANDDEMAND","MaterialSourceMenu")
	'Phantom and Reference
	Gui.Form..ContextMenuAddItem("MaterialSourceMenu","break1",0,"------------------------------------------")
	Gui.Form..ContextMenuAddItem("MaterialSourceMenu","InsertPhantomAsBlockOfComments_MaterialList",0,"  Insert Phantom as Block of Comments")
	Gui.Form..ContextMenuAddItem("MaterialSourceMenu","InsertReferencePartAsComment_Material",0,"  Insert Reference Part as Comment")
	Gui.Form..ContextMenuSetItemEventHandler("MaterialSourceMenu","InsertPhantomAsBlockOfComments_MaterialList","InsertPhantomAsBlockOfComments_MaterialList")
	Gui.Form..ContextMenuSetItemEventHandler("MaterialSourceMenu","InsertReferencePartAsComment_Material","InsertReferencePartAsComment_Material")	
	
	'Inventory Master View/Open/Delete
	Gui.Form..ContextMenuCreate("InvMaster")
	Gui.Form..ContextMenuAddItem("InvMaster","Display",0,"Inventory > File > Inventory Parts")
	Gui.Form..ContextMenuAddItem("InvMaster","break2",3)
	Gui.Form..ContextMenuAddItem("InvMaster","OPEN",0,"   Open")
	Gui.Form..ContextMenuAddItem("InvMaster","NEW",0,"   New")
	Gui.Form..ContextMenuAddItem("InvMaster","COPY",0,"   Copy")
	Gui.Form..ContextMenuAddItem("InvMaster","DELETE",0,"   Delete")
	
	Gui.Form..ContextMenuSetItemEventHandler("InvMaster","OPEN","INVMASTER")
	Gui.Form..ContextMenuSetItemEventHandler("InvMaster","NEW","INVMASTER")
	Gui.Form..ContextMenuSetItemEventHandler("InvMaster","COPY","INVMASTER")	
	Gui.Form..ContextMenuSetItemEventHandler("InvMaster","DELETE","INVMASTER")
	
	'Router Master View/Open/Delete
	Gui.Form..ContextMenuCreate("RouterMaster")
	Gui.Form..ContextMenuAddItem("RouterMaster","Display",0,"Est./Rout. & Quote Mgmt > File > Est./Std. Routers")
	Gui.Form..ContextMenuAddItem("RouterMaster","break2",3)
	Gui.Form..ContextMenuAddItem("RouterMaster","OPEN",0,"   Open")
	Gui.Form..ContextMenuAddItem("RouterMaster","NEW",0,"   New")
	Gui.Form..ContextMenuAddItem("RouterMaster","COPY",0,"   Copy")
	Gui.Form..ContextMenuAddItem("RouterMaster","DELETE",0,"   Delete")
	
	Gui.Form..ContextMenuSetItemEventHandler("RouterMaster","OPEN","RouterMASTER")
	Gui.Form..ContextMenuSetItemEventHandler("RouterMaster","NEW","RouterMASTER")
	Gui.Form..ContextMenuSetItemEventHandler("RouterMaster","COPY","RouterMASTER")	
	Gui.Form..ContextMenuSetItemEventHandler("RouterMaster","DELETE","RouterMASTER")
	
	'Bom Master View/Open/Delete
	Gui.Form..ContextMenuCreate("BomMaster")
	Gui.Form..ContextMenuAddItem("BomMaster","Display",0,"Bill Of Material > File > Bill of Materials")
	Gui.Form..ContextMenuAddItem("BomMaster","break2",3)
	Gui.Form..ContextMenuAddItem("BomMaster","OPEN",0,"   Open")
	Gui.Form..ContextMenuAddItem("BomMaster","NEW",0,"   New")
	Gui.Form..ContextMenuAddItem("BomMaster","COPY",0,"   Copy")
	Gui.Form..ContextMenuAddItem("BomMaster","DELETE",0,"   Delete")
	
	Gui.Form..ContextMenuSetItemEventHandler("BomMaster","OPEN","BomMASTER")
	Gui.Form..ContextMenuSetItemEventHandler("BomMaster","NEW","BomMASTER")
	Gui.Form..ContextMenuSetItemEventHandler("BomMaster","COPY","BomMASTER")	
	Gui.Form..ContextMenuSetItemEventHandler("BomMaster","DELETE","BomMASTER")
	
	'QUICKQUOTE View/Open/Delete
	Gui.Form..ContextMenuCreate("QUICKQUOTE")
	Gui.Form..ContextMenuAddItem("QUICKQUOTE","Display",0,"Est./Rout. & Quote Mgmt > File > Quick Quote")
	Gui.Form..ContextMenuAddItem("QUICKQUOTE","break2",3)
	Gui.Form..ContextMenuAddItem("QUICKQUOTE","OPEN",0,"   Open")
	Gui.Form..ContextMenuAddItem("QUICKQUOTE","NEW",0,"   New")
	Gui.Form..ContextMenuAddItem("QUICKQUOTE","COPY",0,"   Copy")
	Gui.Form..ContextMenuAddItem("QUICKQUOTE","DELETE",0,"   Delete")
	
	Gui.Form..ContextMenuSetItemEventHandler("QUICKQUOTE","OPEN","QUICKQUOTE")
	Gui.Form..ContextMenuSetItemEventHandler("QUICKQUOTE","NEW","QUICKQUOTE")
	Gui.Form..ContextMenuSetItemEventHandler("QUICKQUOTE","COPY","QUICKQUOTE")	
	Gui.Form..ContextMenuSetItemEventHandler("QUICKQUOTE","DELETE","QUICKQUOTE")		
	
	'Bookmarks
	Gui.Form..ContextMenuCreate("BookMarks")
	Gui.Form..ContextMenuAddItem("BookMarks","LOADBOM",0,"  Load Bom")	
	Gui.Form..ContextMenuAddItem("BookMarks","LOADROUTER",0,"  Load Router")
	Gui.Form..ContextMenuAddItem("BookMarks","LOADBOMROUTER",0,"  Load Bom and Router")
	Gui.Form..ContextMenuAddItem("BookMarks","break1",0,"------------------------------")
	Gui.Form..ContextMenuAddItem("BookMarks","DOCUMENTCONTROLBOM",0,"  Document Control (Bom)")
	Gui.Form..ContextMenuAddItem("BookMarks","DOCUMENTCONTROLROUTER",0,"  Document Control (Router)")
	Gui.Form..ContextMenuAddItem("BookMarks","break2",0,"------------------------------")
	Gui.Form..ContextMenuAddItem("BookMarks","COPYPART",0,"  Copy Part to Clipboard")
	Gui.Form..ContextMenuAddItem("BookMarks","VIEWPART",0,"  View Part Master")
	Gui.Form..ContextMenuAddItem("BookMarks","EDITPART",0,"  Edit Part Master")
	Gui.Form..ContextMenuAddItem("BookMarks","SUPPLYDEMAND",0,"  Supply and Demand")
	Gui.Form..ContextMenuAddItem("BookMarks","break3",0,"------------------------------")
	Gui.Form..ContextMenuAddItem("BookMarks","DELETEALL",0,"  Delete All Bookmarks")
	Gui.Form..ContextMenuAddItem("BookMarks","ADDBOOKMARK",0,"  Add Bookmark")
	Gui.Form..ContextMenuAddItem("BookMarks","DELETEBOOKMARK",0,"  Delete Bookmark")
	
	Gui.Form..ContextMenuSetItemEventHandler("BookMarks","LOADROUTER","BookMarks")
	Gui.Form..ContextMenuSetItemEventHandler("BookMarks","LOADBOM","BookMarks")
	Gui.Form..ContextMenuSetItemEventHandler("BookMarks","LOADBOMROUTER","BookMarks")
	Gui.Form..ContextMenuSetItemEventHandler("BookMarks","DOCUMENTCONTROLBOM","BookMarks")
	Gui.Form..ContextMenuSetItemEventHandler("BookMarks","DOCUMENTCONTROLROUTER","BookMarks")
	Gui.Form..ContextMenuSetItemEventHandler("BookMarks","COPYPART","BookMarks")	
	Gui.Form..ContextMenuSetItemEventHandler("BookMarks","VIEWPART","BookMarks")
	Gui.Form..ContextMenuSetItemEventHandler("BookMarks","EDITPART","BookMarks")
	Gui.Form..ContextMenuSetItemEventHandler("BookMarks","SUPPLYDEMAND","BookMarks")
	Gui.Form..ContextMenuSetItemEventHandler("BookMarks","DELETEALL","BookMarks")
	Gui.Form..ContextMenuSetItemEventHandler("BookMarks","ADDBOOKMARK","BookMarks")
	Gui.Form..ContextMenuSetItemEventHandler("BookMarks","DELETEBOOKMARK","BookMarks")
	
	Gui.Form..ContextMenuCreate("BookMarksRightClick")
	Gui.Form..ContextMenuAddItem("BookMarksRightClick","DELETEALL",0,"  Delete All Bookmarks")	
	Gui.Form..ContextMenuAddItem("BookMarksRightClick","ADDBOOKMARK",0,"  Add Bookmark")
	Gui.Form..ContextMenuSetItemEventHandler("BookMarksRightClick","DELETEALL","BookMarksRightClick")
	Gui.Form..ContextMenuSetItemEventHandler("BookMarksRightClick","ADDBOOKMARK","BookMarksRightClick")	
	
	Gui.BookM..ContextMenuCreate("BookMarksRightClick")
	Gui.BookM..ContextMenuAddItem("BookMarksRightClick","DELETEALL",0,"  Delete All Bookmarks")	
	Gui.BookM..ContextMenuAddItem("BookMarksRightClick","ADDBOOKMARK",0,"  Add Bookmark")
	Gui.BookM..ContextMenuSetItemEventHandler("BookMarksRightClick","DELETEALL","BookMarksRightClick")
	Gui.BookM..ContextMenuSetItemEventHandler("BookMarksRightClick","ADDBOOKMARK","BookMarksRightClick")
	
	gui.Form.gsBookMarks.ContextMenuAttach("BookMarksRightClick")
	gui.BookM.gsBookM.ContextMenuAttach("BookMarksRightClick")	
	
	'Opcode
	Gui.Form..ContextMenuCreate("OPCODEMENU")
	Gui.Form..ContextMenuAddItem("OPCODEMENU","HARDCODE",0,"Enter")
	Gui.Form..ContextMenuAddItem("OPCODEMENU","BROWSEOPCODE",0,"Browse Opcode")
	Gui.Form..ContextMenuAddItem("OPCODEMENU","REMOVEOPCODE",0,"Remove Code")
	
	Gui.Form..ContextMenuSetItemEventHandler("OPCODEMENU","HARDCODE","OPCODEMENU_click")
	Gui.Form..ContextMenuSetItemEventHandler("OPCODEMENU","BROWSEOPCODE","OPCODEMENU_click")	
	Gui.Form..ContextMenuSetItemEventHandler("OPCODEMENU","REMOVEOPCODE","OPCODEMENU_click")
	
	'OpVendCode
	Gui.Form..ContextMenuCreate("OPVENDCODEMENU")
	Gui.Form..ContextMenuAddItem("OPVENDCODEMENU","HARDCODE",0,"Enter")
	Gui.Form..ContextMenuAddItem("OPVENDCODEMENU","BROWSEVENDCODE",0,"Browse Vendor")
	Gui.Form..ContextMenuAddItem("OPVENDCODEMENU","REMOVEOPCODE",0,"Remove Code")
	
	Gui.Form..ContextMenuSetItemEventHandler("OPVENDCODEMENU","HARDCODE","OPCODEMENU_click")
	Gui.Form..ContextMenuSetItemEventHandler("OPVENDCODEMENU","BROWSEVENDCODE","BROWSEVENDCODE")	
	Gui.Form..ContextMenuSetItemEventHandler("OPVENDCODEMENU","REMOVEOPCODE","OPCODEMENU_click")
	
	'OpVendCode
	Gui.Form..ContextMenuCreate("OUTSIDESEQCHANGE")
	Gui.Form..ContextMenuAddItem("OUTSIDESEQCHANGE","OUTSIDEEDIT",0,"Edit")
	
	Gui.Form..ContextMenuSetItemEventHandler("OUTSIDESEQCHANGE","OUTSIDEEDIT","OUTSIDESEQCHANGE_CLICK")
	
	'LaborWCMENU
	Gui.Form..ContextMenuCreate("LABORWCMENU")
	Gui.Form..ContextMenuAddItem("LABORWCMENU","BROWSEWC",0,"Browse WC")	
	Gui.Form..ContextMenuSetItemEventHandler("LABORWCMENU","BROWSEWC","LABORWCMENU_CLICK")		
	f.Intrinsic.Control.If(v.Global.bBindCutList)
		F.Intrinsic.Control.If(V.Global.bUseWireLaborRuntime)
			Gui.Form..ContextMenuAddItem("LABORWCMENU","APPLYCUTLISTRUNTIME",0,"Apply Cutlist Labor Runtime")
			Gui.Form..ContextMenuSetItemEventHandler("LABORWCMENU","APPLYCUTLISTRUNTIME","LABORWCMENU_CLICK")
			'Load Wire Labor Lookup
			f.Intrinsic.String.Build("{0}\WireLaborLookup.csv",v.Caller.FilesDir,v.Local.sFile)
			f.Intrinsic.File.Exists(v.Local.sFile,v.Global.bWireLaborLookup)
			f.Intrinsic.Control.If(v.Global.bWireLaborLookup)
				'f.Automation.MSExcel.ReadSpreadsheet(v.Local.sFile,4,200,v.Local.sFileContent)
				f.Intrinsic.File.File2String(v.Local.sFile,v.Local.sFileContent)
				f.Data.DataTable.CreateFromString("WireLabor",v.Local.sFileContent,"Part*!*Description*!*Value1*!*Value2","String*!*String*!*String*!*String",",",v.Ambient.NewLine,True)		
			f.Intrinsic.Control.EndIf			
		F.Intrinsic.Control.EndIf				
	f.Intrinsic.Control.EndIf
	
	'AltBom
	Gui.POPBOM..ContextMenuCreate("altbom")
	Gui.POPBOM..ContextMenuAddItem("altbom","I",0,"Insert to Current BOM")
	Gui.POPBOM..ContextMenuAddItem("altbom","InsertPhantomBlockComments_AltBom",0,"Insert Phantom as Block of Comments")
	Gui.POPBOM..ContextMenuAddItem("altbom","InsertReferencePartAsComment_AltBom",0,"Insert Reference Part as Comment")
	Gui.POPBOM..ContextMenuAddItem("altbom","S",0,"Swap Parent")
	Gui.POPBOM..ContextMenuSetItemEventHandler("altbom","I","insert_alt_bom")
	Gui.POPBOM..ContextMenuSetItemEventHandler("altbom","S","swap_parent")	
	Gui.POPBOM..ContextMenuSetItemEventHandler("altbom","InsertPhantomBlockComments_AltBom","InsertPhantomBlockComments_AltBom")
	Gui.POPBOM..ContextMenuSetItemEventHandler("altbom","InsertReferencePartAsComment_AltBom","InsertReferencePartAsComment_AltBom")
	
	Gui.Form..ContextMenuCreate("qlines")
	Gui.Form..ContextMenuAddItem("qlines","QR",0,"Delete Line")
	Gui.Form..ContextMenuAddItem("qlines","DS",0,"Delete Selected")
	Gui.Form..ContextMenuAddItem("qlines","DA",0,"Delete All")
	Gui.Form..ContextMenuSetItemEventHandler("qlines","QR","DeleteQuoteLine")
	Gui.Form..ContextMenuSetItemEventHandler("qlines","DS","DeleteSelectedLines")
	Gui.Form..ContextMenuSetItemEventHandler("qlines","DA","DeleteAllLines")
	GUI.Form.GGC_Quote.ContextMenuAttach("qlines")
	
	Gui.Form..ContextMenuCreate("source")
	Gui.Form..ContextMenuAddItem("source","M",0,"Manufacture to Stock")
	Gui.Form..ContextMenuAddItem("source","F",0,"Manufacture to Job")
	Gui.Form..ContextMenuAddItem("source","P",0,"Purchase to Stock")
	Gui.Form..ContextMenuAddItem("source","J",0,"Purchase to Job")
	Gui.Form..ContextMenuAddItem("source","C",0,"Consign to Stock")
	Gui.Form..ContextMenuAddItem("source","G",0,"Consign to Job")
	Gui.Form..ContextMenuSetItemEventHandler("source","M","SourceMenuClick")
	Gui.Form..ContextMenuSetItemEventHandler("source","F","SourceMenuClick")
	Gui.Form..ContextMenuSetItemEventHandler("source","P","SourceMenuClick")
	Gui.Form..ContextMenuSetItemEventHandler("source","J","SourceMenuClick")
	Gui.Form..ContextMenuSetItemEventHandler("source","C","SourceMenuClick")
	Gui.Form..ContextMenuSetItemEventHandler("source","G","SourceMenuClick")
	
	Gui.Form..ContextMenuCreate("catcode")
	Gui.Form..ContextMenuAddItem("catcode","N",0,"Normal")
	Gui.Form..ContextMenuAddItem("catcode","P",0,"Phantom")
	Gui.Form..ContextMenuAddItem("catcode","X",0,"Exclude")
	Gui.Form..ContextMenuAddItem("catcode","R",0,"Reference")
	Gui.Form..ContextMenuAddItem("catcode","1",0,"Set Up")
	Gui.Form..ContextMenuSetItemEventHandler("catcode","N","CategoryMenuClick")
	Gui.Form..ContextMenuSetItemEventHandler("catcode","P","CategoryMenuClick")
	Gui.Form..ContextMenuSetItemEventHandler("catcode","X","CategoryMenuClick")
	Gui.Form..ContextMenuSetItemEventHandler("catcode","R","CategoryMenuClick")
	Gui.Form..ContextMenuSetItemEventHandler("catcode","1","CategoryMenuClick")
	
	Gui.Form..ContextMenuCreate("material")
	Gui.Form..ContextMenuAddItem("material","B",0,"Bookmark")
	Gui.Form..ContextMenuAddItem("material","V",0,"View Part Master")
	Gui.Form..ContextMenuAddItem("material","O",0,"Edit Part Master")
	Gui.Form..ContextMenuAddItem("material","S",0,"Supply and Demand")
	Gui.Form..ContextMenuAddItem("material","D",0,"Delete Row")
	Gui.Form..ContextMenuSetItemEventHandler("material","V","MaterialMenuClick")
	Gui.Form..ContextMenuSetItemEventHandler("material","O","MaterialMenuClick")
	Gui.Form..ContextMenuSetItemEventHandler("material","D","MaterialMenuClick")
	Gui.Form..ContextMenuSetItemEventHandler("material","B","MaterialMenuClick")
	Gui.Form..ContextMenuSetItemEventHandler("material","S","SupplyDemand")
	
	Gui.Form..ContextMenuCreate("LogoMenu")
	Gui.Form..ContextMenuAddItem("LogoMenu","GotoFeedBack",0,"  Feedback")
	Gui.Form..ContextMenuAddItem("LogoMenu","break1",0,"------------------------------")
	Gui.Form..ContextMenuAddItem("LogoMenu","SaveFormLayoutAsFavorite",0,"  Save Form Layout as Favorite")
	Gui.Form..ContextMenuAddItem("LogoMenu","DeleteFavoriteFormLayout",0,"  Delete Favorite Form Layout")
	Gui.Form..ContextMenuAddItem("LogoMenu","break2",0,"------------------------------")
	Gui.Form..ContextMenuAddItem("LogoMenu","DisplayFavoriteFormLayout",0,"  Display Favorite Form Layout")
	Gui.Form..ContextMenuAddItem("LogoMenu","Display3Equal",0,"  Display 3 Equal Sections")
	Gui.Form..ContextMenuSetItemEventHandler("LogoMenu","SaveFormLayoutAsFavorite","SaveFormLayoutAsFavorite")
	Gui.Form..ContextMenuSetItemEventHandler("LogoMenu","DeleteFavoriteFormLayout","DeleteFavoriteFormLayout")
	Gui.Form..ContextMenuSetItemEventHandler("LogoMenu","Display3Equal","Display3Equal")
	Gui.Form..ContextMenuSetItemEventHandler("LogoMenu","GotoFeedBack","GotoFeedBack")
	Gui.Form..ContextMenuSetItemEventHandler("LogoMenu","DisplayFavoriteFormLayout","DisplayFavoriteFormLayout")
	
	Gui.Form..ContextMenuCreate("Cost")
	Gui.Form..ContextMenuAddItem("Cost","F",0,"Compare to Inventory Cost")
	Gui.Form..ContextMenuAddItem("Cost","I",0,"Apply Inventory Cost")
	Gui.Form..ContextMenuAddItem("Cost","B",0,"Apply Inventory Cost to All")
	Gui.Form..ContextMenuSetItemEventHandler("Cost","F","CostMenu_Conversion")
	Gui.Form..ContextMenuSetItemEventHandler("Cost","I","CostMenu_UpdateLineCost")
	Gui.Form..ContextMenuSetItemEventHandler("Cost","B","CostMenu_UpdateALLMaterialCost")
	
	Gui.Form..ContextMenuCreate("subcomp")
	Gui.Form..ContextMenuAddItem("subcomp","D",0,"Delete Row")
	Gui.Form..ContextMenuSetItemEventHandler("subcomp","D","DeleteLine")
	
	Gui.Form..ContextMenuCreate("Quantity")
	Gui.Form..ContextMenuAddItem("Quantity","Q",0,"Delete Row")
	Gui.Form..ContextMenuAddItem("Quantity","A",0,"Clear All")
	Gui.Form..ContextMenuSetItemEventHandler("Quantity","Q","ctmDelete_qty_row")
	Gui.Form..ContextMenuSetItemEventHandler("Quantity","A","ctmDelete_qty_row")	
	Gui.Form.GGC_Quantity.ContextMenuAttach("Quantity")
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.ContextMenu_Plus.End

Program.Sub.OPCODEMENU_click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sRow.Declare
	v.Local.sOpcode.Declare
	V.Local.sSQL.Declare

	F.Intrinsic.Control.If(V.Args.ItemName,=,"HARDCODE")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Inputbox("Enter Opcode","Opcode Value","",v.Local.sRet)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sRow)
		f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Please select a row in Router grid","No Router Row Selected")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.ExitSub			
		f.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
			v.Local.sOpcode.Set(v.Local.sRet.left6)
			F.Intrinsic.String.Split(V.Local.sRow,"*!*",v.Local.sRow)	
			v.Local.sRow.Set(v.Local.sRow(0))			
			F.Intrinsic.String.Build("Select Top 1 Rate,Description from  v_Op_Codes where rtrim(Machine) = '{0}' and rtrim(Operation) = '{1}'",v.DataTable.Child(v.Local.sRow).Part!FieldValTrim,v.Local.sOpcode.Trim,v.Local.sSql)
			f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)				
			f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
				f.Data.DataTable.SetValue("CHILD",v.Local.sRow,"OP_CODE",v.Local.sOpcode)
			f.Intrinsic.Control.Else	
				f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
				f.Data.DataTable.SetValue("CHILD",v.Local.sRow,"OP_CODE",v.Local.sOpcode,"DESCRIPTION",v.Local.sRet(1).Trim,"Cost",v.Local.sRet(0).Trim)
			f.Intrinsic.Control.EndIf			
		F.Intrinsic.Control.EndIf		
		
	F.Intrinsic.Control.ElseIf(V.Args.ItemName,=,"BROWSEOPCODE")
		f.Intrinsic.Control.CallSub(BrwOPCode)
		
	f.Intrinsic.Control.ElseIf(V.Args.ItemName,=,"REMOVEOPCODE")
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sRow)
		f.Intrinsic.Control.If(v.Local.sRow.Trim,<>,"")
			F.Intrinsic.String.Split(V.Local.sRow,"*!*",v.Local.sRow)			
			f.Data.DataTable.SetValue("Child",v.Local.sRow(0),"OP_CODE","")		
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf	

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.OPCODEMENU_click.End

Program.Sub.BROWSEVENDCODE.Start
'OnlyCalled by GGC_Bom_RowCellClick so everything is checked before
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	v.Local.sRow.Declare
	v.Local.sLMO.Declare
	v.Local.sWC.Declare
	
	'Check if CHILD table has at least 2 records in which record 1 is for parent
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,0)
		'Check if user select the grid
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sRow)
		f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Please select a row in Router grid","No Router Row Selected")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		'Process
		f.Intrinsic.UI.CommonBrowser(300,"",v.Local.sRet)	
		'Get the return from browser
		f.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			f.Data.DataTable.SetValue("CHILD",v.Local.sRow,"OP_CODE",V.Local.sRet(0).Trim)
			v.Global.bRouterChanged.Set(True)			
		f.Intrinsic.Control.EndIf
		'End Process	
		
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("CHILD table does not have row.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.BROWSEVENDCODE.End

Program.Sub.LABORWCMENU_CLICK.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.iCnt.Declare	
	v.Local.fTotal.Declare	
	v.Local.sRow.Declare
	v.Local.sSelectedSeq.Declare
	v.Local.sSeries.Declare
	v.Local.sFilter.Declare
	v.Local.sMaterial.Declare
	v.Local.shold.Declare
	V.Local.fInchPerHour.Declare
	v.Local.bNum.Declare
	v.Local.sPart.Declare
	v.Local.sSQL.Declare
	v.Local.iInner.Declare
	v.Local.sItems.Declare
	v.Local.fLength.Declare
	v.Local.fPieces.Declare
	v.Local.fTotalInches.Declare
	v.Local.fTotalhours.Declare
	v.Local.fHours.Declare
	v.Local.bHasValue.Declare
	V.Local.fExtended.Declare

	F.Intrinsic.ControL.SelectCase(V.Args.ItemName)
		F.Intrinsic.Control.Case("BROWSEWC")
			F.Intrinsic.Control.CallSub(BrowseWC)		
		F.Intrinsic.Control.Case("APPLYCUTLISTRUNTIME")	
		
			f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.Text,v.Screen.Form!txtFocusRev.Text,v.Local.sPart)
			f.Intrinsic.Control.If(v.Global.bWireLaborLookup.Not)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("Cannot find lookup file for Labor Rate","Attention")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf		

			gui.Form.GGC_Bom.GetSelectedRows("GV_Child",v.Local.sRow)
			f.Intrinsic.Control.If(v.Local.sRow,=,"")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("Please select a row from the Router grid.","Attention")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
			
			f.Intrinsic.String.Split(v.Local.sRow,"*!*",v.Local.sRow)
			v.Local.sRow.Set(v.Local.sRow(0))
			v.Local.sSelectedSeq.Set(v.DataTable.Child(v.Local.sRow).RTR_Seq!FieldValString)
			
			
			'Get Series of cutlist selected and build filter
			f.Intrinsic.Control.If(v.DataView.CHILD$CUTLIST!vSerie.Exists)
				f.Data.DataView.Close("CHILD$CUTLIST","vSerie")
			f.Intrinsic.Control.EndIf
			f.Data.DataView.Create("CHILD$CUTLIST","vSerie",22,"SELECT_CUTLIST = 1","")
			
			'tEST
			F.Intrinsic.Control.If(V.DataView.Child!vSerie.RowCount,=,0)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("Please select a cutlist item for applying labor runtime.","Attention")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)			
				f.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			
			f.Data.DataView.ToString("CHILD$CUTLIST","vSerie","Serie","","','",v.Local.sSeries)
			
			f.Intrinsic.String.Build("Serie in ('{0}')",v.Local.sSeries,v.Local.sFilter)
			f.Intrinsic.Control.If(v.DataView.CHILD!vWireLbr.Exists)
				f.Data.DataView.Close("CHILD","vWireLbr")
			f.Intrinsic.Control.EndIf
			f.Data.DataView.Create("Child","vWireLbr",22,v.Local.sFilter,"")
			
			f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataView.Child!vWireLbr.RowCount--)
				'Each seq, lookup the labor rate
				v.Local.sMaterial.Set(v.DataView.Child!vWireLbr(v.Local.iCnt).Part!FieldValTrim)
				f.Intrinsic.String.Build("Trim(Part) = '{0}'",v.Local.sMaterial.Trim,v.Local.sFilter)
				f.Data.DataTable.Select("WireLabor",v.Local.sFilter,v.Local.sRet)
				f.Intrinsic.Control.If(v.Local.sRet,=,"***NORETURN***")
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
					f.Intrinsic.String.Build("No record found in lookup file for material {0}",v.Local.sMaterial,v.Local.sHold)	
					f.Intrinsic.UI.Msgbox(v.Local.shold,"Attention")
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.Else
					F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
					v.Local.sRet.Set(v.Local.sRet(0))
					f.Intrinsic.Math.IsNumeric(v.DataTable.WireLabor(v.Local.sRet).Value2!FieldValTrim,v.Local.bNum)
					f.Intrinsic.Control.If(v.Local.bNum.Not)
					
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
						f.Intrinsic.String.Build("Lookup value is not numeric for material {0}",v.Local.sMaterial,v.Local.sHold)	
						f.Intrinsic.UI.Msgbox(v.Local.shold,"Attention")
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)							
					
					f.Intrinsic.Control.Else
					
						V.Local.fInchPerHour.Set(v.DataTable.WireLabor(v.Local.sRet).Value2!FieldValTrim)
						'Get Length and Pieces
						v.Local.sPart.Set(v.Local.sPart.Trim)
						f.Intrinsic.String.Build("Serie = '{0}' and SELECT_CUTLIST = 1",v.DataView.Child!vWireLbr(v.Local.iCnt).Serie!FieldValString,v.Local.sFilter)
						f.Data.DataView.Create("CHILD$CUTLIST","vSelectedSerie",22,v.Local.sFilter,"")
						f.Data.DataView.ToString("CHILD$CUTLIST","vSelectedSerie","Cutlist_Item","","','",v.Local.sItems)						
						f.Data.DataView.Close("CHILD$CUTLIST","vSelectedSerie")						
						
						f.Intrinsic.String.Build("Select Dimension_1,Pieces from RTR_Cutlist where rtrim(ltrim(Part)) = '{0}' and rtrim(ltrim(Component)) = '{1}' and   Cutlist_item in ('{2}')",v.Local.sPart.PSQLFriendly,v.Local.sMaterial.PSQLFriendly,v.Local.sItems,v.Local.sSQL)		
						f.Data.DataTable.CreateFromSQL("Wires","conx",v.Local.sSQL,True)
						f.Intrinsic.Control.For(v.Local.iInner,0,v.DataTable.Wires.RowCount--,1)
							v.Local.fLength.Set(v.DataTable.Wires(v.Local.iInner).Dimension_1!FieldValString)
							v.Local.fPieces.Set(v.DataTable.Wires(v.Local.iInner).Pieces!FieldValString)
							f.Intrinsic.Math.Mult(v.Local.fLength,v.Local.fPieces,v.Local.fTotalInches)
							f.Intrinsic.Control.If(v.Local.fInchPerHour,<>,0)
								f.Intrinsic.Math.Div(v.Local.fTotalInches,v.Local.fInchPerHour,v.Local.fHours)
								f.Intrinsic.Math.Add(v.Local.fTotalhours,v.Local.fHours,v.Local.fTotalhours)	
								v.Local.bHasValue.Set(True)
							f.Intrinsic.Control.Else
								f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
								f.Intrinsic.String.Build("Lookup value is 0 for material {0}",v.Local.sMaterial,v.Local.sHold)	
								f.Intrinsic.UI.Msgbox(v.Local.shold,"Attention")
								f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
							f.Intrinsic.Control.EndIf
						f.Intrinsic.Control.Next(v.Local.iInner)
						
						f.Data.DataTable.Close("Wires")
												
					f.Intrinsic.Control.EndIf
					
				f.Intrinsic.Control.EndIf		
				
						
			f.Intrinsic.Control.Next(v.Local.iCnt)
		
			f.Intrinsic.Control.If(v.Local.bHasValue)				
				'Convert from Hours/part to Parts per Hours				
				'f.Intrinsic.Control.If(v.Global.sType,=,"HPP")
					f.Intrinsic.Control.If(v.Local.fTotalhours,<>,0)
						f.Intrinsic.Math.Div(1,v.Local.fTotalhours,v.Local.fTotalhours)	
					f.Intrinsic.Control.EndIf									
				'f.Intrinsic.Control.EndIf
				
				f.Data.Datatable.SetValue("Child",v.Local.sRow,"Qty",v.Local.fTotalhours)		
				f.Data.DataTable.AcceptChanges("Child")
				
			f.Intrinsic.Control.EndIf			
		
	F.Intrinsic.Control.EndSelect

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.LABORWCMENU_CLICK.End

Program.Sub.BrowseWC.Start
'Only Called by GGC_Bom_RowCellClick so everything is checked before
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sFilter.Declare
	v.Local.sRow.Declare	
	v.Local.sHold.Declare

	'Check if CHILD table has at least 2 records in which record 1 is for parent
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,0)
		'Check if user select the grid
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sRow)
		f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Please select a row in Router grid","No Router Row Selected")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		
		'Process	
		'open a browser to select the Work Center
		f.Intrinsic.UI.CommonBrowser(400,"",v.Local.sRet)	
		f.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			'get the cost for this work center since we already have the WC and DESCRIPTION
			v.Local.sHold.Set(v.Local.sRet(0))
			f.Intrinsic.String.Build("WC = '{0}'",v.Local.sHold.PSQLFriendly,V.Local.sFilter)
			f.Data.DataView.Create("WCENTER","V_REPLACE",22,V.Local.sFilter,"")
			f.Intrinsic.Control.If(v.DataView.WCENTER!V_REPLACE.RowCount,>,0)
				F.Data.Datatable.SetValue("CHILD",v.Local.sRow,"PART",V.Local.sRet(0),"DESCRIPTION",V.Local.sRet(1),"COST",V.DataView.WCENTER!V_REPLACE(0).COST!FIELDVALFLOAT)
				v.Global.bRouterChanged.Set(True)
			F.Intrinsic.Control.Else
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				F.Intrinsic.UI.Msgbox("Work Center Master can not identify the WC specified. So only WC and Description are set. Cost is not set.","Attention")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				F.Data.Datatable.SetValue("CHILD",v.Local.sRow,"PART",V.Local.sRet(0),"DESCRIPTION",V.Local.sRet(1),"COST",0)
				v.Global.bRouterChanged.Set(True)
			f.Intrinsic.Control.EndIf		
			F.Data.DataView.Close("WCENTER","V_REPLACE")
		f.Intrinsic.Control.EndIf
		'End Process			
		
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("CHILD table does not have row.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.EndIf

	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.BrowseWC.End

Program.Sub.OUTSIDESEQCHANGE_CLICK.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sRow.Declare

	F.Intrinsic.Control.If(V.Args.ItemName,=,"OUTSIDEEDIT")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Inputbox("Enter Outside Service","Outside Service Value","",v.Local.sRet)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sRow)
		f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Please select a row in Router grid","No Router Row Selected")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.ExitSub			
		f.Intrinsic.Control.EndIf
		F.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
			F.Intrinsic.String.Split(V.Local.sRow,"*!*",v.Local.sRow)			
			f.Data.DataTable.SetValue("Child",v.Local.sRow(0),"Part",V.Local.sRet.left20)
		F.Intrinsic.Control.EndIf		
	F.Intrinsic.Control.EndIf	

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.OUTSIDESEQCHANGE_CLICK.End

Program.Sub.DSPL_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sItem.Declare
	
	f.Intrinsic.Control.SelectCase(v.Args.ItemName)
	
		f.Intrinsic.Control.Case("DISPLAYUM")
			v.Global.bDisplayUM.Set(v.Global.bDisplayUM.Not)
				
		f.Intrinsic.Control.Case("DISPLAYSOURCE")
			v.Global.bDisplaySource.Set(v.Global.bDisplaySource.Not)
				
		f.Intrinsic.Control.Case("DISPLAYCATEGORY")
			v.Global.bDisplayCategory.Set(v.Global.bDisplayCategory.Not)
				
		f.Intrinsic.Control.Case("DISPLAYCOST")
			v.Global.bDisplayCost.Set(v.Global.bDisplayCost.Not)
				
		f.Intrinsic.Control.Case("DISPLAYPL")
			v.Global.bDisplayPL.Set(v.Global.bDisplayPL.Not)
			
		f.Intrinsic.Control.Case("DISPLAYCOMPLETE")
			v.Global.bDisplayComplete.Set(v.Global.bDisplayComplete.Not)
			
		f.Intrinsic.Control.Case("BOLDCOMPLETE")
			v.Global.bBoldComplete.Set(v.Global.bBoldComplete.Not)	
			
		f.Intrinsic.Control.Case("DISPLAYLOC")
			v.Global.bDisplayLoc.Set(v.Global.bDisplayLoc.Not)				
	
	f.Intrinsic.Control.EndSelect
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.DSPL_Click.End

Program.Sub.lblMoreDisplaySettings_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iX.Declare
	v.Local.iY.Declare
	
	f.Intrinsic.Control.CallSub(Build_ContextMenu_DisplayMoreMenu)
	f.Intrinsic.API.GetMousePosition(v.Local.iX,v.Local.iY)
	f.Intrinsic.Math.Sub(v.Local.iX,100,v.Local.iX)
	f.Intrinsic.Math.Add(v.Local.iY,15,v.Local.iY)	
	gui.Form..ContextMenuShow("DSPL",v.Local.iX,v.Local.iY)	

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.lblMoreDisplaySettings_Click.End

Program.Sub.Build_ContextMenu_DisplayMoreMenu.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sItem.Declare

	F.Intrinsic.Control.If(v.Global.bDisplayUM)
		f.Intrinsic.String.Build("{0}     Unit of Measure",v.ASCII.169,v.Local.sItem)
	f.Intrinsic.Control.Else
		v.Local.sItem.Set("         Unit of Measure")		
	F.Intrinsic.Control.EndIf
	Gui.Form..ContextMenuSetItemText("DSPL","DISPLAYUM",v.Local.sItem)

	F.Intrinsic.Control.If(v.Global.bDisplaySource)
		f.Intrinsic.String.Build("{0}     Source Code",v.ASCII.169,v.Local.sItem)
	f.Intrinsic.Control.Else
		v.Local.sItem.Set("         Source Code")
	F.Intrinsic.Control.EndIf
	Gui.Form..ContextMenuSetItemText("DSPL","DISPLAYSOURCE",v.Local.sItem)	

	F.Intrinsic.Control.If(v.Global.bDisplayCategory)
		f.Intrinsic.String.Build("{0}     Category",v.ASCII.169,v.Local.sItem)
	f.Intrinsic.Control.Else
		v.Local.sItem.Set("         Category")
	F.Intrinsic.Control.EndIf	
	Gui.Form..ContextMenuSetItemText("DSPL","DISPLAYCATEGORY",v.Local.sItem)
	
	F.Intrinsic.Control.If(v.Global.bDisplayCost)
		f.Intrinsic.String.Build("{0}     Cost",v.ASCII.169,v.Local.sItem)
	f.Intrinsic.Control.Else	
		v.Local.sItem.Set("         Cost")
	F.Intrinsic.Control.EndIf
	Gui.Form..ContextMenuSetItemText("DSPL","DISPLAYCOST",v.Local.sItem)
	
	F.Intrinsic.Control.If(v.Global.bDisplayPL)
		f.Intrinsic.String.Build("{0}     Product Line",v.ASCII.169,v.Local.sItem)
	f.Intrinsic.Control.Else
		v.Local.sItem.Set("         Product Line")
	F.Intrinsic.Control.EndIf
	Gui.Form..ContextMenuSetItemText("DSPL","DISPLAYPL",v.Local.sItem)
	
	F.Intrinsic.Control.If(v.Global.bDisplayComplete)
		f.Intrinsic.String.Build("{0}     Complete",v.ASCII.169,v.Local.sItem)
	f.Intrinsic.Control.Else
		v.Local.sItem.Set("         Complete")
	F.Intrinsic.Control.EndIf
	Gui.Form..ContextMenuSetItemText("DSPL","DISPLAYCOMPLETE",v.Local.sItem)
	
	F.Intrinsic.Control.If(v.Global.bBoldComplete)
		f.Intrinsic.String.Build("{0}     Bold Complete",v.ASCII.169,v.Local.sItem)
	f.Intrinsic.Control.Else
		v.Local.sItem.Set("         Bold Complete")
	F.Intrinsic.Control.EndIf
	Gui.Form..ContextMenuSetItemText("DSPL","BOLDCOMPLETE",v.Local.sItem)	
	
	F.Intrinsic.Control.If(v.Global.bDisplayLoc)
		f.Intrinsic.String.Build("{0}     Location (RTR Part ID)",v.ASCII.169,v.Local.sItem)
	f.Intrinsic.Control.Else
		v.Local.sItem.Set("         Location (RTR Part ID)")
	F.Intrinsic.Control.EndIf
	Gui.Form..ContextMenuSetItemText("DSPL","DISPLAYLOC",v.Local.sItem)	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.Build_ContextMenu_DisplayMoreMenu.End

Program.Sub.DECIMAL_CLICK.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iHold.Declare
	
	F.Intrinsic.Control.SelectCase(V.Args.ItemName)
		f.Intrinsic.Control.CaseAny("0","1","2","3","4","5","6")
			v.Global.sDecimalQty.Set(v.Args.ItemName)
		f.Intrinsic.Control.CaseAny("00","10","20","30","40","50","60")
			f.Intrinsic.Math.Div(v.Args.ItemName,10,v.Local.iHold)
			v.Global.sDecimalCost.Set(v.Local.iHold)
		f.Intrinsic.Control.CaseAny("000","100","200","300","400","500","600")
			f.Intrinsic.Math.Div(v.Args.ItemName,100,v.Local.iHold)
			v.Global.sDecimalWeight.Set(v.Local.iHold)		
	F.Intrinsic.Control.EndSelect

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.DECIMAL_CLICK.End

Program.Sub.Label_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sLeft.Declare

	f.Intrinsic.Control.SelectCase(v.Args.ItemName)
	
		f.Intrinsic.Control.Case("QTY")
			v.Global.bQtyLabel.Set(v.Global.bQtyLabel.Not)
		
		f.Intrinsic.Control.Case("PART")
			v.Global.bPartLabel.Set(v.Global.bPartLabel.Not)
			
		f.Intrinsic.Control.Case("DESCR")
			v.Global.bDescrLabel.Set(v.Global.bDescrLabel.Not)
			
		f.Intrinsic.Control.Case("UM")
			v.Global.bUMLabel.Set(v.Global.bUMLabel.Not)
		
		f.Intrinsic.Control.Case("SOURCE")
			V.Global.bSourceLabel.Set(V.Global.bSourceLabel.Not)
		
		f.Intrinsic.Control.Case("CATEGORY")
			V.Global.bCategoryLabel.Set(V.Global.bCategoryLabel.Not)		
		
		f.Intrinsic.Control.Case("COST")
			V.Global.bCostLabel.Set(V.Global.bCostLabel.Not)		
		
		f.Intrinsic.Control.Case("PL")
			V.Global.bPLLabel.Set(V.Global.bPLLabel.Not)
			
		f.Intrinsic.Control.Case("LOC")
			V.Global.bLocLabel.Set(V.Global.bLocLabel.Not)			
			
		f.Intrinsic.Control.Case("MORE")
			gui.trvStyle..Visible(True)	
			f.Intrinsic.Control.If(v.Global.bFirstLoadTrvStyle)
				f.Intrinsic.Math.Sub(v.Screen.Form!frameTree.Left,v.Screen.trvStyle.Width,v.Local.sLeft)
				gui.trvStyle..Position(v.Local.sLeft,v.Screen.trvStyle.Top)	
				v.Global.bFirstLoadTrvStyle.Set(False)
			f.Intrinsic.Control.EndIf			
		
			f.Intrinsic.Control.CallSub(Process_StayOnTop,"FM","TRVSTYLE","Chk","chkTrvStyleStayOnTop")
	
	f.Intrinsic.Control.EndSelect

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Label_Click.End

Program.Sub.FieldOrder_UnLoad.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSerialize.Declare
	v.Local.iIndex.Declare
	v.Local.bHasInvisible.Declare
		
	'Make sure everything is visible before serialize and setup
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","NodeIndex","VisibleIndex",v.Local.iIndex)
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf	
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Qty","VisibleIndex",v.Local.iIndex)
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Part","VisibleIndex",v.Local.iIndex)	
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Description","VisibleIndex",v.Local.iIndex)	
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","UM","VisibleIndex",v.Local.iIndex)	
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Source","VisibleIndex",v.Local.iIndex)	
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Category","VisibleIndex",v.Local.iIndex)
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Cost","VisibleIndex",v.Local.iIndex)
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","PL","VisibleIndex",v.Local.iIndex)
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Loc","VisibleIndex",v.Local.iIndex)
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf	
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Complete","VisibleIndex",v.Local.iIndex)
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Local.bHasInvisible)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please make all columns visible: Right Click Header > Column Chooser.","Invalid Order")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.Endif

	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","NodeIndex","VisibleIndex",v.Global.iNodeIndex)
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Qty","VisibleIndex",v.Global.iQtyIndex)	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Part","VisibleIndex",v.Global.iPartIndex)	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Description","VisibleIndex",v.Global.iDescrIndex)	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","UM","VisibleIndex",v.Global.iUMIndex)	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Source","VisibleIndex",v.Global.iSourceIndex)	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Category","VisibleIndex",v.Global.iCategoryIndex)	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Cost","VisibleIndex",v.Global.iCostIndex)	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","PL","VisibleIndex",v.Global.iPLIndex)	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Loc","VisibleIndex",v.Global.iLocIndex)
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Complete","VisibleIndex",v.Global.iCompleteIndex)		
	
	'Serialize
	gui.FieldOrder.gsFieldOrder.Serialize("GV_ORD",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GV_ORD",4986,1030,False,"Serialize",False,0,-999.0,v.Ambient.Date,12:00:00 AM,V.Local.sSerialize)	
	'Set Order List
	gui.FieldOrder..AlwaysOnTop(False)
	gui.FieldOrder..Visible(False)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.FieldOrder_UnLoad.End

Program.Sub.Set_Current_FieldOrder.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSerialize.Declare
	v.Local.iIndex.Declare
	v.Local.bHasInvisible.Declare
		
	'Make sure everything is visible before serialize and setup
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","NodeIndex","VisibleIndex",v.Local.iIndex)
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf	
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Qty","VisibleIndex",v.Local.iIndex)
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Part","VisibleIndex",v.Local.iIndex)	
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Description","VisibleIndex",v.Local.iIndex)	
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","UM","VisibleIndex",v.Local.iIndex)	
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Source","VisibleIndex",v.Local.iIndex)	
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Category","VisibleIndex",v.Local.iIndex)
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Cost","VisibleIndex",v.Local.iIndex)
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","PL","VisibleIndex",v.Local.iIndex)
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Loc","VisibleIndex",v.Local.iIndex)
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf	
	
	gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Complete","VisibleIndex",v.Local.iIndex)
	f.Intrinsic.Control.If(v.Local.iIndex,=,-1)
		v.Local.bHasInvisible.Set(True)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Local.bHasInvisible)
		'Set Default
		v.Global.iNodeIndex.Set(0)
		v.Global.iQtyIndex.Set(1)
		v.Global.iPartIndex.set(2)
		v.Global.iDescrIndex.Set(3)
		v.Global.iUMIndex.Set(4)
		v.Global.iSourceIndex.Set(5)
		v.Global.iCategoryIndex.Set(6)
		v.Global.iCostIndex.Set(7)
		v.Global.iPartIndex.Set(8)
		v.Global.iLocIndex.Set(9)
		v.Global.iCompleteIndex.Set(10)

	f.Intrinsic.Control.Else

		gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","NodeIndex","VisibleIndex",v.Global.iNodeIndex)
		gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Qty","VisibleIndex",v.Global.iQtyIndex)	
		gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Part","VisibleIndex",v.Global.iPartIndex)	
		gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Description","VisibleIndex",v.Global.iDescrIndex)	
		gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","UM","VisibleIndex",v.Global.iUMIndex)	
		gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Source","VisibleIndex",v.Global.iSourceIndex)	
		gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Category","VisibleIndex",v.Global.iCategoryIndex)	
		gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Cost","VisibleIndex",v.Global.iCostIndex)	
		gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","PL","VisibleIndex",v.Global.iPLIndex)
		gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Loc","VisibleIndex",v.Global.iLocIndex)
		gui.FieldOrder.gsFieldOrder.GetColumnProperty("GV_Ord","Complete","VisibleIndex",v.Global.iCompleteIndex)	
	
	f.Intrinsic.Control.Endif

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Set_Current_FieldOrder.End

Program.Sub.Check_And_Create_Tables.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bExist.Declare
	
	Function.ODBC.Connection!conx.TableExists("GCG_4986_OPTIONS",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.ODBC.Connection!conx.Execute("CREATE TABLE GCG_4986_OPTIONS( ID INTEGER, SEQ INTEGER, DESCRIPTION CHAR(30), LONG_VAL INTEGER, CHAR_VAL CHAR(50), PROD_LINE CHAR(2));")
	f.Intrinsic.Control.Endif
	
	Function.ODBC.Connection!conx.TableExists("GCG_4986_Stge",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.ODBC.Connection!conx.Execute("CREATE TABLE GCG_4986_Stge ( UserID CHAR(8), TRMNL CHAR(3), OldParent CHAR(20), Part CHAR(20), TIER VARCHAR(1000), CTIER DOUBLE, CH_Index VARCHAR(1000) );")
	f.Intrinsic.Control.Endif	
	
	Function.ODBC.Connection!conx.TableExists("GCG_4986_Bookmarks",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.ODBC.Connection!conx.Execute("CREATE TABLE GCG_4986_Bookmarks ( UserID CHAR(8), CCC CHAR(3),Part CHAR(20),Descr CHAR(30) );")
	f.Intrinsic.Control.Endif		
	
	Function.ODBC.Connection!conx.TableExists("GCG_4986_CutList",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.ODBC.Connection!conx.Execute("CREATE TABLE GCG_4986_CutList ( UserID CHAR(8), CCC CHAR(3), BParent CHAR(20), Component CHAR(20),Serie Integer );")
	f.Intrinsic.Control.Endif		
	
	Function.ODBC.Connection!conx.TableExists("GCG_4986_CLRef",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.ODBC.Connection!conx.Execute("CREATE TABLE GCG_4986_CLRef ( Part CHAR(20), Component CHAR(20), Cutlist_Item CHAR(4), Ref CHAR(18), WORKCENTER CHAR(4), NEXTWC CHAR(50) );")
	f.Intrinsic.Control.Endif	
	
	Function.ODBC.Connection!conx.TableExists("gcg_4986_linesuff",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.ODBC.Connection!conx.Execute("CREATE TABLE GCG_4986_LineSuff ( LineNumber Char(3),Suffix Char(1),UserID char(8),Trmnl char(3));")
	f.Intrinsic.Control.Endif	

	'GCG_4986_BkpQty
	Function.ODBC.Connection!conx.TableExists("GCG_4986_BkpQty",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.ODBC.Connection!conx.Execute("CREATE TABLE GCG_4986_BkpQty ( UserID CHAR(8), DateRef INTEGER DEFAULT '0', TimeRef INTEGER DEFAULT '0', Part CHAR(20), Quantity DECIMAL(12,4) )")
	f.Intrinsic.Control.Endif	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","GCG_4986_BkpQty","sIndex","GCG_4986_BkpQty01")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX GCG_4986_BkpQty01 ON GCG_4986_BkpQty ( DateRef, TimeRef,Part,UserID );")
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","GCG_4986_BkpQty","sIndex","GCG_4986_BkpQty02")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX GCG_4986_BkpQty02 ON GCG_4986_BkpQty ( DateRef, TimeRef,Part );")
	f.Intrinsic.Control.EndIf		

	'GCG_4986_BkpHead
	Function.ODBC.Connection!conx.TableExists("GCG_4986_BkpHead",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.ODBC.Connection!conx.Execute("CREATE TABLE GCG_4986_BkpHead  ( UserID CHAR(8), SaveDate DATE, SaveTime VARCHAR(17), Part VARCHAR(20), Description VARCHAR(30), Similar VARCHAR(20), UM VARCHAR(3), PL VARCHAR(2), Customer VARCHAR(6), Comm NUMERIC(12,2), Scrap NUMERIC(12,2), PartIDLocn VARCHAR(2), RouterComplete BIT DEFAULT '0' NOT NULL, OmitReprice BIT DEFAULT '0' NOT NULL, AltDesc1 VARCHAR(71), AltDesc2 VARCHAR(71), ExtraDesc LONGVARCHAR, DateRef INTEGER, TimeRef INTEGER );")
	f.Intrinsic.Control.Endif	

	f.Intrinsic.Control.CallSub("Check_Index","sTable","GCG_4986_BkpHead","sIndex","GCG_4986_BkpHead01")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX GCG_4986_BkpHead01 ON GCG_4986_BkpHead ( DateRef, TimeRef,Part,UserID );")
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","GCG_4986_BkpHead","sIndex","GCG_4986_BkpHead02")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX GCG_4986_BkpHead02 ON GCG_4986_BkpHead ( DateRef, TimeRef,Part );")
	f.Intrinsic.Control.EndIf	

	'GCG_4986_BkpLine
	Function.ODBC.Connection!conx.TableExists("GCG_4986_BkpLine",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.ODBC.Connection!conx.Execute("CREATE TABLE GCG_4986_BkpLine ( UserID CHAR(8), DateRef INTEGER DEFAULT '0', TimeRef INTEGER DEFAULT '0', BPARENT VARCHAR(20), DESCR_BP VARCHAR(30), BOM_SEQ VARCHAR(4), RTR_SEQ VARCHAR(6), PART VARCHAR(20), DESCRIPTION VARCHAR(30), DESCRIPTION_2 VARCHAR(71), DESCRIPTION_3 VARCHAR(71), LMO VARCHAR(1), COMMENTS LONGVARCHAR, PL VARCHAR(2), CATEGORY VARCHAR(10), CAT_CODE VARCHAR(1), SOURCE VARCHAR(10), SOURCE_CODE VARCHAR(1), OP_CODE VARCHAR(6), UM VARCHAR(3), TYPE VARCHAR(30), SET_UP NUMERIC(12,4) DEFAULT '0', FREQUENCY NUMERIC(6,0) DEFAULT '0', QTY NUMERIC(12,4) DEFAULT '0', COST NUMERIC(16,6) DEFAULT '0', WC_Factor NUMERIC(2,0) DEFAULT '0', PURCHASE_FACTOR NUMERIC(11,5) DEFAULT '0', PURCH_COST NUMERIC(16,6) DEFAULT '0', TAG VARCHAR(6), SIGNOFF_GRPUSR VARCHAR(8), SIGNOFF_TYPE VARCHAR(1), TIER VARCHAR(10), CTIER DOUBLE DEFAULT '0', COMPLETE VARCHAR(10), RTR_SEQ_NUM VARCHAR(6), EXTENDED NUMERIC(16,6) DEFAULT '0', Loc VARCHAR(2), Issue_UM VARCHAR(3), Consump_Conv NUMERIC(11,5) DEFAULT '0', Weight NUMERIC(16,6) DEFAULT '0', Insert_Bom VARCHAR(2) DEFAULT '00', Date_Maintenance VARCHAR(6) DEFAULT '000000', QUANTITY_6 NUMERIC(16,6) DEFAULT '0', Date_Start VARCHAR(6) DEFAULT '000000', Date_Stop VARCHAR(6) DEFAULT '000000', BM_Serial_Start VARCHAR(15), BM_Serial_Stop VARCHAR(15), Purge_Flag VARCHAR(1), ORDR_USR_FLAG VARCHAR(1), DRAWING VARCHAR(20), Date_Last_Chg VARCHAR(8) DEFAULT '000000', Time_Last_Chg VARCHAR(8) DEFAULT '000000', Last_Chg_By VARCHAR(8), Last_Chg_Prog VARCHAR(8), Drawing_Size VARCHAR(1), REQ_TRACE BFLOAT8, Cost_Date VARCHAR(8) DEFAULT '00000000', Inactive BIT DEFAULT '0' NOT NULL, Chg_Rev NUMERIC(6,0) DEFAULT '0', Setup_Qty NUMERIC(12,4) DEFAULT '0', DISPLAY_PART VARCHAR(50), Shape VARCHAR(10), Serie INTEGER DEFAULT '0', Sort_Code VARCHAR(100), PhantomPart VARCHAR(20), RefPart VARCHAR(20), SeqSort INTEGER DEFAULT '0', Lead NUMERIC(12,6) DEFAULT '0', PartID VARCHAR(20), Amt_Minimum INTEGER DEFAULT '0' );")
	f.Intrinsic.Control.Endif	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","GCG_4986_BkpLine","sIndex","GCG_4986_BkpLine01")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX GCG_4986_BkpLine01 ON GCG_4986_BkpLine ( DateRef, TimeRef,Part,UserID );")
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","GCG_4986_BkpLine","sIndex","GCG_4986_BkpLine02")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX GCG_4986_BkpLine02 ON GCG_4986_BkpLine ( DateRef, TimeRef,Part );")
	f.Intrinsic.Control.EndIf		
	
	'GCG_4986_BkpLine2
	Function.ODBC.Connection!conx.TableExists("GCG_4986_BkpLine2",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.ODBC.Connection!conx.Execute("CREATE TABLE GCG_4986_BkpLine2 ( UserID CHAR(8), DateRef INTEGER DEFAULT '0', TimeRef INTEGER DEFAULT '0', BPARENT VARCHAR(20), DESCR_BP VARCHAR(30), BOM_SEQ VARCHAR(4), RTR_SEQ VARCHAR(6), PART VARCHAR(20), DESCRIPTION VARCHAR(30), DESCRIPTION_2 VARCHAR(71), DESCRIPTION_3 VARCHAR(71), LMO VARCHAR(1), COMMENTS LONGVARCHAR, PL VARCHAR(2), CATEGORY VARCHAR(10), CAT_CODE VARCHAR(1), SOURCE VARCHAR(10), SOURCE_CODE VARCHAR(1), OP_CODE VARCHAR(6), UM VARCHAR(3), TYPE VARCHAR(30), SET_UP NUMERIC(12,4) DEFAULT '0', FREQUENCY NUMERIC(6,0) DEFAULT '0', QTY NUMERIC(12,4) DEFAULT '0', COST NUMERIC(16,6) DEFAULT '0', WC_Factor NUMERIC(2,0) DEFAULT '0', PURCHASE_FACTOR NUMERIC(11,5) DEFAULT '0', PURCH_COST NUMERIC(16,6) DEFAULT '0', TAG VARCHAR(6), SIGNOFF_GRPUSR VARCHAR(8), SIGNOFF_TYPE VARCHAR(1), TIER VARCHAR(10), CTIER DOUBLE DEFAULT '0', COMPLETE VARCHAR(10), RTR_SEQ_NUM VARCHAR(6), EXTENDED NUMERIC(16,6) DEFAULT '0', Loc VARCHAR(2), Issue_UM VARCHAR(3), Consump_Conv NUMERIC(11,5) DEFAULT '0', Weight NUMERIC(16,6) DEFAULT '0', Insert_Bom VARCHAR(2) DEFAULT '00', Date_Maintenance VARCHAR(6) DEFAULT '000000', QUANTITY_6 NUMERIC(16,6) DEFAULT '0', Date_Start VARCHAR(6) DEFAULT '000000', Date_Stop VARCHAR(6) DEFAULT '000000', BM_Serial_Start VARCHAR(15), BM_Serial_Stop VARCHAR(15), Purge_Flag VARCHAR(1), ORDR_USR_FLAG VARCHAR(1), DRAWING VARCHAR(20), Date_Last_Chg VARCHAR(8) DEFAULT '000000', Time_Last_Chg VARCHAR(8) DEFAULT '000000', Last_Chg_By VARCHAR(8), Last_Chg_Prog VARCHAR(8), Drawing_Size VARCHAR(1), REQ_TRACE BFLOAT8, Cost_Date VARCHAR(8) DEFAULT '00000000', Inactive BIT DEFAULT '0' NOT NULL, Chg_Rev NUMERIC(6,0) DEFAULT '0', Setup_Qty NUMERIC(12,4) DEFAULT '0', DISPLAY_PART VARCHAR(50), Shape VARCHAR(10), Serie INTEGER DEFAULT '0', Sort_Code VARCHAR(100), PhantomPart VARCHAR(20), RefPart VARCHAR(20), SeqSort INTEGER DEFAULT '0', Lead NUMERIC(12,6) DEFAULT '0', PartID VARCHAR(20), Amt_Minimum INTEGER DEFAULT '0' );")
	f.Intrinsic.Control.Endif	
	
	'ROUTER_HEADER4986
	Function.ODBC.Connection!conx.TableExists("ROUTER_HEADER4986",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.ODBC.Connection!conx.Execute("CREATE TABLE ROUTER_HEADER4986 (UserID Char(8),SaveDate Date,SaveTime varchar(18),DateRef Integer,TimeRef Integer, ROUTER CHAR(20), ROUTER_SUFFIX CHAR(3), LINE_ROUTER CHAR(6), ROUTER_INSERT CHAR(2), DESCRIPTION_ROUTER CHAR(30), SIMILAR CHAR(20), PROD_LINE CHAR(2), NO_REPRICE CHAR(1), SCRAP NUMERIC(4,4), CUSTOMER CHAR(6), PART_CUSTOMER CHAR(20), DRAWING_CUSTOMER CHAR(20), DATE_CURRENT DATE, QTY_CURRENT NUMERIC(8,0), PRICE_CURRENT NUMERIC(12,4), DATE_PRIOR CHAR(6), QTY_PRIOR NUMERIC(8,0), PRICE_PRIOR NUMERIC(12,4), DATE_ORIGINAL CHAR(6), SORT_1 CHAR(20), SORT_2 CHAR(20), UM_INVENTORY CHAR(2), COMMISSION NUMERIC(7,4), DATE_LAST_ACCESSED DATE, PURGE_FLAG CHAR(1) );")
	f.Intrinsic.Control.Endif
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","ROUTER_HEADER4986","sIndex","ROUTER_HEADER498601")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX ROUTER_HEADER498601 ON ROUTER_HEADER4986 ( DateRef, TimeRef,ROUTER,UserID );")
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","ROUTER_HEADER4986","sIndex","ROUTER_HEADER498602")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX ROUTER_HEADER498602 ON ROUTER_HEADER4986 ( DateRef, TimeRef,ROUTER );")
	f.Intrinsic.Control.EndIf	
	
	'ROUTER_LINE4986
	Function.ODBC.Connection!conx.TableExists("ROUTER_LINE4986",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.ODBC.Connection!conx.Execute("CREATE TABLE ROUTER_LINE4986  (UserID Char(8),SaveDate Date,SaveTime varchar(18),DateRef Integer,TimeRef Integer, ROUTER CHAR(20), ROUTER_SUFFIX CHAR(3), LINE_ROUTER CHAR(6), ROUTER_INSERT CHAR(2), LMO CHAR(1), PART_WC_OUTSIDE CHAR(20), OPERATION CHAR(6), SET_UP NUMERIC(12,4), RUN_TIME NUMERIC(12,4), RATE DECIMAL(16,6), FILLER CHAR(3), FREQUENCY NUMERIC(6,0), MULTIPLE NUMERIC(6,0), DESC_RT_LINE CHAR(30), UM_INVENTORY CHAR(2), OVERLAP NUMERIC(2,0), WC_FACTOR NUMERIC(2,0), ACTUAL_WT NUMERIC(12,4), FLAG_MINIMUM CHAR(1), AMT_MINIMUM NUMERIC(12,4), SEC_MIN_HR CHAR(1), GROUP_SEQUENCE CHAR(3), CREW_SIZE NUMERIC(8,4), RUN_TIME_D6 NUMERIC(14,6), MES_PROCESS_ID NUMERIC(5,0), PRICE_PERCENT NUMERIC(3,0), FLAG_MAIN_COMMENT CHAR(1), LEAD_TIME NUMERIC(4,0), PART_LOCN CHAR(2), TOOLING_SEQ CHAR(1), SORT_CODE CHAR(20), PROJ_GROUP CHAR(6), SIGNOFF_GRPUSR CHAR(8), SIGNOFF_TYPE CHAR(1), BUILT_FROM_BOM CHAR(1), ALLOW_CHRG CHAR(1), OMIT_FROM_WO CHAR(1), FINAL_OVERRIDE_FLG CHAR(1), OTH_LANGUAGE CHAR(1));")
	f.Intrinsic.Control.Endif	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","ROUTER_LINE4986","sIndex","ROUTER_LINE498601")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX ROUTER_LINE498601 ON ROUTER_LINE4986 ( DateRef, TimeRef,ROUTER,UserID );")
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","ROUTER_LINE4986","sIndex","ROUTER_LINE498602")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX ROUTER_LINE498602 ON ROUTER_LINE4986 ( DateRef, TimeRef,ROUTER );")
	f.Intrinsic.Control.EndIf		
	
	'ROUTER_DESC4986
	Function.ODBC.Connection!conx.TableExists("ROUTER_DESC4986",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)		
		f.ODBC.Connection!conx.Execute("CREATE TABLE ROUTER_DESC4986 ( UserID Char(8),SaveDate Date,SaveTime varchar(18),DateRef Integer,TimeRef Integer, ROUTER CHAR(20), ROUTER_SUFFIX CHAR(3), ROUTER_TYPE CHAR(1), LINE_ROUTER CHAR(6), ROUTER_INSERT CHAR(2), DESC_ROUTER_1 CHAR(71), DESC_ROUTER_2 CHAR(71), DESC_ROUTER_3 CHAR(71))")
	f.Intrinsic.Control.Endif	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","ROUTER_DESC4986","sIndex","ROUTER_DESC498601")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX ROUTER_DESC498601 ON ROUTER_DESC4986 ( DateRef, TimeRef,ROUTER,UserID );")
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","ROUTER_DESC4986","sIndex","ROUTER_DESC498602")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX ROUTER_DESC498602 ON ROUTER_DESC4986 ( DateRef, TimeRef,ROUTER );")
	f.Intrinsic.Control.EndIf	
	
	'RTR_PRICE_1_4_4986
	Function.ODBC.Connection!conx.TableExists("RTR_PRICE_1_4_4986",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)		
		f.ODBC.Connection!conx.Execute("CREATE TABLE RTR_PRICE_1_4_4986  (UserID Char(8),SaveDate Date,SaveTime varchar(18),DateRef Integer,TimeRef Integer,ROUTER CHAR(20), ROUTER_SUFFIX CHAR(3), ROUTER_TYPE CHAR(1), LINE_ROUTER CHAR(6), ROUTER_INSERT CHAR(2), PRICE_1_1 DECIMAL(12,4), PRICE_1_2 DECIMAL(12,4), PRICE_1_3 DECIMAL(12,4), PRICE_1_4 DECIMAL(12,4), PRICE_1_5 DECIMAL(12,4), PRICE_2_1 DECIMAL(12,4), PRICE_2_2 DECIMAL(12,4), PRICE_2_3 DECIMAL(12,4), PRICE_2_4 DECIMAL(12,4), PRICE_2_5 DECIMAL(12,4), PRICE_3_1 DECIMAL(12,4), PRICE_3_2 DECIMAL(12,4), PRICE_3_3 DECIMAL(12,4), PRICE_3_4 DECIMAL(12,4), PRICE_3_5 DECIMAL(12,4), PRICE_4_1 DECIMAL(12,4), PRICE_4_2 DECIMAL(12,4), PRICE_4_3 DECIMAL(12,4), PRICE_4_4 DECIMAL(12,4), PRICE_4_5 DECIMAL(12,4), QUANTITY_1 DECIMAL(12,4), QUANTITY_2 DECIMAL(12,4), QUANTITY_3 DECIMAL(12,4), QUANTITY_4 DECIMAL(12,4), FILLER4 CHAR(4), PRICE_1_6 DECIMAL(12,4), PRICE_2_6 DECIMAL(12,4), PRICE_3_6 DECIMAL(12,4), PRICE_4_6 DECIMAL(12,4))")
	f.Intrinsic.Control.Endif	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","RTR_PRICE_1_4_4986","sIndex","RTR_PRICE_1_4_498601")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX RTR_PRICE_1_4_498601 ON RTR_PRICE_1_4_4986 ( DateRef, TimeRef,ROUTER,UserID );")
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","RTR_PRICE_1_4_4986","sIndex","RTR_PRICE_1_4_498602")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX RTR_PRICE_1_4_498602 ON RTR_PRICE_1_4_4986 ( DateRef, TimeRef,ROUTER );")
	f.Intrinsic.Control.EndIf	
	
	'RTR_PRICE_5_8_4986
	Function.ODBC.Connection!conx.TableExists("RTR_PRICE_5_8_4986",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)		
		f.ODBC.Connection!conx.Execute("CREATE TABLE RTR_PRICE_5_8_4986 ( UserID Char(8),SaveDate Date,SaveTime varchar(18),DateRef Integer,TimeRef Integer,ROUTER CHAR(20), ROUTER_SUFFIX CHAR(3), ROUTER_TYPE CHAR(1), LINE_ROUTER CHAR(6), ROUTER_INSERT CHAR(2), PRICE_5_1 DECIMAL(12,4), PRICE_5_2 DECIMAL(12,4), PRICE_5_3 DECIMAL(12,4), PRICE_5_4 DECIMAL(12,4), PRICE_5_5 DECIMAL(12,4), PRICE_6_1 DECIMAL(12,4), PRICE_6_2 DECIMAL(12,4), PRICE_6_3 DECIMAL(12,4), PRICE_6_4 DECIMAL(12,4), PRICE_6_5 DECIMAL(12,4), PRICE_7_1 DECIMAL(12,4), PRICE_7_2 DECIMAL(12,4), PRICE_7_3 DECIMAL(12,4), PRICE_7_4 DECIMAL(12,4), PRICE_7_5 DECIMAL(12,4), PRICE_8_1 DECIMAL(12,4), PRICE_8_2 DECIMAL(12,4), PRICE_8_3 DECIMAL(12,4), PRICE_8_4 DECIMAL(12,4), PRICE_8_5 DECIMAL(12,4), QUANTITY_5 DECIMAL(12,4), QUANTITY_6 DECIMAL(12,4), QUANTITY_7 DECIMAL(12,4), QUANTITY_8 DECIMAL(12,4), FILLER4 CHAR(4), PRICE_5_6 DECIMAL(12,4), PRICE_6_6 DECIMAL(12,4), PRICE_7_6 DECIMAL(12,4),PRICE_8_6 DECIMAL(12,4))")
	f.Intrinsic.Control.Endif
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","RTR_PRICE_5_8_4986","sIndex","RTR_PRICE_5_8_498601")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX RTR_PRICE_5_8_498601 ON RTR_PRICE_5_8_4986 ( DateRef, TimeRef,ROUTER,UserID );")
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","RTR_PRICE_5_8_4986","sIndex","RTR_PRICE_5_8_498602")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX RTR_PRICE_5_8_498602 ON RTR_PRICE_5_8_4986 ( DateRef, TimeRef,ROUTER );")
	f.Intrinsic.Control.EndIf		
	
	'F.ODBC.Connection!conx.Execute("Drop table RTR_PRICE_9_10_4986")
	'RTR_PRICE_9_10_4986
	Function.ODBC.Connection!conx.TableExists("RTR_PRICE_9_10_4986",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)		
		f.ODBC.Connection!conx.Execute("CREATE TABLE RTR_PRICE_9_10_4986  ( UserID Char(8),SaveDate Date,SaveTime varchar(18),DateRef Integer,TimeRef Integer,ROUTER CHAR(20), ROUTER_SUFFIX CHAR(3), ROUTER_TYPE CHAR(1), LINE_ROUTER CHAR(6), ROUTER_INSERT CHAR(2), PRICE_9_1 DECIMAL(12,4), PRICE_9_2 DECIMAL(12,4), PRICE_9_3 DECIMAL(12,4), PRICE_9_4 DECIMAL(12,4), PRICE_9_5 DECIMAL(12,4), PRICE_10_1 DECIMAL(12,4), PRICE_10_2 DECIMAL(12,4), PRICE_10_3 DECIMAL(12,4), PRICE_10_4 DECIMAL(12,4), PRICE_10_5 DECIMAL(12,4), PRICE_10_6 DECIMAL(12,4), QUANTITY_9 DECIMAL(12,4), QUANTITY_10 DECIMAL(12,4), PRICE_9_6 DECIMAL(12,4))")
	f.Intrinsic.Control.Endif	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","RTR_PRICE_9_10_4986","sIndex","RTR_PRICE_9_10_49861")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX RTR_PRICE_9_10_49861 ON RTR_PRICE_9_10_4986 ( DateRef, TimeRef,ROUTER,UserID );")
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","RTR_PRICE_9_10_4986","sIndex","RTR_PRICE_9_10_49862")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX RTR_PRICE_9_10_49862 ON RTR_PRICE_9_10_4986 ( DateRef, TimeRef,ROUTER );")
	f.Intrinsic.Control.EndIf		
		
	'ROUTER_SUPP_HDR4986
	Function.ODBC.Connection!conx.TableExists("ROUTER_SUPP_HDR4986",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)		
		f.ODBC.Connection!conx.Execute("CREATE TABLE ROUTER_SUPP_HDR4986 ( UserID Char(8),SaveDate Date,SaveTime varchar(18),DateRef Integer,TimeRef Integer, RTR_NUM CHAR(20), SUFFIX CHAR(3), TYPE CHAR(1), LINE CHAR(6), F_INSERT CHAR(2), COMPLETE Bit, INACTIVE Bit, CHG_REV NUMERIC(6,0))")
	f.Intrinsic.Control.Endif	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","ROUTER_SUPP_HDR4986","sIndex","ROUTER_SUPP_HDR49861")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX ROUTER_SUPP_HDR49861 ON ROUTER_SUPP_HDR4986 ( DateRef, TimeRef,RTR_NUM,UserID );")
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","ROUTER_SUPP_HDR4986","sIndex","ROUTER_SUPP_HDR49862")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX ROUTER_SUPP_HDR49862 ON ROUTER_SUPP_HDR4986 ( DateRef, TimeRef,RTR_NUM );")
	f.Intrinsic.Control.EndIf		

	'ROUTER_SUPP_LINE4986
	Function.ODBC.Connection!conx.TableExists("ROUTER_SUPP_LINE4986",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)		
		f.ODBC.Connection!conx.Execute("CREATE TABLE ROUTER_SUPP_LINE4986  ( UserID Char(8),SaveDate Date,SaveTime varchar(18),DateRef Integer,TimeRef Integer, RTR_NUM CHAR(20), SUFFIX CHAR(3), TYPE CHAR(1), LINE CHAR(6), F_INSERT CHAR(2), ROLL_LENGTH NUMERIC(12,4), ROLL_WIDTH NUMERIC(12,4), FREQUENT_4 NUMERIC(10,4))")
	f.Intrinsic.Control.Endif
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","ROUTER_SUPP_LINE4986","sIndex","ROUTER_SUPP_LINE01")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX ROUTER_SUPP_LINE01 ON ROUTER_SUPP_LINE4986 ( DateRef, TimeRef,RTR_NUM,UserID );")
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","ROUTER_SUPP_LINE4986","sIndex","ROUTER_SUPP_LINE02")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX ROUTER_SUPP_LINE02 ON ROUTER_SUPP_LINE4986 ( DateRef, TimeRef,RTR_NUM );")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","ROUTER_SUPP_HDR","sIndex","RTRSUPHDR498601")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX RTRSUPHDR498601 ON ROUTER_SUPP_HDR ( RTR_NUM, SUFFIX,TYPE );")
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","ROUTER_HEADER","sIndex","RTRHdr498601")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX RTRHdr498601 ON ROUTER_HEADER ( ROUTER, ROUTER_SUFFIX,ROUTER_TYPE );")
	f.Intrinsic.Control.EndIf		
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","ROUTER_LINE","sIndex","RTRLine498601")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX RTRLine498601 ON ROUTER_LINE ( ROUTER, ROUTER_SUFFIX,ROUTER_TYPE );")
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","ROUTER_LINE","sIndex","RTRLine498602")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX RTRLine498602 ON ROUTER_LINE ( ROUTER, ROUTER_SUFFIX,ROUTER_TYPE,LMO);")
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.CallSub("Check_Index","sTable","ROUTER_LINE","sIndex","RTRLine498603")
	f.Intrinsic.Control.If(v.Args.bExist,=,False)
		f.ODBC.Connection!conx.Execute("CREATE INDEX RTRLine498603 ON ROUTER_LINE ( ROUTER, ROUTER_SUFFIX,ROUTER_TYPE,LMO,LINE_ROUTER);")
	f.Intrinsic.Control.EndIf		
	
	'CREATE INDEX "ROUTER_LINEK01" USING 1 IN DICTIONARY  ON "ROUTER_LINE" ( "ROUTER", "ROUTER_SUFFIX" );
	'CREATE INDEX "ROUTER_HEADERK00" USING 1 IN DICTIONARY  ON "ROUTER_HEADER" ( "ROUTER", "ROUTER_SUFFIX" );

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Check_And_Create_Tables.End

Program.Sub.Check_Index.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sError.Declare
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.bExist.Declare
	
	f.Intrinsic.String.Build("Select Xf$Name As TableName,F1.XE$Name As FieldName,F1.Xe$DataType as DataType FROM X$File INNER JOIN X$Field F1 On F1.XE$File = XF$ID WHERE Xf$Name = '{0}' and F1.XE$Name = '{1}'",v.Args.sTable,v.Args.sIndex,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		v.Local.bExist.Set(True)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Variable.AddRV("bExist",v.Local.bExist)

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	'f.Intrinsic.Control.CallSub("Write_GAB_Error_Log","sError",v.Local.sError)
	'if any error, assume the index exists
	f.Intrinsic.Variable.AddRV("bExist",True)
F.Intrinsic.Control.EndTry
Program.Sub.Check_Index.End

Program.Sub.Bind_Form_To_Form.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	
	gui.Debug..BindTo(v.Screen.Form.HWnd,100,100)
	gui.NonInv..BindTo(v.Screen.Form.HWnd,100,100)
	gui.Additional..BindTo(v.Screen.Form.HWnd,100,100)
	gui.BOM_DETAIL..BindTo(v.Screen.Form.HWnd,100,100)
	gui.CellComments..BindTo(v.Screen.Form.HWnd,100,100)
	gui.Comment..BindTo(v.Screen.Form.HWnd,100,100)
	gui.Conversion..BindTo(v.Screen.Form.HWnd,100,100)
	gui.Export..BindTo(v.Screen.Form.HWnd,100,100)
	gui.PNG_Frags..BindTo(v.Screen.Form.HWnd,100,100)
	'gui.POPBOM..BindTo(v.Screen.Form.HWnd,100,100)
	gui.POPROUTER..BindTo(v.Screen.Form.HWnd,100,100)
	gui.FieldOrder..BindTo(v.Screen.Form.HWnd,100,100)

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Bind_Form_To_Form.End

Program.Sub.cmdRefreshSource_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	
	f.Intrinsic.Control.CallSub(getMaterial)
	f.Intrinsic.Control.CallSub(getLabor)
	f.Intrinsic.Control.CallSub(getOutside)
	gui.Form.GGC_Mat.Enabled(True)
	gui.Form.GGC_WC.Enabled(True)
	gui.Form.GGC_OPCODE.Enabled(True)
	gui.Form.GGC_Outs.Enabled(True)
	f.Intrinsic.Control.CallSub(Build_Dictionaries)
	f.Intrinsic.Control.CallSub(optMat_click)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdRefreshSource_Click.End

Program.Sub.cmdClearRouter_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'Prevent double cycle
	f.Intrinsic.Control.IF(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf

	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveClearRTR)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveClearRTR.Set(True)

	f.Intrinsic.Control.CallSub(Clear_Router_Side,"bDeleteChild",True)
	f.Intrinsic.Control.If(v.Global.bBindCutList)
		f.Intrinsic.Control.CallSub(Bind_CutList)		
	f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.CallSub(Enable_Disable_Router_PartHead,"ActiveFlag","Enable")
	gui.Form.txtFocusParent.SetFocus
	v.Global.bActiveClearRTR.Set(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdClearRouter_Click.End

Program.Sub.cmdClearBom_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)	
	
	'Prevent double cycle
	f.Intrinsic.Control.IF(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveClearBom)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveClearBom.Set(True)
	
	f.Intrinsic.Control.CallSub(Clear_Bom_Side)
	f.Intrinsic.Control.CallSub(Enable_Disable_Bom_PartHead,"ActiveFlag","Enable")
	gui.Form.txtParent.SetFocus
	v.Global.bActiveClearBom.Set(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdClearBom_Click.End

'End Essential 1	Report Error/Debug Turn on/Catching/Serialize/Unload/Hide*******************************************************************chromechrome

'Essential 2: Simple Subs
Program.Sub.Check_Security_Groups.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sMsg.Declare
	V.Local.sRet.Declare
	
	f.Data.DataTable.DeleteRow("MsgItemsCheck")
	f.Data.DataTable.AcceptChanges("MsgItemsCheck")

	f.Data.DataTable.AddRow("MsgItemsCheck","Item","ADM4986","Found",False,"Description",": manage SS. > Admin. > Estimator Options.")
	f.Data.DataTable.AddRow("MsgItemsCheck","Item","ESTIMATE","Found",False,"Description",": quote.")
	f.Data.DataTable.AddRow("MsgItemsCheck","Item","ENGINEER","Found",False,"Description",": modify/create Router/Bom.")	
	
	'Check existing group ADM4986, ESTIMATE and ENGINEER
	v.Local.sMsg.Set("Please create security group:")
	f.Global.Security.GetAllUserGroups(v.Caller.CompanyCode,v.Local.sRet)	
	f.Data.DataTable.CreateFromString("Groups",v.Local.sRet,"Group","String","","*!*",True)	
	'ENGINEER checking
	f.Data.DataTable.Select("Groups","Group = 'ADM4986'",V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet,<>,"***NORETURN***")
		f.Data.DataTable.SetValue("MsgItemsCheck",0,"Found",True)
	F.Intrinsic.Control.EndIf		
	'ESTIMATE checking
	f.Data.DataTable.Select("Groups","Group = 'ESTIMATE'",V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet,<>,"***NORETURN***")
		f.Data.DataTable.SetValue("MsgItemsCheck",1,"Found",True)
	F.Intrinsic.Control.EndIf
	'ENGINEER checking
	f.Data.DataTable.Select("Groups","Group = 'ENGINEER'",V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet,<>,"***NORETURN***")	
		f.Data.DataTable.SetValue("MsgItemsCheck",2,"Found",True)
	F.Intrinsic.Control.EndIf	
	F.Data.DataTable.Close("Groups")
	
	f.Data.DataView.Create("MsgItemsCheck","vNonExist",22,"Found = 0","")
	f.Intrinsic.Control.If(v.DataView.MsgItemsCheck!vNonExist.RowCount,>,0)
		'''''''BE CAREFUL TO USE THIS FUNCTION: only 1 instance of InvokeWaitDialog exists at a moment. Otherwise you will have bug in 2019.1. I KNOW WHAT I AM DOING, SO i CLOSE IT!!!!!!!!!!!!!!!!!!!!
		f.Intrinsic.UI.CloseWaitDialog
		'''''''END CAUTION		
		F.Intrinsic.Control.CallSub(MsgItemsCreated,"Title","Need Security Groups","MainLine","Please verify if these Groups are created:")
		f.ODBC.Connection!conx.Close
		f.Intrinsic.Control.End
	F.Intrinsic.Control.EndIf		
	f.Data.DataView.Close("MsgItemsCheck","vNonExist")

f.Intrinsic.Control.catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Check_Security_Groups.End

Program.Sub.Check_Folder.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bEx.Declare
	v.Local.sDir.Declare
	
	'Check custom folder: Custom\4986
	f.Intrinsic.String.Build("{0}\Custom",v.Caller.GlobalDir,v.Local.sDir)
	f.Intrinsic.File.DirExists(v.Local.sDir,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx.Not)
		f.Intrinsic.File.CreateDir(v.Local.sDir)		
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Build("{0}\Custom\4986",v.Caller.GlobalDir,v.Local.sDir)
	f.Intrinsic.Control.If(v.Local.bEx.Not)
		f.Intrinsic.File.CreateDir(v.Local.sDir)		
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Build("{0}\Custom\4986\{1}",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Local.sDir)
	f.Intrinsic.File.DirExists(v.Local.sDir,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx.Not)
		f.Intrinsic.File.CreateDir(v.Local.sDir)
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.String.Build("{0}\Custom\4986\{1}\RUPLHist",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Local.sDir)
	f.Intrinsic.File.DirExists(v.Local.sDir,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx.Not)
		f.Intrinsic.File.CreateDir(v.Local.sDir)
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.String.Build("{0}\Cad_Export",v.Caller.GlobalDir,v.Local.sDir)
	f.Intrinsic.File.DirExists(v.Local.sDir,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx.Not)
		f.Intrinsic.File.CreateDir(v.Local.sDir)
	f.Intrinsic.Control.EndIf		
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Check_Folder.End

Program.Sub.Set_Logo.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sIcon.Declare
	V.Local.sGssLogo.Declare
	v.Local.sDown.Declare
	v.Local.bEx.Declare
	
	'image files used in the form
	F.Intrinsic.String.Build("{0}\GCG_4986.ico",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form..Icon(V.Local.sIcon)
		Gui.BOM_DETAIL..Icon(V.Local.sIcon)
		Gui.Additional..Icon(V.Local.sIcon)
		Gui.Comment..Icon(v.Local.sIcon)
		Gui.Export..Icon(v.Local.sIcon)
		Gui.NonInv..Icon(v.Local.sIcon)
		Gui.POPBOM..Icon(v.Local.sIcon)
		Gui.POPROUTER..Icon(v.Local.sIcon)	
		gui.FieldOrder..Icon(v.Local.sIcon)
		gui.CellComments..Icon(v.Local.sIcon)
		gui.Conversion..Icon(v.Local.sIcon)
		gui.Debug..Icon(v.Local.sIcon)
		gui.Export..Icon(v.Local.sIcon)
		gui.PNG_Frags..Icon(v.Local.sIcon)
		gui.DecimalRTR..Icon(v.Local.sIcon)
		gui.RTRGridFormat..Icon(v.Local.sIcon)
		gui.trvStyle..Icon(v.Local.sIcon)
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.String.Build("{0}\GCG_4986_Small_Logo.png",V.Caller.GasDir,V.Local.sGssLogo)
	f.Intrinsic.File.Exists(v.Local.sGssLogo,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picGSSLogo.Picture(V.Local.sGssLogo)
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.String.Build("{0}\GCG_4986_AB.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picAltBom.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picAltBom.BackColor(v.Color.ManhattanMist)
	f.Intrinsic.Control.EndIf	
		
	'Document Control
	F.Intrinsic.String.Build("{0}\GCG_4986_DCS_ON.bmp",v.Caller.GasDir,v.Global.sDocsON)
	F.Intrinsic.String.Build("{0}\GCG_4986_DCS_OFF.bmp",v.Caller.GasDir,v.Global.sDocsOFF)	
	f.Intrinsic.File.Exists(v.Global.sDocsON,v.Global.bDocsON)
	f.Intrinsic.File.Exists(v.Global.sDocsOFF,v.Global.bDocsOFF)
	f.Intrinsic.Control.If(v.Global.bDocsOFF)
		gui.Form.picRtrDocs.Picture(v.Global.sDocsOFF)
		gui.Form.picBomDocs.Picture(v.Global.sDocsOFF)
		gui.Form.picQuoteDocs.Picture(v.Global.sDocsOFF)
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.String.Build("{0}\GCG_4986_FO.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picFieldOrder.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picFieldOrder.BackColor(v.Color.Orange)
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.String.Build("{0}\GCG_4986_Label.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picLabel.Picture(v.Local.sIcon)
		gui.Form.picRTRGridFormat.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picLabel.BackColor(v.Color.LtBlue)
		gui.Form.picRTRGridFormat.BackColor(v.Color.LtBlue)
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.String.Build("{0}\GCG_4986_Decimal.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picDecimal.Picture(v.Local.sIcon)
		gui.Form.picRTRDecimal.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picDecimal.BackColor(v.Color.Grey)
		gui.Form.picRTRDecimal.BackColor(v.Color.Grey)
	f.Intrinsic.Control.EndIf	
	
	v.Global.sRedPushPin_Right.Declare
	v.Global.bRedPushPin_Right.Declare
	F.Intrinsic.String.Build("{0}\GCG_4986_RedR.bmp",v.Caller.GasDir,v.Global.sRedPushPin_Right)
	f.Intrinsic.File.Exists(v.Global.sRedPushPin_Right,v.Global.bRedPushPin_Right)
	f.Intrinsic.Control.If(v.Global.bRedPushPin_Right)
		gui.Form.picHideTree.Picture(v.Global.sRedPushPin_Right)
	f.Intrinsic.Control.Else
		gui.Form.picHideTree.BackColor(v.Color.Red)
	f.Intrinsic.Control.EndIf
	
	v.Global.sGreenPushPin_Right.Declare
	v.Global.bGreenPushPin_Right.Declare	
	F.Intrinsic.String.Build("{0}\GCG_4986_GreenR.bmp",v.Caller.GasDir,v.Global.sGreenPushPin_Right)
	f.Intrinsic.File.Exists(v.Global.sGreenPushPin_Right,v.Global.bGreenPushPin_Right)	
	
	v.Global.sRedPushPin_Left.Declare
	v.Global.bRedPushPin_Left.Declare
	F.Intrinsic.String.Build("{0}\GCG_4986_RedL.bmp",v.Caller.GasDir,v.Global.sRedPushPin_Left)
	f.Intrinsic.File.Exists(v.Global.sRedPushPin_Left,v.Global.bRedPushPin_Left)
	f.Intrinsic.Control.If(v.Global.bRedPushPin_Left)
		gui.Form.picHideSource.Picture(v.Global.sRedPushPin_Left)
	f.Intrinsic.Control.Else
		gui.Form.picHideSource.BackColor(v.Color.Red)
	f.Intrinsic.Control.EndIf
	
	v.Global.sGreenPushPin_Left.Declare
	v.Global.bGreenPushPin_Left.Declare	
	F.Intrinsic.String.Build("{0}\GCG_4986_GreenL.bmp",v.Caller.GasDir,v.Global.sGreenPushPin_Left)
	f.Intrinsic.File.Exists(v.Global.sGreenPushPin_Left,v.Global.bGreenPushPin_Left)
	
	'Size
	v.Global.sReSize_Right.Declare
	v.Global.bReSize_Right.Declare
	F.Intrinsic.String.Build("{0}\GCG_4986_ReSizeR.bmp",v.Caller.GasDir,v.Global.sReSize_Right)
	f.Intrinsic.File.Exists(v.Global.sReSize_Right,v.Global.bReSize_Right)
	f.Intrinsic.Control.If(v.Global.bReSize_Right)
		gui.Form.picReSize_Right1.Picture(v.Global.sReSize_Right)
		gui.Form.picReSize_Right2.Picture(v.Global.sReSize_Right)
		gui.Log.picLogIncrease.Picture(v.Global.sReSize_Right)
	f.Intrinsic.Control.Else
		gui.Form.picReSize_Right1.BackColor(v.Color.Red)
		gui.Form.picReSize_Right2.BackColor(v.Color.Red)
		gui.Log.picLogIncrease.BackColor(v.Color.Green)
	f.Intrinsic.Control.EndIf
	
	v.Global.sReSize_Left.Declare
	v.Global.bReSize_Left.Declare
	F.Intrinsic.String.Build("{0}\GCG_4986_ReSizeL.bmp",v.Caller.GasDir,v.Global.sReSize_Left)
	f.Intrinsic.File.Exists(v.Global.sReSize_Left,v.Global.bReSize_Left)
	f.Intrinsic.Control.If(v.Global.bReSize_Left)
		gui.Form.picReSize_Left1.Picture(v.Global.sReSize_Left)
		gui.Form.picReSize_Left2.Picture(v.Global.sReSize_Left)
		gui.Log.picLogDecrease.Picture(v.Global.sReSize_Left)
	f.Intrinsic.Control.Else
		gui.Form.picReSize_Left1.BackColor(v.Color.Red)
		gui.Form.picReSize_Left2.BackColor(v.Color.Red)
		gui.Log.picLogDecrease.BackColor(v.Color.Green)
	f.Intrinsic.Control.EndIf	
	
	'Hide router header
	v.Global.sOrangePushPin_Left.Declare
	v.Global.bOrangePushPin_Left.Declare
	F.Intrinsic.String.Build("{0}\GCG_4986_OrangeL.bmp",v.Caller.GasDir,v.Global.sOrangePushPin_Left)
	f.Intrinsic.File.Exists(v.Global.sOrangePushPin_Left,v.Global.bOrangePushPin_Left)
	f.Intrinsic.Control.If(v.Global.bOrangePushPin_Left)
		gui.Form.picHideRtrHead.Picture(v.Global.sOrangePushPin_Left)
	f.Intrinsic.Control.Else
		gui.Form.picHideRtrHead.BackColor(v.Color.Orange)
	f.Intrinsic.Control.EndIf
	
	v.Global.sBluePushPin_Left.Declare
	v.Global.bBluePushPin_Left.Declare	
	F.Intrinsic.String.Build("{0}\GCG_4986_BlueL.bmp",v.Caller.GasDir,v.Global.sBluePushPin_Left)
	f.Intrinsic.File.Exists(v.Global.sBluePushPin_Left,v.Global.bBluePushPin_Left)	
	
	'Hide Bom header
	v.Global.sOrangePushPin_Right.Declare
	v.Global.bOrangePushPin_Right.Declare
	F.Intrinsic.String.Build("{0}\GCG_4986_OrangeR.bmp",v.Caller.GasDir,v.Global.sOrangePushPin_Right)
	f.Intrinsic.File.Exists(v.Global.sOrangePushPin_Right,v.Global.bOrangePushPin_Right)
	f.Intrinsic.Control.If(v.Global.bOrangePushPin_Right)
		gui.Form.picHideBomHead.Picture(v.Global.sOrangePushPin_Right)
	f.Intrinsic.Control.Else
		gui.Form.picHideBomHead.BackColor(v.Color.Orange)
	f.Intrinsic.Control.EndIf
	
	v.Global.sBluePushPin_Right.Declare
	v.Global.bBluePushPin_Right.Declare	
	F.Intrinsic.String.Build("{0}\GCG_4986_BlueR.bmp",v.Caller.GasDir,v.Global.sBluePushPin_Right)
	f.Intrinsic.File.Exists(v.Global.sBluePushPin_Right,v.Global.bBluePushPin_Right)	
	
	'Clear All
	F.Intrinsic.String.Build("{0}\GCG_4986_Delete.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picClearAll.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picClearAll.BackColor(v.Color.Red)
	f.Intrinsic.Control.EndIf		
	
	'Router Master
	F.Intrinsic.String.Build("{0}\GCG_4986_Cal.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picRtrMaster.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picRtrMaster.BackColor(v.Color.Green)
	f.Intrinsic.Control.EndIf	
	
	'Bom Master
	F.Intrinsic.String.Build("{0}\GCG_4986_Bom.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picBomMaster.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picBomMaster.BackColor(v.Color.Blue)
	f.Intrinsic.Control.EndIf		
	
	'Inventory Master
	F.Intrinsic.String.Build("{0}\GCG_4986_Inv.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picInvMaster.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picInvMaster.BackColor(v.Color.Blue)
	f.Intrinsic.Control.EndIf	
	
	'Quote
	F.Intrinsic.String.Build("{0}\GCG_4986_Cal.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picQuickQuote.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picQuickQuote.BackColor(v.Color.Green)
	f.Intrinsic.Control.EndIf	
	
	'Save Quote
	F.Intrinsic.String.Build("{0}\GCG_4986_SaveQ.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picSaveQuote.Picture(v.Local.sIcon)
	f.Intrinsic.Control.EndIf	
	
	'Open Quote
	F.Intrinsic.String.Build("{0}\GCG_4986_OpenQ.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picOpenQuote.Picture(v.Local.sIcon)
	f.Intrinsic.Control.EndIf		
	
	'New Quote
	F.Intrinsic.String.Build("{0}\GCG_4986_NewQ.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picNewQuote.Picture(v.Local.sIcon)
	f.Intrinsic.Control.EndIf
	
	'log Clock
	F.Intrinsic.String.Build("{0}\GCG_4986_LogClock.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picClockLog.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picClockLog.BackColor(v.Color.Green)
	f.Intrinsic.Control.EndIf
	
	'log Clock
	F.Intrinsic.String.Build("{0}\GCG_4986_Star.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picBomBookmarks.Picture(v.Local.sIcon)
		gui.Form.picRtrBookmarks.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picBomBookmarks.BackColor(v.Color.Yellow)
		gui.Form.picRtrBookmarks.BackColor(v.Color.Yellow)
	f.Intrinsic.Control.EndIf
	
	'Expand Bookmarks
	F.Intrinsic.String.Build("{0}\GCG_4986_Expand.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picToggleBookmarks.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picToggleBookmarks.BackColor(v.Color.Green)
	f.Intrinsic.Control.EndIf	
	
	'CutList
	F.Intrinsic.String.Build("{0}\GCG_4986_CutList.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picCutList.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picCutList.BackColor(v.Color.Yellow)
	f.Intrinsic.Control.EndIf	
	
	'Powder Coating
	F.Intrinsic.String.Build("{0}\GCG_4986_PowderCoating.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picPowderCoating.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picPowderCoating.BackColor(v.Color.Yellow)
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.String.Build("{0}\GCG_4986_SubComp.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picCreateSubComponent.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picCreateSubComponent.BackColor(v.Color.Blue)
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.String.Build("{0}\GCG_4986_GV.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picGV.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picGV.BackColor(v.Color.Blue)
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.String.Build("{0}\GCG_4986_Labor.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picLabor.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picLabor.BackColor(v.Color.Blue)
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.String.Build("{0}\GCG_4986_MQD.bmp",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		gui.Form.picMQD.Picture(v.Local.sIcon)
	f.Intrinsic.Control.Else
		gui.Form.picMQD.BackColor(v.Color.Blue)
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.File.Exists(v.Global.sNullSample,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		f.Intrinsic.File.File2String(v.Global.sNullSample,v.Global.sNull)
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Null sample file does not exist. It is fine, but Web Importer log will not be fully read.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.String.Build("{0}\GCG_4986_Backup.png",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		Gui.Form.picBrwBackupRtr.Picture(v.Local.sIcon)
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.String.Build("{0}\GCG_4986_Undo.png",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		Gui.Form.cmdUndo.Picture(v.Local.sIcon)
	f.Intrinsic.Control.EndIf		

	F.Intrinsic.String.Build("{0}\GCG_4986_Redo.png",v.Caller.GasDir,v.Local.sIcon)
	f.Intrinsic.File.Exists(v.Local.sIcon,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		Gui.Form.cmdRedo.Picture(v.Local.sIcon)
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Set_Logo.End

Program.Sub.Load_Dropdown_SalePersons.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.iCount.Declare	
	
	gui.Form.ddlSalesRep.ClearItems
	'load all sales reps for quoting
	f.ODBC.Connection!conx.openlocalrecordsetRW("reps","select ID, NAME from v_salespersons order by Name")
	f.Intrinsic.Control.If(v.ODBC.conx!reps.EOF,=,False)
		f.ODBC.conx!reps.MoveFirst
		f.Intrinsic.Control.DoUntil(v.ODBC.conx!reps.EOF,=,True)
			f.Intrinsic.Math.Add(v.Local.iCount,1,v.Local.iCount)
			F.Intrinsic.String.Build("{0} | {1}",V.ODBC.conx!reps.FieldValTrim!ID,v.ODBC.conx!reps.FieldValTrim!NAME,v.Local.sRet)
			gui.Form.ddlSalesRep.AddItem(v.Local.sRet,v.Local.iCount)
			f.ODBC.conx!reps.MoveNext
		f.Intrinsic.Control.Loop
		f.ODBC.conx!reps.Close
	f.Intrinsic.Control.EndIf
		
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Load_Dropdown_SalePersons.End

Program.Sub.Permissions.Start
'Get back later for iRights turn off controls but later in the program unexpectedly gives control!!!
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bEngineer.Declare
	v.Local.bEstimate.Declare
	
	'based on group membership, setting a global long variable that will determine how the rest of the program functions.
	'1 = estimate, greater than 1 = engineer, 0 is view only
	f.Global.Security.IsInGroup(v.Caller.User,"ESTIMATE",V.Caller.CompanyCode,V.Local.bEstimate)
	f.Intrinsic.Control.IIf(v.Local.bEstimate,=,True,1,0,v.Global.iRights)
	f.Global.Security.IsInGroup(v.Caller.User,"ENGINEER",V.Caller.CompanyCode,V.Local.bEngineer)
	f.Intrinsic.Control.If(v.Local.bEngineer)
		f.Intrinsic.Math.Add(V.Global.iRights,2,V.Global.iRights)
	f.Intrinsic.Control.EndIf	
	'disable certain buttons if the user launching the program is not a member of ESTIMATOR or ENGINEER groups
	f.Intrinsic.Control.If(V.Global.iRights,<,1)
		f.Intrinsic.Control.CallSub(Disable_Buttons_For_Right_0)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Permissions.End

Program.Sub.Disable_Buttons_For_Right_0.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	gui.Form.cmdNewRtr.Enabled(false)
	gui.Form.cmdNewPart.Enabled(false)
	gui.Form.cmdSaveRouterOnly.Enabled(false)
	gui.Form.cmdCommit.Enabled(false)
	gui.Form.cmdRouterCostBuildUp.Enabled(false)
	gui.Form.cmdAddQty.Enabled(False)
	gui.Form.chkRtrComp.Enabled(False)
	gui.Form.cmdSaveBomToGSS.Enabled(False)
	gui.Form.cmdBomCompare.Enabled(false)
	gui.Form.chkBomComp.Enabled(False)
	gui.CellComments.cmdCellCmtSave.Enabled(False)
	gui.Form.picLabor.Enabled(False)
	gui.Form.picCreateSubComponent.Enabled(False)
	gui.Form.picCutList.Enabled(False)
	gui.Form.picMQD.Enabled(False)
	gui.Form.cmdCreateMfgPartsForBomNode.Enabled(False)
	gui.Form.cmdCreateRouterFromBom.Enabled(False)

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Disable_Buttons_For_Right_0.End

Program.Sub.Get_Locations.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sSQL.Declare
	v.Local.iCnt.Declare
	v.Local.sUserLoc.Declare
	v.Local.sLocOption.Declare
		
	gui.[v.Args.sForm].[v.Args.sControl].ClearItems
	f.Intrinsic.String.Build("Select Top 1 Rtrim(Char_Val) from GCG_4986_Options where ID = '10' and Seq = '{0}'",v.Args.sSeq,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sLocOption)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Location Option is not found. Please reset Location at System Support > Administrator > Estimator Options.","Program End")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.CallSub("Unload")
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.SelectCase(v.Local.sLocOption.UCase)
			f.Intrinsic.Control.Case("BLANK")
				gui.[v.Args.sForm].[v.Args.sControl].AddItem("")
				gui.[v.Args.sForm].[v.Args.sControl].Enabled(False)
				
			f.Intrinsic.Control.Case("MULTIPLE")
				f.Intrinsic.Control.If(v.Global.bProhibitBlankLoc.Not)
					gui.[v.Args.sForm].[v.Args.sControl].AddItem("")				
				f.Intrinsic.Control.EndIf
				f.Data.DataTable.CreateFromSQL("Locs","conx","Select Location from V_Locations where Location <> '' Order by Location",True)
				f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.Locs.RowCount--,1)
					gui.[v.Args.sForm].[v.Args.sControl].AddItem(v.DataTable.Locs(v.Local.iCnt).Location!FieldValString)
				f.Intrinsic.Control.Next(v.Local.iCnt)	
				F.Data.DataTable.Close("Locs")
				
			f.Intrinsic.Control.Case("BY USER ASSIGNED LOCATION")
				f.Intrinsic.String.Build("Select Text from V_User_options where ID = '{0}' and Option_ID = '000014' and seq = '0001'",v.Caller.User,v.Local.sSQL)
				f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sUserLoc)
				f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
					gui.[v.Args.sForm].[v.Args.sControl].AddItem(v.Local.sUserLoc.left2)
					gui.[v.Args.sForm].[v.Args.sControl].Text(v.Local.sUserLoc.left2)
					gui.[v.Args.sForm].[v.Args.sControl].Enabled(False)
				f.Intrinsic.Control.EndIf
				
			F.Intrinsic.Control.CaseElse
				'This is specific Location setup
				gui.[v.Args.sForm].[v.Args.sControl].AddItem(v.Local.sLocOption.left2)
				gui.[v.Args.sForm].[v.Args.sControl].Text(v.Local.sLocOption.left2)
				gui.[v.Args.sForm].[v.Args.sControl].Enabled(False)
				
		f.Intrinsic.Control.EndSelect
		
	f.Intrinsic.Control.EndIf

	v.Global.[v.Args.sControl].Set(v.Local.sLocOption.UCase)
	gui.[v.Args.sForm].[v.Args.sControl].ListIndex(0)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Get_Locations.End

Program.Sub.GetOptions.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sSQL.Declare
	v.Local.sHold.Declare
	v.Local.sFlag.Declare
	v.Local.bSelect.Declare
	v.Local.sLocations.Declare	
	v.Local.sMsgSelectLocation.Declare
	v.Local.sLocationSelected.Declare
	V.Local.sSupervsrID.Declare
	
	F.Global.Security.GetUserID("SUPERVSR",v.Caller.CompanyCode,v.Local.sSupervsrID)
	
	'Set option Type Ahead for browser
	f.Intrinsic.UI.SetBrowserHotTypeAhead(True)
	
	'Check if the program has been initialized, meaning there are records in the GCG_4986_Options
	f.ODBC.Connection!conx.executeandreturn("select * from GCG_4986_OPTIONS",v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		'''''''BE CAREFUL TO USE THIS FUNCTION: only 1 instance of InvokeWaitDialog exists at a moment. Otherwise you will have bug in 2019.1. I KNOW WHAT I AM DOING, SO i CLOSE IT!!!!!!!!!!!!!!!!!!!!
		f.Intrinsic.UI.CloseWaitDialog
		'''''''END CAUTION		
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please initialize the program by setting up the options at System Support > Administrator > Estimator Options.","Option Record Not Found")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.CallSub("Unload")
	f.Intrinsic.Control.EndIf
	
	'make sure that customer is using BOM/Router complete flags.
	'by default set both options true because they are required by the program.	
	'use BOM complete flag
	f.Global.General.SaveOption(401103,0,1,"","","",0,v.Ambient.Date)
	'use Router complete Flag
	f.Global.General.SaveOption(400177,0,1,"","","",0,v.Ambient.Date)
	
	'Assuming this option "Add Comment Blocks On Parent Routers for Phantom Parts" is true, core just added in hotfixes for this option, will find it later
	v.Global.bAddCommentBlockPhantom.Set(True)	
	
	'router and bom sequence interval
	f.Global.General.ReadOption("401113",3,0,v.Global.iRSeq)
	f.Global.General.ReadOption("401096",3,0,v.Global.iBSeq)
	
	'hold material sequences when rebuilding bom
	f.Global.General.ReadOption("400143",0,False,v.Global.bHoldSeq)
	
	'default task work center
	f.Global.General.ReadOption("401238",1,"",v.Global.sTask)
	
	'--------------------------------------------------------------LOCATION-------------------------------------
	'Prohibit blank location
	f.Global.General.ReadOption("400363",0,False,"0003",v.Global.bProhibitBlankLoc)		
	'Multilocation locations
	f.Global.General.ReadOption("400363",0,False,"0000",v.Global.bLoc)	
	'Multilocation is activated
	f.Intrinsic.Control.If(v.Global.bLoc)
		f.Global.General.ReadOption("400363",0,False,"0002",v.Global.bLocVal)
		f.Global.General.ReadOption("400363",0,False,"0003",v.Global.bLocNoBlank)
	f.Intrinsic.Control.EndIf
	
	'10-0,1,2,3
	f.Intrinsic.Control.CallSub("Get_Locations","sSeq","0","sForm","NonInv","sControl","ddlNewPartLoc")
	f.Intrinsic.Control.CallSub("Get_Locations","sSeq","0","sForm","MFGPart","sControl","ddlMfgLoc")
	f.Intrinsic.Control.CallSub("Get_Locations","sSeq","0","sForm","Powder","sControl","ddlPowderLoc")
	f.Intrinsic.Control.CallSub("Get_Locations","sSeq","1","sForm","Form","sControl","ddlMatLoc")
	f.Intrinsic.Control.CallSub("Get_Locations","sSeq","2","sForm","Form","sControl","ddlQuoteLoc")	
	'Default Location
	f.ODBC.Connection!conx.ExecuteAndReturn("Select Top 1 If(UCASE(Rtrim(Char_Val)) = 'BLANK','',UCASE(Rtrim(Char_Val))) from GCG_4986_Options where ID = '10' and Seq = '3'",v.Global.sDefaultLoc)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please set Default Location at System Support > Admin. > Estimator Options.","Default Location Option Not Found")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.CallSub("Unload")
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.If(v.Global.sDefaultLoc.UCase,=,"BY USER ASSIGNED LOCATION")	
		f.Intrinsic.String.Build("Select Text from V_User_options where ID = '{0}' and Option_ID = '000014' and seq = '0001'",v.Caller.User,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Global.sDefaultLoc)
	f.Intrinsic.Control.EndIf	
	'-----------------------------------------------------------------------------------------------------------
	
	'check GCG_4986_OPTIONS for part numbering method
	'and op_header for router run time calculation methods
	'part numbering preferences 1.Manual 2.AutoNumber 4. Custom Part Generater  8. Open Part Number Generator core screen
	f.ODBC.Connection!conx.executeandreturn("select long_val from GCG_4986_OPTIONS where ID = '1'",v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		'''''''BE CAREFUL TO USE THIS FUNCTION: only 1 instance of InvokeWaitDialog exists at a moment. Otherwise you will have bug in 2019.1. I KNOW WHAT I AM DOING, SO i CLOSE IT!!!!!!!!!!!!!!!!!!!!
		f.Intrinsic.UI.CloseWaitDialog
		'''''''END CAUTION			
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please set Part Numbering method at System Support > Admin. > Estimator Options.","Part Numbering Option Not Found")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.CallSub("Unload")
	f.Intrinsic.Control.EndIf
	v.Global.iPart.Set(v.Local.sRet)	
	
	'part saving preferences 1.do not save, 2. immediate, 4.batch, 8.ask
	f.ODBC.Connection!conx.executeandreturn("select long_val from GCG_4986_OPTIONS where ID = '5'",v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		'''''''BE CAREFUL TO USE THIS FUNCTION: only 1 instance of InvokeWaitDialog exists at a moment. Otherwise you will have bug in 2019.1. I KNOW WHAT I AM DOING, SO i CLOSE IT!!!!!!!!!!!!!!!!!!!!
		f.Intrinsic.UI.CloseWaitDialog
		'''''''END CAUTION			
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please set Create Part method at System Support > Admin. > Estimator Options.","Create Part Option Not Found")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.CallSub("Unload")
	f.Intrinsic.Control.EndIf	
	v.Global.iNewPart.Set(v.Local.sRet)
	f.Intrinsic.Control.SelectCase(v.Global.iNewPart)
		f.Intrinsic.Control.Case(4)
			'This is not used anywhere, will delete soon???
			F.Data.DataTable.Create("EXTRATEXT",True)
			f.Data.DataTable.AddColumn("EXTRATEXT","PART","STRING","",20)
			F.Data.DataTable.AddColumn("EXTRATEXT","TEXT","STRING","",255)
		f.Intrinsic.Control.Case(1)
			Gui.NonInv.lblExtraTxt.Enabled(False)
			Gui.NonInv.lblExtraTxt.Visible(False)
	f.Intrinsic.Control.EndSelect
	
	'Check Long Part
	' System Support > Administration > Company Options (Advanced) > Inventory
	'At the bottom, either Use Long Part (Large Inventory) or Use Long Part (Small Inventory)
	F.Global.General.ReadOption("400861",0,False,"0000",V.Global.bLongPart)
	F.Intrinsic.Control.If(V.Global.bLongPart)
		v.Global.bLargeLongPart.Set(True)
	f.Intrinsic.Control.Else
		F.Global.General.ReadOption("400861",0,False,"0004",V.Global.bLongPart)
		v.Global.bSmallLongPart.Set(True)
	F.Intrinsic.Control.EndIf
	
	'Use CutList (for Angola Wire as originator)
	F.Global.General.ReadOption("402471",0,False,"0000",V.Global.bUseCutList)
	'Auto Display CutList
	f.Global.Registry.ReadValue(V.Local.sSupervsrID,V.Caller.CompanyCode,"USECUTLIST",4986,8001,0,"False",V.Local.sHold)
	f.Intrinsic.Control.If(v.Local.sHold,=,"True")
		v.Global.bAutoDisplayCutlist.Set(True)
	f.Intrinsic.Control.EndIf
	
	'Use Powder Coating
	f.Global.Registry.ReadValue(V.Local.sSupervsrID,V.Caller.CompanyCode,"USEPOWDERCOATING",4986,8002,0,"False",V.Local.sHold)
	F.Intrinsic.Control.If(V.Local.sHold,=,"True")
		gui.Form.picPowderCoating.Visible(True)
	F.Intrinsic.Control.EndIf
	
	'Use Wire Labor Runtime
	f.Global.Registry.ReadValue(V.Local.sSupervsrID,V.Caller.CompanyCode,"USEWIRELABORRUNTIME",4986,8003,0,"False",V.Local.sHold)
	F.Intrinsic.Control.If(V.Local.sHold,=,"True")
		V.Global.bUseWireLaborRuntime.Set(True)
	F.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(v.Global.bUseCutList,=,True,and,v.Global.bAutoDisplayCutlist,=,True)
		v.Global.bBindCutList.Set(True)
		f.Intrinsic.Control.If(v.Global.iRights,>,0)
			gui.Form.picCutList.Visible(True)				
		f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.Else
		gui.Form.picCutList.Visible(False)			
	f.Intrinsic.Control.EndIf
	
	v.Global.bPhantomComments.Set(True)
	
	'Copy Sort Code
	f.Global.Registry.ReadValue(V.Local.sSupervsrID,V.Caller.CompanyCode,"DONOTCOPYSORTCODE",4986,8004,0,"False",V.Local.sHold)
	F.Intrinsic.Control.If(V.Local.sHold,=,"True")
		V.Global.bDoNotCopySortCode.Set(True)
	F.Intrinsic.Control.EndIf		
	
	f.Data.Dictionary.Create("dOnTop")
	f.Data.Dictionary.AddItem("dOnTop","BOOKM",1033)
	f.Data.Dictionary.AddItem("dOnTop","TRVSTYLE",1034)
	f.Data.Dictionary.SetDefaultReturn("dOnTop",9999)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GetOptions.End

Program.Sub.Enable_Disable_Router_Bom_PartHead.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bEnable.Declare
		
	f.Intrinsic.Control.If(v.Args.ActiveFlag,=,"Enable")
		v.Local.bEnable.Set(True)
	f.Intrinsic.Control.EndIf
	gui.Form.txtFocusParent.Enabled(v.Local.bEnable)
	gui.Form.txtFocusRev.Enabled(v.Local.bEnable)
	gui.Form.txtParent.Enabled(v.Local.bEnable)
	gui.Form.txtParentRev.Enabled(v.Local.bEnable)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Enable_Disable_Router_Bom_PartHead.End

Program.Sub.Enable_Disable_Router_PartHead.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bEnable.Declare
		
	f.Intrinsic.Control.If(v.Args.ActiveFlag,=,"Enable")
		v.Local.bEnable.Set(True)
	f.Intrinsic.Control.EndIf
	gui.Form.txtFocusParent.Enabled(v.Local.bEnable)
	gui.Form.txtFocusRev.Enabled(v.Local.bEnable)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Enable_Disable_Router_PartHead.End

Program.Sub.Enable_Disable_Bom_PartHead.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bEnable.Declare
		
	f.Intrinsic.Control.If(v.Args.ActiveFlag,=,"Enable")
		v.Local.bEnable.Set(True)
	f.Intrinsic.Control.EndIf
	gui.Form.txtParent.Enabled(v.Local.bEnable)
	gui.Form.txtParentRev.Enabled(v.Local.bEnable)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Enable_Disable_Bom_PartHead.End

Program.Sub.chkRtrHighLightSelectedRow_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sBoolean.Declare
	
	f.Intrinsic.Control.IIF(v.Screen.Form!chkRtrHighLightSelectedRow.Value,=,1,"True","False",v.Local.sBoolean)		
	GUI.Form.GGC_Bom.SetGridViewProperty("GV_CHILD","OptionsSelectionEnableAppearanceFocusedRow",v.Local.sBoolean)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.chkRtrHighLightSelectedRow_Click.End

'End Essential 2

'Simple 1: Simple Subs
Program.Sub.optRouterHdr_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'this brings the main editing view in to focus with the router header
	gui.Form.GGC_Bom.Visible(True)	
	gui.Form.frameQuoteH.Visible(False)	
	
	f.Intrinsic.Control.If(v.Global.bHideRouterHeader)
		gui.Form.frameRtrHead.Visible(False)
	f.Intrinsic.Control.Else
		gui.Form.frameRtrHead.Visible(True)
	f.Intrinsic.Control.EndIf
	
	gui.Form.GGC_Quote.Visible(False)
	gui.Form.optRouterHdr.Value(1)
		
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.optRouterHdr_Click.End

Program.Sub.optQuoteHdr_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	'this brings the quote lines view in to focus with the quote header
	gui.Form.GGC_Bom.Visible(False)
	gui.Form.frameRtrHead.Visible(False)

	f.Intrinsic.Control.If(v.Global.bHideRouterHeader)
		gui.Form.frameQuoteH.Visible(False)	
	f.Intrinsic.Control.Else
		gui.Form.frameQuoteH.Visible(True)	
	f.Intrinsic.Control.EndIf

	gui.Form.GGC_Quote.Visible(True)	
	
	gui.Form.optQuoteHdr.Value(1)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.optQuoteHdr_Click.End

Program.Sub.optMat_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	f.Intrinsic.Control.CallSub(Make_Visible_Left_Grid,"MakeVisible","GGC_Mat","RadioButton","optMat")

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.optMat_Click.End

Program.Sub.optWC_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	f.Intrinsic.Control.CallSub(Make_Visible_Left_Grid,"MakeVisible","GGC_WC","RadioButton","optWC")

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.optWC_Click.End

Program.Sub.optOPCodes_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)	
	f.Intrinsic.Control.CallSub(Make_Visible_Left_Grid,"MakeVisible","GGC_OPCODE","RadioButton","optOPCodes")

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.optOPCodes_Click.End

Program.Sub.optOuts_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	f.Intrinsic.Control.CallSub(Make_Visible_Left_Grid,"MakeVisible","GGC_Outs","RadioButton","optOuts")

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.optOuts_Click.End

Program.Sub.Make_Visible_Left_Grid.Start
'Sub called by optOPCodes_Click/optMat_Click/optWC_Click/optOuts_Click
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bEx1.Declare
	v.Local.bEx2.Declare
	'Bring the left grid to the front based on what is passed	
	f.Intrinsic.Variable.ArgExists("MakeVisible",v.Local.bEx1)
	f.Intrinsic.Variable.ArgExists("RadioButton",v.Local.bEx2)
	f.Intrinsic.Control.If(v.Local.bEx1,=,True,and,v.Local.bEx2,=,True)
		gui.Form.GGC_Mat.visible(False)
		gui.Form.GGC_OPCODE.visible(False)
		gui.Form.GGC_Outs.visible(False)
		gui.Form.GGC_WC.visible(False)	
		gui.Form.[v.Args.MakeVisible].Visible(True)
		gui.Form.[v.Args.RadioButton].Value(1)		
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Make_Visible_Left_Grid.End

Program.Sub.txtUM_LostFocus_MainForm.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sUM.Declare
	v.Local.sRet.Declare
	v.Local.sSQL.Declare	
	
	v.Local.sUM.Set(V.Screen.Form!txtUM.TEXT.Trim)
	v.Local.sUM.Set(v.Local.sUM.UCase)
	gui.Form.txtUM.Text(v.local.sUM.left2)
	
	'Validate UM
	f.Intrinsic.String.Build("select Top 1 CODE from V_UM_CODES where rtrim(CODE) = '{0}'",v.Local.sUM.PSQLFriendly,V.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(V.Local.sSql,V.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"",or,v.Local.sRet.UCase,<>,v.Local.sUM)
		f.Intrinsic.UI.Browser("UNIT OF MEASURE","conx","SELECT CODE, DESCR from V_UM_CODES","CODE*!*DESCRIPTION","60*!*300",V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			gui.Form.txtUM.text(V.Local.sRet(0).Trim)
		f.Intrinsic.Control.Else
			gui.Form.txtUM.text("")
			gui.Form.txtUM.SetFocus
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtUM_LostFocus_MainForm.End

Program.Sub.txtBomUM_LostFocus.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sUM.Declare
	v.Local.sRet.Declare
	v.Local.sSQL.Declare	
	
	v.Local.sUM.Set(V.Screen.Form!txtBomUM.TEXT.Trim)
	v.Local.sUM.Set(v.Local.sUM.UCase)
	gui.Form.txtBomUM.Text(v.local.sUM.left2)
	
	'Validate UM
	f.Intrinsic.String.Build("select Top 1 CODE from V_UM_CODES where rtrim(CODE) = '{0}'",v.Local.sUM.PSQLFriendly,V.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(V.Local.sSql,V.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"",or,v.Local.sRet.UCase,<>,v.Local.sUM)
		f.Intrinsic.UI.Browser("UNIT OF MEASURE","conx","SELECT CODE, DESCR from V_UM_CODES","CODE*!*DESCRIPTION","60*!*300",V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			gui.Form.txtBomUM.text(V.Local.sRet(0).Trim)
		f.Intrinsic.Control.Else
			gui.Form.txtBomUM.text("")
			gui.Form.txtBomUM.SetFocus
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtBomUM_LostFocus.End

Program.Sub.txtPL_LostFocus_MainForm.Start
f.Intrinsic.Control.Try
F.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	V.Local.sPL.Declare	
	
	v.Local.sPL.Set(v.Screen.Form!txtPL.Text.Trim)
	v.Local.sPL.Set(v.Local.sPL.UCase)
	gui.Form.txtPL.Text(v.Local.sPL)	
	
	'build a statement to validate the product line
	f.Intrinsic.Control.If(v.Caller.GSSVersion,<,"2019.1")
		F.Intrinsic.String.Build("SELECT Top 1 PRODUCT_LINE FROM V_PRODUCT_LINE WHERE rtrim(PRODUCT_LINE) = '{0}'",v.Local.sPL.PSQLFriendly,V.Local.sSql)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("SELECT Top 1 PROD_LINE FROM V_PL_MASTER WHERE rtrim(PROD_LINE) = '{0}'",v.Local.sPL.PSQLFriendly,V.Local.sSql)
	f.Intrinsic.Control.EndIf

	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
	v.Local.sRet.Set(v.Local.sRet.Trim)
	f.Intrinsic.Control.If(v.Local.sRet,=,"",or,v.Local.sRet.UCase,<>,v.Local.sPL)
		f.Intrinsic.UI.CommonBrowser(130,"",v.Local.sRet)
		f.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			gui.Form.txtPL.Text(v.Local.sRet(0).Trim)
		F.Intrinsic.Control.Else
			gui.Form.txtPL.Text("")
			gui.Form.txtPL.SetFocus
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtPL_LostFocus_MainForm.End

Program.Sub.chkBomComp_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	
	'check level of access
	f.Intrinsic.Control.If(v.Global.iRights,>,1)
		'managing the bom_complete flag for the BOM datatable
		f.Intrinsic.Control.If(v.DataTable.BOM.RowCount,>,0)
			F.Intrinsic.Control.If(V.Screen.Form!chkBomComp.checkedasboolean)
				f.Data.DataTable.SetValue("BOM",0,"COMPLETE","Y")
			f.Intrinsic.Control.Else
				f.Data.DataTable.SetValue("BOM",0,"COMPLETE","")
			f.Intrinsic.Control.EndIf			
		f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.chkBomComp_Click.End

Program.Sub.chkRtrComp_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)	
	'check level of access
	f.Intrinsic.Control.If(v.Global.iRights,>,1)
		'managing the ROUTER complete flag for the CHILD datatable
		f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,0)
			F.Intrinsic.Control.If(V.Screen.Form!chkRtrComp.Checkedasboolean)
				f.Data.DataTable.SetValue("CHILD",0,"COMPLETE","Y")
			f.Intrinsic.Control.Else
				f.Data.DataTable.SetValue("CHILD",0,"COMPLETE","")
			f.Intrinsic.Control.EndIf			
		f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.chkRtrComp_Click.End

'End Simple 1

'Populate Bom/Router Browse Router/Bom GetBom GetRouter Populate treeview/router grid
Program.Sub.cmdBrwRouter_Click.Start
'This sub will pull existing router only. If you want to create new, use the New Router/Bom button
F.Intrinsic.Control.Try	
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sPart.Declare
	v.Local.sSQL.Declare
	v.Local.sHold.Declare	
	
	f.Intrinsic.Control.If(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bLoadingPleaseWait.Set(True)
	gui.Form.lblResult.Visible(True)
	
	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveBrowseRouter)
		f.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveBrowseRouter.Set(True)	
	
	f.Intrinsic.Control.CallSub(Check_Work_Saved)
	f.Intrinsic.Control.If(v.Args.bStop)
		v.Global.bActiveBrowseRouter.Set(False)
		v.Global.bLoadingPleaseWait.Set(False)
		gui.Form.lblResult.Visible(False)
		f.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	'active
	'Open custom browser Router	
	F.Intrinsic.Control.If(V.Global.bLongPart)
		f.Intrinsic.UI.Browser("Select Router","conx","select Left(h.Router,17) as Router,Substring(h.Router,18,3) as Rev,rtrim(h.DESCRIPTION_ROUTER) as Description,rtrim(d.Desc_Router_2) as Description_2,rtrim(d.Desc_Router_3) as Description_3,h.UM_INVENTORY as UM_Inventory ,h.PROD_LINE as Product_Line,s.Inactive,s.Complete, x.DISPLAY_PART,x.DISPLAY_REV  from v_router_header h left join v_router_desc d on h.Router = d.Router and h.Router_Suffix = d.Router_Suffix left join v_ROUTER_SUPP_HDR s on h.Router = s.Rtr_Num and h.Router_Suffix = s.Suffix  left join Inv_lxr x on h.Router = x.GSS_Part order by h.Router","Router*!*Rev*!*Description*!*Description 2*!*Description 3*!*UM*!*PL*!*Inactive*!*Compl.*!*Long Part*!*Rev Long Part","500*!*200*!*700*!*200*!*200*!*200*!*200*!*300*!*300*!*500*!*200","15000","10000",v.Local.sRet)
	F.Intrinsic.Control.Else
		f.Intrinsic.UI.Browser("Select Router","conx","select Left(h.Router,17) as Router,Substring(h.Router,18,3) as Rev,rtrim(h.DESCRIPTION_ROUTER) as Description,rtrim(d.Desc_Router_2) as Description_2,rtrim(d.Desc_Router_3) as Description_3,h.UM_INVENTORY as UM_Inventory ,h.PROD_LINE as Product_Line,s.Inactive,s.Complete  from v_router_header h left join v_router_desc d on h.Router = d.Router and h.Router_Suffix = d.Router_Suffix left join v_ROUTER_SUPP_HDR s on h.Router = s.Rtr_Num and h.Router_Suffix = s.Suffix order by h.Router","Router*!*Rev*!*Description*!*Description 2*!*Description 3*!*UM*!*PL*!*Inactive*!*Compl.","500*!*200*!*700*!*700*!*700*!*200*!*200*!*300*!*400","15000","10000",v.Local.sRet)
	F.Intrinsic.Control.EndIf
		
	f.Intrinsic.Control.If(v.Local.sRet.IsCancel)
		v.Global.bActiveBrowseRouter.Set(False)
		v.Global.bLoadingPleaseWait.Set(False)
		gui.Form.lblResult.Visible(False)
		f.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	'Give user visibility of Active/Inactive, but later check and tell
	F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)	
	f.Intrinsic.Control.If(v.Local.sRet(7).Trim,=,"No")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Inactive Router.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		v.Global.bActiveBrowseRouter.Set(False)
		v.Global.bLoadingPleaseWait.Set(False)
		gui.Form.lblResult.Visible(False)
		f.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.Control.ExitSub				
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(v.Screen.Form!chkRouterOnly.Value,=,0)
		f.Intrinsic.Control.CallSub(Clear_2_Sides)
		f.Intrinsic.Control.CallSub(Enable_Disable_Router_Bom_PartHead,"ActiveFlag","Disable")
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Clear_Router_Side)
		f.Intrinsic.Control.CallSub(Enable_Disable_Router_PartHead,"ActiveFlag","Disable")
	f.Intrinsic.Control.EndIf	
	
	'Set texboxes
	
	gui.Form.txtFocusParent.Text(V.Local.sRet(0))
	gui.Form.txtFocusRev.Text(v.Local.sRet(1))
	gui.Form.txtFocusDescr.Text(V.Local.sRet(2))
	gui.Form.txtDescr2.Text(v.Local.sRet(3))
	gui.Form.txtDescr3.Text(v.Local.sRet(4))
	gui.Form.txtUM.Text(V.Local.sRet(5))	
	gui.Form.txtPL.Text(v.Local.sRet(6))
	f.Intrinsic.Control.If(v.Local.sRet(7),=,"True")
		gui.Form.chkRtrComp.Value(1)
	f.Intrinsic.Control.Else
		gui.Form.chkRtrComp.Value(0)
	f.Intrinsic.Control.EndIf
	gui.Form.txtBomQty.Text(1)	
	
	
	f.Intrinsic.String.GSSPartString(V.Local.sRet(0),V.Local.sRet(1),v.Local.sPart)
	f.Intrinsic.String.Build("select Left(h.Router,17) as Router,Substring(h.Router,18,3) as Rev,rtrim(h.DESCRIPTION_ROUTER) as Description,rtrim(d.Desc_Router_2) as Description_2,rtrim(d.Desc_Router_3) as Description_3,h.UM_INVENTORY as UM_Inventory ,h.PROD_LINE as Product_Line,Case When s.Inactive = '1' then 'No' Else 'Yes' End as Active,s.Complete,left(Similar,17) as Similar17,substring(Similar,18,3) as SimilarRev,Commission,Scrap * 100 as Scrap,No_Reprice,Part_Customer,Customer  from v_router_header h left join v_router_desc d on h.Router = d.Router and h.Router_Suffix = d.Router_Suffix left join v_ROUTER_SUPP_HDR s on h.Router = s.Rtr_Num and h.Router_Suffix = s.Suffix  where h.ROUTER = '{0}' ",v.Local.sPart.PSQLFriendly,v.Local.sSql)	
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)	
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		
		f.Intrinsic.Control.If(v.Local.sRet(7).Trim,=,"No")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Inactive Router.","Attention")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			gui.Form.txtFocusParent.SetFocus
			v.Global.bActiveBrowseRouter.Set(False)
			v.Global.bLoadingPleaseWait.Set(False)
			gui.Form.lblResult.Visible(False)
			f.Intrinsic.Control.UnBlockEvents
			f.Intrinsic.Control.ExitSub				
		f.Intrinsic.Control.EndIf	
		
		'Extra field for Router header
		f.Intrinsic.Control.If(v.Local.sRet(8),=,"True")
			gui.Form.chkRtrComp.Value(1)
		f.Intrinsic.Control.Else
			gui.Form.chkRtrComp.Value(0)
		f.Intrinsic.Control.EndIf	
		gui.Form.txtSimilar.Text(v.Local.sRet(9))
		gui.Form.txtSimilarRev.Text(v.Local.sRet(10))
		f.Intrinsic.String.Format(v.Local.sRet(11),"0.00",v.Local.sHold)
		gui.Form.txtComm.Text(v.Local.sHold)
		f.Intrinsic.String.Format(v.Local.sRet(12),"0.00",v.Local.sHold)
		gui.Form.txtScrap.Text(v.Local.sHold)
		f.Intrinsic.Control.If(v.Local.sRet(13).Trim,=,"Y")
			gui.Form.chkOmitFromRTRReprice.Value(1)
		f.Intrinsic.Control.Else
			gui.Form.chkOmitFromRTRReprice.Value(0)
		f.Intrinsic.Control.EndIf	
		gui.Form.txtPartID.Text(v.Local.sRet(14).Trim)
		gui.Form.txtRtrCust.Text(v.Local.sRet(15).Trim)
	
		'Get Extra description
		F.Intrinsic.String.Build("Select Text from Inv_Extra_Text where Part = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		
			gui.Form.txtRTRExtraDescr.Text(v.Local.sRet)
		f.Intrinsic.Control.EndIf		
	
	f.Intrinsic.Control.EndIf	

	f.Intrinsic.Control.If(v.Screen.Form!chkRouterOnly.Value,=,1)
		f.Intrinsic.Control.CallSub(GetRouter_RouterSideOnlyChecked,"Part17",V.Screen.Form!txtFocusParent.Text,"Rev",v.Screen.Form!txtFocusRev.Text)	
	f.Intrinsic.Control.Else
	
		f.Intrinsic.Control.CallSub(GetRouter_If_HasBom_GetBom,"Part17",V.Screen.Form!txtFocusParent.Text,"Rev",v.Screen.Form!txtFocusRev.Text)		
	f.Intrinsic.Control.EndIf
	'Copy values from Ext2 to Extended
	f.Data.DataTable.SetValueFormat("Child",-1,"Ext2","Extended","0.00000000")	
	
	f.Intrinsic.Control.CallSub(Check_Bom_Doc)
	
	v.Global.bRouterChanged.Set(False)
	v.Global.bActiveBrowseRouter.Set(False)
	v.Global.bLoadingPleaseWait.Set(False)
	gui.Form.lblResult.Visible(False)
	
	f.Intrinsic.Control.UnBlockEvents
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdBrwRouter_Click.End

Program.Sub.txtFocusRev_LostFocus.Start
'This sub will pull existing router only. If you want to create new, use the New Router/Bom button
F.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sRet.Declare	
	v.Local.sPart.Declare
	V.Local.sRev.Declare
	v.Local.sPart17.Declare
	v.Local.sMsg.Declare
	v.Local.iRet.Declare
	v.Local.bRouter.Declare
	v.Local.sHold.Declare
	v.Local.bFROMLOADROUTER.Declare
	v.Local.sMoreBomHeader.Declare
	v.Local.fHold.Declare
	
	'Prevent double cycle
	f.Intrinsic.Control.IF(v.Global.bLoadingPleaseWait)
		F.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	v.Global.bLoadingPleaseWait.Set(True)
	gui.Form.lblResult.Visible(True)
	
	f.Intrinsic.Variable.ArgExists("FROMLOADROUTER",V.Local.bFROMLOADROUTER)
	
	'Make Ucase Rev
	v.Local.sPart17.Set(v.Screen.Form!txtFocusParent.Text.Trim)
	v.Local.sPart17.Set(v.Local.sPart17.UCase)
	v.Local.sRev.Set(v.Screen.Form!txtFocusRev.Text.Trim)
	v.Local.sRev.Set(v.Local.sRev.UCase)
	
	gui.Form.txtFocusRev.Text(v.Local.sRev.UCase)
	
	
	'Build Part number
	f.Intrinsic.String.GSSPartString(v.Local.sPart17,v.Local.sRev,v.Local.sPart)	
	'Get the Router
	f.Intrinsic.String.Build("select Left(h.Router,17) as Router,Substring(h.Router,18,3) as Rev,rtrim(h.DESCRIPTION_ROUTER) as Description,rtrim(d.Desc_Router_2) as Description_2,rtrim(d.Desc_Router_3) as Description_3,h.UM_INVENTORY as UM_Inventory ,h.PROD_LINE as Product_Line,Case When s.Inactive = '1' then 'No' Else 'Yes' End as Active,s.Complete,left(Similar,17) as Similar17,substring(Similar,18,3) as SimilarRev,Commission,Scrap * 100 as Scrap,No_Reprice,Part_Customer,Customer  from v_router_header h left join v_router_desc d on h.Router = d.Router and h.Router_Suffix = d.Router_Suffix left join v_ROUTER_SUPP_HDR s on h.Router = s.Rtr_Num and h.Router_Suffix = s.Suffix  where h.ROUTER = '{0}' ",v.Local.sPart.PSQLFriendly,v.Local.sSql)	
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)	

	'This part does not has a Router
	F.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		'There is no Router found, check if the part is a Bom
		f.Intrinsic.String.Build("SELECT Top 1 Left(A.PARENT,17) as Part,Substring(A.PARENT,18,3) as Rev, B.Description,A.UM_Inventory as UM,a.Bom_Complete as Complete,Case When A.Inactive = '1' then 'No' Else 'Yes' End as Active,UM_Inventory,Cost,Source,Memo_1,Memo_2 FROM  V_BOM_ENG B LEFT JOIN V_BOM_MSTR A ON B.PART = A.PARENT WHERE B.Location = '' and A.PARENT = '{0}' AND B.IS_PARENT = 'Y' AND A.SEQUENCE_BOM = '0000'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
		f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
		F.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
			'This part does not has a Bom and neither a Router
			F.Intrinsic.String.Build("{0} is not a Router nor Bom. Do you want to create new",v.Local.sPart,v.Local.sPart)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox(v.Local.sPart,"Invalid Entry",4,v.Local.iRet)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxYes)							
				f.Intrinsic.Control.CallSub(Clear_2_Sides,"bDeleteChild",True)
				f.Intrinsic.Control.If(v.Global.bBindCutList)
					f.Intrinsic.Control.CallSub(Bind_Cutlist)
				f.Intrinsic.Control.EndIf
				gui.NonInv..Caption("New Router/Bom")
				'pass forward the type (NEW means a new router or bom, INSERT means we are inserting a new part in to the visible router)
				gui.NonInv.cmdBrowseInv.Visible(True)				
				f.Intrinsic.Control.CallSub(newPartCheck,"TYPE","NEW")
				gui.NonInv.txtPart.Text(v.Local.sPart17)
				gui.NonInv.txtRev.Text(v.Local.sRev)
				v.Global.bRouterChanged.Set(False)				
			f.Intrinsic.Control.Else	
				gui.Form.txtFocusParent.SetFocus			
			f.Intrinsic.Control.EndIf
			
			v.Global.bLoadingPleaseWait.Set(False)
			gui.Form.lblResult.Visible(False)
			F.Intrinsic.Control.UnBlockEvents
			f.Intrinsic.Control.ExitSub	
			
		'This part is not a Router but a Bom
		f.Intrinsic.Control.Else
			F.Intrinsic.Control.If(V.Local.bFROMLOADROUTER)
				'This is called from Load Router node click
				f.Intrinsic.Control.CallSub(Clear_Router_Side)
				f.Intrinsic.Control.CallSub(Enable_Disable_Router_PartHead,"ActiveFlag","Disable")
				
				'Set FocusParent...
				f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)		
				gui.Form.txtFocusParent.Text(V.Local.sRet(0))
				gui.Form.txtFocusRev.Text(v.Local.sRet(1))
				gui.Form.txtFocusDescr.Text(V.Local.sRet(2))
				gui.Form.txtUM.Text(V.Local.sRet(3))
				gui.Form.txtBomQty.Text(1)					
				
				f.Intrinsic.Control.CallSub(PopulateRouterGrid_When_BomOnly,"sPart17",v.Local.sRet(0),"sRev",v.Local.sRet(1))
				f.Data.DataTable.SetValueFormat("Child",-1,"Ext2","Extended","0.00000000")
				f.Intrinsic.String.Build("This part {0} is not a Router, but a Bom. What you see in the Router grid are Bom sequences",v.Local.sPart.Trim,v.Local.sMsg)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Router not Found - Bom Found")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)				
				
			F.Intrinsic.Control.Else
			
				'This is "really" loaded from txtFocusRev Lost focus
				f.Intrinsic.Control.If(v.Screen.Form!chkRouterOnly.Value,=,0)
					gui.Form.txtParent.Text(v.Local.sPart17)
					gui.Form.txtParentRev.Text(v.Local.sRev)
					gui.Form.txtBomQty.Text(1)	
						
					v.Global.bLoadingPleaseWait.Set(False)
					f.Intrinsic.Control.CallSub(cmdRefreshBomTreeLoad_Click)	
					f.Intrinsic.Control.CallSub(Enable_Disable_Router_PartHead,"ActiveFlag","Disable")
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.CallSub(Clear_Router_Side)
					f.Intrinsic.Control.CallSub(Enable_Disable_Router_PartHead,"ActiveFlag","Disable")
					'Set FocusParent...
					f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)	
					gui.Form.txtFocusParent.Text(V.Local.sRet(0))
					gui.Form.txtFocusRev.Text(v.Local.sRet(1))
					gui.Form.txtFocusDescr.Text(V.Local.sRet(2))
					gui.Form.txtUM.Text(V.Local.sRet(3))	
					gui.Form.txtBomQty.Text(1)			
						
					f.Intrinsic.Control.CallSub(PopulateRouterGrid_When_BomOnly,"sPart17",v.Local.sRet(0),"sRev",v.Local.sRet(1))	
					f.Data.DataTable.SetValueFormat("Child",-1,"Ext2","Extended","0.00000000")
					f.Intrinsic.String.Build("This part {0} is not a Router, but a Bom. What you see in the Router grid are Bom sequences",v.Local.sPart.Trim,v.Local.sMsg)
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
					f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Router not Found - Bom Found")
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)						
					
				f.Intrinsic.Control.EndIf								
				
			F.Intrinsic.Control.EndIf
			v.Global.bLoadingPleaseWait.Set(False)
			gui.Form.lblResult.Visible(False)
			F.Intrinsic.Control.UnBlockEvents
			f.Intrinsic.Control.ExitSub
			
		F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.EndIf
	
	''''FROM NOW ON, THIS PART SURELY HAS A ROUTER. It may have a Bom or not.
	
	'Check Inactive
	f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet(7).Trim,=,"No")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Inactive Router.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.txtFocusParent.SetFocus
		v.Global.bLoadingPleaseWait.Set(False)
		gui.Form.lblResult.Visible(False)
		F.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.Control.ExitSub				
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(v.Screen.Form!chkRouterOnly.Value,=,0)
		f.Intrinsic.Control.CallSub(Clear_2_Sides)
		f.Intrinsic.Control.CallSub(Enable_Disable_Router_Bom_PartHead,"ActiveFlag","Disable")
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Clear_Router_Side)
		f.Intrinsic.Control.CallSub(Enable_Disable_Router_PartHead,"ActiveFlag","Disable")
	f.Intrinsic.Control.EndIf
		
	'Set texboxes
	gui.Form.txtFocusParent.Text(V.Local.sRet(0))
	gui.Form.txtFocusRev.Text(v.Local.sRet(1))
	gui.Form.txtFocusDescr.Text(V.Local.sRet(2))
	gui.Form.txtDescr2.Text(v.Local.sRet(3))
	gui.Form.txtDescr3.Text(v.Local.sRet(4))
	gui.Form.txtUM.Text(V.Local.sRet(5))	
	gui.Form.txtPL.Text(v.Local.sRet(6))
	gui.Form.txtBomQty.Text(1)
	
	'Extra field for Router header
	f.Intrinsic.Control.If(v.Local.sRet(8),=,"True")
		gui.Form.chkRtrComp.Value(1)
	f.Intrinsic.Control.Else
		gui.Form.chkRtrComp.Value(0)
	f.Intrinsic.Control.EndIf	
	gui.Form.txtSimilar.Text(v.Local.sRet(9))
	gui.Form.txtSimilarRev.Text(v.Local.sRet(10))
	f.Intrinsic.String.Format(v.Local.sRet(11),"0.00",v.Local.sHold)
	gui.Form.txtComm.Text(v.Local.sHold)
	f.Intrinsic.String.Format(v.Local.sRet(12),"0.00",v.Local.sHold)
	gui.Form.txtScrap.Text(v.Local.sHold)
	f.Intrinsic.Control.If(v.Local.sRet(13).Trim,=,"Y")
		gui.Form.chkOmitFromRTRReprice.Value(1)
	f.Intrinsic.Control.Else
		gui.Form.chkOmitFromRTRReprice.Value(0)
	f.Intrinsic.Control.EndIf	
	gui.Form.txtPartID.Text(v.Local.sRet(14).Trim)
	gui.Form.txtRtrCust.Text(v.Local.sRet(15).Trim)
	
	F.Intrinsic.String.Build("Select Text from Inv_Extra_Text where Part = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		gui.Form.txtRTRExtraDescr.Text(v.Local.sRet)
	f.Intrinsic.Control.EndIf	
		
	f.Intrinsic.Control.If(v.Screen.Form!chkRouterOnly.Value,=,1)
		f.Intrinsic.Control.CallSub(GetRouter_RouterSideOnlyChecked,"Part17",v.Local.sPart17,"Rev",v.Local.sRev)
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(GetRouter_If_HasBom_GetBom,"Part17",v.Local.sPart17,"Rev",v.Local.sRev)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.CallSub(Check_Bom_Doc)
	
	'Copy values from Ext2 to Extended
	f.Data.DataTable.SetValueFormat("Child",-1,"Ext2","Extended","0.00000000")	
	v.Global.bRouterChanged.Set(False)
	v.Global.bLoadingPleaseWait.Set(False)
	gui.Form.lblResult.Visible(False)
	
	F.Intrinsic.Control.UnBlockEvents
		
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtFocusRev_LostFocus.End

Program.Sub.cmdRefreshRouterLoad_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveRefresRouter)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveRefresRouter.Set(True)

	f.Intrinsic.Control.CallSub(Check_Work_Saved)
	f.Intrinsic.Control.If(v.Args.bStop)
		v.Global.bActiveRefresRouter.Set(False)
		f.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.CallSub(txtFocusRev_LostFocus)
	v.Global.bActiveRefresRouter.Set(False)
		
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdRefreshRouterLoad_Click.End

Program.Sub.GetRouter_If_HasBom_GetBom.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sRet.Declare	
	v.Local.sPart.Declare
	v.Local.sPart17.Declare
	V.Local.sRev.Declare
	v.Local.sUM.Declare
	v.Local.bOpt.Declare
	v.Local.sSerialize.Declare
	v.Local.bPhamtomArgsExist.Declare
	v.Local.bRefArgsExist.Declare
	v.Local.sHold.Declare
	v.Local.fHold.Declare
	
	f.Intrinsic.Control.CallSub(Check_RTR_Doc)
	
	f.Intrinsic.Control.If(v.DataTable.BUILDQTY.RowCount,>,0)
		f.Intrinsic.Control.CallSub(saveBuildQuantity)
	f.Intrinsic.Control.EndIf
	
	gui.Form.GGC_Bom.Visible(False)
	
	'For Cutlist
	f.Intrinsic.Control.If(v.Global.bBindCutList)
		'Temp Serialize		
		gui.Form.GGC_Bom.Serialize("GV_Child",V.Local.sSerialize)
		f.Intrinsic.Control.CallSub(Recreate_Table_Grid_Child)	
		gui.Form.GGC_Bom.Deserialize(V.Local.sSerialize)
	f.Intrinsic.Control.Else
		F.Data.DataTable.DeleteRow("CHILD")
		F.Data.DataTable.AcceptChanges("CHILD")
	f.Intrinsic.Control.EndIf
	
	v.Local.sPart17.Set(v.Args.Part17)
	v.Local.sRev.Set(v.Args.Rev)
	f.Intrinsic.String.GSSPartString(v.Local.sPart17,v.Local.sRev,v.Local.sPart)
	
	F.Intrinsic.Control.If(v.Screen.Form!chkRouterOnly.Value,=,0)
		
		'Get both Bom and Router
		'So far this is an existed router. Check if a Bom exist
		f.Intrinsic.String.Build("SELECT Left(A.PARENT,17) as Part,Substring(A.PARENT,18,3) as Rev, B.Description,A.UM_Inventory as UM,a.Bom_Complete as Complete,Case When A.Inactive = '1' then 'No' Else 'Yes' End as Active,UM_Inventory,Cost,Source,Memo_1,Memo_2 FROM  V_BOM_ENG B LEFT JOIN V_BOM_MSTR A ON B.PART = A.PARENT WHERE B.Location = '' and A.PARENT = '{0}' AND B.IS_PARENT = 'Y' AND A.SEQUENCE_BOM = '0000' ",v.Local.sPart.PSQLFriendly,v.Local.sSql)
		f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			'This bom exists
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		
			v.Local.bOpt.Set(True)
			'Set Bom Parent/Rev/Description Textbox
			gui.Form.txtParent.Text(v.Local.sRet(0))
			gui.Form.txtParentRev.Text(v.Local.sRet(1))
			gui.Form.txtParentDescr.Text(v.Local.sRet(2))
			'More info from bom head
			f.Intrinsic.Control.If(v.Local.sRet(4).Trim,=,"Y")
				gui.Form.chkBomComp.Value(1)
			f.Intrinsic.Control.Else
				gui.Form.chkBomComp.Value(0)
			f.Intrinsic.Control.EndIf
			gui.Form.txtBomUM.Text(v.Local.sRet(6).Trim)
			v.Local.fHold.Set(v.Local.sRet(7).Trim)
			f.Intrinsic.Control.CallSub(Build_Mask_Cost)
			f.Intrinsic.String.Format(v.Local.fHold,v.Args.sMaskCost,v.Local.sHold)
			gui.Form.txtBomUnitCost.Text(v.Local.sHold)
			V.Local.sHold.Set(v.Local.sRet(8).Trim)
			v.Local.sHold.Set(v.Dictionary.SOURCE![V.Local.sHold])
			gui.Form.ddlBomSource.Text(v.Local.sHold)	
			gui.Form.txtMemo1.Text(v.Local.sRet(9))
			gui.Form.txtMemo2.Text(v.Local.sRet(10))
			'Bom Notes
			f.Intrinsic.String.Build("Select Top 1 Text from Bom_Notes where Parent = '{0}' and Parent_Seq = '0000' and Parent_Ins = '00'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
			f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
			f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
				gui.Form.txtBomExtraDescr.Text(v.Local.sRet)
			f.Intrinsic.Control.EndIf
		
			'This case the Router exists and Bom exists
			gui.Form.trvBom.ClearItems
			
			f.Intrinsic.Control.CallSub(getbom,"PARENT",v.Local.sPart17,"REV",v.Local.sRev,"TIER",0,"CTIER",0)
			
			f.Intrinsic.Control.If(v.DataTable.BOM.Exists)
				f.Intrinsic.Control.If(v.DataTable.BOM.RowCount,>,0)
					f.Intrinsic.Control.CallSub(buildRouterGrid_From_GetRtrIfHasBomGetBom,"PARENT",V.Local.sPart.PSQLFriendly)
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.Else	
			'Router exists but Bom does not exists
			F.Intrinsic.Control.CallSub(getRouterOnly_From_GetRtrIfHasBomGetBom,"PART",V.Local.sPart)			
		f.Intrinsic.Control.Endif	
	
	f.Intrinsic.Control.else
	
		'Get Router Only
		F.Intrinsic.Control.CallSub(getRouterOnly_From_GetRtrIfHasBomGetBom,"PART",V.Local.sPart)			
	
	F.Intrinsic.Control.EndIf	
	
	'Fill
	'This cause slow speed for 6 to 10 sec in case bom FG21925 A Haskris
	f.Intrinsic.Control.CallSub(Fill_From_Dictionaries_CHILD)
	
	'Quantity
	f.Intrinsic.Control.CallSub(getQuantities,"PART",V.Screen.Form!txtFocusParent.TEXT,"REV",V.Screen.Form!txtFocusRev.TEXT)
		
	'set the main view to router or bom.
	f.Intrinsic.Control.If(v.Local.bOpt)
		f.Intrinsic.Control.CallSub(optBomView_Click)
	f.Intrinsic.Control.Else
		F.Intrinsic.Control.CallSub(optRtrView_Click)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.CallSub(Populate_LongPart_Router)
	
	'For Cutlist
	f.Intrinsic.Control.If(v.Global.bBindCutList)
		f.Intrinsic.Control.CallSub(Bind_CutList)		
	f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.CallSub(Process_PhantomComments)
	f.Intrinsic.Control.CallSub(Process_Double_Reference)	
	
	f.Intrinsic.Variable.ArgExists("bPhantom",v.Local.bPhamtomArgsExist)
	f.Intrinsic.Variable.ArgExists("bReference",v.Local.bRefArgsExist)
	f.Intrinsic.Control.If(v.Local.bPhamtomArgsExist,=,True,and,v.Local.bRefArgsExist,=,True)
		f.Intrinsic.Control.If(v.Args.bPhantom,=,True,or,v.Args.bReference,=,True)
	
			f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)
			F.Intrinsic.Control.CallSub(ReSeq99s)
			f.Data.DataTable.AcceptChanges("CHILD")	
		
		f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.EndIf
	
	gui.Form.GGC_Bom.Visible(True)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GetRouter_If_HasBom_GetBom.End

Program.Sub.GetRouter_RouterSideOnlyChecked.Start
';working
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sRet.Declare	
	v.Local.sPart.Declare
	v.Local.sPart17.Declare
	V.Local.sRev.Declare
	v.Local.sUM.Declare
	v.Local.bOpt.Declare
	v.Local.sSerialize.Declare
	v.Local.bPhamtomArgsExist.Declare
	v.Local.bRefArgsExist.Declare

	v.Local.iCount.Declare
	V.Local.sParent.Declare
	v.Local.sFilter.Declare	
	v.Local.sBomCompletFlag.Declare
	V.Local.fCost.Declare
	v.Local.fPurch_Factor.Declare
	v.Local.fPurch.Declare
	v.Local.iIndex.Declare	
	
	v.Local.bExists.Declare
	v.Local.iRet.Declare
	V.Local.fBomSeq.Declare
	v.Local.fRTRSeq.Declare	
	v.Local.sMsg.Declare
	
	gui.Form.GGC_Bom.Visible(False)
	
	'For Cutlist
	f.Intrinsic.Control.If(v.Global.bBindCutList)
		'Temp Serialize		
		gui.Form.GGC_Bom.Serialize("GV_Child",V.Local.sSerialize)
		f.Intrinsic.Control.CallSub(Recreate_Table_Grid_Child)	
		gui.Form.GGC_Bom.Deserialize(V.Local.sSerialize)
	f.Intrinsic.Control.Else
		F.Data.DataTable.DeleteRow("CHILD")
		F.Data.DataTable.AcceptChanges("CHILD")
	f.Intrinsic.Control.EndIf
	
	v.Local.sPart17.Set(v.Args.Part17)
	v.Local.sRev.Set(v.Args.Rev)
	f.Intrinsic.String.GSSPartString(v.Local.sPart17,v.Local.sRev,v.Local.sParent)

	'So far this is an existed router. Check if a Bom exist
	f.Intrinsic.String.Build("SELECT Left(A.PARENT,17) as Part,Substring(A.PARENT,18,3) as Rev, B.Description,A.UM_Inventory as UM,a.Bom_Complete as Complete,Case When A.Inactive = '1' then 'No' Else 'Yes' End as Active FROM  V_BOM_ENG B LEFT JOIN V_BOM_MSTR A ON B.PART = A.PARENT WHERE B.Location = '' and A.PARENT = '{0}' AND B.IS_PARENT = 'Y' AND A.SEQUENCE_BOM = '0000' ",v.Local.sParent.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
	
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		'This bom exists
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)	
		v.Local.bOpt.Set(True)	
		
		'Check if the Bom has a child is also a parent which causes infinite loop
		f.Intrinsic.String.Build(" = '{0}'",v.Local.sParent.PSQLFriendly,v.Local.sFilter)
		f.Intrinsic.Control.CallSub(Check_Child_Is_Parent,"sFilter",v.Local.sFilter)
		f.Intrinsic.Control.If(v.Args.iChildIsParent,>,1)
			f.Intrinsic.String.Build("Bom '{0}' has child the same as parent. Please contact GSS to fix at database level.",v.Local.sParent,v.Local.sMsg)
			f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Fatal Issue")
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf		
		
		'Build first level
		f.ODBC.Connection!conx.Execute(v.Global.sDeleteExplodeStageSQL)
		f.Intrinsic.String.Build("Insert Into GCG_4986_Stge (UserID,TRMNL,OldParent,Part,Tier,CTier,CH_Index) values ('{0}','{1}','{2}','{2}','',0,'')",v.Caller.User,v.Caller.Terminal,v.Local.sParent.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)			
		f.Intrinsic.Control.CallSub(Get_Bom_Mstr,"sTargetTable","TEMP_BOM","sFilter",v.Local.sFilter)		
		
		'Check first level to see if 
		f.Intrinsic.Control.If(v.DataTable.TEMP_BOM.RowCount,=,0)	
			'f.Intrinsic.UI.CloseWaitDialog
			f.Data.DataTable.Close("TEMP_BOM")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("No BOM found.","BOM Return")		
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			F.Intrinsic.Control.ExitSub		
		f.Intrinsic.Control.EndIf	
		'check the sequence 0000 in the getbom sub, if not existed, exitsub, otherwise the treeview building will break.
		F.Intrinsic.String.Build("BPARENT = '{0}' and Bom_Seq = '0000'",V.Local.sParent.PSQLFriendly,v.Local.sFilter)
		f.Data.DataView.Create("TEMP_BOM","dv0000check",22,v.Local.sFilter,"")
		f.Intrinsic.Control.If(v.DataView.TEMP_BOM!dv0000check.RowCount,=,0)
			'f.Intrinsic.UI.CloseWaitDialog
			f.Data.DataTable.Close("TEMP_BOM")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("The parent Bom does not have the Bom Sequence 0000 from DB.","Invalid")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			F.Intrinsic.Control.ExitSub		
		f.Intrinsic.Control.EndIf
		f.Data.DataView.Close("TEMP_BOM","dv0000check")
		
		'Set TIER,CTIER,CH_Index for first level
		F.Data.DataTable.SetValue("TEMP_BOM",-1,"TIER",0)
		f.Data.DataTable.SetSeries("TEMP_BOM","CTIER",0,1)	
		F.Data.DataTable.RemoveColumn("TEMP_BOM","CH_INDEX")
		F.Data.DataTable.AddExpressionColumn("TEMP_BOM","CH_INDEX","STRING","IIF(TIER < '1', CTIER, TIER + '.' + CTIER)")
		
		'Merge 1st level to Bom
		f.Intrinsic.Control.If(v.DataTable.BomForRouter.Exists)
			f.Data.DataTable.Close("BomForRouter")
		f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.CallSub("Create_Bom_Table","sTable","BomForRouter")
		f.Intrinsic.Control.If(v.DataTable.Temp_Bom.RowCount,=,0)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		
		F.Data.DataTable.Merge("TEMP_BOM","BomForRouter",False,2)
		F.Data.DataTable.AcceptChanges("BomForRouter")
		f.Data.DataTable.Close("TEMP_BOM")
		
		'fixing bom data, this was added to address the occassional missing PART number on the parent row of any BOM.
		'the missing PART is normal in core data, but it's useful to have it populated here.	
		f.Data.DataView.Create("BomForRouter","V_VALIDATE",22,"TRIM(BOM_SEQ) = '0000'","[BPARENT] ASC")
		F.Intrinsic.Control.For(v.Local.iCount,0,v.DataView.BomForRouter!V_VALIDATE.RowCount--,1)
			F.Data.DataView.SetValue("BomForRouter","V_VALIDATE",V.Local.iCount,"PART",V.DataView.BomForRouter!V_VALIDATE(V.Local.iCount).BPARENT!FIELDVALTRIM)
		F.Intrinsic.Control.Next(V.Local.iCount)
		F.Data.DataView.Close("BomForRouter","V_VALIDATE")
		
		'Fill fields from Inventory, only for empty cells	
		f.Intrinsic.Control.CallSub(Fill_Empty_Cells_BomForRouter)
	
		'Get Bom Complete flag and set the bomcomplete checkbox
		f.Intrinsic.String.Build("select Bom_Complete from BOM_MSTR where parent = '{0}' and Sequence_Bom = '0000'",v.Local.sParent,v.Local.sSQL)
		f.ODBC.Connection!Conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		v.Local.sBomCompletFlag.Set("")
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			v.Local.sBomCompletFlag.Set(v.Local.sRet.Trim)
		f.Intrinsic.Control.EndIf	
		f.Data.DataTable.SetValue("BomForRouter",0,"COMPLETE",V.Local.sBomCompletFlag)
	
		f.Intrinsic.Control.If(v.DataTable.TEMP_CHILD.Exists,=,True)
			f.Data.DataTable.Close("TEMP_CHILD")
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.String.Build("[BPARENT] = '{0}'",v.Local.sParent.PSQLFriendly,V.Local.sFilter)
		f.Data.DataView.Create("BomForRouter","V_BOM",22,V.Local.sFilter,"")
		f.Data.DataView.ToDataTable("BomForRouter","V_BOM","TEMP_CHILD",True)
		F.Data.DataView.Close("BomForRouter","V_BOM")
		'filter the view and add these records to the 'child' data table.	
		
		'Prepare to merge from TEMP_CHILD  to CHILD
		f.Data.DataTable.AddColumn("TEMP_CHILD","LMO","STRING","M",1)
		F.Data.DataTable.Merge("TEMP_CHILD","CHILD",FALSE,2)
		f.Data.DataTable.Close("TEMP_CHILD")
		
		'Resequence 99 rows
		f.Intrinsic.Control.If(v.DataTable.Child.RowCount,>,0)
			f.Data.DataTable.SetValue("Child",0,"RTR_SEQ","000000")		
		f.Intrinsic.Control.EndIf
		f.Data.DataView.Create("CHILD","V_ROUTER",22,"[PART] <> [BPARENT] and ([RTR_SEQ] IS NULL OR ([RTR_SEQ] IS NOT NULL AND [RTR_SEQ] = ''))","")
		f.Data.DataView.SetSeries("CHILD","V_ROUTER","RTR_SEQ",990000,V.Global.iRSeq)
		F.Data.DataView.Close("CHILD","V_ROUTER")	
		
		'Seems to get the last sequence number of router_Seq and of Bom_Seq?
		F.Intrinsic.Control.For(V.Local.iCount,0,v.DataTable.CHILD.RowCount--,1)
			F.Intrinsic.Control.If(V.DataTable.CHILD(V.Local.iCount).RTR_SEQ!FIELDVALTRIM,<,"990000")
				v.local.fBomSeq.Set(v.DataTable.CHILD(v.Local.iCount).BOM_SEQ!FIELDVALTRIM)
				V.local.fRTRSeq.Set(v.DataTable.CHILD(v.Local.iCount).RTR_SEQ!FIELDVALTRIM)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Next(V.Local.iCount)	
		
		'Get Router sequences that are not in Child
		F.Intrinsic.Control.CallSub(getRouter,"PART",v.Local.sParent,"DESCR",V.DataTable.CHILD(0).DESCR_BP!FIELDVALSTRING,"BSEQ",V.Local.fBomSeq,"RSEQ",V.Local.fRTRSeq)
		
		'extend the cost for material sequences only
		f.Data.DataTable.SetValueFormat("Child",-1,"PurchCost2","Purch_Cost","0.00000000")
		
	f.Intrinsic.Control.Else	
	
		'Router exists but Bom does not exists
		F.Intrinsic.Control.CallSub(getRouterOnly_From_GetRtrIfHasBomGetBom,"PART",V.Local.sParent)			
	f.Intrinsic.Control.Endif		
	
	'Fill
	'This cause slow speed for 6 to 10 sec in case bom FG21925 A Haskris
	f.Intrinsic.Control.CallSub(Fill_From_Dictionaries_CHILD)
	
	'Quantity
	f.Intrinsic.Control.CallSub(getQuantities,"PART",V.Screen.Form!txtFocusParent.TEXT,"REV",V.Screen.Form!txtFocusRev.TEXT)
		
	'set the main view to router or bom.
	f.Intrinsic.Control.If(v.Local.bOpt)
		f.Intrinsic.Control.CallSub(optBomView_Click)
	f.Intrinsic.Control.Else
		F.Intrinsic.Control.CallSub(optRtrView_Click)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.CallSub(Populate_LongPart_Router)
	
	'For Cutlist
	f.Intrinsic.Control.If(v.Global.bBindCutList)
		f.Intrinsic.Control.CallSub(Bind_CutList)		
	f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.CallSub(Process_PhantomComments)
	f.Intrinsic.Control.CallSub(Process_Double_Reference)	
	
	f.Intrinsic.Variable.ArgExists("bPhantom",v.Local.bPhamtomArgsExist)
	f.Intrinsic.Variable.ArgExists("bReference",v.Local.bRefArgsExist)
	f.Intrinsic.Control.If(v.Local.bPhamtomArgsExist,=,True,and,v.Local.bRefArgsExist,=,True)
		f.Intrinsic.Control.If(v.Args.bPhantom,=,True,or,v.Args.bReference,=,True)		
			f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)
			F.Intrinsic.Control.CallSub(ReSeq99s)
			f.Data.DataTable.AcceptChanges("CHILD")	
		
		f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.EndIf	
	
	'set the main view to router or bom.
	f.Intrinsic.Control.CallSub(optRouterHdr_Click)
	f.Intrinsic.Control.CallSub(Check_RTR_Doc)
	v.Global.bRouterChanged.Set(False)
	gui.Form.GGC_Bom.Visible(True)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GetRouter_RouterSideOnlyChecked.End

Program.Sub.Process_PhantomComments.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.iCnt.Declare
	v.Local.sFilter.Declare
	v.Local.sPhantom.Declare
	v.Local.sHold.Declare
	v.Local.sLabelSTART.Declare
	v.Local.sDescr.Declare
	v.Local.sCurrentMaxSeq.Declare
	v.Local.sPart.Declare
	v.Local.sPartEndDescr.Declare
	v.Local.sEndSeq.Declare
	v.Local.sStartSeq.Declare
	v.Local.sRet.Declare
	v.Local.sList.Declare
	v.Local.bPhantom.Declare
	v.Local.sSourceCode.Declare
	v.Local.fQty.Declare
	v.Local.fCost.Declare
	'Bom
	
	f.Data.DataTable.DeleteRow("PhantomList")
	f.Data.DataTable.AcceptChanges("PhantomList")
	
	f.Data.DataView.Create("CHILD","vPhantom",22,"RTR_SEQ > '000000' AND RTR_SEQ < '990000' and (DESCRIPTION like '* START' or DESCRIPTION like '* END')","RTR_SEQ asc" )
	f.Intrinsic.Control.If(v.DataTable.PhantomComments.Exists)
		f.Data.DataTable.Close("PhantomComments")
	f.Intrinsic.Control.EndIf		
	f.Data.DataView.ToDataTable("CHILD","vPhantom","PhantomComments",True)
	f.Data.DataView.Close("CHILD","vPhantom")

	f.Intrinsic.Control.If(v.DataTable.PhantomComments.RowCount,>,0)
		v.Local.sDescr.Set(v.datatable.PhantomComments(0).Description!FieldValTrim)
		v.Local.sLabelSTART.Set(v.Local.sDescr.Right5)
		f.Intrinsic.Control.If(v.Local.sLabelSTART.UCase,<>,"START")	
			f.Intrinsic.Control.ExitSub		
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.PhantomComments.RowCount--,1)
		
			v.Local.sDescr.Set(v.datatable.PhantomComments(v.Local.iCnt).Description!FieldValTrim)
			v.Local.sLabelSTART.Set(v.Local.sDescr.Right5)
			
			'Meet the START sequence
			f.Intrinsic.Control.If(v.Local.sLabelSTART.UCase,=,"START")
				'Set variables for START
				v.Local.sStartSeq.Set(v.datatable.PhantomComments(v.Local.iCnt).RTR_Seq!FieldValString)
				'Look for END seq
			 	f.Intrinsic.String.Replace(v.Local.sDescr," START","",V.Local.sPart)
			 	f.Intrinsic.String.Build("{0} END",V.Local.sPart,V.Local.sPartEndDescr)
			 	F.Intrinsic.String.Build("RTR_Seq > {0} and RTR_Seq < '990000' and Trim(Description) = '{1}'",v.Local.sStartSeq,v.Local.sPartEndDescr.PSQLFriendly,v.Local.sFilter)
			 	
			 	f.Data.DataView.Create("CHILD","vEnd",22,v.Local.sFilter,"RTR_Seq")
			 	'Found the END Seq
			 	f.Intrinsic.Control.If(v.DataView.Child!vEnd.RowCount,>,0)
			 		v.Local.sEndSeq.Set(v.DataView.Child!vEnd(0).RTR_Seq!FieldValString)
			 		'Flag the section comments of the Child table
			 		f.Intrinsic.String.Build("RTR_SEQ >= '{0}' and RTR_SEQ <= '{1}'",v.Local.sStartSeq,v.Local.sEndSeq,v.Local.sFilter)
			 		f.Data.DataView.Create("Child","vPh",22,v.Local.sFilter,"RTR_SEQ")
			 		f.Data.DataView.SetValue("Child","vPh",-1,"PhantomPart",v.Local.sPart)		
			 		
			 		'Get Phantom Part values (UM,Cat_Code,Source_Code,Cost,Quantity)
			 		f.Intrinsic.String.Build("RTR_Seq >= '990000' and Trim(Part) = '{0}' and Trim(Cat_Code) = 'P'",v.Local.sPart.PSQLFriendly,v.Local.sFilter)
			 		f.Data.DataView.Create("Child","vCopy",22,v.Local.sFilter,"RTR_Seq")
			 		f.Intrinsic.Control.If(v.DataView.Child!vCopy.RowCount,>,0)
			 			v.Local.sSourceCode.Set(v.DataView.Child!vCopy(0).Source_Code!FieldValString)
			 			v.Local.fQty.Set(v.DataView.Child!vCopy(0).Qty!FieldValString)
			 			v.Local.fCost.Set(v.DataView.Child!vCopy(0).Cost!FieldValString)
			 			f.Data.DataView.SetValue("Child","vPh",0,"UM",v.DataView.Child!vCopy(0).UM!FieldValString,"Cat_Code","P","Category","PHANTOM","Description_2",v.Local.sSourceCode,"Description_3",v.DataView.Child!vCopy(0).Description!FieldValString,"Cost",v.Local.fCost,"Qty",v.Local.fQty)
			 		f.Intrinsic.Control.Else
			 			f.Data.DataView.SetValue("Child","vPh",0,"UM","EA","Cat_Code","P","Category","PHANTOM","Description_2","M","Cost","0","Qty",1)		 		
			 		f.Intrinsic.Control.EndIf			 		
			 		f.Data.DataView.Close("Child","vCopy")		 		
			 		
			 		
			 		f.Data.DataView.Close("child","vPh")
			 		f.Data.DataTable.AddRow("PhantomList","Part",v.Local.sPart)				 		
			 		
			 		'Move cursor to the current End seq
			 		F.Intrinsic.String.Build("RTR_Seq > {0} and RTR_Seq < '990000' and Trim(Description) = '{1}'",v.Local.sStartSeq,v.Local.sPartEndDescr.PSQLFriendly,v.Local.sFilter)
			 		f.Data.DataTable.Select("PhantomComments",V.Local.sFilter,V.Local.sRet)
			 		f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
			 			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			 			f.Intrinsic.Control.If(v.Local.sRet(0),>,v.Local.iCnt)
			 				v.Local.iCnt.Set(v.Local.sRet(0))
			 			f.Intrinsic.Control.EndIf			 			
			 		f.Intrinsic.Control.EndIf
			 	f.Intrinsic.Control.EndIf			 	
			 	f.Data.DataView.Close("CHILD","vEnd")	
			 	
			f.Intrinsic.Control.EndIf		
		
		f.Intrinsic.Control.Next(v.Local.iCnt)	
		
		f.Data.DataTable.AcceptChanges("CHILD")
	f.Intrinsic.Control.EndIf
	
	'Remove Phantom Part in the 99 seq
	f.Intrinsic.Control.If(v.DataTable.PhantomList.RowCount,>,0)
		f.Data.DataView.Create("PhantomList","vList")
		f.Data.DataView.ToString("PhantomList","vList","Part","","&!&~",v.Local.sList)
		f.Data.DataView.Close("PhantomList","vList")
		f.Intrinsic.String.Replace(v.Local.sList,"'","''",v.Local.sList)
		f.Intrinsic.String.Replace(v.Local.sList,"&!&~","','",v.Local.sList)
		f.Intrinsic.String.Build("RTR_Seq >= '990000' and Trim(Part) in ('{0}') and Trim(Cat_Code) = 'P'",v.Local.sList,v.Local.sFilter)
		f.Data.DataTable.Select("CHILD",v.Local.sFilter,v.Local.sRet)
		f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			f.Intrinsic.Control.For(v.Local.iCnt,v.Local.sRet.UBound,0,-1)
				f.Data.DataTable.DeleteRow("CHILD",v.Local.sRet(v.Local.iCnt))
				v.Local.bPhantom.Set(True)
			f.Intrinsic.Control.Next(v.Local.iCnt)
		f.Intrinsic.Control.EndIf
		f.Data.DataTable.AcceptChanges("CHILD")
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Variable.AddRV("bPhantom",v.Local.bPhantom)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Process_PhantomComments.End

Program.Sub.Process_Double_Reference.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.iCnt.Declare
	v.Local.sRow.Declare
	v.Local.sFilter.Declare
	v.Local.bReference.Declare
	v.Local.sPart.Declare

	f.Data.DataTable.Select("Child","RTR_Seq >= '990000' and Trim(Cat_Code) = 'R'",v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
		f.Data.DataView.Create("Child","vDRef")
		F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)		
		F.Intrinsic.Control.For(v.Local.iCnt,v.Local.sRet.UBound,0,-1)
			v.Local.sRow.Set(v.Local.sRet(v.Local.iCnt))
			v.Local.sPart.Set(v.DataTable.Child(v.Local.sRow).Part!FieldValTrim)
			f.Intrinsic.String.Build("RTR_Seq > '000000' and RTR_SEq < '990000' and Trim(Description) = 'Part: {0}' and LMO = 'C' ",v.Local.sPart.PSQLFriendly,v.Local.sFilter)
			
			f.Data.DataView.SetFilter("Child","vDRef",v.Local.sFilter)
			f.Intrinsic.Control.If(v.DataView.child!vDRef.RowCount,>,0)
				'Set UM, Cat_Code, Source_Code, Cost, Qty
				f.Data.DataView.SetValue("CHILD","vDRef",0,"RefPart",v.Local.sPart,"UM",v.DataTable.Child(v.Local.sRow).UM!FieldValString,"Cat_Code",v.DataTable.Child(v.Local.sRow).Cat_Code!FieldValString,"Category","REFERENCE","Description_2",v.DataTable.Child(v.Local.sRow).Source_Code!FieldValString,"Cost",v.DataTable.Child(v.Local.sRow).Cost!FieldValString,"Qty",v.DataTable.Child(v.Local.sRow).Qty!FieldValString)
				f.Data.DataTable.DeleteRow("CHILD",V.Local.sRow)				
			f.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Next(v.Local.iCnt)		
		F.Data.DataView.Close("Child","vDRef")
		F.Data.DataTable.AcceptChanges("Child")
		v.Local.bReference.Set(True)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Variable.AddRV("bReference",v.Local.bReference)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Process_Double_Reference.End

Program.Sub.Get_Bom_MSTR.Start
'Param: sFilter
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSQL.Declare
	v.Local.bCountBomSeq.Declare
	v.Local.bCountRouterSeq.Declare
	v.Local.sRouterLineParts.Declare
	v.Local.sFilter.Declare
	v.Local.sNeedFill.Declare
	v.Local.iCnt.Declare
	v.Local.sRouterLineExclude.Declare
	v.Local.sIndex.Declare
	v.Local.sPart.Declare
	v.Local.sRIndex.Declare
	v.Local.fFrequency.Declare
	V.Local.sRet.Declare
	v.Local.fQty.Declare
	v.Local.fCost.Declare

	'Count Duplicate Bom Seq
	f.Intrinsic.String.Build("SELECT count(SEQUENCE_BOM) as countBomseq from GCG_4986_Stge g inner join Bom_MSTR m on g.Part = m.Parent left join  	(Select Router,PART_WC_OUTSIDE,Router_Type,LINE_ROUTER from Router_Line 	where  Router {0} and IsNull(Router_Type,'') = 'L' and IsNull(LMO,'') = 'M') r 	 on rtrim(m.Parent) = rtrim(r.Router) 	and rtrim(m.Part) = rtrim(r.PART_WC_OUTSIDE) where g.UserID = '{1}' and g.Trmnl = '{2}' and m.PARENT {0}  group by SEQUENCE_BOM having countBomseq > 1",v.Args.sFilter,v.Caller.User,v.Caller.Terminal,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		v.Local.bCountBomSeq.Set(True)
	f.Intrinsic.Control.EndIf
	
	'Count Duplicate Router Seq
	f.Intrinsic.String.Build("SELECT count(r.Line_Router) as countRouterSeq from GCG_4986_Stge g inner join Bom_MSTR m on g.Part = m.Parent left join  	(Select Router,PART_WC_OUTSIDE,Router_Type,LINE_ROUTER from Router_Line 	where  Router  {0} and IsNull(Router_Type,'') = 'L' and IsNull(LMO,'') = 'M') r 	 on rtrim(m.Parent) = rtrim(r.Router) 	and rtrim(m.Part) = rtrim(r.PART_WC_OUTSIDE) where g.UserID = '{1}' and g.Trmnl = '{2}' and m.PARENT  {0}  group by r.Line_Router having countRouterSeq > 1",v.Args.sFilter,v.Caller.User,v.Caller.Terminal,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		v.Local.bCountRouterSeq.Set(True)
	f.Intrinsic.Control.EndIf
	
	'No duplicate sequence for both Bom_Seq and Line_Router
	f.Intrinsic.Control.If(v.Local.bCountBomSeq,=,False,and,v.Local.bCountRouterSeq,=,False)
		'IF(IsNull(m.CATEGORY,'') = '1' ,m.QUANTITY, IsNull(r.SET_UP,0)) as Set_up
		f.Intrinsic.String.Build("SELECT m.PARENT AS BPARENT,'' as DESCR_BP, m.SEQUENCE_BOM AS BOM_SEQ,R.LINE_ROUTER as RTR_SEQ, m.PART as Part,If(IsNull(r.DESC_RT_LINE,'') <> '',r.DESC_RT_LINE,'') as DESCRIPTION,'' as DESCRIPTION_2,'' as DESCRIPTION_3, Case when Isnull(r.LINE_ROUTER,-1.00) = -1.00 then IsNull(m.QUANTITY,0.00) else IsNull(r.Run_Time,0.00) End AS QTY   , Case when Isnull(r.LINE_ROUTER,-1.00) = -1.00 then IsNull(m.Cost,0.00) else IsNull(r.Rate,0.00) End AS Cost,  m.UM_INVENTORY AS UM,'' AS PL, If(Isnull(m.CATEGORY,'') = '','N',m.CATEGORY) AS CAT_CODE, SOURCE AS SOURCE_CODE, Case when Isnull(r.LINE_ROUTER,-1.00) = -1.00 then IsNull(m.FREQUENCY,0.00) else IsNull(r.FREQUENCY,0.00) End AS Frequency , Case when Isnull(r.LINE_ROUTER,-1.00) = -1.00 then IsNull(m.SetUp_Qty,0.00) else IsNull(r.Set_Up,0.00) End AS Set_Up, TAG ,Convert(0,SQL_Float) as Purchase_Factor,g.Tier,g.CTIER, '' as Par_Index,'' AS COMPLETE ,g.CH_Index,Convert(0,SQL_Float) as Purch_Cost,'' as Loc,'' as Issue_UM,Convert(0,SQL_Float) as Consump_Conv,Convert(0,SQL_Float) as Consump_Cost,Convert(0,SQL_Float) as Consump_Extended,Convert(0,SQL_Float) as Weight,Convert(0,SQL_Float) as Consump_Weight,Convert(0,SQL_Float) as ExtendedWeight,Convert(0,SQL_Float) as ExtendedConsumpWeight,Convert(0,SQL_Float) as Ord,Insert_Bom,m.Date_Maintenance,m.Date_Start,m.Date_Stop,m.BM_Serial_Start,m.BM_Serial_Stop,m.Purge_Flag,m.Ordr_USR_Flag,m.Drawing,m.Date_Last_Chg,m.Time_Last_Chg,m.Last_Chg_By,m.Last_Chg_Prog,m.Drawing_Size,m.Req_Trace,m.Cost_Date,m.Inactive,m.Chg_Rev,m.Setup_Qty ,g.OldParent,r.Sort_Code,r.Lead_Time as Lead,r.Amt_Minimum,r.Op_Code from GCG_4986_Stge g inner join Bom_MSTR m on g.Part = m.Parent 	left join  (Select Router,PART_WC_OUTSIDE,Router_Type,LINE_ROUTER,Frequency,Sort_Code,DESC_RT_LINE,Lead_Time,Amt_Minimum,Operation as Op_Code,Set_up,Run_Time,Rate from Router_Line where  Router  {0} and IsNull(Router_Type,'') = 'L' and IsNull(LMO,'') = 'M') r  on rtrim(m.Parent) = rtrim(r.Router) and rtrim(m.Part) = rtrim(r.PART_WC_OUTSIDE) where g.UserID = '{1}' and g.Trmnl = '{2}' and m.PARENT {0}  ORDER BY g.Ctier, m.PARENT, m.SEQUENCE_BOM,R.LINE_ROUTER",v.Args.sFilter,v.Caller.User,v.Caller.Terminal,v.Local.sSQL)
		
		f.Intrinsic.Control.If(v.DataTable.[v.Args.sTargetTable].Exists)
			f.Data.DataTable.Close(v.Args.sTargetTable)
		f.Intrinsic.Control.EndIf
		f.Data.DataTable.CreateFromSQL(v.Args.sTargetTable,"conx",v.Local.sSQL,True)
	
	'There are dulicates of sequences so do no join to router_line, instead populate each record
	f.Intrinsic.Control.Else
		'
		'Create Basic table
		f.Intrinsic.String.Build("SELECT m.PARENT AS BPARENT,'' as DESCR_BP , m.SEQUENCE_BOM AS BOM_SEQ,''  as RTR_SEQ, m.PART as Part,'' as DESCRIPTION,'' as DESCRIPTION_2,'' as DESCRIPTION_3, IsNull(m.QUANTITY,0.00) AS QTY,IsNull(m.COST,0.00) as Cost, m.UM_INVENTORY AS UM,'' AS PL, If(Isnull(m.CATEGORY,'') = '','N',m.CATEGORY) AS CAT_CODE, SOURCE AS SOURCE_CODE,IsNull(m.Frequency,0.00) as Frequency,IsNull(m.Setup_Qty,0.00) as Set_up, TAG ,Convert(0,SQL_Float) as Purchase_Factor,g.Tier,g.CTIER, '' as Par_Index,''  AS COMPLETE ,g.CH_Index,Convert(0,SQL_Float) as Purch_Cost,'' as Loc,'' as Issue_UM,Convert(0,SQL_Float) as Consump_Conv,Convert(0,SQL_Float) as Consump_Cost,Convert(0,SQL_Float) as Consump_Extended,Convert(0,SQL_Float) as Weight,Convert(0,SQL_Float) as Consump_Weight,Convert(0,SQL_Float) as ExtendedWeight,Convert(0,SQL_Float) as ExtendedConsumpWeight,Convert(0,SQL_Float) as Ord,Insert_Bom,m.Date_Maintenance,m.Date_Start,m.Date_Stop,m.BM_Serial_Start,m.BM_Serial_Stop,m.Purge_Flag,m.Ordr_USR_Flag,m.Drawing,m.Date_Last_Chg,m.Time_Last_Chg,m.Last_Chg_By,m.Last_Chg_Prog,m.Drawing_Size,m.Req_Trace,m.Cost_Date,m.Inactive,m.Chg_Rev,m.Setup_Qty ,g.OldParent,'' as Sort_Code,Convert(0,SQL_Float) as Lead,convert(0,SQL_Float) as Amt_Minimum,'' as Op_Code  from GCG_4986_Stge g inner join Bom_MSTR m on g.Part = m.Parent where g.UserID = '{1}' and g.Trmnl = '{2}' and m.PARENT {0} ORDER BY g.Ctier, m.PARENT, m.SEQUENCE_BOM",v.Args.sFilter,v.Caller.User,v.Caller.Terminal,v.Local.sSQL)
		f.Intrinsic.Control.If(v.DataTable.[v.Args.sTargetTable].Exists)
			f.Data.DataTable.Close(v.Args.sTargetTable)
		f.Intrinsic.Control.EndIf
		f.Data.DataTable.CreateFromSQL(v.Args.sTargetTable,"conx",v.Local.sSQL,True)
		
		'Create Router Table
		f.Intrinsic.Control.If(v.DataTable.BindR.Exists)
			f.Data.DataTable.Close("BindR")
		f.Intrinsic.Control.EndIf
		f.Intrinsic.String.Build("Select rtrim(PART_WC_OUTSIDE) as PART_WC_OUTSIDE,DESC_RT_LINE,LINE_ROUTER,Frequency,Sort_Code,Lead_Time,Amt_Minimum,Operation as Op_Code,Set_Up,Run_Time,Rate   from Router_Line  where  Router {0} and IsNull(Router_Type,'') = 'L' and IsNull(LMO,'') = 'M' Order by LINE_ROUTER",v.Args.sFilter,v.Local.sSQL)
		f.Data.DataTable.CreateFromSQL("BindR","conx",v.Local.sSQL,True)
		
		f.Intrinsic.Control.If(v.DataTable.BindR.RowCount,>,0)
		
			f.Data.DataView.Create("BindR","vBindR")
			f.Data.DataView.ToString("BindR","vBindR","PART_WC_OUTSIDE","","@!@##,@!@##",v.Local.sRouterLineParts)
			f.Intrinsic.String.Replace(v.Local.sRouterLineParts,"'","''",v.Local.sRouterLineParts)
			f.Intrinsic.String.Replace(v.Local.sRouterLineParts,"@!@##,@!@##","','",v.Local.sRouterLineParts)
			f.Intrinsic.String.Build("Trim(Part) in ('{0}')",v.Local.sRouterLineParts,v.Local.sFilter)
			
			f.Data.DataTable.Select(v.Args.sTargetTable,v.Local.sFilter,v.Local.sNeedFill)
			
			f.Intrinsic.Control.If(v.Local.sNeedFill,<>,"***NORETURN***")
				f.Intrinsic.String.Split(v.Local.sNeedFill,"*!*",v.Local.sNeedFill)
				f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.sNeedFill.UBound,1)
					v.Local.sIndex.Set(v.Local.sNeedFill(v.Local.iCnt))
					v.Local.sPart.Set(v.DataTable.[v.Args.sTargetTable](v.Local.sIndex).Part!FieldValTrim)
					f.Intrinsic.String.Build("PART_WC_OUTSIDE = '{0}' and LINE_ROUTER not in ('{1}')",v.Local.sPart.PSQLFriendly,v.Local.sRouterLineExclude,v.Local.sFilter)
					f.Data.DataView.SetFilter("BindR","vBindR",v.Local.sFilter)
					f.Intrinsic.Control.If(v.DataView.BindR!vBindR.RowCount,>,0)

						f.Data.DataTable.SetValue(v.Args.sTargetTable,v.Local.sIndex,"RTR_Seq",v.DataView.BindR!vBindR(0).LINE_ROUTER!FieldValString,"Description",v.DataView.BindR!vBindR(0).DESC_RT_LINE!FieldValString,"Sort_Code",v.DataView.BindR!vBindR(0).Sort_Code!FieldValString,"Lead",v.DataView.BindR!vBindR(0).Lead_Time!FieldValString,"Amt_Minimum",v.DataView.BindR!vBindR(0).Amt_Minimum!FieldValString,"Op_Code",v.DataView.BindR!vBindR(0).Op_Code!FieldValString,"Set_up",v.DataView.BindR!vBindR(0).Set_Up!FieldValString,"Frequency",v.DataView.BindR!vBindR(0).Frequency!FieldValString,"Cost",v.DataView.BindR!vBindR(0).Rate!FieldValString,"Qty",v.DataView.BindR!vBindR(0).Run_time!FieldValString)
			
						'Continue to exclude for the next round
						f.Intrinsic.String.Build("{0}','{1}",v.Local.sRouterLineExclude,v.DataView.BindR!vBindR(0).Line_router!FieldValString,v.Local.sRouterLineExclude)
						
					f.Intrinsic.Control.EndIf				
					
				f.Intrinsic.Control.Next(v.Local.iCnt)			
			
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Get_Bom_MSTR.End

Program.Sub.getbom.Start
F.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iCount.Declare
	V.Local.sParent.Declare
	V.Local.sOldParent.Declare
	V.Local.sParentFilter.Declare
	v.Local.sFilter.Declare	
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.sBomCompletFlag.Declare
	v.Local.sWeight.Declare
	v.Local.sPartList.Declare
	v.Local.sMsg.Declare

	'loading the bom in to the table BOM  ============================================================== 
	'Don comment: should we check for softlocks at this time, or only when loading the router?. I think every parent within the BOM should record a LOCK and clear it later.	
	''F.Intrinsic.UI.InvokeWaitDialog("Retrieving BOM....","PLEASE WAIT",0)
	
	f.Intrinsic.String.GSSPartString(v.Args.Parent,v.Args.rev,v.Local.sParent)

	'Check if the Bom has a child is also a parent which causes infinite loop
	f.Intrinsic.String.Build(" = '{0}'",v.Local.sParent.PSQLFriendly,v.Local.sFilter)
	f.Intrinsic.Control.CallSub(Check_Child_Is_Parent,"sFilter",v.Local.sFilter)
	f.Intrinsic.Control.If(v.Args.iChildIsParent,>,1)
		f.Intrinsic.String.Build("Bom '{0}' has child the same as parent. Please contact GSS to fix at database level.",v.Local.sParent,v.Local.sMsg)
		f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Fatal Issue")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
		
	'Build first level
	f.ODBC.Connection!conx.Execute(v.Global.sDeleteExplodeStageSQL)
	f.Intrinsic.String.Build("Insert Into GCG_4986_Stge (UserID,TRMNL,OldParent,Part,Tier,CTier,CH_Index) values ('{0}','{1}','{2}','{2}','',0,'')",v.Caller.User,v.Caller.Terminal,v.Local.sParent.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)	
	f.Intrinsic.Control.CallSub(Get_Bom_Mstr,"sTargetTable","TEMP_BOM","sFilter",v.Local.sFilter)
	
	'Check first level to see if 
	f.Intrinsic.Control.If(v.DataTable.TEMP_BOM.RowCount,=,0)	
		'f.Intrinsic.UI.CloseWaitDialog
		f.Data.DataTable.Close("TEMP_BOM")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No BOM found.","BOM Return")		
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		F.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf	
	'check the sequence 0000 in the getbom sub, if not existed, exitsub, otherwise the treeview building will break.
	F.Intrinsic.String.Build("BPARENT = '{0}' and Bom_Seq = '0000'",V.Local.sParent.PSQLFriendly,v.Local.sFilter)
	f.Data.DataView.Create("TEMP_BOM","dv0000check",22,v.Local.sFilter,"")
	f.Intrinsic.Control.If(v.DataView.TEMP_BOM!dv0000check.RowCount,=,0)
		'f.Intrinsic.UI.CloseWaitDialog
		f.Data.DataTable.Close("TEMP_BOM")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("The parent Bom does not have the Bom Sequence 0000 from DB.","Invalid")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		F.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Close("TEMP_BOM","dv0000check")
	
	'Set TIER,CTIER,CH_Index for first level
	F.Data.DataTable.SetValue("TEMP_BOM",-1,"TIER",V.Args.CTier)
	f.Data.DataTable.SetSeries("TEMP_BOM","CTIER",0,1)	
	F.Data.DataTable.RemoveColumn("TEMP_BOM","CH_INDEX")
	F.Data.DataTable.AddExpressionColumn("TEMP_BOM","CH_INDEX","STRING","IIF(TIER < '1', CTIER, TIER + '.' + CTIER)")
	
	'Merge 1st level to Bom
	F.Data.DataTable.Merge("TEMP_BOM","BOM",False,2)
	F.Data.DataTable.AcceptChanges("Bom")

	'remove the parent item so we don't join it's children in again
	f.Data.DataTable.DeleteRow("TEMP_BOM",0)
	F.Data.DataTable.RemoveColumn("TEMP_BOM","OLDPARENT")
	F.Data.DataTable.AddExpressionColumn("TEMP_BOM","OLDPARENT","STRING","BPARENT")	
	
	'Loop next level
	F.Intrinsic.Control.DoUntil(V.DataTable.TEMP_BOM.RowCount,<,1)	
		'Prepare parent part list for the next level
		f.Data.DataView.Create("TEMP_BOM","v_Lev")
		f.Data.DataView.ToString("TEMP_BOM","v_Lev","PART","","*!*",V.Local.sPartList)
		f.Intrinsic.String.Replace(v.Local.sPartList,"'","''",v.Local.sPartList)
		f.Intrinsic.String.Replace(v.Local.sPartList,"*!*","','",v.Local.sPartList)
		
		'Check if the Bom has a grand children is also a children which causes infinite loop
		f.Intrinsic.String.Build(" IN ('{0}')",v.Local.sPartList,v.Local.sFilter)		
		f.Intrinsic.Control.CallSub(Check_GrandChildren_Is_Children,"sFilter",v.Local.sFilter)
		f.Intrinsic.Control.If(v.Args.bChildrenAreParent)
			f.Intrinsic.String.Replace(v.Args.sChildrenAreParentList,"#$#",", ",v.Local.sMsg)
			f.Intrinsic.String.Build("One of these parts has children as the parent. Please contact GSS to fix at database level:{0}{1}",v.Ambient.NewLine,v.Local.sMsg,v.Local.sMsg)
			f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Fatal Issue")
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf		
		
		'Save parent list of the level
		f.ODBC.Connection!conx.Execute(v.Global.sDeleteExplodeStageSQL)
		f.Data.DataTable.AddColumn("TEMP_BOM","UserID","String",v.Caller.User)
		f.Data.DataTable.AddColumn("TEMP_BOM","Trmnl","String",v.Caller.Terminal)		
		f.Data.DataTable.SaveToDB("TEMP_BOM","conx","GCG_4986_Stge","",128,"UserID@!@UserID*!*Trmnl@!@Trmnl*!*OLDPARENT@!@OLDPARENT*!*Part@!@Part*!*TIER@!@TIER*!*CTIER@!@CTIER*!*CH_Index@!@CH_Index")
		f.Data.DataTable.Close("TEMP_BOM")			
		
		f.Intrinsic.Control.CallSub(Get_Bom_Mstr,"sTargetTable","TEMP_RETURN","sFilter",v.Local.sFilter)	
	
		F.Intrinsic.Control.If(V.DataTable.TEMP_RETURN.RowCount,>,0)
			'f.Data.DataTable.AddExpressionColumn("TEMP_RETURN","CH_INDEX","STRING","TIER + '.' + CTIER")
			F.Data.DataView.Create("TEMP_RETURN","V_RETURN",22)
			'create a view of just the parent items where bom_seq = 0000
			F.Data.DataView.Create("TEMP_RETURN","V_PARENTS",22,"BOM_SEQ = '0000'","CTIER")
			'for each parent item in view, filter our v_return and then set the tier and ctier values for that set of parts
			F.Intrinsic.Control.For(V.Local.iCount,0,V.DataView.TEMP_RETURN!V_PARENTS.RowCount--,1)
				V.Local.sParent.Set(v.DataView.TEMP_RETURN!V_PARENTS(V.Local.iCount).BPARENT!FIELDVAL)
				v.Local.sOldParent.Set(v.DataView.TEMP_RETURN!V_PARENTS(V.Local.iCount).OLDPARENT!FIELDVAL)
				'To avoid part number is dublicated, we enforce by adding the condition CH_Index in the filter
				F.Intrinsic.String.Build("OLDPARENT = '{0}' AND BPARENT = '{1}' and CH_Index = '{2}'",V.Local.sOldParent,V.Local.sParent,v.DataView.TEMP_RETURN!V_PARENTS(V.Local.iCount).CH_INDEX!FIELDVAL,V.Local.sParentFilter)
				f.Data.DataView.SetFilter("TEMP_RETURN","V_RETURN",V.Local.sParentFilter)
				F.Data.DataView.SetValue("TEMP_RETURN","V_RETURN",-1,"TIER",V.DataView.TEMP_RETURN!V_PARENTS(V.Local.iCount).CH_INDEX!FIELDVALSTRING)
				F.Data.DataView.SetSeries("TEMP_RETURN","V_RETURN","CTIER",0,1)
			F.Intrinsic.Control.Next(V.Local.iCount)

			'added: for temp_return, CH_Index must be reindexed before adding to Bom
			F.Data.DataTable.RemoveColumn("TEMP_RETURN","CH_INDEX")
			F.Data.DataTable.AddExpressionColumn("TEMP_RETURN","CH_INDEX","STRING","IIF(TIER < '1', CTIER, TIER + '.' + CTIER)")			
			F.Data.DataTable.RemoveColumn("TEMP_RETURN","OLDPARENT")		
			F.Data.DataTable.Merge("TEMP_RETURN","BOM",False,2)
			f.Data.DataTable.AcceptChanges("Bom")
			
			'Prepare for the next round
			F.Data.DataView.Create("TEMP_RETURN","V_Lines",22,"BOM_SEQ <> '0000'","BPARENT,BOM_SEQ,RTR_SEQ")	
			f.Data.DataView.ToDataTable("TEMP_RETURN","V_Lines","TEMP_BOM",True)							
			F.Data.DataTable.AddExpressionColumn("TEMP_BOM","OLDPARENT","STRING","BPARENT")
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.ExitDo			
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Loop

	F.Intrinsic.Control.If(V.DataTable.TEMP_RETURN.Exists,=,True)
		f.Data.DataTable.Close("TEMP_RETURN")
	F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.If(v.DataTable.TEMP_BOM.Exists)
		f.Data.DataTable.Close("TEMP_BOM")
	f.Intrinsic.Control.EndIf	
	
	'fixing bom data, this was added to address the occassional missing PART number on the parent row of any BOM.
	'the missing PART is normal in core data, but it's useful to have it populated here.	
	f.Data.DataView.Create("BOM","V_VALIDATE",22,"TRIM(BOM_SEQ) = '0000'","[BPARENT] ASC")
	F.Intrinsic.Control.For(v.Local.iCount,0,v.DataView.BOM!V_VALIDATE.RowCount--,1)
		F.Data.DataView.SetValue("BOM","V_VALIDATE",V.Local.iCount,"PART",V.DataView.BOM!V_VALIDATE(V.Local.iCount).BPARENT!FIELDVALTRIM)
	F.Intrinsic.Control.Next(V.Local.iCount)
	F.Data.DataView.Close("BOM","V_VALIDATE")
	
	'Fill fields from Inventory, only for empty cells	
	f.Intrinsic.Control.CallSub(Fill_Empty_Cells_Bom)
	
	F.Data.DataTable.Compute("BOM","Sum(ExtendedConsumpWeight)","BPARENT <> Part and Tier = '0'",v.Local.sWeight)
	f.Intrinsic.Control.CallSub(Build_Mask)
	f.Intrinsic.String.Format(v.Local.sWeight,v.Args.sMaskWeight,v.Local.sWeight)
	gui.Form.txtParentWeight.Text(v.Local.sWeight)		
	
	'Also Reorder Bom to have a better visibility *** what you see is what you get
	f.Intrinsic.Control.CallSub(ReIndex_Bom_WhatSee_Is_WhatGet)
	
	'Get Bom Complete flag and set the bomcomplete checkbox
	f.Intrinsic.String.GSSPartString(v.Args.Parent,v.Args.rev,v.Local.sParent)
	f.Intrinsic.String.Build("select Bom_Complete from BOM_MSTR where parent = '{0}' and Sequence_Bom = '0000'",v.Local.sParent,v.Local.sSQL)
	f.ODBC.Connection!Conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	v.Local.sBomCompletFlag.Set("")
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		v.Local.sBomCompletFlag.Set(v.Local.sRet.Trim)
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.SetValue("BOM",0,"COMPLETE",V.Local.sBomCompletFlag)
	F.Intrinsic.Control.If(V.Local.sBomCompletFlag,=,"Y")
		gui.Form.chkBomComp.Value(1)
	f.Intrinsic.Control.Else
		gui.Form.chkBomComp.Value(0)
	F.Intrinsic.Control.EndIf
	
	'hide the treeview, build the treeview, and unhide
	gui.Form.trvBom.Visible(False)	
	
	f.Intrinsic.Control.CallSub(Populate_Loc_Part_ID)
	F.Intrinsic.Control.CallSub(TreeViewKeySet,"PARENT",V.Args.Parent.TRIM,"REV",V.Args.Rev)
	gui.Form.trvBom.Visible(True)	
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.getbom.End

Program.Sub.Fill_Empty_Cells_Bom.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sFilter.Declare
	v.Local.sParts.Declare
	v.Local.sSQL.Declare
	v.Local.iCnt.Declare
	v.Local.sAPart.Declare
	v.Local.sParents.Declare
	V.Local.bExist.Declare
	
	f.Intrinsic.Control.If(v.DataView.Bom!vFill.Exists)
		f.Data.DataView.Close("Bom","vFill")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("Bom","vFill")
	'Later when setting view, we need to go backward v.local.iCnt because we will set value to view which change the view itself
	
	'DESCR_BP: Fill from Bom_Eng.Description, if empty, fill from Router_Header.Description_Router, else Inventory_Mstr.Description
	f.Data.DataTable.ColumnToString("Bom","Part",v.Local.sParents)
	f.Intrinsic.String.Replace(v.Local.sParents,"'","''",v.Local.sParents)
	f.Intrinsic.String.Replace(v.Local.sParents,"*!*","','",v.Local.sParents)	
	f.Intrinsic.String.Build("Select rtrim(b.Part) as Part,If(rtrim(b.Description) <> '',b.Description,If(IsNull(rtrim(r.Description_Router),'') <> '',r.Description_Router,Isnull(i.Description,''))) from Bom_Eng b LEFT JOIN V_Router_Header r on b.Part = r.Router Left JOIN (Select Part,Location,Description from Inventory_MSTR where Part in ('{0}') and Location = '{1}') i on b.Part = i.Part where b.Part in ('{0}') and b.Location = '{1}'",v.Local.sParents,v.Global.sDefaultLoc,v.Local.sSQL)
	f.Data.Dictionary.CreateFromSQL("dictParentDescr","conx",v.Local.sSQL)
	f.Data.Dictionary.SetDefaultReturn("dictParentDescr","")	
	f.Data.DataView.SetFilter("Bom","vFill","Descr_BP is Null or Trim(Descr_BP) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.Bom!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BOM!vFill(V.Local.iCnt).BParent!FieldValTrim)
		f.Data.DataView.SetValue("Bom","vFill",v.Local.iCnt,"Descr_BP",v.Dictionary.dictParentDescr![v.Local.sAPart])		
	f.Intrinsic.Control.Next(v.Local.iCnt)	
	f.Data.Dictionary.Close("dictParentDescr")	

	'DESCRIPTION: Fill from Bom_Eng.Description, if empty, fill from Router_Header.Description_Router, else Inventory_Mstr.Description
	f.Data.DataTable.ColumnToString("Bom","Part",v.Local.sParts)
	f.Intrinsic.String.Replace(v.Local.sParts,"'","''",v.Local.sParts)
	f.Intrinsic.String.Replace(v.Local.sParts,"*!*","','",v.Local.sParts)	
	f.Intrinsic.String.Build("Select Rtrim(b.Part) as Part,If(rtrim(b.Description) <> '',b.Description,If(IsNull(rtrim(r.Description_Router),'') <> '',r.Description_Router,Isnull(i.Description,''))) from Bom_Eng b LEFT JOIN V_Router_Header r on b.Part = r.Router Left JOIN (Select Part,Location,Description from Inventory_MSTR where Part in ('{0}') and Location = '{1}') i on b.Part = i.Part where b.Part in ('{0}') and b.Location = '{1}'",v.Local.sParts,v.Global.sDefaultLoc,v.Local.sSQL)
	f.Data.Dictionary.CreateFromSQL("dictPartDescr","conx",v.Local.sSQL)
	f.Data.Dictionary.SetDefaultReturn("dictPartDescr","")
	f.Data.DataTable.AddExpressionColumn("Bom","PartTrim","String","Trim(Part)")
	f.Data.DataView.SetFilter("Bom","vFill","Description is Null or Trim(Description) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.Bom!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BOM!vFill(V.Local.iCnt).PartTrim!FieldValTrim)
		f.Data.DataView.SetValue("Bom","vFill",v.Local.iCnt,"Description",v.Dictionary.dictPartDescr![v.Local.sAPart])		
	f.Intrinsic.Control.Next(v.Local.iCnt)	
	f.Data.Dictionary.Close("dictPartDescr")	
	'If still empty, get router_header.Description_Router, else Inventory_MSTR.Description
	f.Intrinsic.String.Build("Select rtrim(r.Router) as Router,If(rtrim(r.Description_Router) <> '',r.Description_Router,Isnull(i.Description,'')) from V_Router_Header r Left JOIN (Select Part,Location,Description from Inventory_MSTR where Part in ('{0}') and Location = '{1}') i on r.Router = i.Part where r.Router in ('{0}') ",v.Local.sParts,V.Global.sDefaultLoc,v.Local.sSQL)
	f.Data.Dictionary.CreateFromSQL("dictPartDescrRI","conx",v.Local.sSQL)
	f.Data.Dictionary.SetDefaultReturn("dictPartDescrRI","")	
	f.Data.DataView.SetFilter("Bom","vFill","Description is Null or Trim(Description) = ''")	
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BOM!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BOM!vFill(V.Local.iCnt).PartTrim!FieldValTrim)
		f.Data.DataView.SetValue("Bom","vFill",v.Local.iCnt,"Description",v.Dictionary.dictPartDescrRI![v.Local.sAPart])
	f.Intrinsic.Control.Next(v.Local.iCnt)		
	f.Data.Dictionary.Close("dictPartDescrRI")
	
	'Description 2 & 3	
	f.Intrinsic.String.Build("Select rtrim(r.Router) as Router,If(rtrim(r.Desc_Router_2) <> '',r.Desc_Router_2,Isnull(i.DESCRIPTION_2,'')) as Description_2,If(rtrim(r.Desc_Router_3) <> '',r.Desc_Router_3,Isnull(i.DESCRIPTION_3,'')) as Description_3 from V_Router_Desc r Left JOIN (Select Part,Location,Description_2,Description_3 from Inventory_MST2 where Part in ('{0}') and Location = '{1}') i on r.Router = i.Part where r.Router in ('{0}')",v.Local.sParts,V.Global.sDefaultLoc,v.Local.sSQL)
	f.Data.DataTable.CreateFromSQL("Desc23","conx",v.Local.sSQL,True)
		
	'DESCRIPTION_2: get Router_Desc.Desc_Router_2, if not found, Inventory_Mst2.Description_2
	f.Data.Dictionary.CreateFromDatatable("dictDesc2","Desc23","Router","Description_2")
	f.Data.Dictionary.SetDefaultReturn("dictDesc2","")
	f.Data.DataView.SetFilter("Bom","vFill","Description_2 is Null or Trim(Description_2) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BOM!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BOM!vFill(V.Local.iCnt).PartTrim!FieldValTrim)
		f.Data.DataView.SetValue("Bom","vFill",v.Local.iCnt,"Description_2",v.Dictionary.dictDesc2![v.Local.sAPart])
	f.Intrinsic.Control.Next(v.Local.iCnt)		
	f.Data.Dictionary.Close("dictDesc2")
	
	'DESCRIPTION_3: get Router_Desc.Desc_Router_3, if not found, Inventory_Mst2.Description_3
	f.Data.Dictionary.CreateFromDatatable("dictDesc3","Desc23","Router","Description_3")
	f.Data.Dictionary.SetDefaultReturn("dictDesc3","")
	f.Data.DataView.SetFilter("Bom","vFill","Description_3 is Null or Trim(Description_3) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BOM!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BOM!vFill(V.Local.iCnt).PartTrim!FieldValTrim)
		f.Data.DataView.SetValue("Bom","vFill",v.Local.iCnt,"Description_3",v.Dictionary.dictDesc3![v.Local.sAPart])
	f.Intrinsic.Control.Next(v.Local.iCnt)	
	f.Data.Dictionary.Close("dictDesc3")	
	
	f.Data.DataTable.Close("Desc23")
	
	'Oct 1 2020 Add last resort with inventory description 2 and 3 if there is no router	
	f.Intrinsic.String.Build("Select Part,Description_2,Description_3 from Inventory_MST2 where Part in ('{0}') and Location = '{1}' ",v.Local.sParts,V.Global.sDefaultLoc,v.Local.sSQL)
	f.Data.DataTable.CreateFromSQL("Desc23","conx",v.Local.sSQL,True)
		
	'DESCRIPTION_2: if not found, Inventory_Mst2.Description_2
	f.Data.Dictionary.CreateFromDatatable("dictDesc2","Desc23","Part","Description_2")
	f.Data.Dictionary.SetDefaultReturn("dictDesc2","")
	f.Data.DataView.SetFilter("Bom","vFill","Description_2 is Null or Trim(Description_2) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BOM!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BOM!vFill(V.Local.iCnt).PartTrim!FieldValTrim)
		f.Data.DataView.SetValue("Bom","vFill",v.Local.iCnt,"Description_2",v.Dictionary.dictDesc2![v.Local.sAPart])
	f.Intrinsic.Control.Next(v.Local.iCnt)		
	f.Data.Dictionary.Close("dictDesc2")
	
	'DESCRIPTION_3:if not found, Inventory_Mst2.Description_3
	f.Data.Dictionary.CreateFromDatatable("dictDesc3","Desc23","Part","Description_3")
	f.Data.Dictionary.SetDefaultReturn("dictDesc3","")
	f.Data.DataView.SetFilter("Bom","vFill","Description_3 is Null or Trim(Description_3) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BOM!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BOM!vFill(V.Local.iCnt).PartTrim!FieldValTrim)
		f.Data.DataView.SetValue("Bom","vFill",v.Local.iCnt,"Description_3",v.Dictionary.dictDesc3![v.Local.sAPart])
	f.Intrinsic.Control.Next(v.Local.iCnt)	
	f.Data.Dictionary.Close("dictDesc3")	
	
	f.Data.DataTable.Close("Desc23")
	''''''''''''''''''''''	
	
	f.Data.DataTable.RemoveColumn("Bom","PartTrim")
	
	'Product Line
	'First fill from Router_Header.Prod_Line
	f.Intrinsic.String.Build("Select Rtrim(Router) as Router,Prod_Line from v_Router_Header where Router in ('{0}') ",v.Local.sParts,v.Local.sSQL)
	f.Data.Dictionary.CreateFromSQL("dictPL","conx",v.Local.sSQL)
	f.Data.Dictionary.SetDefaultReturn("dictPL","")
	f.Data.DataView.SetFilter("Bom","vFill","PL is Null or Trim(PL) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BOM!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BOM!vFill(V.Local.iCnt).Part!FieldValTrim)
		f.Data.DataView.SetValue("Bom","vFill",v.Local.iCnt,"PL",v.Dictionary.dictPL![v.Local.sAPart])
	f.Intrinsic.Control.Next(v.Local.iCnt)	
	f.Data.Dictionary.Close("dictPL")	
	'If still empty cells fill from Inventory_Mstr
	f.Data.Dictionary.Exists("PROD_LINES",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("Bom","vFill","PL is Null or Trim(PL) = ''")
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BOM!vFill.RowCount--,0,-1)
			v.Local.sAPart.Set(v.DataView.BOM!vFill(V.Local.iCnt).Part!FieldValTrim)
			f.Data.DataView.SetValue("Bom","vFill",v.Local.iCnt,"PL",v.Dictionary.PROD_LINES![v.Local.sAPart])
		f.Intrinsic.Control.Next(v.Local.iCnt)			
	f.Intrinsic.Control.EndIf
	
	'PURCONSERSION	
	f.Data.Dictionary.Exists("PURCONVERSION",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)		
		f.Data.DataView.SetFilter("Bom","vFill","PURCHASE_FACTOR is Null or PURCHASE_FACTOR = 0")
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BOM!vFill.RowCount--,0,-1)
			v.Local.sAPart.Set(v.DataView.BOM!vFill(V.Local.iCnt).Part!FieldValString)
			f.Data.DataView.SetValue("Bom","vFill",v.Local.iCnt,"PURCHASE_FACTOR",v.Dictionary.PURCONVERSION![v.Local.sAPart.Trim])
		f.Intrinsic.Control.Next(v.Local.iCnt)		
	f.Intrinsic.Control.EndIf
	
	'IssueUM
	f.Data.Dictionary.Exists("IssueUM",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("Bom","vFill","Issue_UM is Null or Trim(Issue_UM) = ''")
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BOM!vFill.RowCount--,0,-1)
			v.Local.sAPart.Set(v.DataView.BOM!vFill(V.Local.iCnt).Part!FieldValString)
			f.Data.DataView.SetValue("Bom","vFill",v.Local.iCnt,"Issue_UM",v.Dictionary.IssueUM![v.Local.sAPart.Trim])
		f.Intrinsic.Control.Next(v.Local.iCnt)	
	f.Intrinsic.Control.EndIf
	
	'ConsumpConv
	f.Data.Dictionary.Exists("ConsumpConv",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("Bom","vFill","Consump_Conv is Null or Consump_Conv = 0")
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BOM!vFill.RowCount--,0,-1)
			v.Local.sAPart.Set(v.DataView.BOM!vFill(V.Local.iCnt).Part!FieldValString)
			f.Data.DataView.SetValue("Bom","vFill",v.Local.iCnt,"Consump_Conv",v.Dictionary.ConsumpConv![v.Local.sAPart.Trim])
		f.Intrinsic.Control.Next(v.Local.iCnt)		
	f.Intrinsic.Control.EndIf	
	
	'Weight
	f.Data.Dictionary.Exists("dictWeight",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("Bom","vFill","Weight is Null or Weight is Null or Weight = 0")
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BOM!vFill.RowCount--,0,-1)
			v.Local.sAPart.Set(v.DataView.BOM!vFill(V.Local.iCnt).Part!FieldValString)
			f.Data.DataView.SetValue("Bom","vFill",v.Local.iCnt,"Weight",v.Dictionary.dictWeight![v.Local.sAPart.Trim])
		f.Intrinsic.Control.Next(v.Local.iCnt)			
	f.Intrinsic.Control.EndIf	
	
	f.Data.DataView.Close("Bom","vFill")	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Fill_Empty_Cells_Bom.End

Program.Sub.Fill_Empty_Cells_BomForRouter.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sFilter.Declare
	v.Local.sParts.Declare
	v.Local.sSQL.Declare
	v.Local.iCnt.Declare
	v.Local.sAPart.Declare
	v.Local.sParents.Declare
	V.Local.bExist.Declare
	
	f.Intrinsic.Control.If(v.DataView.BomForRouter!vFill.Exists)
		f.Data.DataView.Close("BomForRouter","vFill")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("BomForRouter","vFill")
	'Later when setting view, we need to go backward v.local.iCnt because we will set value to view which change the view itself
	
	'DESCR_BP: Fill from Bom_Eng.Description, if empty, fill from Router_Header.Description_Router, else Inventory_Mstr.Description
	f.Data.DataTable.ColumnToString("BomForRouter","Part",v.Local.sParents)
	f.Intrinsic.String.Replace(v.Local.sParents,"'","''",v.Local.sParents)
	f.Intrinsic.String.Replace(v.Local.sParents,"*!*","','",v.Local.sParents)	
	f.Intrinsic.String.Build("Select rtrim(b.Part) as Part,If(rtrim(b.Description) <> '',b.Description,If(IsNull(rtrim(r.Description_Router),'') <> '',r.Description_Router,Isnull(i.Description,''))) from Bom_Eng b LEFT JOIN V_Router_Header r on b.Part = r.Router Left JOIN (Select Part,Location,Description from Inventory_MSTR where Part in ('{0}') and Location = '{1}') i on b.Part = i.Part where b.Part in ('{0}') and b.Location = '{1}'",v.Local.sParents,v.Global.sDefaultLoc,v.Local.sSQL)
	f.Data.Dictionary.CreateFromSQL("dictParentDescr","conx",v.Local.sSQL)
	f.Data.Dictionary.SetDefaultReturn("dictParentDescr","")	
	f.Data.DataView.SetFilter("BomForRouter","vFill","Descr_BP is Null or Trim(Descr_BP) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomForRouter!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BomForRouter!vFill(V.Local.iCnt).BParent!FieldValTrim)
		f.Data.DataView.SetValue("BomForRouter","vFill",v.Local.iCnt,"Descr_BP",v.Dictionary.dictParentDescr![v.Local.sAPart])		
	f.Intrinsic.Control.Next(v.Local.iCnt)	
	f.Data.Dictionary.Close("dictParentDescr")	

	'DESCRIPTION: Fill from Bom_Eng.Description, if empty, fill from Router_Header.Description_Router, else Inventory_Mstr.Description
	f.Data.DataTable.ColumnToString("BomForRouter","Part",v.Local.sParts)
	f.Intrinsic.String.Replace(v.Local.sParts,"'","''",v.Local.sParts)
	f.Intrinsic.String.Replace(v.Local.sParts,"*!*","','",v.Local.sParts)	
	f.Intrinsic.String.Build("Select Rtrim(b.Part) as Part,If(rtrim(b.Description) <> '',b.Description,If(IsNull(rtrim(r.Description_Router),'') <> '',r.Description_Router,Isnull(i.Description,''))) from Bom_Eng b LEFT JOIN V_Router_Header r on b.Part = r.Router Left JOIN (Select Part,Location,Description from Inventory_MSTR where Part in ('{0}') and Location = '{1}') i on b.Part = i.Part where b.Part in ('{0}') and b.Location = '{1}'",v.Local.sParts,v.Global.sDefaultLoc,v.Local.sSQL)
	f.Data.Dictionary.CreateFromSQL("dictPartDescr","conx",v.Local.sSQL)
	f.Data.Dictionary.SetDefaultReturn("dictPartDescr","")
	f.Data.DataTable.AddExpressionColumn("BomForRouter","PartTrim","String","Trim(Part)")
	f.Data.DataView.SetFilter("BomForRouter","vFill","Description is Null or Trim(Description) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomForRouter!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BomForRouter!vFill(V.Local.iCnt).PartTrim!FieldValTrim)
		f.Data.DataView.SetValue("BomForRouter","vFill",v.Local.iCnt,"Description",v.Dictionary.dictPartDescr![v.Local.sAPart])		
	f.Intrinsic.Control.Next(v.Local.iCnt)	
	f.Data.Dictionary.Close("dictPartDescr")	
	'If still empty, get router_header.Description_Router, else Inventory_MSTR.Description
	f.Intrinsic.String.Build("Select rtrim(r.Router) as Router,If(rtrim(r.Description_Router) <> '',r.Description_Router,Isnull(i.Description,'')) from V_Router_Header r Left JOIN (Select Part,Location,Description from Inventory_MSTR where Part in ('{0}') and Location = '{1}') i on r.Router = i.Part where r.Router in ('{0}') ",v.Local.sParts,V.Global.sDefaultLoc,v.Local.sSQL)
	f.Data.Dictionary.CreateFromSQL("dictPartDescrRI","conx",v.Local.sSQL)
	f.Data.Dictionary.SetDefaultReturn("dictPartDescrRI","")	
	f.Data.DataView.SetFilter("BomForRouter","vFill","Description is Null or Trim(Description) = ''")	
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomForRouter!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BomForRouter!vFill(V.Local.iCnt).PartTrim!FieldValTrim)
		f.Data.DataView.SetValue("BomForRouter","vFill",v.Local.iCnt,"Description",v.Dictionary.dictPartDescrRI![v.Local.sAPart])
	f.Intrinsic.Control.Next(v.Local.iCnt)		
	f.Data.Dictionary.Close("dictPartDescrRI")
	
	'Description 2 & 3	
	f.Intrinsic.String.Build("Select rtrim(r.Router) as Router,If(rtrim(r.Desc_Router_2) <> '',r.Desc_Router_2,Isnull(i.DESCRIPTION_2,'')) as Description_2,If(rtrim(r.Desc_Router_3) <> '',r.Desc_Router_3,Isnull(i.DESCRIPTION_3,'')) as Description_3 from V_Router_Desc r Left JOIN (Select Part,Location,Description_2,Description_3 from Inventory_MST2 where Part in ('{0}') and Location = '{1}') i on r.Router = i.Part where r.Router in ('{0}')",v.Local.sParts,V.Global.sDefaultLoc,v.Local.sSQL)
	f.Data.DataTable.CreateFromSQL("Desc23","conx",v.Local.sSQL,True)
		
	'DESCRIPTION_2: get Router_Desc.Desc_Router_2, if not found, Inventory_Mst2.Description_2
	f.Data.Dictionary.CreateFromDatatable("dictDesc2","Desc23","Router","Description_2")
	f.Data.Dictionary.SetDefaultReturn("dictDesc2","")
	f.Data.DataView.SetFilter("BomForRouter","vFill","Description_2 is Null or Trim(Description_2) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomForRouter!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BomForRouter!vFill(V.Local.iCnt).PartTrim!FieldValTrim)
		f.Data.DataView.SetValue("BomForRouter","vFill",v.Local.iCnt,"Description_2",v.Dictionary.dictDesc2![v.Local.sAPart])
	f.Intrinsic.Control.Next(v.Local.iCnt)		
	f.Data.Dictionary.Close("dictDesc2")
	
	'DESCRIPTION_3: get Router_Desc.Desc_Router_3, if not found, Inventory_Mst2.Description_3
	f.Data.Dictionary.CreateFromDatatable("dictDesc3","Desc23","Router","Description_3")
	f.Data.Dictionary.SetDefaultReturn("dictDesc3","")
	f.Data.DataView.SetFilter("BomForRouter","vFill","Description_3 is Null or Trim(Description_3) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomForRouter!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BomForRouter!vFill(V.Local.iCnt).PartTrim!FieldValTrim)
		f.Data.DataView.SetValue("BomForRouter","vFill",v.Local.iCnt,"Description_3",v.Dictionary.dictDesc3![v.Local.sAPart])
	f.Intrinsic.Control.Next(v.Local.iCnt)	
	f.Data.Dictionary.Close("dictDesc3")	
	
	f.Data.DataTable.Close("Desc23")
	
	'Oct 1 2020 Add last resort with inventory description 2 and 3 if there is no router	
	f.Intrinsic.String.Build("Select Part,Description_2,Description_3 from Inventory_MST2 where Part in ('{0}') and Location = '{1}' ",v.Local.sParts,V.Global.sDefaultLoc,v.Local.sSQL)
	f.Data.DataTable.CreateFromSQL("Desc23","conx",v.Local.sSQL,True)
		
	'DESCRIPTION_2: if not found, Inventory_Mst2.Description_2
	f.Data.Dictionary.CreateFromDatatable("dictDesc2","Desc23","Part","Description_2")
	f.Data.Dictionary.SetDefaultReturn("dictDesc2","")
	f.Data.DataView.SetFilter("BomForRouter","vFill","Description_2 is Null or Trim(Description_2) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomForRouter!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BomForRouter!vFill(V.Local.iCnt).PartTrim!FieldValTrim)
		f.Data.DataView.SetValue("BomForRouter","vFill",v.Local.iCnt,"Description_2",v.Dictionary.dictDesc2![v.Local.sAPart])
	f.Intrinsic.Control.Next(v.Local.iCnt)		
	f.Data.Dictionary.Close("dictDesc2")
	
	'DESCRIPTION_3:if not found, Inventory_Mst2.Description_3
	f.Data.Dictionary.CreateFromDatatable("dictDesc3","Desc23","Part","Description_3")
	f.Data.Dictionary.SetDefaultReturn("dictDesc3","")
	f.Data.DataView.SetFilter("BomForRouter","vFill","Description_3 is Null or Trim(Description_3) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomForRouter!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BomForRouter!vFill(V.Local.iCnt).PartTrim!FieldValTrim)
		f.Data.DataView.SetValue("BomForRouter","vFill",v.Local.iCnt,"Description_3",v.Dictionary.dictDesc3![v.Local.sAPart])
	f.Intrinsic.Control.Next(v.Local.iCnt)	
	f.Data.Dictionary.Close("dictDesc3")	
	
	f.Data.DataTable.Close("Desc23")
	''''''''''''''''''''''	
	
	f.Data.DataTable.RemoveColumn("BomForRouter","PartTrim")
	
	'Product Line
	'First fill from Router_Header.Prod_Line
	f.Intrinsic.String.Build("Select Rtrim(Router) as Router,Prod_Line from v_Router_Header where Router in ('{0}') ",v.Local.sParts,v.Local.sSQL)
	f.Data.Dictionary.CreateFromSQL("dictPL","conx",v.Local.sSQL)
	f.Data.Dictionary.SetDefaultReturn("dictPL","")
	f.Data.DataView.SetFilter("BomForRouter","vFill","PL is Null or Trim(PL) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomForRouter!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BomForRouter!vFill(V.Local.iCnt).Part!FieldValTrim)
		f.Data.DataView.SetValue("BomForRouter","vFill",v.Local.iCnt,"PL",v.Dictionary.dictPL![v.Local.sAPart])
	f.Intrinsic.Control.Next(v.Local.iCnt)	
	f.Data.Dictionary.Close("dictPL")	
	'If still empty cells fill from Inventory_Mstr
	f.Data.Dictionary.Exists("PROD_LINES",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("BomForRouter","vFill","PL is Null or Trim(PL) = ''")
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomForRouter!vFill.RowCount--,0,-1)
			v.Local.sAPart.Set(v.DataView.BomForRouter!vFill(V.Local.iCnt).Part!FieldValTrim)
			f.Data.DataView.SetValue("BomForRouter","vFill",v.Local.iCnt,"PL",v.Dictionary.PROD_LINES![v.Local.sAPart])
		f.Intrinsic.Control.Next(v.Local.iCnt)			
	f.Intrinsic.Control.EndIf
	
	'PURCONSERSION	
	f.Data.Dictionary.Exists("PURCONVERSION",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)		
		f.Data.DataView.SetFilter("BomForRouter","vFill","PURCHASE_FACTOR is Null or PURCHASE_FACTOR = 0")
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomForRouter!vFill.RowCount--,0,-1)
			v.Local.sAPart.Set(v.DataView.BomForRouter!vFill(V.Local.iCnt).Part!FieldValString)
			f.Data.DataView.SetValue("BomForRouter","vFill",v.Local.iCnt,"PURCHASE_FACTOR",v.Dictionary.PURCONVERSION![v.Local.sAPart.Trim])
		f.Intrinsic.Control.Next(v.Local.iCnt)		
	f.Intrinsic.Control.EndIf
	
	'IssueUM
	f.Data.Dictionary.Exists("IssueUM",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("BomForRouter","vFill","Issue_UM is Null or Trim(Issue_UM) = ''")
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomForRouter!vFill.RowCount--,0,-1)
			v.Local.sAPart.Set(v.DataView.BomForRouter!vFill(V.Local.iCnt).Part!FieldValString)
			f.Data.DataView.SetValue("BomForRouter","vFill",v.Local.iCnt,"Issue_UM",v.Dictionary.IssueUM![v.Local.sAPart.Trim])
		f.Intrinsic.Control.Next(v.Local.iCnt)	
	f.Intrinsic.Control.EndIf
	
	'ConsumpConv
	f.Data.Dictionary.Exists("ConsumpConv",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("BomForRouter","vFill","Consump_Conv is Null or Consump_Conv = 0")
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomForRouter!vFill.RowCount--,0,-1)
			v.Local.sAPart.Set(v.DataView.BomForRouter!vFill(V.Local.iCnt).Part!FieldValString)
			f.Data.DataView.SetValue("BomForRouter","vFill",v.Local.iCnt,"Consump_Conv",v.Dictionary.ConsumpConv![v.Local.sAPart.Trim])
		f.Intrinsic.Control.Next(v.Local.iCnt)		
	f.Intrinsic.Control.EndIf	
	
	'Weight
	f.Data.Dictionary.Exists("dictWeight",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("BomForRouter","vFill","Weight is Null or Weight is Null or Weight = 0")
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomForRouter!vFill.RowCount--,0,-1)
			v.Local.sAPart.Set(v.DataView.BomForRouter!vFill(V.Local.iCnt).Part!FieldValString)
			f.Data.DataView.SetValue("BomForRouter","vFill",v.Local.iCnt,"Weight",v.Dictionary.dictWeight![v.Local.sAPart.Trim])
		f.Intrinsic.Control.Next(v.Local.iCnt)			
	f.Intrinsic.Control.EndIf	
	
	f.Data.DataView.Close("BomForRouter","vFill")	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Fill_Empty_Cells_BomForRouter.End

Program.Sub.Populate_LongPart_Router.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	f.Intrinsic.Control.If(v.Global.bLongPart)
		F.Data.DataTable.AddDisplayPartColumn("CHILD",0,"PART","DISPLAY_PART2")
		F.Data.DataTable.CopyColumn("CHILD","DISPLAY_PART2","DISPLAY_PART")
		F.Data.DataTable.RemoveColumn("CHILD","DISPLAY_PART2")
	f.Intrinsic.Control.Else
		F.Data.DataTable.CopyColumn("CHILD","PART","DISPLAY_PART")
	f.Intrinsic.Control.EndIf	
	F.Data.DataTable.AcceptChanges("CHILD")	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Populate_LongPart_Router.End

Program.Sub.ReIndex_Bom_WhatSee_Is_WhatGet.Start
'This sub is to reindex the BOM table following the treeview, the BOM table after reindexed will have the order as what you see in the treeview
F.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sIndex.Declare
	v.Local.iCnt.Declare
	v.Local.iInner.Declare
	
	f.Intrinsic.Control.If(v.DataTable.BOM.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'Create Bom_Ord_Temp being indexed	
	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataTable.Bom.RowCount--,1)
		F.Intrinsic.String.Split(V.DataTable.BOM(v.Local.iCnt).CH_Index!FieldValTrim,".",v.Local.sIndex)
		f.Intrinsic.Control.For(v.Local.iInner,0,v.Local.sIndex.UBound,1)
			f.Intrinsic.String.LPad(v.Local.sIndex(v.Local.iInner),"0",3,v.Local.sIndex(v.Local.iInner))
		f.Intrinsic.Control.Next(v.Local.iInner)
		f.Intrinsic.String.Join(v.Local.sIndex,"",v.Local.sIndex)
		f.Intrinsic.String.RPad(v.Local.sIndex,"0",24,v.Local.sIndex)
		f.Data.DataTable.SetValue("Bom",v.Local.iCnt,"Ord",v.Local.sIndex)
	F.Intrinsic.Control.Next(V.Local.iCnt)
	
	f.Data.DataView.Create("Bom","Bom_Ord",22,"","Ord")	
	f.Data.DataView.ToDataTable("Bom","Bom_Ord","TempOrd",True)
	f.Data.DataView.Close("Bom","Bom_Ord")
	
	f.Data.DataTable.DeleteRow("Bom")
	f.Data.DataTable.AcceptChanges("Bom")
	f.Data.DataTable.Merge("TempOrd","Bom",False,2)
	f.Data.DataTable.AcceptChanges("Bom")
	f.Data.DataTable.Close("TempOrd")

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ReIndex_Bom_WhatSee_Is_WhatGet.End

Program.Sub.TreeViewKeySet.Start
'Called only by getBom and getBomByCommit
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)	
	v.Local.sFilter.Declare
	v.Local.iCount.Declare
	v.Local.sParent.Declare
	v.Local.sNode.Declare
	v.Local.sNodeDesc.Declare
	v.Local.fRtrSeq.Declare
	v.Local.sRtrSeq.Declare
	v.Local.sComplete.Declare
	v.Local.sIsBomParentFilter.Declare
	V.Local.sDesc.Declare
	v.Local.bContainPeriod.Declare
	v.Local.sHold.Declare
	v.Local.iHold.Declare
	v.Local.iDec.Declare
	v.Local.sDisplayPart.Declare
	v.Local.sDisplayDesc.Declare
	v.Local.sDisplayUM.Declare
	v.Local.sDisplayList.Declare
	v.Local.sIndexFilter.Declare
	v.Local.iDisplayUM.Declare
	v.Local.iDisplaySource.Declare
	v.Local.iDisplayCategory.Declare
	v.Local.iDisplayCost.Declare
	v.Local.iDisplayPL.Declare
	v.Local.sItem.Declare
	v.Local.iComplete.Declare
	v.Local.iDisplayLoc.Declare
	v.Local.sPartList.Declare
	v.Local.sSQL.Declare
	
	F.Intrinsic.Control.If(v.DataTable.BOM.RowCount,=,0)
		f.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf	
	
	'Mask for Decimal
	f.Intrinsic.Control.CallSub(Build_Mask)
	
	'Add Label Column
	
	'Formatted Columns
	'Index no need
		
	'Qty
	F.Data.DataTable.AddColumn("BOM","QtyStage","String","")
	F.Data.DataTable.SetValueFormat("BOM",-1,"Qty","QtyStage",v.Args.sMaskQty)
	f.Data.DataTable.AddExpressionColumn("BOM","QTY1","String","'Qty: ' + [QtyStage]")
	
	'Part
	f.Data.DataTable.AddExpressionColumn("BOM","PartStage","String","TRIM(PART)")
	f.Data.DataTable.AddExpressionColumn("BOM","Part1","String","'Part: ' + [PartStage]")
	
	'Description
	f.Data.DataTable.AddExpressionColumn("BOM","DescriptionStage","String","TRIM(DESCRIPTION)")
	f.Data.DataTable.AddExpressionColumn("BOM","Description1","String","'Description: ' + [DescriptionStage]")
	
	'UM no need	
	f.Data.DataTable.AddExpressionColumn("BOM","UM1","String","'UM: ' + [UM]")	
	
	'Source
	f.Data.DataTable.AddColumn("BOM","SourceStage","String","")
	f.Data.DataTable.FillFromDictionary("BOM","SOURCE","SOURCE_CODE","SourceStage")
	f.Data.DataTable.AddExpressionColumn("BOM","Source1","String","'Source: ' + [SourceStage]")		
	
	'Category
	F.Data.DataTable.AddColumn("BOM","CategoryStage","String","")
	f.Data.DataTable.FillFromDictionary("BOM","CATEGORY","Cat_Code","CategoryStage")	
	f.Data.DataTable.AddExpressionColumn("BOM","Category1","String","'Category: ' + [CategoryStage]")	

	'Cost
	F.Data.DataTable.AddColumn("BOM","CostStage","String","")
	F.Data.DataTable.SetValueFormat("BOM",-1,"Cost","CostStage",v.Args.sMaskCost)
	f.Data.DataTable.AddExpressionColumn("BOM","Cost1","String","'Cost: ' + [CostStage]")	
	
	'PL no need
	f.Data.DataTable.AddExpressionColumn("BOM","PL1","String","'PL: ' + [PL]")
	
	'PartID
	f.Data.DataTable.AddExpressionColumn("BOM","PartID1","String","IIF(Trim(PartID) = '','','Loc: ' + [PartID])")
	
	'Complete
	F.Data.DataTable.AddExpressionColumn("BOM","Complete1","String","IIF(COMPLETE = 'Y','Completed','')")


	'Display Options per user ccc
	f.Intrinsic.Control.IIF(v.Global.bDisplayUM,=,True,1,0,v.Local.iDisplayUM)
	f.Intrinsic.Control.IIF(v.Global.bDisplaySource,=,True,1,0,v.Local.iDisplaySource)
	f.Intrinsic.Control.IIF(v.Global.bDisplayCategory,=,True,1,0,v.Local.iDisplayCategory)
	f.Intrinsic.Control.IIF(v.Global.bDisplayCost,=,True,1,0,v.Local.iDisplayCost)
	f.Intrinsic.Control.IIF(v.Global.bDisplayPL,=,True,1,0,v.Local.iDisplayPL)
	f.Intrinsic.Control.IIF(v.Global.bDisplayLoc,=,True,1,0,v.Local.iDisplayLoc)
	f.Intrinsic.Control.IIF(v.Global.bDisplayComplete,=,True,1,0,v.Local.iComplete)

	f.Data.DataTable.DeleteRow("dList")
	f.Data.DataTable.AcceptChanges("dList")
	'Index
	f.Data.DataTable.AddRow("dList","Item","CH_Index","IsChecked",v.Screen.Form!chkDisplayLevel.Value,"PrintOrder",v.Global.iNodeIndex)
	'Qty
	f.Intrinsic.Control.IIF(v.Global.bQtyLabel,=,True,"Qty1","QtyStage",v.Local.sItem)
	f.Data.DataTable.AddRow("dList","Item",v.Local.sItem,"IsChecked",v.Screen.Form!chkDisplayQty.Value,"PrintOrder",v.Global.iQtyIndex)
	'Part
	f.Intrinsic.Control.IIF(v.Global.bPartLabel,=,True,"Part1","PartStage",v.Local.sItem)
	f.Data.DataTable.AddRow("dList","Item",v.Local.sItem,"IsChecked",v.Screen.Form!chkDisplayPart.Value,"PrintOrder",v.Global.iPartIndex)
	'Descrition
	f.Intrinsic.Control.IIF(v.Global.bDescrLabel,=,True,"Description1","DescriptionStage",v.Local.sItem)
	f.Data.DataTable.AddRow("dList","Item",v.Local.sItem,"IsChecked",v.Screen.Form!chkDisplayDescr.Value,"PrintOrder",v.Global.iDescrIndex)
	'UM
	f.Intrinsic.Control.IIF(v.Global.bUMLabel,=,True,"UM1","UM",v.Local.sItem)
	f.Data.DataTable.AddRow("dList","Item",v.Local.sItem,"IsChecked",v.Local.iDisplayUM,"PrintOrder",v.Global.iUMIndex)
	'Source
	f.Intrinsic.Control.IIF(v.Global.bSourceLabel,=,True,"Source1","SourceStage",v.Local.sItem)
	f.Data.DataTable.AddRow("dList","Item",v.Local.sItem,"IsChecked",v.Local.iDisplaySource,"PrintOrder",v.Global.iSourceIndex)
	'Category
	f.Intrinsic.Control.IIF(v.Global.bCategoryLabel,=,True,"Category1","CategoryStage",v.Local.sItem)
	f.Data.DataTable.AddRow("dList","Item",v.Local.sItem,"IsChecked",v.Local.iDisplayCategory,"PrintOrder",v.Global.iCategoryIndex)
	'Cost
	f.Intrinsic.Control.IIF(v.Global.bCostLabel,=,True,"Cost1","CostStage",v.Local.sItem)	
	f.Data.DataTable.AddRow("dList","Item",v.Local.sItem,"IsChecked",v.Local.iDisplayCost,"PrintOrder",v.Global.iCostIndex)
	'PL
	f.Intrinsic.Control.IIF(v.Global.bPLLabel,=,True,"PL1","PL",v.Local.sItem)		
	f.Data.DataTable.AddRow("dList","Item",v.Local.sItem,"IsChecked",v.Local.iDisplayPL,"PrintOrder",v.Global.iPLIndex)
	'PL
	f.Intrinsic.Control.IIF(v.Global.bLocLabel,=,True,"PartID1","PartID",v.Local.sItem)		
	f.Data.DataTable.AddRow("dList","Item",v.Local.sItem,"IsChecked",v.Local.iDisplayLoc,"PrintOrder",v.Global.iLocIndex)	
	
	'Complete
	f.Data.DataTable.AddRow("dList","Item","Complete1","IsChecked",v.Local.iComplete,"PrintOrder",v.Global.iCompleteIndex)

	F.Data.DataView.Create("dList","vDispl",22,"IsChecked = 1","PrintOrder")	
	f.Data.DataView.ToString("dList","vDispl","Item","","*!*",v.Local.sDisplayList)
	f.Intrinsic.Control.If(v.Local.sDisplayList,=,"")
		v.Local.sDisplayList.Set("Part")
		gui.Form.chkDisplayPart.Value(1)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.GSSPartString(v.Args.parent,v.Args.rev,v.Local.sParent)
	
	f.Data.DataView.Create("BOM","BOM_PARENT",22)
	'Get Complete dictionary
	f.Data.DataView.ToString("BOM","BOM_PARENT","Part","","#$%^",v.Local.sPartList)	
	f.Intrinsic.String.Replace(v.Local.sPartList,"'","''",v.Local.sPartList)
	f.Intrinsic.String.Replace(v.Local.sPartList,"#$%^","','",v.Local.sPartList)
	f.Intrinsic.String.Build("Select Rtrim(Parent),Bom_Complete from Bom_Mstr where Parent in ('{0}') and Sequence_Bom = '0000'",v.Local.sPartList,v.Local.sSQL)
	f.Data.Dictionary.CreateFromSQL("dictComplete","conx",v.Local.sSQL)
	f.Data.Dictionary.SetDefaultReturn("dictComplete","")
	f.Data.DataTable.FillFromDictionary("Bom","dictComplete","PartTrim2","Complete")
	f.Data.Dictionary.Close("dictComplete")
	
	F.Intrinsic.String.Build("BPARENT = '{0}' and BPARENT = PART",V.Local.sParent.PSQLFriendly,V.Local.sFilter)
	f.Data.DataView.SetFilter("BOM","BOM_PARENT",v.Local.sFilter)

	'Build root node description
	f.Data.DataView.ToString("Bom","BOM_PARENT",V.Local.sDisplayList,"*!*","#$#",v.Local.sNodeDesc)
	f.Intrinsic.String.Split(v.Local.sNodeDesc,"#$#",v.Local.sNodeDesc)	
	v.Local.sNodeDesc.Set(v.Local.sNodeDesc(0))	
	f.Intrinsic.String.Replace(v.Local.sNodeDesc,"*!*","      ",v.Local.sNodeDesc)	
	
	'Just to be sure, clear the treview before adding nodes (event before getbom sub, we already cleared it)
	gui.Form.trvBom.ClearItems
	gui.Form.trvBom.AddTreeNode("",4,0,V.Local.sNodeDesc)

	f.Intrinsic.Control.If(v.DataView.Bom!BOM_PARENT(0).Complete!FieldValTrim,=,"Y",and,v.Global.bBoldComplete,=,True)
		Gui.Form.trvBom.SetNodeProps(0,True,"",True)
	f.Intrinsic.Control.Else
		Gui.Form.trvBom.SetNodeProps(0,False,"",True)
	f.Intrinsic.Control.EndIf	

	
	f.Data.DataView.Create("Bom","vIndex")
	'Get the values for children
	f.Intrinsic.Control.For(v.Local.iCount,0,v.DataTable.BOM.RowCount--,1)
		'Check if it is a child then if true, set the node values
		f.Intrinsic.Control.If(v.DataTable.BOM(v.Local.iCount).PART!FIELDVALTRIM,<>,V.DataTable.BOM(V.Local.iCount).BPARENT!FIELDVALTRIM)

			v.Local.sNode.Set(v.DataTable.BOM(v.Local.iCount).CH_INDEX!FIELDVALTRIM)
			f.Intrinsic.String.Build("CH_Index = '{0}'",v.DataTable.BOM(v.Local.iCount).CH_INDEX!FIELDVALTRIM,v.Local.sIndexFilter)
			
			v.Local.sComplete.Set(V.DataTable.BOM(v.Local.iCount).COMPLETE!FIELDVALTRIM)
						
			'add the tree node	
			F.Intrinsic.String.IsInString(V.Local.sNode,".",True,V.Local.bContainPeriod)
			f.Intrinsic.Control.If(v.Local.bContainPeriod.Not)
				v.Local.sParent.Set(0)
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Split(v.Local.sNode,".",v.Local.sHold)
				f.Intrinsic.Math.Sub(v.Local.sHold.UBound,1,v.Local.iHold)
				v.Local.sHold.RedimPreserve(0,v.Local.iHold)
				f.Intrinsic.String.Join(v.Local.sHold,".",v.Local.sParent)
			f.Intrinsic.Control.EndIf
			'build the description to use for the Tree Node
			''Build description
			f.Data.DataView.SetFilter("Bom","vIndex",v.Local.sIndexFilter)
			f.Data.DataView.ToString("Bom","vIndex",V.Local.sDisplayList,"*!*","#$#",v.Local.sNodeDesc)
			f.Intrinsic.String.Split(v.Local.sNodeDesc,"#$#",v.Local.sNodeDesc)
			v.Local.sNodeDesc.Set(v.Local.sNodeDesc(0))				
			f.Intrinsic.String.Replace(v.Local.sNodeDesc,"*!*","      ",v.Local.sNodeDesc)
							
			gui.Form.trvBom.AddTreeNode(v.Local.sParent.Trim,4,v.Local.sNode.Trim,V.Local.sNodeDesc.Trim)	
			
			F.Intrinsic.Control.If(V.Local.sComplete,=,"Y",and,v.Global.bBoldComplete,=,True)
				gui.Form.trvBom.SetNodeProps(V.Local.sNode,True,"",True)
			F.Intrinsic.Control.Else
				Gui.Form.trvBom.SetNodeProps(V.Local.sNode,False,"",True)
			F.Intrinsic.Control.EndIf

			'update router sequence for 99 sequences (as at this moment the RTR_Seq is blank)
			F.Intrinsic.Control.If(V.DataTable.BOM(V.Local.iCount).RTR_SEQ!FIELDVALString,<,"1")
			
				'if a BOM was imported and no routers ever built in GSS, any material RTR_SEQ could be blank.
				'router sequence for manufactured to stock
				F.Intrinsic.Math.Add(V.Local.fRtrSeq,V.Global.iRSeq,V.Local.fRtrSeq)
				f.Intrinsic.String.LPad(v.Local.fRtrSeq,"0",6,v.Local.sRtrSeq)
				f.Data.DataTable.SetValue("BOM",V.Local.iCount,"RTR_SEQ",V.Local.sRtrSeq)				
			F.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.Else
			
			'this sets the starting value for all manufactured sub components
			v.Local.fRtrSeq.Set(990000)
			F.Data.DataTable.SetValue("BOM",V.Local.iCount,"RTR_SEQ","000000")
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.iCount)		
	f.Data.DataView.Close("Bom","vIndex")
	F.Data.DataView.Close("BOM","BOM_PARENT")	

	'Remove columns
	f.Data.DataTable.RemoveColumn("BOM","QTY1")
	f.Data.DataTable.RemoveColumn("BOM","QtyStage")

	f.Data.DataTable.RemoveColumn("BOM","Part1")	
	f.Data.DataTable.RemoveColumn("BOM","PartStage")

	f.Data.DataTable.RemoveColumn("BOM","Description1")	
	f.Data.DataTable.RemoveColumn("BOM","DescriptionStage")
	
	f.Data.DataTable.RemoveColumn("BOM","UM1")
	
	f.Data.DataTable.RemoveColumn("BOM","Source1")	
	f.Data.DataTable.RemoveColumn("BOM","SourceStage")
	
	f.Data.DataTable.RemoveColumn("BOM","Category1")	
	f.Data.DataTable.RemoveColumn("BOM","CategoryStage")
	
	f.Data.DataTable.RemoveColumn("BOM","Cost1")	
	f.Data.DataTable.RemoveColumn("BOM","CostStage")
	
	f.Data.DataTable.RemoveColumn("BOM","PL1")		
	
	f.Data.DataTable.RemoveColumn("BOM","PartID1")
	
	f.Data.DataTable.RemoveColumn("BOM","Complete1")
	
	F.Data.DataTable.AcceptChanges("BOM")
	
	f.Data.DataView.Close("dList","vDispl")	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.TreeViewKeySet.End

Program.Sub.Build_Mask.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)	
	v.Local.sMaskQty.Declare
	v.Local.sMaskCost.Declare
	v.Local.iDec.Declare
	v.Local.sMaskWeight.Declare

	'Mask for Decimal
	f.Intrinsic.Control.If(v.Global.sDecimalQty,=,"0")
		v.Local.sMaskQty.Set("###,###,###,##0")
	f.Intrinsic.Control.Else
		f.Intrinsic.Math.Add(16,v.Global.sDecimalQty,v.Local.iDec)
		f.Intrinsic.String.RPad("###,###,###,##0.","0",v.Local.iDec,v.Local.sMaskQty)	
	f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.If(v.Global.sDecimalCost,=,"0")
		v.Local.sMaskCost.Set("###,###,###,##0")
	f.Intrinsic.Control.Else
		f.Intrinsic.Math.Add(16,v.Global.sDecimalCost,v.Local.iDec)
		f.Intrinsic.String.RPad("###,###,###,##0.","0",v.Local.iDec,v.Local.sMaskCost)
	f.Intrinsic.Control.endif	
	
	f.Intrinsic.Control.If(v.Global.sDecimalWeight,=,"0")
		v.Local.sMaskWeight.Set("###,###,###,##0")
	f.Intrinsic.Control.Else
		f.Intrinsic.Math.Add(16,v.Global.sDecimalWeight,v.Local.iDec)
		f.Intrinsic.String.RPad("###,###,###,##0.","0",v.Local.iDec,v.Local.sMaskWeight)
	f.Intrinsic.Control.endif	
	
	f.Intrinsic.Variable.AddRV("sMaskQty",v.Local.sMaskQty)
	f.Intrinsic.Variable.AddRV("sMaskCost",v.Local.sMaskCost)
	f.Intrinsic.Variable.AddRV("sMaskWeight",v.Local.sMaskWeight)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.Build_Mask.End

Program.Sub.Build_Mask_Cost.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)	
	v.Local.sMaskCost.Declare
	v.Local.iDec.Declare

	f.Intrinsic.Control.If(v.Global.sDecimalCost,=,"0")
		v.Local.sMaskCost.Set("###,###,###,##0")
	f.Intrinsic.Control.Else
		f.Intrinsic.Math.Add(16,v.Global.sDecimalCost,v.Local.iDec)
		f.Intrinsic.String.RPad("###,###,###,##0.","0",v.Local.iDec,v.Local.sMaskCost)
	f.Intrinsic.Control.endif	
	
	f.Intrinsic.Variable.AddRV("sMaskCost",v.Local.sMaskCost)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.Build_Mask_Cost.End

Program.Sub.buildRouterGrid_From_GetRtrIfHasBomGetBom.Start
'This sub is only called from cmdBrwRouter_Click with precondition that the BOM table exists and has at least 1 row
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sParent.Declare
	v.Local.bExists.Declare
	v.Local.sFilter.Declare
	v.Local.iRet.Declare
	V.Local.fBomSeq.Declare
	v.Local.fRTRSeq.Declare
	V.Local.iCount.Declare
	v.Local.sPart.Declare
	v.Local.sRev.Declare
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	V.Local.iIndex.Declare
	V.Local.fCost.Declare
	v.Local.fPurch_Factor.Declare
	v.Local.fPurch.Declare
	
	f.Intrinsic.Control.If(v.DataTable.TEMP_CHILD.Exists,=,True)
		f.Data.DataTable.Close("TEMP_CHILD")
	f.Intrinsic.Control.EndIf
	
	'v.args.Parent is PSQLFriendly so don't need to treat again
	f.Intrinsic.String.Build("[BPARENT] = '{0}'",V.Args.PARENT,V.Local.sFilter)
	f.Data.DataView.SetFilter("BOM","V_BOM",V.Local.sFilter)

	f.Data.DataView.ToDataTable("BOM","V_BOM","TEMP_CHILD",True)
	'filter the view and add these records to the 'child' data table.

	'Make grid Router invisible
	gui.Form.GGC_Bom.visible(False)

	'Prepare to merge from TEMP_CHILD  to CHILD
	f.Data.DataTable.AddColumn("TEMP_CHILD","LMO","STRING","M",1)
	F.Data.DataTable.Merge("TEMP_CHILD","CHILD",FALSE,2)
	F.Intrinsic.Control.CallSub(Resequence99sOrderNaturalIndex)
	'Set Mainview for grid Router
	'gui.Form.GGC_Bom.MainView("GV_CHILD")
	
	gui.Form.txtBomQty.Text(V.DataTable.CHILD(0).QTY!FIELDVALFLOAT)	
	
	'Seems to get the last sequence number of router_Seq and of Bom_Seq?
	F.Intrinsic.Control.For(V.Local.iCount,0,v.DataTable.CHILD.RowCount--,1)
		F.Intrinsic.Control.If(V.DataTable.CHILD(V.Local.iCount).RTR_SEQ!FIELDVALTRIM,<,"990000")
			v.local.fBomSeq.Set(v.DataTable.CHILD(v.Local.iCount).BOM_SEQ!FIELDVALTRIM)
			V.local.fRTRSeq.Set(v.DataTable.CHILD(v.Local.iCount).RTR_SEQ!FIELDVALTRIM)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCount)
	
	F.Intrinsic.Control.CallSub(getRouter,"PART",V.Args.PARENT,"DESCR",V.DataTable.CHILD(0).DESCR_BP!FIELDVALSTRING,"BSEQ",V.Local.fBomSeq,"RSEQ",V.Local.fRTRSeq)
		
	f.Intrinsic.Control.If(v.DataTable.CHILD(0).COMPLETE!FIELDVALTRIM,=,"Y")
		'ROUTER is complete
		f.Intrinsic.Control.If(V.Global.iRights,<,2)
			'Cannot change the grid if no right or be an ESTIMATOR
			v.Global.bReadOnly.Set(True)
		f.Intrinsic.Control.Else
			'Still can change the grid if ENGINEER
			v.Global.bReadOnly.Set(False)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		'Router is NOT complete
		f.Intrinsic.Control.If(V.Global.iRights,>,0)
			'Can change if ESTIMATE/ENGINEER
			v.Global.bReadOnly.Set(False)
		f.Intrinsic.Control.Else
			'Can not change if no right
			v.Global.bReadOnly.Set(True)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	'just making sure the temp datatable gets closed out before we exit this sub
	f.Intrinsic.Control.If(v.DataTable.TEMP_CHILD.Exists,=,True)
		f.Data.DataTable.Close("TEMP_CHILD")
	f.Intrinsic.Control.EndIf
	
	'extend the cost for material sequences only
	f.Data.DataTable.SetValueFormat("Child",-1,"PurchCost2","Purch_Cost","0.00000000")

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.buildRouterGrid_From_GetRtrIfHasBomGetBom.End

Program.Sub.Fill_From_Dictionaries_CHILD.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bExist.Declare
	v.Local.iCnt.Declare
	v.Local.sKey.Declare
	
	f.Intrinsic.Control.If(v.DataView.CHILD!vFill.Exists)
		f.Data.DataView.Close("CHILD","vFill")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("CHILD","vFill")
	f.Data.Dictionary.Exists("SOURCE",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("CHILD","vFill","SOURCE is Null or Trim(Source) = ''")
		F.Intrinsic.Control.For(V.Local.iCnt,V.DataView.CHILD!vFill.RowCount--,0,-1)				
			v.Local.sKey.Set(v.DataView.CHILD!vFill(v.Local.iCnt).SOURCE_CODE!FieldValTrim)
			f.Data.DataView.SetValue("CHILD","vFill",v.Local.iCnt,"SOURCE",v.Dictionary.SOURCE![V.Local.sKey])		
		F.Intrinsic.Control.Next(V.Local.iCnt)	
	f.Intrinsic.Control.EndIf	

	f.Data.Dictionary.Exists("CATEGORY",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("CHILD","vFill","CATEGORY is Null or Trim(CATEGORY) = ''")
		F.Intrinsic.Control.For(V.Local.iCnt,V.DataView.CHILD!vFill.RowCount--,0,-1)				
			v.Local.sKey.Set(v.DataView.CHILD!vFill(v.Local.iCnt).CAT_CODE!FieldValTrim)
			f.Data.DataView.SetValue("CHILD","vFill",v.Local.iCnt,"CATEGORY",v.Dictionary.CATEGORY![V.Local.sKey])		
		F.Intrinsic.Control.Next(V.Local.iCnt)	
	f.Intrinsic.Control.EndIf
	
	f.Data.Dictionary.Exists("PURCONVERSION",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("CHILD","vFill","PURCHASE_FACTOR is Null or PURCHASE_FACTOR = 0")
		F.Intrinsic.Control.For(V.Local.iCnt,V.DataView.CHILD!vFill.RowCount--,0,-1)				
			v.Local.sKey.Set(v.DataView.CHILD!vFill(v.Local.iCnt).PART!FieldValString)
			f.Data.DataView.SetValue("CHILD","vFill",v.Local.iCnt,"PURCHASE_FACTOR",v.Dictionary.PURCONVERSION![V.Local.sKey.Trim])		
		F.Intrinsic.Control.Next(V.Local.iCnt)	
	f.Intrinsic.Control.EndIf
	
	f.Data.Dictionary.Exists("IssueUM",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("CHILD","vFill","Issue_UM is Null or Trim(Issue_UM) = ''")
		F.Intrinsic.Control.For(V.Local.iCnt,V.DataView.CHILD!vFill.RowCount--,0,-1)				
			v.Local.sKey.Set(v.DataView.CHILD!vFill(v.Local.iCnt).PART!FieldValString)
			f.Data.DataView.SetValue("CHILD","vFill",v.Local.iCnt,"Issue_UM",v.Dictionary.IssueUM![V.Local.sKey.Trim])		
		F.Intrinsic.Control.Next(V.Local.iCnt)	
	f.Intrinsic.Control.EndIf
	
	f.Data.Dictionary.Exists("ConsumpConv",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("CHILD","vFill","Consump_Conv is Null or Consump_Conv = 0")
		F.Intrinsic.Control.For(V.Local.iCnt,V.DataView.CHILD!vFill.RowCount--,0,-1)				
			v.Local.sKey.Set(v.DataView.CHILD!vFill(v.Local.iCnt).PART!FieldValString)
			f.Data.DataView.SetValue("CHILD","vFill",v.Local.iCnt,"Consump_Conv",v.Dictionary.ConsumpConv![V.Local.sKey.Trim])		
		F.Intrinsic.Control.Next(V.Local.iCnt)		
	f.Intrinsic.Control.EndIf	
	
	f.Data.Dictionary.Exists("dictWeight",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("CHILD","vFill","Weight is Null or Weight = 0")
		F.Intrinsic.Control.For(V.Local.iCnt,V.DataView.CHILD!vFill.RowCount--,0,-1)				
			v.Local.sKey.Set(v.DataView.CHILD!vFill(v.Local.iCnt).PART!FieldValString)
			f.Data.DataView.SetValue("CHILD","vFill",v.Local.iCnt,"Weight",v.Dictionary.dictWeight![V.Local.sKey.Trim])		
		F.Intrinsic.Control.Next(V.Local.iCnt)
	f.Intrinsic.Control.EndIf		

	f.Data.DataTable.FillFromDictionary("CHILD","Prop_Code","PartTrim2","Shape")
	
	f.Data.DataTable.FillFromDictionary("CHILD","dictMQD","PartTrim2","MQD")

	f.Data.DataTable.AcceptChanges("CHILD")
	f.Data.DataView.Close("CHILD","vFill")

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.Fill_From_Dictionaries_CHILD.End

Program.Sub.Fill_From_Dictionaries_CHILD_STAGE.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bExist.Declare
	v.Local.iCnt.Declare
	v.Local.sKey.Declare
	
	f.Intrinsic.Control.If(v.DataView.CHILD_STAGE!vFill.Exists)
		f.Data.DataView.Close("CHILD_STAGE","vFill")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("CHILD_STAGE","vFill")

	f.Data.Dictionary.Exists("SOURCE",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("CHILD_STAGE","vFill","Source is Null or Trim(Source) = ''")
		F.Intrinsic.Control.For(V.Local.iCnt,V.DataView.CHILD_STAGE!vFill.RowCount--,0,-1)				
			v.Local.sKey.Set(v.DataView.CHILD_STAGE!vFill(v.Local.iCnt).SOURCE_CODE!FieldValTrim)
			f.Data.DataView.SetValue("CHILD_STAGE","vFill",v.Local.iCnt,"SOURCE",v.Dictionary.SOURCE![V.Local.sKey])		
		F.Intrinsic.Control.Next(V.Local.iCnt)	
	f.Intrinsic.Control.EndIf	

	f.Data.Dictionary.Exists("CATEGORY",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("CHILD_STAGE","vFill","CATEGORY is Null or Trim(CATEGORY) = ''")
		F.Intrinsic.Control.For(V.Local.iCnt,V.DataView.CHILD_STAGE!vFill.RowCount--,0,-1)				
			v.Local.sKey.Set(v.DataView.CHILD_STAGE!vFill(v.Local.iCnt).CAT_CODE!FieldValTrim)
			f.Data.DataView.SetValue("CHILD_STAGE","vFill",v.Local.iCnt,"CATEGORY",v.Dictionary.CATEGORY![V.Local.sKey])		
		F.Intrinsic.Control.Next(V.Local.iCnt)	
	f.Intrinsic.Control.EndIf
	
	f.Data.Dictionary.Exists("PURCONVERSION",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("CHILD_STAGE","vFill","PURCHASE_FACTOR is Null or PURCHASE_FACTOR = 0")
		F.Intrinsic.Control.For(V.Local.iCnt,V.DataView.CHILD_STAGE!vFill.RowCount--,0,-1)				
			v.Local.sKey.Set(v.DataView.CHILD_STAGE!vFill(v.Local.iCnt).PART!FieldValString)
			f.Data.DataView.SetValue("CHILD_STAGE","vFill",v.Local.iCnt,"PURCHASE_FACTOR",v.Dictionary.PURCONVERSION![V.Local.sKey.Trim])		
		F.Intrinsic.Control.Next(V.Local.iCnt)	
	f.Intrinsic.Control.EndIf
	
	f.Data.Dictionary.Exists("IssueUM",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("CHILD_STAGE","vFill","Issue_UM is Null or Trim(Issue_UM) = ''")
		F.Intrinsic.Control.For(V.Local.iCnt,V.DataView.CHILD_STAGE!vFill.RowCount--,0,-1)				
			v.Local.sKey.Set(v.DataView.CHILD_STAGE!vFill(v.Local.iCnt).PART!FieldValString)
			f.Data.DataView.SetValue("CHILD_STAGE","vFill",v.Local.iCnt,"Issue_UM",v.Dictionary.IssueUM![V.Local.sKey.Trim])		
		F.Intrinsic.Control.Next(V.Local.iCnt)	
	f.Intrinsic.Control.EndIf
	
	f.Data.Dictionary.Exists("ConsumpConv",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("CHILD_STAGE","vFill","Consump_Conv is Null or Consump_Conv = 0")
		F.Intrinsic.Control.For(V.Local.iCnt,V.DataView.CHILD_STAGE!vFill.RowCount--,0,-1)				
			v.Local.sKey.Set(v.DataView.CHILD_STAGE!vFill(v.Local.iCnt).PART!FieldValString)
			f.Data.DataView.SetValue("CHILD_STAGE","vFill",v.Local.iCnt,"Consump_Conv",v.Dictionary.ConsumpConv![V.Local.sKey.Trim])		
		F.Intrinsic.Control.Next(V.Local.iCnt)		
	f.Intrinsic.Control.EndIf	
	
	f.Data.Dictionary.Exists("dictWeight",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("CHILD_STAGE","vFill","Weight is Null or Weight = 0")
		F.Intrinsic.Control.For(V.Local.iCnt,V.DataView.CHILD_STAGE!vFill.RowCount--,0,-1)				
			v.Local.sKey.Set(v.DataView.CHILD_STAGE!vFill(v.Local.iCnt).PART!FieldValString)
			f.Data.DataView.SetValue("CHILD_STAGE","vFill",v.Local.iCnt,"Weight",v.Dictionary.dictWeight![V.Local.sKey.Trim])		
		F.Intrinsic.Control.Next(V.Local.iCnt)
	f.Intrinsic.Control.EndIf		
	
	f.Data.DataTable.FillFromDictionary("CHILD_Stage","Prop_Code","PartTrim2","Shape")

	f.Data.DataTable.AcceptChanges("CHILD_STAGE")
	f.Data.DataView.Close("CHILD_STAGE","vFill")

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.Fill_From_Dictionaries_CHILD_STAGE.End

Program.Sub.GetRouterOnly_From_GetRtrIfHasBomGetBom.Start
'This sub is called from GetRouter_If_HasBom_GetBom
'Parent Part 20 chars is passed as arguments
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	v.Local.iCount.Declare
	v.Local.fExt.Declare
	v.Local.sPart.Declare
	
	V.Local.fCost.Declare
	v.Local.fPurch_Factor.Declare
	v.Local.fPurch.Declare	
	v.Local.iIndex.Declare	
	
	v.Local.sPart.Set(v.Args.PART.Trim)	
	
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)
		f.Data.DataTable.AddRow("CHILD","BPARENT",v.Local.sPart,"BOM_SEQ","0000","RTR_SEQ","000000","PART",v.Local.sPart,"LMO","M","TIER",0,"CTIER",0)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.TEMP_CHILD.Exists,=,True)
		f.Data.DataTable.Close("TEMP_CHILD")
	f.Intrinsic.Control.EndIf
	
	'calling sub passing args.part
	f.Intrinsic.String.Build("SELECT RL.ROUTER AS BPARENT, RL.LINE_ROUTER AS RTR_SEQ, IF(RL.FLAG_MAIN_COMMENT = 'T','T',RL.LMO) AS LMO, IF(RL.LMO = 'M', 'N', RL.LMO) AS CAT_CODE, RL.PART_WC_OUTSIDE AS PART, RL.DESC_RT_LINE AS DESCRIPTION, RL.OPERATION AS OP_CODE, RL.SET_UP, RL.FREQUENCY, RL.SIGNOFF_GRPUSR, RL.SIGNOFF_TYPE, RL.RUN_TIME AS QTY, RL.RATE AS COST, C.TEXT AS COMMENTS, RL.UM_INVENTORY AS UM, '' AS SOURCE_CODE, rl.sort_code,rl.Lead_Time as Lead,Amt_Minimum,WC_Factor FROM ROUTER_LINE RL LEFT JOIN V_RTR_SEQ_COMMENTS C ON RL.ROUTER = C.RTR_NUMBER AND RL.LINE_ROUTER = C.RTR_SEQ WHERE RL.ROUTER = '{0}' and IsNull(Router_Type,'') = 'L' ",v.Local.sPart.PSQLFriendly,V.Local.sSql)	
	f.Data.DataTable.CreateFromSQL("TEMP_CHILD","conx",V.Local.sSql,True)
	f.Data.DataTable.AddExpressionColumn("TEMP_CHILD","PartTrim2","String","Trim([Part])")
	'Removed joining with I2 with location = sdefaultloc, instead use dictionary to find Source_Code
	f.Data.DataTable.FillFromDictionary("TEMP_CHILD","Part_SourceCode","PartTrim2","SOURCE_CODE")
	
	'New version will auto calculate extended
	
	f.Data.DataTable.AddColumn("TEMP_CHILD","BOM_SEQ","STRING","0000")
	F.Data.DataTable.AddColumn("TEMP_CHILD","DESCR_BP","STRING"," ")
	f.Data.DataTable.SetValue("TEMP_CHILD",-1,"DESCR_BP",v.Screen.Form!txtFocusDescr.Text)
	f.Data.DataTable.Merge("TEMP_CHILD","CHILD",FALSE,2)
		
	'extend the cost for material sequences only
	f.Data.DataTable.SetValueFormat("Child",-1,"PurchCost2","Purch_Cost","0.00000000")
	
	f.Data.DataTable.Close("TEMP_CHILD")
	
	F.Intrinsic.Control.If(V.DataView.CHILD!V_CHILD.Exists,=,False)
		f.Data.DataView.Create("CHILD","V_CHILD",22,"RTR_SEQ <> '000000' AND Part <> '~~~@!@~~~@!@'","RTR_SEQ ASC, BOM_SEQ ASC")
	F.Intrinsic.Control.EndIf
	F.Data.DataView.SetSort("CHILD","V_CHILD","RTR_SEQ ASC, BOM_SEQ ASC")	
	
	f.Data.Datatable.SetValueFormat("Child",-1,"Ext2","Extended","0.000")
	gui.Form.GGC_Bom.MainView("GV_CHILD")	
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GetRouterOnly_From_GetRtrIfHasBomGetBom.End

Program.Sub.GetRouter.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sBomSeq.Declare
	V.Local.bComplete.Declare
	v.Local.iCount.Declare
	v.Local.fExt.Declare
	V.Local.fSetUp.Declare
	v.Local.bExists.Declare
	v.Local.sRet.Declare
	v.Local.sPart.Declare
	V.Local.sSeqList.Declare
	v.Local.sSQL2.Declare
	v.Local.iTime.Declare
	v.Local.sIndex.Declare
	v.Local.sPart.Set(v.Args.Part.Trim)
	
	'RSEQ
	'get the complete flag for the router
	f.Intrinsic.String.Build("select Top 1 COMPLETE from ROUTER_SUPP_HDR with (index (RTRSUPHDR498601)) where RTR_NUM = '{0}' and Suffix = '' and Type = 'H' ",v.Local.sPart.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(v.local.sSql,v.Local.sRet)	
	F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
		v.Local.bComplete.Set(v.Local.sRet)
	F.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.If(v.Local.bComplete)
		gui.Form.chkRtrComp.Value(1)
	f.Intrinsic.Control.EndIf
	

	'get the header information
	f.Intrinsic.String.Build("Select Top 1 ROUTER, DESCRIPTION_ROUTER, PROD_LINE, UM_INVENTORY, CUSTOMER from ROUTER_HEADER with (index (RTRHdr498601)) WHERE ROUTER = '{0}' AND Router_Suffix = '' and Router_Type = 'H'",v.Local.sPart.PSQLFriendly,V.Local.sSql)
	F.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		gui.Form.txtFocusDescr.Text(v.Local.sRet(1))
		gui.Form.txtPL.Text(v.Local.sRet(2))
		gui.Form.txtUM.Text(v.Local.sRet(3))
		gui.Form.txtRtrCust.Text(v.Local.sRet(4))
	f.Intrinsic.Control.EndIf	
		
	'calling sub passed args.part and possibly args.qty
	'if args.qty this just means we are doing a build quantity update - therefore we need to include the M sequences from the router when we retrieve the data from core.
	f.Intrinsic.Variable.ArgExists("QTY",V.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists)
		f.Intrinsic.String.Build("SELECT R.ROUTER AS BPARENT, R.LINE_ROUTER AS RTR_SEQ, R.LMO, R.LMO AS CAT_CODE,Cast('' as CHAR(1)) as SOURCE,Cast('' as CHAR(1)) as SOURCE_CODE, R.PART_WC_OUTSIDE AS PART, R.DESC_RT_LINE AS DESCRIPTION,'' as COMMENTS, R.OPERATION AS OP_CODE, R.SET_UP, R.FREQUENCY, R.RUN_TIME AS QTY, R.UM_INVENTORY AS UM, R.SIGNOFF_GRPUSR, R.SIGNOFF_TYPE, R.RATE AS COST, r.Sort_code,r.Lead_Time as Lead,r.Amt_Minimum,WC_Factor FROM ROUTER_LINE R  with (index (RTRLine498601)) WHERE ROUTER = '{0}' and Router_Suffix = ''  and Router_Type = 'L' ORDER BY RTR_SEQ ASC",v.Local.sPart.PSQLFriendly,V.Local.sSql)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("SELECT R.ROUTER AS BPARENT, R.LINE_ROUTER AS RTR_SEQ, R.LMO, R.LMO AS CAT_CODE,Cast('' as CHAR(1)) as SOURCE,Cast('' as CHAR(1)) as SOURCE_CODE, R.PART_WC_OUTSIDE AS PART, R.DESC_RT_LINE AS DESCRIPTION,'' AS COMMENTS, R.OPERATION AS OP_CODE, R.SET_UP, R.FREQUENCY, R.RUN_TIME AS QTY, R.UM_INVENTORY AS UM, R.SIGNOFF_GRPUSR, R.SIGNOFF_TYPE, R.RATE AS COST, r.Sort_Code,r.Lead_Time as Lead,r.Amt_Minimum,WC_Factor FROM ROUTER_LINE R with (index (RTRLine498602)) WHERE ROUTER = '{0}' and Router_Suffix = ''  and Router_Type = 'L' and  LMO <> 'M' ORDER BY RTR_SEQ ASC",v.Local.sPart.PSQLFriendly,V.Local.sSql)
		
		f.Data.DataView.Create("CHILD","v_EX",22,"RTR_SEQ > '000000' AND RTR_SEQ < '990000' and LMO = 'M'","")
		F.Data.DataView.ToString("CHILD","V_EX","RTR_SEQ","","','",V.Local.sSeqList)
		f.Data.DataView.Close("CHILD","V_EX")
		
		f.Intrinsic.String.Build("SELECT R.ROUTER AS BPARENT, R.LINE_ROUTER AS RTR_SEQ, R.LMO, R.LMO AS CAT_CODE,Cast('' as CHAR(1)) as SOURCE,Cast('' as CHAR(1)) as SOURCE_CODE, R.PART_WC_OUTSIDE AS PART, R.DESC_RT_LINE AS DESCRIPTION,'' as COMMENTS, R.OPERATION AS OP_CODE, R.SET_UP, R.FREQUENCY, R.RUN_TIME AS QTY, R.UM_INVENTORY AS UM, R.SIGNOFF_GRPUSR, R.SIGNOFF_TYPE, R.RATE AS COST, r.Sort_Code,r.Lead_Time as Lead,r.Amt_Minimum,WC_Factor FROM ROUTER_LINE R with (index (RTRLine498603)) WHERE ROUTER = '{0}' and Router_Suffix = ''  and Router_Type = 'L' and LMO = 'M' and R.LINE_ROUTER not in ('{1}') ORDER BY RTR_SEQ ASC",v.Local.sPart.PSQLFriendly,v.Local.sSeqList,V.Local.sSql2)		
		f.Intrinsic.Control.If(v.DataTable.T2.Exists)
			f.Data.DataTable.Close("T2")
		f.Intrinsic.Control.EndIf
		
		f.Data.DataTable.CreateFromSQL("T2","conx",V.Local.sSql2,True)
		
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(v.DataTable.TEMP_CHILD.Exists,=,True)
		f.Data.DataTable.Close("TEMP_CHILD")
	f.Intrinsic.Control.EndIf
	'create a temp datatable to be edited and merged with "child".TYPE	
	f.Data.DataTable.CreateFromSQL("TEMP_CHILD","conx",V.Local.sSql,True)
	f.Data.DataTable.AddExpressionColumn("TEMP_CHILD","PartTrim2","String","Trim([Part])")
	
	F.Intrinsic.Control.If(V.DataTable.T2.Exists)
		f.Intrinsic.Control.If(v.DataTable.T2.RowCount,>,0)
			f.Data.DataTable.Merge("T2","TEMP_CHILD",False,2)
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.T2.Exists)
		f.Data.DataTable.Close("T2")
	f.Intrinsic.Control.EndIf
	
	F.Data.DataTable.AddColumn("TEMP_CHILD","TYPE","STRING")
	
	f.Data.DataTable.FillFromDictionary("TEMP_CHILD","Part_SourceCode","PartTrim2","SOURCE_CODE")
	f.Data.DataTable.FillFromDictionary("TEMP_CHILD","Part_Source","PartTrim2","Source")
	
	'New version will auto calculate extended
	
	'to help with key index, we are setting the BOM_SEQ equal to the last material sequence that would appear in a work order prior to any L,O sequences.
	f.Intrinsic.String.LPad(v.Args.BSEQ,"0",4,V.Local.sBomSeq)	
	
	f.Data.DataTable.AddColumn("TEMP_CHILD","BOM_SEQ","STRING",V.Local.sBomSeq)
	F.Data.DataTable.AddColumn("TEMP_CHILD","DESCR_BP","STRING",V.Args.DESCR)
	f.Data.DataTable.Merge("TEMP_CHILD","CHILD",FALSE,2)
		
	'As the router line comments for M sequences are missing, we need to repopulate here	
	f.Intrinsic.String.Build("select Rtr_Seq,Text from RTR_SEQ_COMMENTS where Rtr_Number = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
	f.Data.Dictionary.CreateFromSQL("CmtDict","conx",v.Local.sSql)
	F.Data.Dictionary.SetDefaultReturn("CmtDict","")
	f.Data.DataTable.FillFromDictionary("CHILD","CmtDict","RTR_SEQ","COMMENTS")
	F.Data.Dictionary.Close("CmtDict")	

	F.Intrinsic.Control.If(V.DataView.CHILD!V_CHILD.Exists,=,False)
		f.Data.DataView.Create("CHILD","V_CHILD",22,"RTR_SEQ <> '000000' AND Part <> '~~~@!@~~~@!@'","RTR_SEQ ASC, BOM_SEQ ASC")
	F.Intrinsic.Control.EndIf
	F.Data.DataView.SetSort("CHILD","V_CHILD","RTR_SEQ ASC, BOM_SEQ ASC")
	
	'gui.Form.GGC_Bom.MainView("GV_CHILD")	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GetRouter.End

Program.Sub.trvBom_NodeClick.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sFilter.Declare
	v.Local.sParent.Declare
	v.Local.iRet.Declare
	v.Local.iX.Declare
	v.Local.iY.Declare
	v.Local.sPart.Declare
	v.Local.sPart1.Declare
	v.Local.sPart2.Declare
	v.Local.sPartColIndex.Declare
	v.Local.sRet.Declare	
	
	v.Global.sBomTreeNodeClickKey.Set(v.Args.KEY)
		
	'get PART clicked from the CH_INDEX (node key) that was passed
	f.Intrinsic.String.Build("CH_INDEX = '{0}'",V.Global.sBomTreeNodeClickKey.PSQLFriendly,v.Local.sFilter)
	f.Data.DataView.Create("BOM","BOM_INDEX",22,v.Local.sFilter,"BOM_SEQ ASC")
	f.Intrinsic.Control.If(v.DataView.BOM!BOM_INDEX.RowCount,>,0)
		v.Local.sPart.Set(V.DataView.BOM!BOM_INDEX(0).Part!FIELDVALTrim)
		f.Data.DataView.Close("BOM","BOM_INDEX")
	f.Intrinsic.Control.Else
		f.Data.DataView.Close("BOM","BOM_INDEX")
		f.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf		
	
	'Focus Paralell
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.Text.Trim,v.Screen.Form!txtFocusRev.Text.Trim,v.Local.sPart1)
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtParent.Text.Trim,v.Screen.Form!txtParentRev.Text.Trim,v.Local.sPart2)
	v.Local.sPart1.Set(v.Local.sPart1.Trim)
	v.Local.sPart2.Set(v.Local.sPart2.Trim)
	v.Local.sPart.Set(v.Local.sPart.Trim)
	f.Intrinsic.Control.If(v.Local.sPart1,=,v.Local.sPart2)	
		f.Intrinsic.String.Build("Trim(BParent) = '{0}' and (Trim(Part) = '{1}' or Trim(Description) = 'Part: {1}')",v.Local.sPart1.PSQLFriendly,v.Local.sPart.PSQLFriendly,v.Local.sFilter)
		f.Data.DataTable.Select("CHILD",V.Local.sFilter,v.Local.sRet)
		f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
			F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
			V.Local.sRet.Set(V.Local.sRet(0))
			Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","Part",v.Local.sPartColIndex)
			gui.Form.GGC_Bom.FocusCell("GV_CHILD",V.Local.sRet,v.Local.sPartColIndex)		
		f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.If(V.Screen.Form!chkActivateNodeMenu.Value,=,1)
		F.Intrinsic.Control.CallSub("Set_TreeMenu_Value_From_Node")
		f.Intrinsic.API.GetMousePosition(v.Local.iX,v.Local.iY)
		f.Intrinsic.Math.Add(v.Local.iY,15,v.Local.iY)					
		gui.Form..ContextMenuShow("BomTreeMenu",v.Local.iX,v.Local.iY)			
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.trvBom_NodeClick.End

Program.Sub.Set_TreeMenu_Value_From_Node.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sFilter.Declare
	v.Local.sQty.Declare
	v.Local.sPart.Declare
	v.Local.sDescr.Declare
	v.Local.sUM.Declare
	v.Local.sSource.Declare
	v.Local.sCategory.Declare
	v.Local.sCost.Declare
	v.Local.sPL.Declare
	v.Local.sComplete.Declare
	v.Local.sHold.Declare

	f.Intrinsic.Control.CallSub(Build_Mask)

	'get PART clicked from the CH_INDEX (node key) that was passed
	f.Intrinsic.String.Build("CH_INDEX = '{0}'",V.Global.sBomTreeNodeClickKey.PSQLFriendly,v.Local.sFilter)
	f.Data.DataView.Create("BOM","BOM_INDEX",22,v.Local.sFilter,"BOM_SEQ ASC")
	f.Intrinsic.Control.If(v.DataView.BOM!BOM_INDEX.RowCount,>,0)
		f.Intrinsic.String.Format(V.DataView.BOM!BOM_INDEX(0).Qty!FieldValString,v.Args.sMaskQty,v.Local.sHold)
		f.Intrinsic.String.Build("Qty: {0}",v.Local.sHold,v.Local.sQty)
		v.Local.sPart.Set(V.DataView.BOM!BOM_INDEX(0).Part!FIELDVALTRIM)
		V.Local.sDescr.Set(V.DataView.BOM!BOM_INDEX(0).DESCRIPTION!FIELDVALTRIM)
		v.Local.sUM.Set(V.DataView.BOM!BOM_INDEX(0).UM!FIELDVALTRIM)
		v.Local.sHold.Set(V.DataView.BOM!BOM_INDEX(0).Source_Code!FIELDVALTRIM)
		v.Local.sSource.Set(v.Dictionary.Source![v.Local.sHold])
		v.Local.sHold.Set(V.DataView.BOM!BOM_INDEX(0).Cat_Code!FIELDVALTRIM)
		v.Local.sCategory.Set(v.Dictionary.CATEGORY![v.Local.sHold])
		f.Intrinsic.String.Format(V.DataView.BOM!BOM_INDEX(0).Cost!FieldValString,v.Args.sMaskCost,v.Local.sHold)
		f.Intrinsic.String.Build("Cost: {0}",v.Local.sHold,v.Local.sCost)
		v.Local.sPL.Set(V.DataView.BOM!BOM_INDEX(0).PL!FIELDVALTRIM)
		f.Intrinsic.Control.If(V.DataView.BOM!BOM_INDEX(0).Complete!FIELDVALTRIM,=,"Y")
			v.Local.sComplete.Set("Complete")
		f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.EndIf	
	f.Data.DataView.Close("BOM","BOM_INDEX")	

 	gui.form..ContextMenuSetItemText("BomTreeMenu","Qty",v.Local.sQty)
 	gui.form..ContextMenuSetItemText("BomTreeMenu","Part",v.Local.sPart)
 	gui.form..ContextMenuSetItemText("BomTreeMenu","Description",v.Local.sDescr)
 	gui.form..ContextMenuSetItemText("BomTreeMenu","UM",v.Local.sUM)
 	gui.form..ContextMenuSetItemText("BomTreeMenu","SOURCE",v.Local.sSource)
 	gui.form..ContextMenuSetItemText("BomTreeMenu","CATEGORY",v.Local.sCategory)
 	gui.form..ContextMenuSetItemText("BomTreeMenu","COST",v.Local.sCost)
 	gui.form..ContextMenuSetItemText("BomTreeMenu","PL",v.Local.sPL)
 	gui.form..ContextMenuSetItemText("BomTreeMenu","COMPLETE",v.Local.sComplete)
 	gui.form..ContextMenuSetItemText("BomTreeMenu","MOVESEQ","  Move Seq into...")

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Set_TreeMenu_Value_From_Node.End

Program.Sub.BomTreeMenu.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bAuth.Declare
	V.Local.sFilter.Declare
	v.Local.sPart.Declare
	v.Local.iLinkID.Declare
	v.Local.sLinkID.Declare
	V.Local.iPID.Declare
	v.Local.sMsg.Declare
	v.Local.iRet.Declare
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.sDescr.Declare
	v.Local.sHold.Declare
	v.Local.sRev.Declare
	v.Local.iCnt.Declare
	v.Local.sSource_Code.Declare
	v.Local.sUM.Declare
	v.Local.sCost.Declare
	v.Local.sPL.Declare
	v.Local.sFlag.Declare
	v.Local.bSelectSeq.Declare
	v.Local.bSelectCutlist.Declare
	v.Local.iX.Declare
	v.Local.iY.Declare	
	v.Local.fQty.Declare
	v.Local.sQty.Declare
	v.Local.sSource.Declare
	
	f.Intrinsic.Control.If(v.Args.ItemName,=,"LOADROUTER",or,v.Args.ItemName,=,"LOADBOM",v.Args.ItemName,=,"LOADBOMROUTER")		
		'The node part will be retrieved inside the sub
		f.Intrinsic.Control.CallSub(Load_From_trvBom_NodeClick,"KEY",V.Global.sBomTreeNodeClickKey,"sItemName",v.Args.ItemName)
		F.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
		
	'get PART clicked from the CH_INDEX (node key) that was passed
	f.Intrinsic.String.Build("CH_INDEX = '{0}'",V.Global.sBomTreeNodeClickKey.PSQLFriendly,v.Local.sFilter)
	f.Data.DataView.Create("BOM","BOM_INDEX",22,v.Local.sFilter,"BOM_SEQ ASC")
	f.Intrinsic.Control.If(v.DataView.BOM!BOM_INDEX.RowCount,>,0)
		V.Local.sPart.Set(V.DataView.BOM!BOM_INDEX(0).PART!FIELDVALTRIM)
		v.Local.sDescr.Set(V.DataView.BOM!BOM_INDEX(0).Description!FIELDVALTRIM)
		v.Local.sSource_Code.Set(V.DataView.BOM!BOM_INDEX(0).Source_Code!FIELDVALTRIM)
		v.Local.sUM.Set(V.DataView.BOM!BOM_INDEX(0).UM!FIELDVALTRIM)
		v.Local.sCost.Set(V.DataView.BOM!BOM_INDEX(0).Cost!FIELDVALTRIM)		
		v.Local.sPL.Set(V.DataView.BOM!BOM_INDEX(0).PL!FIELDVALTRIM)
		v.Local.fQty.Set(V.DataView.BOM!BOM_INDEX(0).Qty!FIELDVALTRIM)
		v.Global.sEditRouterBomInvParent.Set(V.DataView.BOM!BOM_INDEX(0).BParent!FIELDVALTRIM)
		f.Data.DataView.Close("BOM","BOM_INDEX")
	f.Intrinsic.Control.Else		
		f.Data.DataView.Close("BOM","BOM_INDEX")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.SelectCase(v.Args.ItemName)
		f.Intrinsic.Control.Case("BOOKMARK")
			F.Intrinsic.Control.CallSub(AddToBookMarks,"sPart",v.Local.sPart,"sDescr",v.Local.sDescr)			
		
		f.Intrinsic.Control.Case("VIEWPART")
			Function.Global.Security.CheckUserAccessIPM(312,0,v.Local.bAuth)
			f.Intrinsic.Control.If(v.Local.bAuth.Not)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("User does not have permission to Inventory > View > Inventory Parts.","Menu Item Not Assigned")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf	
		
			F.Intrinsic.Control.CallSub(Get_Location_Input)
			f.Intrinsic.Control.If(v.Args.bCancel)
				f.Intrinsic.Control.ExitSub				
			f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.If(v.Args.bValid,=,False)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf

			f.Data.DataTable.AddRow("3500","CompanyCode",v.Caller.CompanyCode,"Mode","V","PART",v.Local.sPart,"LOC",V.Args.sLoc)
			F.Intrinsic.Control.CallSub(3500Sync)		
		f.Intrinsic.Control.Case("EDITPART")
			Function.Global.Security.CheckUserAccessIPM(310,1,v.Local.bAuth)
			f.Intrinsic.Control.If(v.Local.bAuth.Not)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("User does not have permission to Inventory > File > Inventory Parts > Open.","Menu Item Not Assigned")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf	

			F.Intrinsic.Control.CallSub(Get_Location_Input)
			f.Intrinsic.Control.If(v.Args.bCancel)
				f.Intrinsic.Control.ExitSub				
			f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.If(v.Args.bValid,=,False)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
			
			f.Data.DataTable.AddRow("3500","CompanyCode",v.Caller.CompanyCode,"Mode","O","PART",v.Local.sPart,"LOC",V.Args.sLoc)
			F.Intrinsic.Control.CallSub(3500Sync)		
		
		f.Intrinsic.Control.Case("SUPPLYDEMAND")

			'Check if user has permission to access to menu item
			Function.Global.Security.CheckUserAccessIPM(321,0,v.Local.bAuth)
			f.Intrinsic.Control.If(v.Local.bAuth.Not)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("User does not have permission to Supply and Demand screen.","Menu Item Not Assigned")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf

			F.Intrinsic.Control.CallSub(Get_Location_Input)
			f.Intrinsic.Control.If(v.Args.bCancel)
				f.Intrinsic.Control.ExitSub				
			f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.If(v.Args.bValid,=,False)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
			
			f.Data.DataTable.AddRow("300010","Part",v.Local.sPart,"Loc",v.Args.sLoc)
			f.Intrinsic.Control.CallSub(300010Sync)	
		f.Intrinsic.Control.Case("COPYPART")
			F.Intrinsic.UI.SetClipboardText(V.Local.sPart)
			
		f.Intrinsic.Control.Case("DOCUMENTCONTROL")	
			F.Global.DocumentControl.GetLinkID(v.Local.sPart,30,v.Local.iLinkID)
			f.Intrinsic.Control.If(v.Local.iLinkID,<>,-1)		
				f.Intrinsic.String.LPad(v.Local.iLinkID,"0",9,v.Local.sLinkID)
				F.Global.DocumentControl.Invoke(v.Local.sPart,30,"Part/Bom Document Control",V.Local.iPID)
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("Create Document Control for this part {0}?",v.Local.sPart.Trim,v.Local.sMsg)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Document Control Not Found",4,v.Local.iRet)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxYes)			
					F.Global.DocumentControl.CreateReference(v.Local.sPart,30,v.Local.iLinkID)	
					F.Global.DocumentControl.Invoke(v.Local.sPart,30,"Part/Bom Document Control",V.Local.iPID)						
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.Case("INSERTNEWMFGPART")
			gui.MFGPart.cmdFromInventory.Visible(True)
			gui.MFGPart.cmdFromRouter.Visible(True)
			gui.MFGPart.cmdFromBom.Visible(True)	
			gui.MFGPart.txtMfgPart.Enabled(True)
			gui.MFGPart.txtMfgRev.Enabled(True)
			gui.MFGPart.chkEditInv.Visible(False)
			gui.MFGPart.chkEditRouter.Visible(False)
			gui.MFGPart.chkEditBom.Visible(False)
			v.Global.sParentInsertNewMfgPart.Set(v.Local.sPart)
			v.Global.sParentInsertNewMfgDescr.Set(v.Local.sDescr)
			v.Global.sParentInsertNewMfgUM.Set(v.Local.sUM.Left2)
			v.Global.sParentInsertNewMfgPL.Set(v.Local.sPL)
			v.Global.sParentInsertNewMfgSourceCode.Set(v.Local.sSource_Code)
			v.Global.sParentInsertNewMfgCost.Set(v.Local.sCost)			
			'Check if the part is MFG part
			f.Intrinsic.Control.If(v.Local.sSource_Code,<>,"M",and,v.Local.sSource_Code,<>,"F")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("Parent must be a Manufacture part.","Invalid Node")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)		
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
			
			f.Intrinsic.Control.If(v.Global.bRouterChanged)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				F.Intrinsic.UI.Msgbox("Unsaved work on Main Grid. Proceed without saving?","Save Work Alert",4,v.Local.sFlag)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.If(v.Local.sFlag,<>,"6")
					F.Intrinsic.Control.ExitSub
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf	
			
			'Open form InsertNewMFGPart
			gui.MFGPart..Caption("Insert MFG Part")
			gui.MFGPart.txtType.Text("Insert")
			'set the values to the form before we open it
			f.Intrinsic.Control.BlockEvents
			gui.MFGPart.txtMfgPart.Text("")
			gui.MFGPart.txtMfgRev.Text("")
			gui.MFGPart.txtMfgDescr.Text("")
			gui.MFGPart.txtMfgUM.Text("")
			gui.MFGPart.txtMfgPL.Text("")
			gui.MFGPart.ddlMfgLoc.Text("")
			gui.MFGPart.txtMfgDescr2.Text("")
			gui.MFGPart.txtMfgDescr3.Text("")
			gui.MFGPart.txtMfgUnitCost.Text("")
			gui.MFGPart.txtMfgQty.Text("")
			gui.MFGPart.txtMfgExtra.Text("")
				
			'Clear dropdown before adding new items
			gui.MFGPart.ddlMfgSource.ClearItems
			gui.MFGPart.ddlMfgSource.AddItem("MFG-JOB")
			gui.MFGPart.ddlMfgSource.AddItem("MFG-STOCK")			
			gui.MFGPart.ddlMfgSource.ListIndex(0)
			gui.MFGPart.ddlMfgLoc.ListIndex(0)	
			
			f.Intrinsic.Control.CallSub(Build_Mask)
			f.Intrinsic.String.Format("0",v.Args.sMaskCost,v.Local.sHold)
			gui.MFGPart.txtMfgUnitCost.Text(v.Local.sHold)	
			f.Intrinsic.String.Format("1",v.Args.sMaskQty,v.Local.sHold)
			gui.MFGPart.txtMfgQty.Text(v.Local.sHold)
			
			f.Intrinsic.Control.UnBlockEvents			
			
			gui.Form..Enabled(False)
			'Set position and sort code for MfgPart form
			f.Intrinsic.Control.If(v.Global.bMfgPartFirstLoad)
				gui.MFGPart.cboCodeSort.ClearItems
				gui.MFGPart.cboCodeSort.AddItem("")
				gui.MFGPart.cboCodeSort.AddItems("DICTIONARY","DICTSORT")
				f.Intrinsic.Math.Add(v.Screen.Form!frameRtrHead.Height,3000,v.Local.iY)
				f.Intrinsic.Math.IDiv(v.Screen.Form!frameMiddle.Width,2,v.Local.iX)
				f.Intrinsic.Control.If(v.Screen.Form!frameSource.Visible,=,True)
					f.Intrinsic.Math.Add(v.Screen.Form!frameSource.Width,v.Local.iX,v.Local.iX)
				f.Intrinsic.Control.EndIf	
				gui.MFGPart..Position(v.Local.iX,v.Local.iY)
				v.Global.bMfgPartFirstLoad.Set(False)		
			f.Intrinsic.Control.EndIf
			gui.MFGPart..Visible(True)
			gui.MFGPart.txtMfgPart.SetFocus
			
		f.Intrinsic.Control.Case("MOVESEQ")			
			'Check if there are normal sequences selected			
			f.Intrinsic.Control.If(v.DataView.Child!vMoveSeq.Exists)
				f.Data.DataView.Close("Child","vMoveSeq")
			f.Intrinsic.Control.EndIf
			f.Data.DataView.Create("Child","vMoveSeq",22,"SelectSeq = 1","")
			f.Intrinsic.Control.If(v.DataView.Child!vMoveSeq.RowCount,=,0)
				f.Data.DataView.Close("CHILD","vMoveSeq")
				f.Intrinsic.Control.If(v.Global.bBindCutList.Not)
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
					f.Intrinsic.UI.Msgbox("Please select sequences to move.","Invalid")
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)			
					f.Intrinsic.Control.ExitSub				
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.If(v.DataView.Child$Cutlist!vMoveC.Exists)
						f.Data.DataView.Close("Child$Cutlist","vMoveC")
					f.Intrinsic.Control.EndIf
					f.Data.DataView.Create("Child$Cutlist","vMoveC",22,"SELECT_CUTLIST = 1","")		
					f.Intrinsic.Control.If(v.DataView.Child$Cutlist!vMoveC.RowCount,=,0)
						f.Data.DataView.Close("Child$Cutlist","vMoveC")						
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
						f.Intrinsic.UI.Msgbox("Please select sequences to move.","Invalid")
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)			
						f.Intrinsic.Control.ExitSub							
					f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.EndIf
				
			f.Intrinsic.Control.EndIf				
			
			gui.Form.lblResult.Visible(True)
			f.Intrinsic.Control.If(v.Global.bBindCutList)
			
				f.Intrinsic.Control.CallSub(Prepare_MoveSeq_WithCutlist_Option,"sPart",v.Local.sPart)			
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.CallSub(Prepare_MoveSeq)
			f.Intrinsic.Control.EndIf
			gui.Form.lblResult.Visible(False)
			
		f.Intrinsic.Control.Case("EDITROUTERBOMINV")
			gui.MFGPart.cmdFromInventory.Visible(False)
			gui.MFGPart.cmdFromRouter.Visible(False)
			gui.MFGPart.cmdFromBom.Visible(False)	
			gui.MFGPart.txtMfgPart.Enabled(False)
			gui.MFGPart.txtMfgRev.Enabled(False)
			gui.MFGPart.chkEditInv.Visible(True)
			gui.MFGPart.chkEditRouter.Visible(True)
			gui.MFGPart.chkEditBom.Visible(True)
			gui.MFGPart.chkEditInv.Value(1)
			gui.MFGPart.chkEditRouter.Value(1)
			gui.MFGPart.chkEditBom.Value(1)
	
			f.Intrinsic.Control.If(v.Global.bRouterChanged)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				F.Intrinsic.UI.Msgbox("Unsaved work on Main Grid. Proceed without saving?","Save Work Alert",4,v.Local.sFlag)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.If(v.Local.sFlag,<>,"6")
					F.Intrinsic.Control.ExitSub
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf	
			
			'Open form InsertNewMFGPart
			gui.MFGPart..Caption("Edit Router/Bom/Inventory")
			gui.MFGPart.txtType.Text("Edit")
			
			'set the values to the form before we open it
			f.Intrinsic.Control.BlockEvents
			gui.MFGPart.txtMfgPart.Text(v.Local.sPart.Left17)
			f.Intrinsic.String.Mid(v.Local.sPart,18,3,v.Local.sRev)
			gui.MFGPart.txtMfgRev.Text(v.Local.sRev)
			gui.MFGPart.txtMfgDescr.Text(v.Local.sDescr)
			gui.MFGPart.txtMfgUM.Text(v.Local.sUM.left2)
			gui.MFGPart.txtMfgPL.Text(v.Local.sPL.Trim)
			f.Intrinsic.Control.CallSub(Build_Mask)
			f.Intrinsic.String.Format(v.Local.sCost,v.Args.sMaskCost,v.Local.sCost)
			gui.MFGPart.txtMfgUnitCost.Text(v.Local.sCost)
			f.Intrinsic.String.Format(v.Local.fQty,v.Args.sMaskQty,v.Local.sQty)
			gui.MFGPart.txtMfgQty.Text(v.Local.sQty)
			
			gui.MFGPart.txtMfgDescr2.Text("")
			gui.MFGPart.txtMfgDescr3.Text("")			
			gui.MFGPart.txtMfgExtra.Text("")
				
			'Clear dropdown before adding new items
			gui.MFGPart.ddlMfgSource.ClearItems
			gui.MFGPart.ddlMfgSource.AddItem("MFG-STOCK")
			gui.MFGPart.ddlMfgSource.AddItem("MFG-JOB")
			gui.MFGPart.ddlMfgSource.AddItem("PUR-STOCK")
			gui.MFGPart.ddlMfgSource.AddItem("PUR-JOB")
			gui.MFGPart.ddlMfgSource.AddItem("CONS-STOCK")
			gui.MFGPart.ddlMfgSource.AddItem("CONS-JOB")
			'v.Local.sSource_Code.Set("")
			f.Intrinsic.Control.If(v.Local.sSource_Code.Trim,=,"")
				v.Local.sSource_Code.Set(v.Dictionary.Part_SourceCode![V.Local.sPart.Trim])
			f.Intrinsic.Control.EndIf
			v.Local.sSource.Set(v.Dictionary.Source![v.Local.sSource_Code])
			gui.MFGPart.ddlMfgSource.Text(v.Local.sSource)			
			
			gui.MFGPart.ddlMfgLoc.ListIndex(0)	
			f.Intrinsic.Control.UnBlockEvents			
			
			gui.Form..Enabled(False)
			'Set position and sort code for MfgPart form
			f.Intrinsic.Control.If(v.Global.bMfgPartFirstLoad)	
				gui.MFGPart.cboCodeSort.ClearItems
				gui.MFGPart.cboCodeSort.AddItem("")
				gui.MFGPart.cboCodeSort.AddItems("DICTIONARY","DICTSORT")
				f.Intrinsic.Math.Add(v.Screen.Form!frameRtrHead.Height,3000,v.Local.iY)
				f.Intrinsic.Math.IDiv(v.Screen.Form!frameMiddle.Width,2,v.Local.iX)
				f.Intrinsic.Control.If(v.Screen.Form!frameSource.Visible,=,True)
					f.Intrinsic.Math.Add(v.Screen.Form!frameSource.Width,v.Local.iX,v.Local.iX)
				f.Intrinsic.Control.EndIf	
				gui.MFGPart..Position(v.Local.iX,v.Local.iY)
				v.Global.bMfgPartFirstLoad.Set(False)		
			f.Intrinsic.Control.EndIf	
			
			'Get Alt1, Alt2, Cost
			f.Intrinsic.String.Build("Select top 1 Desc_Router_2,Desc_Router_3 from V_Router_Desc where Router = '{0}' ",v.Local.sPart.PSQLFriendly,v.Local.sSQL)
			f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
			f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
				f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
				f.Intrinsic.Control.If(v.Local.sRet(0).Trim,<>,"",or,v.Local.sRet(1).Trim,<>,"")
					gui.MFGPart.txtMfgDescr2.Text(v.Local.sRet(0))
					gui.MFGPart.txtMfgDescr3.Text(v.Local.sRet(1))
				f.Intrinsic.Control.Else
					f.Intrinsic.String.Build("Select top 1 Description_2,Description_3 from Inventory_Mst2 where Part = '{0}' and Location = '{1}' ",v.Local.sPart.PSQLFriendly,v.Screen.MFGPart!ddlMfgLoc.Text,v.Local.sSQL)
					f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
					f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
						f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
						gui.MFGPart.txtMfgDescr2.Text(v.Local.sRet(0))
						gui.MFGPart.txtMfgDescr3.Text(v.Local.sRet(1))	
					f.Intrinsic.Control.EndIf				
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.Else
				'Look in Inventory
				f.Intrinsic.String.Build("Select top 1 Description_2,Description_3 from Inventory_Mst2 where Part = '{0}' and Location = '{1}' ",v.Local.sPart.PSQLFriendly,v.Screen.MFGPart!ddlMfgLoc.Text,v.Local.sSQL)
				f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
				f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
					f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
					gui.MFGPart.txtMfgDescr2.Text(v.Local.sRet(0))
					gui.MFGPart.txtMfgDescr3.Text(v.Local.sRet(1))	
				f.Intrinsic.Control.EndIf	
			f.Intrinsic.Control.EndIf			
			
			'extra description
			f.Intrinsic.String.Build("select Top 1 text from inv_extra_text where part = '{0}' ",v.Local.sPart.PSQLFriendly,v.Local.sSql)
			f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
			f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
				gui.MFGPart.txtMfgExtra.Text(v.Local.sRet)
			f.Intrinsic.Control.EndIf	
			
			'Get Sort Code
			f.Intrinsic.String.Build("select Top 1 code_sort,Product_Line from inventory_mstr where part = '{0}' and location = '{1}' ",v.Local.sPart.PSQLFriendly,v.Screen.MFGPart!ddlMfgLoc.Text,v.Local.sSql)
			f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
			f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
				f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
				gui.MFGPart.cboCodeSort.Text(v.Local.sRet(0))
				f.Intrinsic.Control.If(v.Screen.MFGPart!txtMfgPL.Text.Trim,=,"")
					gui.MFGPart.txtMfgPL.Text(v.Local.sRet(1))
				f.Intrinsic.Control.EndIf				
			f.Intrinsic.Control.EndIf	
	
			'Get Product Line
			f.Intrinsic.String.Build("select Top 1 Prod_Line from v_router_header where router = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
			f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
			f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not,=,True,and,v.Local.sRet.Trim,<>,"")
				f.Intrinsic.Control.If(v.Screen.MFGPart!txtMfgPL.Text.Trim,=,"")
					gui.MFGPart.txtMfgPL.Text(v.Local.sRet.Trim)
				f.Intrinsic.Control.EndIf	
			f.Intrinsic.Control.EndIf				
			
			gui.MFGPart..Visible(True)
			gui.MFGPart.txtMfgPart.SetFocus		
			
	f.Intrinsic.Control.EndSelect	
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.BomTreeMenu.End

Program.Sub.Prepare_MoveSeq.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sFilter.Declare
	v.Local.sPart.Declare
	v.Local.iRet.Declare
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.sDescr.Declare
	v.Local.sHold.Declare
	v.Local.sRev.Declare
	v.Local.iCnt.Declare
	v.Local.sCost.Declare
	v.Local.sUM.Declare
	v.Local.sPL.Declare
	v.Local.sSource.Declare
	v.Local.sSource_Code.Declare
	v.Local.sBomSeq.Declare
	v.Local.sDate.Declare
	v.Local.sTime.Declare
	v.Local.sMap.Declare	
	v.Local.fRTRSeq.Declare
	v.Local.sTopParent.Declare
	v.Local.sMsg.Declare
	V.Local.sFilterParentIsChild.Declare
	
	'get PART clicked from the CH_INDEX (node key) that was passed
	f.Intrinsic.String.Build("CH_INDEX = '{0}'",V.Global.sBomTreeNodeClickKey.PSQLFriendly,v.Local.sFilter)
	f.Data.DataView.Create("BOM","BOM_INDEX",22,v.Local.sFilter,"BOM_SEQ ASC")
	f.Intrinsic.Control.If(v.DataView.BOM!BOM_INDEX.RowCount,>,0)
		V.Local.sPart.Set(V.DataView.BOM!BOM_INDEX(0).PART!FIELDVALTRIM)
		v.Local.sDescr.Set(V.DataView.BOM!BOM_INDEX(0).Description!FIELDVALTRIM)
		v.Local.sSource_Code.Set(V.DataView.BOM!BOM_INDEX(0).Source_Code!FIELDVALTRIM)
		v.Local.sUM.Set(V.DataView.BOM!BOM_INDEX(0).UM!FIELDVALTRIM)
		v.Local.sCost.Set(V.DataView.BOM!BOM_INDEX(0).Cost!FIELDVALTRIM)
		v.Local.sPL.Set(V.DataView.BOM!BOM_INDEX(0).PL!FIELDVALTRIM)
		f.Data.DataView.Close("BOM","BOM_INDEX")
	f.Intrinsic.Control.Else		
		f.Data.DataView.Close("BOM","BOM_INDEX")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	

	'Get selected Seq
	f.Intrinsic.Control.If(v.DataView.Child!vMoveSeq.Exists)
		f.Data.DataView.Close("Child","vMoveSeq")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("Child","vMoveSeq",22,"SelectSeq = 1","RTR_Seq")
	f.Intrinsic.Control.If(v.DataView.Child!vMoveSeq.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No sequence selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)		
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	

	'Check if the Bom Node if that Node has a child is also a parent which causes infinite loop
	f.Intrinsic.String.Build(" = '{0}'",v.local.sPart.PSQLFriendly,v.Local.sFilterParentIsChild)
	f.Intrinsic.Control.CallSub(Check_Child_Is_Parent,"sFilter",v.Local.sFilterParentIsChild)
	f.Intrinsic.Control.If(v.Args.iChildIsParent,>,1)
		f.Intrinsic.String.Build("Bom Node '{0}' has child the same as parent. Please contact GSS to fix at database level.",v.Local.sPart,v.Local.sMsg)
		f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Fatal Issue")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'Check if the target is a router
	f.Intrinsic.String.Build("select Router from v_router_header  where ROUTER = '{0}' ",v.Local.sPart.PSQLFriendly,v.Local.sSql)	
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)	
	F.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)

		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.String.Build("{0} does not have a Router. Create Router?",v.Local.sPart.Trim,v.Local.sHold)
		f.Intrinsic.UI.Msgbox(v.Local.sHold,"Attention",4,v.Local.iRet)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxYes)
			gui.Form..Enabled(False)
			
			'Move records to ChildCut
			f.Intrinsic.Control.If(v.DataTable.ChildCut.Exists)
				f.Data.DataTable.Close("ChildCut")
			f.Intrinsic.Control.EndIf
			f.Data.DataView.ToDataTable("Child","vMoveSeq","ChildCut",True)				
		
			f.Intrinsic.Control.BlockEvents
			gui.NonInv..Caption("Create Router")
			'set the values to the form before we open it
			GUI.NonInv.txtPart.Text(v.Local.sPart.left17)
			f.Intrinsic.String.Mid(v.Local.sPart,18,3,v.Local.sRev)
			GUI.NonInv.txtRev.Text(v.Local.sRev)
			
			gui.NonInv.txtPart.Enabled(False)
			gui.NonInv.txtRev.Enabled(False)
			
			GUI.NonInv.txtDescr.Text(v.Local.sDescr)
			GUI.NonInv.txtDescr2.Text("")
			GUI.NonInv.txtDescr3.Text("")
			GUI.NonInv.txtUM.Text(V.Local.sUM.left2)
			GUI.NonInv.txtPL.Text(V.Local.sPL)
			gui.NonInv.txtExtra.Text("")	
			GUI.NonInv.txtType.Text("FROMMOVESEQ")					
			'setting form values that have  "change" events active					
			'Clear dropdown before adding new items
			gui.NonInv.ddlSource.ClearItems
			gui.NonInv.ddlSource.AddItem("MFG-STOCK")
			gui.NonInv.ddlSource.AddItem("MFG-JOB")
			F.Intrinsic.Control.If(V.Local.sSource_Code,=,"F")
				GUI.NonInv.ddlSource.ListIndex(1)
			f.Intrinsic.Control.Else
				GUI.NonInv.ddlSource.ListIndex(0)			
			F.Intrinsic.Control.EndIf
			
			gui.NonInv.ddlCategory.ClearItems
			gui.NonInv.ddlCategory.AddItem("NORMAL")
			GUI.NonInv.ddlCategory.ListIndex(0)
			gui.NonInv.ddlNewPartLoc.ListIndex(0)
			gui.NonInv.cboSort.ClearItems
			gui.NonInv.cboSort.AddItems("DICTIONARY","DICTSORT")
			gui.NonInv.cboSort.Additem("SORT CODE")	
			'Set default value
			gui.NonInv.cboSort.Text("SORT CODE")
			
			f.Intrinsic.Control.CallSub(Visible_Cost_Qty,"bVisible",False)
			
			gui.NonInv.txtNoSave.Text("")
			f.Intrinsic.Control.UnBlockEvents
				
			gui.Form..Enabled(False)
			'Resize form NonInv
			gui.NonInv..Size(10260, 4300)
		
			gui.Form.frInsertType.Visible(False)			
			GUI.NonInv.cmdBrowseInv.Visible(False)	
			
			gui.NonInv..Visible(True)					
			
		f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.Else
		'Router exists	

		'This will creat ChildCut table
		f.Intrinsic.Control.CallSub(GetRouter_For_MoveSeq,"Part",v.Local.sPart)			
		'ChildCutRaw	
		f.Intrinsic.Control.If(v.DataTable.ChildCutRaw.Exists)
			f.Data.DataTable.Close("childcutraw")
		f.Intrinsic.Control.EndIf
		f.Data.DataView.SetFilter("Child","vMoveSeq","SelectSeq = 1 and RTR_Seq > '000000' and RTR_Seq < '990000'")
		
		f.Data.DataView.ToDataTable("Child","vMoveSeq","ChildCutRaw",True)	
		'Merge ChildCutRaw to ChildCut	
		
		'BN, May 3 2021 INSERT ROUTER LINES using SQL	
		f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.Text.Trim,v.Screen.Form!txtFocusRev.Text.Trim,v.Local.sTopParent)
		f.Intrinsic.Control.CallSub(Insert_SelectedSeq_To_ParentRouter,"Part",v.Local.sPart,"TopParent",v.Local.sTopParent)
		
		f.Data.DataTable.Merge("ChildCutRaw","ChildCut",True,2)
		f.Data.DataTable.AcceptChanges("ChildCut")				

		'Resequence ChildCut before saving
		f.Data.DataTable.SetSeries("ChildCut","RTR_SEQ_NUM",0,v.Global.iRSeq)
		f.Data.DataTable.SetValueFormat("ChildCut",-1,"RTR_SEQ_NUM","RTR_SEQ","000000")
	
		f.Data.DataTable.SetValue("ChildCut",-1,"BParent",v.Local.sPart,"Descr_BP",v.Local.sDescr)
		
		'Save ChildCut Router Core side - OBSOLETE : This method will lose some current existing values at the header of the target router
		'NOW USE INSERT ROUTER LINES using SQL
		'f.Intrinsic.Control.CallSub(BuildCutListRouter_CoreSide,"sPart",v.Local.sPart)
		
		'Prepare for appending Bom Record
		f.Data.DataView.SetFilter("Child","vMoveSeq","SelectSeq = 1 and RTR_Seq > '000000' and LMO = 'M'")
		f.Intrinsic.Control.If(v.DataTable.BomCutMove.Exists)
			f.Data.DataTable.Close("BomCutMove")
		f.Intrinsic.Control.EndIf
		f.Data.DataView.ToDataTable("Child","vMoveSeq","BomCutMove",True)
		
		'Get current Bom node and append	
		'Get Bom
		f.ODBC.Connection!conx.Execute(v.Global.sDeleteExplodeStageSQL)
		f.Intrinsic.String.Build("Insert Into GCG_4986_Stge (UserID,TRMNL,OldParent,Part,Tier,CTier,CH_Index) values ('{0}','{1}','{2}','{2}','',0,'')",v.Caller.User,v.Caller.Terminal,v.local.sPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)	
		f.Intrinsic.String.Build(" = '{0}'",v.local.sPart.PSQLFriendly,v.Local.sFilter)
		f.Intrinsic.Control.CallSub(Get_Bom_Mstr,"sTargetTable","Bom_Temp","sFilter",v.Local.sFilter)
		f.Intrinsic.Control.If(v.DataTable.Bom_Temp.RowCount,=,0)
			F.Data.DataTable.AddRow("Bom_Temp","BPARENT",v.local.sPart,"DESCR_BP",v.local.sDescr,"RTR_SEQ","000000","BOM_SEQ","0000", "PART",v.local.sPart,"DESCRIPTION",v.local.sDescr,"PL",v.local.sPL,"UM",v.local.sUM.left2,"TIER","0","CTIER","0","SOURCE_CODE",v.Local.sSource_Code,"CAT_CODE","N","Qty",1,"Set_up",0,"Cost",0,"Frequency",0,"Date_Start","000000","Date_Stop","000000","Cost_Date","00000000","Insert_Bom","00","Setup_Qty",0)	
		f.Intrinsic.Control.EndIf		
			
		'Get Bom Seq
		f.Data.DataTable.Compute("Bom_Temp","Max(Bom_Seq)","",v.Local.sBomSeq)
		f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.BomCutMove.RowCount--,1)
			f.Intrinsic.Math.Add(v.Local.sBomSeq,v.Global.iBSeq,v.Local.sBomSeq)
			f.Intrinsic.String.LPad(v.Local.sBomSeq,"0",4,v.Local.sBomSeq)		
			F.Data.DataTable.SetValue("BomCutMove",v.Local.iCnt,"Bom_Seq",v.Local.sBomSeq)	
		f.Intrinsic.Control.Next(v.Local.iCnt)
		
		f.Data.DataTable.Merge("BomCutMove","Bom_Temp",False,2)
		f.Data.DataTable.SetValue("Bom_Temp",-1,"BParent",v.Local.sPart,"DESCR_BP",v.local.sDescr)
		
		
		''''''''''''''
		v.Local.sDate.Set(v.Ambient.Date.FormatYYYYMMDD)
		f.Intrinsic.String.Build("{0}00",v.Ambient.Now.FormatHHNNSS,v.Local.sTime)	
		
		'Set timestamp
		f.Data.DataTable.SetValue("Bom_Temp",-1,"Date_Maintenance",v.Local.sDate.right6,"Date_Last_Chg",v.Local.sDate,"Time_Last_Chg",v.Local.sTime,"Last_Chg_By",v.Caller.User,"Last_Chg_Prog","ESTIMATE")
		'Create Bomclicked
		f.Intrinsic.Control.If(v.DataTable.BomClicked.Exists)
			F.Data.DataTable.Close("BomClicked")
		f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.CallSub(Create_Bom_Table,"sTable","BomClicked")
		f.Data.DataTable.Merge("Bom_Temp","BomClicked",False,2)
		
		f.Intrinsic.String.Build("Delete from Bom_MSTR Where Parent = '{0}'",v.local.sPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)
		
		v.Local.sMap.Set("BPARENT@!@PARENT*!*Bom_seq@!@SEQUENCE_BOM*!*INSERT_BOM@!@INSERT_BOM*!*DATE_MAINTENANCE@!@DATE_MAINTENANCE*!*COST@!@COST*!*QTY@!@QUANTITY*!*PART@!@PART*!*DATE_START@!@DATE_START*!*DATE_STOP@!@DATE_STOP*!*BM_SERIAL_START@!@BM_SERIAL_START*!*BM_SERIAL_STOP@!@BM_SERIAL_STOP*!*UM@!@UM_INVENTORY*!*PURGE_FLAG@!@PURGE_FLAG*!*ORDR_USR_FLAG@!@ORDR_USR_FLAG*!*QUANTITY_6@!@QUANTITY_6*!*DRAWING@!@DRAWING*!*TAG@!@TAG*!*CAT_CODE@!@CATEGORY*!*SOURCE_CODE@!@SOURCE*!*FREQUENCY@!@FREQUENCY*!*DATE_LAST_CHG@!@DATE_LAST_CHG*!*TIME_LAST_CHG@!@TIME_LAST_CHG*!*LAST_CHG_BY@!@LAST_CHG_BY*!*LAST_CHG_PROG@!@LAST_CHG_PROG*!*DRAWING_SIZE@!@DRAWING_SIZE*!*REQ_TRACE@!@REQ_TRACE*!*COST_DATE@!@COST_DATE*!*COMPLETE@!@BOM_COMPLETE*!*INACTIVE@!@INACTIVE*!*SETUP_QTY@!@SETUP_QTY")
		f.Data.DataTable.SaveToDB("BomClicked","conx","Bom_MSTR","",128,v.Local.sMap)
		f.Data.DataTable.Close("BomClicked")
		f.Data.DataTable.Close("Bom_Temp")
		
		'Save to Bom_Eng
		f.Intrinsic.String.Build("Select * from Bom_Eng where Part = '{0}' and Location = ''",v.local.sPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.String.Build("Update Bom_Eng set Description = '{1}', Is_Parent = 'Y' where Part = '{0}' and Location = ''",v.local.sPart.PSQLFriendly,v.local.sDescr.PSQLFriendly,v.Local.sSQL)
		f.Intrinsic.Control.Else
			f.Intrinsic.String.Build("Insert into Bom_Eng (Part,Location,Description,Is_Parent,Date_Revision) values ('{0}','','{1}','Y','000000')",v.local.sPart.PSQLFriendly,v.local.sDescr.PSQLFriendly,v.Local.sSQL)	
		f.Intrinsic.Control.EndIf
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)		
		
		'Delete Selected seq
		f.Data.DataView.SetFilter("Child","vMoveSeq","SelectSeq = 1")
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.Child!vMoveSeq.RowCount--,0,-1)
			f.Data.DataView.DeleteRow("Child","vMoveSeq",v.Local.iCnt)
		f.Intrinsic.Control.Next(v.Local.iCnt)
		f.Data.DataTable.AcceptChanges("Child")		
		
		f.Data.DataView.Close("Child","vMoveSeq")
		
		'Save Main Router and Commit to Bom
		f.Intrinsic.Control.CallSub(Update_Header_To_Child_Bom)
		f.Intrinsic.Control.CallSub(Commit_MainGrid_To_Bom,"bFromCreateSubcomponent",True)
		'Save Bom to GSS	
		f.Intrinsic.Control.CallSub(cmdSaveBomToGSS_Click)			
		
	F.Intrinsic.Control.EndIf		
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Prepare_MoveSeq.End

Program.Sub.Insert_SelectedSeq_To_ParentRouter.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iCnt.Declare
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.sNextSeq.Declare
	v.Local.sPart.Declare
	
	v.Local.sQty6.Declare
	v.Local.sTopParent.Declare
	
	v.Local.sPart.Set(v.Args.Part)
	v.Local.sTopParent.Set(v.Args.TopParent)
	
	'Called only knowing that the target Router header exists
	
	'Get Next Seq
	f.Intrinsic.String.Build("select Max(Line_router) from router_line where ROUTER = '{0}' AND ROUTER_TYPE = 'L'",V.Local.sPart.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sNextSeq)	
	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.ChildCutRaw.RowCount--,1)

		f.Intrinsic.Math.Add(v.Local.sNextSeq,v.Global.iRSeq,v.Local.sNextSeq)
		f.Intrinsic.String.LPad(v.Local.sNextSeq,"0",6,v.Local.sNextSeq)
		
		f.Intrinsic.String.Build(" Insert into Router_Line (ROUTER,ROUTER_SUFFIX,LINE_ROUTER,ROUTER_INSERT,LMO,PART_WC_OUTSIDE,OPERATION,SET_UP,RUN_TIME,RATE,FREQUENCY,MULTIPLE,DESC_RT_LINE,UM_INVENTORY,OVERLAP,WC_FACTOR,ACTUAL_WT,FLAG_MINIMUM,AMT_MINIMUM,SEC_MIN_HR,GROUP_SEQUENCE,CREW_SIZE,RUN_TIME_D6,MES_PROCESS_ID,PRICE_PERCENT,FLAG_MAIN_COMMENT,LEAD_TIME,PART_LOCN,TOOLING_SEQ,SORT_CODE,PROJ_GROUP,SIGNOFF_GRPUSR,SIGNOFF_TYPE,BUILT_FROM_BOM,ALLOW_CHRG,OMIT_FROM_WO,FINAL_OVERRIDE_FLG,OTH_LANGUAGE,Router_Type) values ('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}','{22}','{23}','{24}','{25}','{26}','{27}','{28}','{29}','{30}','{31}','{32}','{33}','{34}','{35}','{36}','{37}','{38}')",v.Local.sPart.PSQLFriendly,"",v.Local.sNextSeq,"00",v.DataTable.ChildCutRaw(v.Local.iCnt).LMO!FieldValTrim,v.DataTable.ChildCutRaw(v.Local.iCnt).PART!FieldValString,v.DataTable.ChildCutRaw(v.Local.iCnt).Op_code!FieldValTrim,v.DataTable.ChildCutRaw(v.Local.iCnt).SET_UP!FieldValString,v.DataTable.ChildCutRaw(v.Local.iCnt).Qty!FieldValString,v.DataTable.ChildCutRaw(v.Local.iCnt).Cost!FieldValString,v.DataTable.ChildCutRaw(v.Local.iCnt).FREQUENCY!FieldValString,0,v.DataTable.ChildCutRaw(v.Local.iCnt).Description!FieldValString,v.DataTable.ChildCutRaw(v.Local.iCnt).UM!FieldValTrim,0,v.DataTable.ChildCutRaw(v.Local.iCnt).WC_FACTOR!FieldValString,0,v.DataTable.ChildCutRaw(v.Local.iCnt).MinFlag!FieldValTrim,v.DataTable.ChildCutRaw(v.Local.iCnt).AMT_MINIMUM!FieldValString,"","",0,v.Local.sQty6,0,0,"",v.DataTable.ChildCutRaw(v.Local.iCnt).Lead!FieldValString,"","",v.DataTable.ChildCutRaw(v.Local.iCnt).SORT_CODE!FieldValTrim,"",v.DataTable.ChildCutRaw(v.Local.iCnt).SIGNOFF_GRPUSR!FieldValString,v.DataTable.ChildCutRaw(v.Local.iCnt).SIGNOFF_TYPE!FieldValstring,"Y","","","","","L",v.Local.sSQL)
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)
		f.Intrinsic.Control.If(v.DataTable.ChildCutRaw(v.Local.iCnt).Comments!FieldValtrim,<>,"")
			'Delete Top Parent router line comments
			f.Intrinsic.String.Build("Delete from RTR_Seq_Comments where rtr_number = '{0}' and Rtr_Seq = '{1}'",v.Local.sTopParent.PSQLFriendly,v.DataTable.childCutRaw(v.Local.iCnt).RTR_Seq!FieldValString,v.Local.sSQL)
			f.ODBC.Connection!conx.Execute(v.Local.sSQL)		
			f.Intrinsic.String.Build("Delete from RTR_Seq_Comments where rtr_number = '{0}' and Rtr_Seq = '{1}'",v.Local.sPart.PSQLFriendly,v.Local.sNextSeq,v.Local.sSQL)
			f.ODBC.Connection!conx.Execute(v.Local.sSQL)
			f.Intrinsic.String.Build("Insert into RTR_Seq_Comments (rtr_number,Rtr_Seq,Text) values ('{0}','{1}','{2}')",v.Local.sPart.PSQLFriendly,v.Local.sNextSeq,v.DataTable.ChildCutRaw(v.Local.iCnt).Comments!FieldValString,v.Local.sSQL)
			f.ODBC.Connection!conx.Execute(v.Local.sSQL)
		f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.Next(v.Local.iCnt)

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Insert_SelectedSeq_To_ParentRouter.End

Program.Sub.Prepare_MoveSeq_WithCutlist_Option.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sFilter.Declare
	v.Local.sPart.Declare
	v.Local.iRet.Declare
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.sDescr.Declare
	v.Local.sHold.Declare
	v.Local.sRev.Declare
	v.Local.iCnt.Declare
	v.Local.sCost.Declare
	v.Local.sUM.Declare
	v.Local.sPL.Declare
	v.Local.sSource.Declare
	v.Local.sSource_Code.Declare
	v.Local.sBomSeq.Declare
	v.Local.sDate.Declare
	v.Local.sTime.Declare
	v.Local.sMap.Declare	
	
	v.Local.sSumCutlist.Declare
	v.Local.sRowToSet.Declare
	v.Local.sMaterialParentQty.Declare
	v.Local.sTotalCountCutlistMove.Declare
	v.Local.sTotalCountPerSerie.Declare
	v.Local.sCutlistItemMove.Declare
	v.Local.sCutlistItemPerSerie.Declare
	v.Local.sParentPart.Declare
	v.Local.sComponent.Declare
	v.Local.iSerie.Declare	
	v.Local.sParent.Declare
	v.Local.sRow.Declare
	v.Local.sSumCutlistConverted.Declare
	v.Local.sTopParent.Declare
	v.Local.sMsg.Declare
	v.Local.sFilterParentIsChild.Declare
	
	'get PART clicked from the CH_INDEX (node key) that was passed
	f.Intrinsic.String.Build("CH_INDEX = '{0}'",V.Global.sBomTreeNodeClickKey.PSQLFriendly,v.Local.sFilter)
	f.Data.DataView.Create("BOM","BOM_INDEX",22,v.Local.sFilter,"BOM_SEQ ASC")
	f.Intrinsic.Control.If(v.DataView.BOM!BOM_INDEX.RowCount,>,0)
		V.Local.sPart.Set(V.DataView.BOM!BOM_INDEX(0).PART!FIELDVALTRIM)
		v.Local.sDescr.Set(V.DataView.BOM!BOM_INDEX(0).Description!FIELDVALTRIM)
		v.Local.sSource_Code.Set(V.DataView.BOM!BOM_INDEX(0).Source_Code!FIELDVALTRIM)
		v.Local.sUM.Set(V.DataView.BOM!BOM_INDEX(0).UM!FIELDVALTRIM)
		v.Local.sCost.Set(V.DataView.BOM!BOM_INDEX(0).Cost!FIELDVALTRIM)
		v.Local.sPL.Set(V.DataView.BOM!BOM_INDEX(0).PL!FIELDVALTRIM)
		f.Data.DataView.Close("BOM","BOM_INDEX")
	f.Intrinsic.Control.Else		
		f.Data.DataView.Close("BOM","BOM_INDEX")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	''''''
	
	'Get Series of cutlist selected and build filter
	f.Intrinsic.Control.If(v.DataView.CHILD$CUTLIST!vGetSerie.Exists)
		f.Data.DataView.Close("CHILD$CUTLIST","vGetSerie")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("CHILD$CUTLIST","vGetSerie",22,"SELECT_CUTLIST = 1","")
	f.Data.DataView.ToString("Child$Cutlist","vGetSerie","Serie","",",",v.Global.sCutlistSeries)
	
	f.Intrinsic.Control.If(v.DataView.Child$Cutlist!vGetSerie.RowCount,>,0)
		f.Intrinsic.String.Build("SelectSeq = 1 or Serie in ({0})",v.Global.sCutlistSeries,v.Local.sFilter)
	f.Intrinsic.Control.Else
		v.Global.sCutlistSeries.Set("")
		v.Local.sFilter.Set("SelectSeq = 1")
	f.Intrinsic.Control.EndIf
	
	'Check if the Bom Node if that Node has a child is also a parent which causes infinite loop
	f.Intrinsic.String.Build(" = '{0}'",v.local.sPart.PSQLFriendly,v.Local.sFilterParentIsChild)
	f.Intrinsic.Control.CallSub(Check_Child_Is_Parent,"sFilter",v.Local.sFilterParentIsChild)
	f.Intrinsic.Control.If(v.Args.iChildIsParent,>,1)
		f.Intrinsic.String.Build("Bom Node '{0}' has child the same as parent. Please contact GSS to fix at database level.",v.Local.sPart,v.Local.sMsg)
		f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Fatal Issue")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		

	'Get selected Seq
	f.Intrinsic.Control.If(v.DataView.Child!vMoveSeq.Exists)
		f.Data.DataView.Close("Child","vMoveSeq")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("Child","vMoveSeq",22,v.Local.sFilter,"RTR_Seq")
	f.Intrinsic.Control.If(v.DataView.Child!vMoveSeq.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No sequence selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)		
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'''''''''''''		
	'Check if the target is a router
	f.Intrinsic.String.Build("select Router from v_router_header  where ROUTER = '{0}' ",v.Local.sPart.PSQLFriendly,v.Local.sSql)	
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)	
	F.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)

		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.String.Build("{0} does not have a Router. Create Router?",v.Local.sPart.Trim,v.Local.sHold)
		f.Intrinsic.UI.Msgbox(v.Local.sHold,"Attention",4,v.Local.iRet)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxYes)
			gui.Form..Enabled(False)
			
			'Move records to ChildCut
			'----------------------------------------------------
			'Move records to ChildCut
			f.Intrinsic.Control.If(v.DataTable.ChildCut.Exists)
				f.Data.DataTable.Close("ChildCut")
			f.Intrinsic.Control.EndIf
			f.Data.DataView.ToDataTable("Child","vMoveSeq","ChildCut",True)	
			
			f.Intrinsic.Control.If(v.DataTable.TotalOrPartial.Exists)
				f.Data.DataTable.Close("TotalOrPartial")
			f.Intrinsic.Control.EndIf
			f.Data.DataTable.Create("TotalOrPartial",True)
			'Parent part
			f.Data.DataTable.AddColumn("TotalOrPartial","Serie","Float",0)
			f.Data.DataTable.AddColumn("TotalorPartial","ParentPart","String","")
			f.Data.DataTable.AddColumn("TotalorPartial","MaterialParentQty","Float",0)
			f.Data.DataTable.AddColumn("TotalOrPartial","TotalCountPerSerie","Long",0)
			f.Data.DataTable.AddColumn("TotalOrPartial","CutlistItemPerSerie","String","")
			'Component
			f.Data.DataTable.AddColumn("TotalorPartial","Component","String","")
			f.Data.DataTable.AddColumn("TotalorPartial","TotalCutlistQtyMoved","Float",0)	
			f.Data.DataTable.AddColumn("TotalOrPartial","TotalCountCutlistMove","Long",0)
			f.Data.DataTable.AddColumn("TotalOrPartial","CutlistItemMove","String","")
			'Difference
			f.Data.DataTable.AddExpressionColumn("TotalOrPartial","DifferenceQty","Float","[MaterialParentQty] - [TotalCutlistQtyMoved]")
			
			
			'Set the quantity for the Material sequences that are in the CutlistSeries collection	
			f.Intrinsic.Control.If(v.DataView.Child$Cutlist!vGetSerie.RowCount,>,0)
				f.Data.DataView.ToDataTableDistinct("CHILD","vGetSerie","CutlistSerieCollection","Serie",True)
				f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.CutlistSerieCollection.RowCount--,1)
					f.Intrinsic.String.Build("Serie = {0} and Select_Cutlist = 1",v.DataTable.CutListSerieCollection(v.Local.iCnt).Serie!FieldValString,v.Local.sFilter)
					'Cutlist Item selected
					f.Data.DataView.Create("Child$Cutlist","vCutListSelected",22,v.Local.sFilter,"")
					f.Data.DataView.ToString("Child$Cutlist","vCutListSelected","Cutlist_Item",",","','",v.Local.sCutlistItemMove)
					f.Data.DataView.Close("Child$Cutlist","vCutListSelected")			
					f.Data.DataTable.Compute("CHILD$CUTLIST","SUM([Est_UM_Units])",v.Local.sFilter,v.Local.sSumCutlist)
					f.Data.DataTable.Compute("CHILD$CUTLIST","Count([CUTLIST_ITEM])",v.Local.sFilter,v.Local.sTotalCountCutlistMove)
					
					'Cutlist Item in Total per Serie
					f.Intrinsic.String.Build("Serie = {0}",v.DataTable.CutListSerieCollection(v.Local.iCnt).Serie!FieldValString,v.Local.sFilter)
					f.Data.DataView.Create("Child$Cutlist","vCutListSelected",22,v.Local.sFilter,"")
					f.Data.DataView.ToString("Child$Cutlist","vCutListSelected","Cutlist_Item",",","','",v.Local.sCutlistItemPerSerie)
					f.Data.DataView.Close("Child$Cutlist","vCutListSelected")				
					f.Data.DataTable.Compute("CHILD$CUTLIST","Count([CUTLIST_ITEM])",v.Local.sFilter,v.Local.sTotalCountPerSerie)
					
					f.Intrinsic.Control.If(v.Local.sSumCutlist,<>,"")
						f.Intrinsic.String.Build("Serie = {0}",v.DataTable.CutListSerieCollection(v.Local.iCnt).Serie!FieldValString,v.Local.sFilter)
						f.Data.DataTable.Select("ChildCut",v.Local.sFilter,v.Local.sRowToSet)
						f.Intrinsic.Control.If(v.Local.sRowToSet,<>,"***NORETURN***")
							v.Local.sMaterialParentQty.Set(v.DataTable.ChildCut(v.Local.sRowToSet).Qty!FieldValString)
							v.Local.sParentPart.Set(v.DataTable.ChildCut(v.Local.sRowToSet).BParent!FieldValString)
							v.Local.sComponent.Set(v.DataTable.ChildCut(v.Local.sRowToSet).Part!FieldValString)
							v.Local.iSerie.Set(v.DataTable.ChildCut(v.Local.sRowToSet).Serie!FieldValString)
							'Convert used Consumption Convertion
							f.Intrinsic.Control.CallSub(Get_Consump_Convert,"sPart",v.DataTable.ChildCut(v.Local.sRowToSet).Part!FieldValString)
							f.Intrinsic.Math.Div(v.Local.sSumCutlist,v.Args.fConvert,v.Local.sSumCutlistConverted)
							F.Data.DataTable.SetValue("ChildCut",v.Local.sRowToSet,"Qty",v.Local.sSumCutlistConverted)	
							f.Data.DataTable.AddRow("TotalOrPartial","Serie",v.Local.iSerie,"ParentPart",v.Local.sParentPart,"MaterialParentQty",v.Local.sMaterialParentQty,"TotalCountPerSerie",v.Local.sTotalCountPerSerie,"CutlistItemPerSerie",v.Local.sCutlistItemPerSerie,"Component",v.Local.sComponent,"TotalCutlistQtyMoved",v.Local.sSumCutlistConverted,"TotalCountCutlistMove",v.Local.sTotalCountCutlistMove,"CutlistItemMove",v.Local.sCutlistItemMove)
						f.Intrinsic.Control.EndIf
					f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.Next(v.Local.iCnt)		
				f.Data.DataTable.Close("CutlistSerieCollection")		
			f.Intrinsic.Control.EndIf	
			'----------------------------------------------------
		
			f.Intrinsic.Control.BlockEvents
			gui.NonInv..Caption("Create Router")
			'set the values to the form before we open it
			GUI.NonInv.txtPart.Text(v.Local.sPart.left17)
			f.Intrinsic.String.Mid(v.Local.sPart,18,3,v.Local.sRev)
			GUI.NonInv.txtRev.Text(v.Local.sRev)
			
			gui.NonInv.txtPart.Enabled(False)
			gui.NonInv.txtRev.Enabled(False)			
			GUI.NonInv.txtDescr.Text(v.Local.sDescr)
			GUI.NonInv.txtDescr2.Text("")
			GUI.NonInv.txtDescr3.Text("")
			GUI.NonInv.txtUM.Text(V.Local.sUM.Left2)
			GUI.NonInv.txtPL.Text(V.Local.sPL)
			gui.NonInv.txtExtra.Text("")	
			GUI.NonInv.txtType.Text("FROMMOVESEQ")					
			'setting form values that have  "change" events active					
			'Clear dropdown before adding new items
			gui.NonInv.ddlSource.ClearItems
			gui.NonInv.ddlSource.AddItem("MFG-STOCK")
			gui.NonInv.ddlSource.AddItem("MFG-JOB")
			F.Intrinsic.Control.If(V.Local.sSource_Code,=,"F")
				GUI.NonInv.ddlSource.ListIndex(1)
			f.Intrinsic.Control.Else
				GUI.NonInv.ddlSource.ListIndex(0)			
			F.Intrinsic.Control.EndIf			
			
			gui.NonInv.ddlCategory.ClearItems
			gui.NonInv.ddlCategory.AddItem("NORMAL")
			GUI.NonInv.ddlCategory.ListIndex(0)
			gui.NonInv.cboSort.ClearItems
			gui.NonInv.cboSort.AddItems("DICTIONARY","DICTSORT")
			gui.NonInv.cboSort.Additem("SORT CODE")
			gui.NonInv.ddlNewPartLoc.ListIndex(0)
			'Set default value
			gui.NonInv.cboSort.Text("SORT CODE")
			
			f.Intrinsic.Control.CallSub(Visible_Cost_Qty,"bVisible",False)
			
			gui.NonInv.txtNoSave.Text("")	
			f.Intrinsic.Control.UnBlockEvents
			
			gui.Form..Enabled(False)
			'Resize form NonInv
			gui.NonInv..Size(10260, 4300)
		
			gui.Form.frInsertType.Visible(False)					
			GUI.NonInv.cmdBrowseInv.Visible(False)				
			
			gui.NonInv..Visible(True)					
			
		f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.Else
		'Router exists, get router
		'This will creat ChildCut table
		f.Intrinsic.Control.CallSub(GetRouter_For_MoveSeq,"Part",v.Local.sPart)			
		'ChildCutRaw	
		f.Intrinsic.Control.If(v.DataTable.ChildCutRaw.Exists)
			f.Data.DataTable.Close("childcutraw")
		f.Intrinsic.Control.EndIf

		f.Intrinsic.Control.If(v.DataView.Child$Cutlist!vGetSerie.RowCount,>,0)
			f.Intrinsic.String.Build("(SelectSeq = 1 or Serie in ({0})) and RTR_Seq > '000000' and RTR_Seq < '990000'",v.Global.sCutlistSeries,v.Local.sFilter)
		f.Intrinsic.Control.Else
			v.Global.sCutlistSeries.Set("")
			v.Local.sFilter.Set("SelectSeq = 1 and RTR_Seq > '000000' and RTR_Seq < '990000'")
		f.Intrinsic.Control.EndIf
		
		'----------------------------------------------------
		f.Data.DataView.SetFilter("Child","vMoveSeq",v.Local.sFilter)
		f.Data.DataView.ToDataTable("Child","vMoveSeq","ChildCutRaw",True)	
	
		
		f.Intrinsic.Control.If(v.DataTable.TotalOrPartial.Exists)
			f.Data.DataTable.Close("TotalOrPartial")
		f.Intrinsic.Control.EndIf
		f.Data.DataTable.Create("TotalOrPartial",True)
		'Parent part
		f.Data.DataTable.AddColumn("TotalOrPartial","Serie","Float",0)
		f.Data.DataTable.AddColumn("TotalorPartial","ParentPart","String","")
		f.Data.DataTable.AddColumn("TotalorPartial","MaterialParentQty","Float",0)
		f.Data.DataTable.AddColumn("TotalOrPartial","TotalCountPerSerie","Long",0)
		f.Data.DataTable.AddColumn("TotalOrPartial","CutlistItemPerSerie","String","")
		'Component
		f.Data.DataTable.AddColumn("TotalorPartial","Component","String","")
		f.Data.DataTable.AddColumn("TotalorPartial","TotalCutlistQtyMoved","Float",0)	
		f.Data.DataTable.AddColumn("TotalOrPartial","TotalCountCutlistMove","Long",0)
		f.Data.DataTable.AddColumn("TotalOrPartial","CutlistItemMove","String","")
		'Difference
		f.Data.DataTable.AddExpressionColumn("TotalOrPartial","DifferenceQty","Float","[MaterialParentQty] - [TotalCutlistQtyMoved]")
		
		
		'Set the quantity for the Material sequences that are in the CutlistSeries collection	
		f.Intrinsic.Control.If(v.DataView.Child$Cutlist!vGetSerie.RowCount,>,0)
			f.Data.DataView.ToDataTableDistinct("CHILD","vGetSerie","CutlistSerieCollection","Serie",True)
			f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.CutlistSerieCollection.RowCount--,1)
				f.Intrinsic.String.Build("Serie = {0} and Select_Cutlist = 1",v.DataTable.CutListSerieCollection(v.Local.iCnt).Serie!FieldValString,v.Local.sFilter)
				'Cutlist Item selected
				f.Data.DataView.Create("Child$Cutlist","vCutListSelected",22,v.Local.sFilter,"")
				f.Data.DataView.ToString("Child$Cutlist","vCutListSelected","Cutlist_Item",",","','",v.Local.sCutlistItemMove)
				f.Data.DataView.Close("Child$Cutlist","vCutListSelected")			
				f.Data.DataTable.Compute("CHILD$CUTLIST","SUM([Est_UM_Units])",v.Local.sFilter,v.Local.sSumCutlist)
				f.Data.DataTable.Compute("CHILD$CUTLIST","Count([CUTLIST_ITEM])",v.Local.sFilter,v.Local.sTotalCountCutlistMove)
				
				'Cutlist Item in Total per Serie
				f.Intrinsic.String.Build("Serie = {0}",v.DataTable.CutListSerieCollection(v.Local.iCnt).Serie!FieldValString,v.Local.sFilter)
				f.Data.DataView.Create("Child$Cutlist","vCutListSelected",22,v.Local.sFilter,"")
				f.Data.DataView.ToString("Child$Cutlist","vCutListSelected","Cutlist_Item",",","','",v.Local.sCutlistItemPerSerie)
				f.Data.DataView.Close("Child$Cutlist","vCutListSelected")				
				f.Data.DataTable.Compute("CHILD$CUTLIST","Count([CUTLIST_ITEM])",v.Local.sFilter,v.Local.sTotalCountPerSerie)
				
				f.Intrinsic.Control.If(v.Local.sSumCutlist,<>,"")
					f.Intrinsic.String.Build("Serie = {0}",v.DataTable.CutListSerieCollection(v.Local.iCnt).Serie!FieldValString,v.Local.sFilter)
					f.Data.DataTable.Select("ChildCutRaw",v.Local.sFilter,v.Local.sRowToSet)
					f.Intrinsic.Control.If(v.Local.sRowToSet,<>,"***NORETURN***")
						v.Local.sMaterialParentQty.Set(v.DataTable.ChildCutRaw(v.Local.sRowToSet).Qty!FieldValString)
						v.Local.sParentPart.Set(v.DataTable.ChildCutRaw(v.Local.sRowToSet).BParent!FieldValString)
						v.Local.sComponent.Set(v.DataTable.ChildCutRaw(v.Local.sRowToSet).Part!FieldValString)
						v.Local.iSerie.Set(v.DataTable.ChildCutRaw(v.Local.sRowToSet).Serie!FieldValString)
						
						'Convert used Consumption Convertion
						f.Intrinsic.Control.CallSub(Get_Consump_Convert,"sPart",v.DataTable.ChildCut(v.Local.sRowToSet).Part!FieldValString)
						f.Intrinsic.Math.Div(v.Local.sSumCutlist,v.Args.fConvert,v.Local.sSumCutlistConverted)
						F.Data.DataTable.SetValue("ChildCutRaw",v.Local.sRowToSet,"Qty",v.Local.sSumCutlistConverted)	
						f.Data.DataTable.AddRow("TotalOrPartial","Serie",v.Local.iSerie,"ParentPart",v.Local.sParentPart,"MaterialParentQty",v.Local.sMaterialParentQty,"TotalCountPerSerie",v.Local.sTotalCountPerSerie,"CutlistItemPerSerie",v.Local.sCutlistItemPerSerie,"Component",v.Local.sComponent,"TotalCutlistQtyMoved",v.Local.sSumCutlistConverted,"TotalCountCutlistMove",v.Local.sTotalCountCutlistMove,"CutlistItemMove",v.Local.sCutlistItemMove)
					f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.Next(v.Local.iCnt)		
			f.Data.DataTable.Close("CutlistSerieCollection")		
		f.Intrinsic.Control.EndIf	
		'----------------------------------------------------			
		
		'BN, May 3 2021 INSERT ROUTER LINES using SQL
		f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.Text.Trim,v.Screen.Form!txtFocusRev.Text.Trim,v.Local.sTopParent)
		f.Intrinsic.Control.CallSub(Insert_SelectedSeq_To_ParentRouter,"Part",v.Local.sPart,"TopParent",v.Local.sTopParent)
		
		'Merge ChildCutRaw to ChildCut	
		f.Data.DataTable.Merge("ChildCutRaw","ChildCut",True,2)
		f.Data.DataTable.AcceptChanges("ChildCut")				

		'Resequence ChildCut before saving
		f.Data.DataTable.SetSeries("ChildCut","RTR_SEQ_NUM",0,v.Global.iRSeq)
		f.Data.DataTable.SetValueFormat("ChildCut",-1,"RTR_SEQ_NUM","RTR_SEQ","000000")
	
		f.Data.DataTable.SetValue("ChildCut",-1,"BParent",v.Local.sPart,"Descr_BP",v.Local.sDescr)
		
		'Save ChildCut Router Core side	OBSOLETE : This method will lose some current existing values at the header of the target router
		'NOW USE INSERT ROUTER LINES using SQL	
		'f.Intrinsic.Control.CallSub(BuildCutListRouter_CoreSide,"sPart",v.Local.sPart)
		
		'Prepare for appending Bom Record
		f.Intrinsic.Control.If(v.DataView.Child$Cutlist!vGetSerie.RowCount,>,0)
			f.Intrinsic.String.Build("(SelectSeq = 1 or Serie in ({0})) and RTR_Seq > '000000' and LMO = 'M'",v.Global.sCutlistSeries,v.Local.sFilter)
		f.Intrinsic.Control.Else
			v.Global.sCutlistSeries.Set("")
			v.Local.sFilter.Set("SelectSeq = 1 and RTR_Seq > '000000' and LMO = 'M'")
		f.Intrinsic.Control.EndIf			
		
		f.Data.DataView.SetFilter("Child","vMoveSeq",v.Local.sFilter)
		f.Intrinsic.Control.If(v.DataTable.BomCutMove.Exists)
			f.Data.DataTable.Close("BomCutMove")
		f.Intrinsic.Control.EndIf
		f.Data.DataView.ToDataTable("Child","vMoveSeq","BomCutMove",True)
		
		'Get current Bom node and append	
		'Get Bom
		f.ODBC.Connection!conx.Execute(v.Global.sDeleteExplodeStageSQL)
		f.Intrinsic.String.Build("Insert Into GCG_4986_Stge (UserID,TRMNL,OldParent,Part,Tier,CTier,CH_Index) values ('{0}','{1}','{2}','{2}','',0,'')",v.Caller.User,v.Caller.Terminal,v.local.sPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)	
		f.Intrinsic.String.Build(" = '{0}'",v.local.sPart.PSQLFriendly,v.Local.sFilter)
		f.Intrinsic.Control.CallSub(Get_Bom_Mstr,"sTargetTable","Bom_Temp","sFilter",v.Local.sFilter)
		f.Intrinsic.Control.If(v.DataTable.Bom_Temp.RowCount,=,0)
			F.Data.DataTable.AddRow("Bom_Temp","BPARENT",v.local.sPart,"DESCR_BP",v.local.sDescr,"RTR_SEQ","000000","BOM_SEQ","0000", "PART",v.local.sPart,"DESCRIPTION",v.local.sDescr,"PL",v.local.sPL,"UM",v.local.sUM.left2,"TIER","0","CTIER","0","SOURCE_CODE",v.Local.sSource_Code,"CAT_CODE","N","Qty",1,"Set_up",0,"Cost",0,"Frequency",0,"Date_Start","000000","Date_Stop","000000","Cost_Date","00000000","Insert_Bom","00","Setup_Qty",0)	
		f.Intrinsic.Control.EndIf		
			
		'Get Bom Seq
		f.Data.DataTable.Compute("Bom_Temp","Max(Bom_Seq)","",v.Local.sBomSeq)
		f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.BomCutMove.RowCount--,1)
			f.Intrinsic.Math.Add(v.Local.sBomSeq,v.Global.iBSeq,v.Local.sBomSeq)
			f.Intrinsic.String.LPad(v.Local.sBomSeq,"0",4,v.Local.sBomSeq)		
			F.Data.DataTable.SetValue("BomCutMove",v.Local.iCnt,"Bom_Seq",v.Local.sBomSeq)	
		f.Intrinsic.Control.Next(v.Local.iCnt)
		
		f.Data.DataTable.Merge("BomCutMove","Bom_Temp",False,2)
		f.Data.DataTable.SetValue("Bom_Temp",-1,"BParent",v.Local.sPart,"DESCR_BP",v.local.sDescr)
		
		
		f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.Text.Trim,v.Screen.Form!txtFocusRev.Text.Trim,v.Local.sParent)
		
		''''''''''''''
		v.Local.sDate.Set(v.Ambient.Date.FormatYYYYMMDD)
		f.Intrinsic.String.Build("{0}00",v.Ambient.Now.FormatHHNNSS,v.Local.sTime)	
		
		'Set timestamp
		f.Data.DataTable.SetValue("Bom_Temp",-1,"Date_Maintenance",v.Local.sDate.right6,"Date_Last_Chg",v.Local.sDate,"Time_Last_Chg",v.Local.sTime,"Last_Chg_By",v.Caller.User,"Last_Chg_Prog","ESTIMATE")
		'Create Bomclicked
		f.Intrinsic.Control.If(v.DataTable.BomClicked.Exists)
			F.Data.DataTable.Close("BomClicked")
		f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.CallSub(Create_Bom_Table,"sTable","BomClicked")
		f.Data.DataTable.Merge("Bom_Temp","BomClicked",False,2)
		
		f.Intrinsic.String.Build("Delete from Bom_MSTR Where Parent = '{0}'",v.local.sPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)
		
		v.Local.sMap.Set("BPARENT@!@PARENT*!*Bom_seq@!@SEQUENCE_BOM*!*INSERT_BOM@!@INSERT_BOM*!*DATE_MAINTENANCE@!@DATE_MAINTENANCE*!*COST@!@COST*!*QTY@!@QUANTITY*!*PART@!@PART*!*DATE_START@!@DATE_START*!*DATE_STOP@!@DATE_STOP*!*BM_SERIAL_START@!@BM_SERIAL_START*!*BM_SERIAL_STOP@!@BM_SERIAL_STOP*!*UM@!@UM_INVENTORY*!*PURGE_FLAG@!@PURGE_FLAG*!*ORDR_USR_FLAG@!@ORDR_USR_FLAG*!*QUANTITY_6@!@QUANTITY_6*!*DRAWING@!@DRAWING*!*TAG@!@TAG*!*CAT_CODE@!@CATEGORY*!*SOURCE_CODE@!@SOURCE*!*FREQUENCY@!@FREQUENCY*!*DATE_LAST_CHG@!@DATE_LAST_CHG*!*TIME_LAST_CHG@!@TIME_LAST_CHG*!*LAST_CHG_BY@!@LAST_CHG_BY*!*LAST_CHG_PROG@!@LAST_CHG_PROG*!*DRAWING_SIZE@!@DRAWING_SIZE*!*REQ_TRACE@!@REQ_TRACE*!*COST_DATE@!@COST_DATE*!*COMPLETE@!@BOM_COMPLETE*!*INACTIVE@!@INACTIVE*!*SETUP_QTY@!@SETUP_QTY")
		f.Data.DataTable.SaveToDB("BomClicked","conx","Bom_MSTR","",128,v.Local.sMap)
		f.Data.DataTable.Close("BomClicked")
		f.Data.DataTable.Close("Bom_Temp")
		
		'Save to Bom_Eng
		f.Intrinsic.String.Build("Select * from Bom_Eng where Part = '{0}' and Location = ''",v.local.sPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.String.Build("Update Bom_Eng set Description = '{1}', Is_Parent = 'Y' where Part = '{0}' and Location = ''",v.local.sPart.PSQLFriendly,v.local.sDescr.PSQLFriendly,v.Local.sSQL)
		f.Intrinsic.Control.Else
			f.Intrinsic.String.Build("Insert into Bom_Eng (Part,Location,Description,Is_Parent,Date_Revision) values ('{0}','','{1}','Y','000000')",v.local.sPart.PSQLFriendly,v.local.sDescr.PSQLFriendly,v.Local.sSQL)	
		f.Intrinsic.Control.EndIf
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)
		
		'First delete relating serie for CHILD$CUTLIST	
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.Child$CutList!vGetSerie.RowCount--,0,-1)
			f.Data.DataView.deleteRow("CHILD$CUTLIST","vGetSerie",v.Local.iCnt)
		f.Intrinsic.Control.Next(v.Local.iCnt)			
		f.Data.DataTable.AcceptChanges("CHILD$CUTLIST")
		
		'Move Cutlist Total or Partial
		'Get selected Seq
		f.Intrinsic.Control.If(v.Global.sCutlistSeries,<>,"")
		
			f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.TotalOrPartial.RowCount--,1)
				f.Intrinsic.String.Build("Select PART,COMPONENT,JOB,SUFFIX,SEQ,CUTLIST_ITEM,Property_Code,DIMENSION_1,DIMENSION_2,DIMENSION_3,DIMENSION_4,DIMENSION_5,ANGLE_A,ANGLE_B,ANGLE_C,PIECES,SCRAP_PERCENT,DRAWING_NO,TAG_NO,WORKCENTER,EST_UM_UNITS,USQL_2ND_UM_UNITS,SCHEDULE_NO,SCHEDULE_SUFFIX,PIECES_COMPLETE,LOCATION,NEXT_WORKCTR,BUILT_FROM_BOM,FILLER from RTR_Cutlist where Part = '{0}' and Component = '{1}' and Cutlist_item in ('{2}')",v.Local.sParent,v.DataTable.TotalOrPartial(v.Local.iCnt).Component!FieldValString,v.DataTable.TotalOrPartial(v.Local.iCnt).CutListItemMove!FieldValString,v.Local.sSQL)
				f.Data.DataTable.CreateFromSQL("CutTemp","conx",v.Local.sSQL,True)
				f.Intrinsic.Control.If(v.DataTable.CutTemp.RowCount,>,0)
					f.Intrinsic.String.Build("Delete from RTR_Cutlist where Part = '{0}' and Component = '{1}' and Cutlist_item in ('{2}')",v.Local.sParent,v.DataTable.TotalOrPartial(v.Local.iCnt).Component!FieldValString,v.DataTable.TotalOrPartial(v.Local.iCnt).CutListItemMove!FieldValString,v.Local.sSQL)
					f.ODBC.Connection!conx.Execute(v.Local.sSQL)
					f.Data.DataTable.SetValue("CutTemp",-1,"Part",v.Local.sPart)
					f.Data.DataTable.SaveToDB("CutTemp","conx","RTR_Cutlist","",128,"PART@!@PART*!*COMPONENT@!@COMPONENT*!*JOB@!@JOB*!*SUFFIX@!@SUFFIX*!*SEQ@!@SEQ*!*CUTLIST_ITEM@!@CUTLIST_ITEM*!*Property_Code@!@Property_Code*!*DIMENSION_1@!@DIMENSION_1*!*DIMENSION_2@!@DIMENSION_2*!*DIMENSION_3@!@DIMENSION_3*!*DIMENSION_4@!@DIMENSION_4*!*DIMENSION_5@!@DIMENSION_5*!*ANGLE_A@!@ANGLE_A*!*ANGLE_B@!@ANGLE_B*!*ANGLE_C@!@ANGLE_C*!*PIECES@!@PIECES*!*SCRAP_PERCENT@!@SCRAP_PERCENT*!*DRAWING_NO@!@DRAWING_NO*!*TAG_NO@!@TAG_NO*!*WORKCENTER@!@WORKCENTER*!*EST_UM_UNITS@!@EST_UM_UNITS*!*USQL_2ND_UM_UNITS@!@USQL_2ND_UM_UNITS*!*SCHEDULE_NO@!@SCHEDULE_NO*!*SCHEDULE_SUFFIX@!@SCHEDULE_SUFFIX*!*PIECES_COMPLETE@!@PIECES_COMPLETE*!*LOCATION@!@LOCATION*!*NEXT_WORKCTR@!@NEXT_WORKCTR*!*BUILT_FROM_BOM@!@BUILT_FROM_BOM*!*FILLER@!@FILLER")			
				f.Intrinsic.Control.EndIf
				f.Data.DataTable.Close("CutTemp")			
			f.Intrinsic.Control.Next(v.Local.iCnt)
			
		f.Intrinsic.Control.EndIf	

		'Delete sequences
		
		f.Intrinsic.Control.If(v.Global.sCutlistSeries.Trim,<>,"")
			f.Intrinsic.String.Build("SelectSeq = 1 or Serie in ({0})",v.Global.sCutlistSeries,v.Local.sFilter)
		f.Intrinsic.Control.Else
			v.Global.sCutlistSeries.Set("")
			v.Local.sFilter.Set("SelectSeq = 1")
		f.Intrinsic.Control.EndIf	
		f.Data.DataView.SetFilter("Child","vMoveSeq",v.Local.sFilter)
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.Child!vMoveSeq.RowCount--,0,-1)
			v.Local.iSerie.Set(v.DataView.Child!vMoveSeq(v.Local.iCnt).Serie!FieldValString)
			f.Intrinsic.String.Build("Serie = '{0}'",v.Local.iSerie,v.Local.sFilter)
			f.Data.DataTable.Select("TotalorPartial",v.Local.sFilter,v.Local.sRow)
			'Material with Cutlist selected
			f.Intrinsic.Control.If(v.Local.sRow,<>,"***NORETURN***")
				'All to move
				f.Intrinsic.Control.If(v.DataTable.TotalOrPartial(v.Local.sRow).TotalCountPerSerie!FieldValString,=,v.DataTable.TotalOrPartial(v.Local.sRow).TotalCountCutListMove!FieldValString)
					f.Data.DataView.DeleteRow("Child","vMoveSeq",v.Local.iCnt)
				'Partial move, so reset the material seq	
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.If(v.DataTable.TotalOrPartial(v.Local.sRow).DifferenceQty!FieldValString,>,0)
						f.Data.DataView.SetValue("Child","vMoveSeq",v.Local.iCnt,"Qty",v.DataTable.TotalOrPartial(v.Local.sRow).DifferenceQty!FieldValString)
					f.Intrinsic.Control.Else
						f.Data.DataView.SetValue("Child","vMoveSeq",v.Local.iCnt,"Qty",0)
					f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.EndIf
				
			'Other sequences type	
			f.Intrinsic.Control.Else
				f.Data.DataView.DeleteRow("Child","vMoveSeq",v.Local.iCnt)		
			f.Intrinsic.Control.EndIf
			
			
		f.Intrinsic.Control.Next(v.Local.iCnt)
		f.Data.DataTable.AcceptChanges("Child")			
		f.Data.DataView.Close("Child","vMoveSeq")
		
		'Save Main Router and Commit to Bom
		f.Intrinsic.Control.CallSub(Update_Header_To_Child_Bom)
		f.Intrinsic.Control.CallSub(Commit_MainGrid_To_Bom,"bFromCreateSubcomponent",True)
		'Save Bom to GSS	
		f.Intrinsic.Control.CallSub(cmdSaveBomToGSS_Click)			
		
	F.Intrinsic.Control.EndIf		
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Prepare_MoveSeq_WithCutlist_Option.End

Program.Sub.Load_From_trvBom_NodeClick.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sFilter.Declare
	v.Local.sParent.Declare
	v.Local.iRet.Declare
	V.Local.sPart.Declare
	v.Local.sTempChkBomOnly.Declare
	v.Local.sTempChkRouterOnly.Declare	
	V.Local.sRev.Declare
	v.Local.sFlag.Declare
	v.Local.sColor.Declare
	v.Local.sKey.Declare
	
	F.Intrinsic.Control.If(V.Args.sItemName,=,"LOADBOMROUTER")
		f.Intrinsic.Control.CallSub(Check_Work_Saved)
		f.Intrinsic.Control.If(v.Args.bStop)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf	
		
	F.Intrinsic.Control.ElseIf(V.Args.sItemName,=,"LOADBOM")
		v.Local.sColor.Set(v.Screen.Form!trvBom.BackColor)
		f.Intrinsic.Control.If(v.Local.sColor,=,"10666132")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox("Unsaved work on Bom Tree. Proceed without saving?","Save Work Alert",4,v.Local.sFlag)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.If(v.Local.sFlag,<>,"6")
				F.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.ElseIf(V.Args.sItemName,=,"LOADROUTER")	
		f.Intrinsic.Control.If(v.Global.bRouterChanged)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox("Unsaved work on Main Grid. Proceed without saving?","Save Work Alert",4,v.Local.sFlag)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.If(v.Local.sFlag,<>,"6")
				F.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf	
		
	F.Intrinsic.Control.EndIf

	'get PART clicked from the CH_INDEX (node key) that was passed
	v.Local.sKey.Set(v.Args.KEY)
	f.Intrinsic.String.Build("CH_INDEX = '{0}'",v.Local.sKey.PSQLFriendly,v.Local.sFilter)
	f.Data.DataView.Create("BOM","BOM_INDEX",22,v.Local.sFilter,"BOM_SEQ ASC")
	f.Intrinsic.Control.If(v.DataView.BOM!BOM_INDEX.RowCount,>,0)
		V.Local.sParent.Set(V.DataView.BOM!BOM_INDEX(0).PART!FIELDVALTRIM)
		f.Data.DataView.Close("BOM","BOM_INDEX")
	f.Intrinsic.Control.Else		
		f.Data.DataView.Close("BOM","BOM_INDEX")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
'	'create a soft lock for this BOM
'	F.Global.General.CreateSoftLock("BM",V.Local.sParent,V.Local.iRet)
	v.Local.sTempChkBomOnly.Set(v.Screen.Form!chkBomOnly.Value)
	v.Local.sTempChkRouterOnly.Set(v.Screen.Form!chkRouterOnly.Value)
	V.Local.sPart.Set(V.Local.sParent)

	F.Intrinsic.Control.If(v.Args.sItemName,=,"LOADROUTER")	
			gui.Form.chkRouterOnly.Value(1)
			f.Intrinsic.String.Mid(v.Local.sPart,18,3,v.Local.sRev)
			f.Intrinsic.Control.BlockEvents
				gui.Form.txtFocusParent.Text(v.Local.sPart.left17)
				gui.Form.txtFocusRev.Text(v.Local.sRev)
			f.Intrinsic.Control.UnBlockEvents			
			f.Intrinsic.Control.CallSub(txtFocusRev_LostFocus,"FROMLOADROUTER",True)
			gui.Form.chkRouterOnly.Value(v.Local.sTempChkRouterOnly)
		
	F.Intrinsic.Control.ElseIf(v.Args.sItemName,=,"LOADBOM")
		gui.Form.chkBomOnly.Value(1)
		f.Intrinsic.String.Mid(v.Local.sPart,18,3,v.Local.sRev)
		f.Intrinsic.Control.BlockEvents
			gui.Form.txtParent.Text(v.Local.sPart.left17)
			gui.Form.txtParentRev.Text(v.Local.sRev)
		f.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.Control.CallSub(cmdRefreshBomTreeLoad_Click)
		gui.Form.chkBomOnly.Value(v.Local.sTempChkBomOnly)		
	f.Intrinsic.Control.ElseIf(v.Args.sItemName,=,"LOADBOMROUTER")
		gui.Form.chkBomOnly.Value(0)
		gui.Form.chkRouterOnly.Value(0)
		f.Intrinsic.String.Mid(v.Local.sPart,18,3,v.Local.sRev)
		f.Intrinsic.Control.BlockEvents
			gui.Form.txtParent.Text(v.Local.sPart.left17)
			gui.Form.txtParentRev.Text(v.Local.sRev)
		f.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.Control.CallSub(cmdRefreshBomTreeLoad_Click)
		gui.Form.chkBomOnly.Value(v.Local.sTempChkBomOnly)
		gui.Form.chkRouterOnly.Value(v.Local.sTempChkRouterOnly)		
	
	F.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Load_From_trvBom_NodeClick.End

Program.Sub.Check_Work_Saved.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sFlag.Declare
	v.Local.sColor.Declare
	v.Local.bStop.Declare
	
	'Check if Router grid has something to save
	f.Intrinsic.Control.If(v.Global.bRouterChanged)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Unsaved work on Main Grid. Proceed without saving?","Save Work Alert",4,v.Local.sFlag)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.If(v.Local.sFlag,<>,"6")
			v.Local.bStop.Set(True)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf	
	
	'Check if Bom Tree has something to save
	v.Local.sColor.Set(v.Screen.Form!trvBom.BackColor)
	f.Intrinsic.Control.If(v.Local.sColor,=,"10666132")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Unsaved work on Bom Tree. Proceed without saving?","Save Work Alert",4,v.Local.sFlag)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.If(v.Local.sFlag,<>,"6")
			v.Local.bStop.Set(True)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Variable.AddRV("bStop",v.Local.bStop)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Check_Work_Saved.End

Program.Sub.buildRouterGrid_From_TrvNodeClick.Start
'This sub is called only by TrvBom_NodeClick
'Must have Tier as argument
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sParent.Declare
	v.Local.sTier.Declare
	v.Local.sFilter.Declare
	v.Local.iRet.Declare
	V.Local.fBomSeq.Declare
	v.Local.fRTRSeq.Declare
	V.Local.iCount.Declare
	v.Local.sPart.Declare
	v.Local.sRev.Declare
	v.Local.sSql.Declare
	v.Local.sRet.Declare	
	V.Local.fCost.Declare
	
	v.Local.fPurch_Factor.Declare
	v.Local.fPurch.Declare
	v.Local.iIndex.Declare	
	V.Local.sSerialize.Declare
	
	f.Intrinsic.Control.If(v.DataTable.TEMP_CHILD.Exists,=,True)
		f.Data.DataTable.Close("TEMP_CHILD")
	f.Intrinsic.Control.EndIf
	
	v.Local.sParent.Set(v.Args.PARENT)
	v.Local.sTier.Set(V.Args.TIER)
	
	F.Intrinsic.String.Build("[BPARENT] = '{0}' AND TIER = '{1}'",v.Local.sParent.PSQLFriendly,v.Local.sTier.PSQLFriendly,V.Local.sFilter)
	f.Data.DataView.SetFilter("BOM","V_BOM",V.Local.sFilter)
	f.Data.DataView.ToDataTable("BOM","V_BOM","TEMP_CHILD",True)
	
	'filter the view and add these records to the 'child' data table.
	f.Intrinsic.Control.If(v.DataTable.TEMP_CHILD.RowCount,>,0)
	
		gui.Form.GGC_Bom.visible(False)		
		
		'For Cutlist
		f.Intrinsic.Control.If(v.Global.bBindCutList)
			'Temp Serialize		
			gui.Form.GGC_Bom.Serialize("GV_Child",V.Local.sSerialize)
			f.Intrinsic.Control.CallSub(Recreate_Table_Grid_Child)	
			gui.Form.GGC_Bom.Deserialize(V.Local.sSerialize)
		f.Intrinsic.Control.Else
			F.Data.DataTable.DeleteRow("CHILD")
			F.Data.DataTable.ACCEPTCHANGES("CHILD")
		f.Intrinsic.Control.EndIf	
		
		f.Data.DataTable.AddColumn("TEMP_CHILD","LMO","STRING","M",1)
		F.Data.DataTable.Merge("TEMP_CHILD","CHILD",FALSE,2)
		F.Data.DataTable.Close("TEMP_CHILD")
		f.Data.DataTable.AcceptChanges("CHILD")
		'gui.Form.GGC_Bom.MainView("GV_CHILD")

		'Disable router header part
		f.Intrinsic.Control.BlockEvents
		v.Local.sPart.Set(V.DataTable.CHILD(0).BPARENT!FIELDVALSTRING)	
		v.Local.sParent.Set(V.DataTable.CHILD(0).BPARENT!FIELDVALSTRING)
		f.Intrinsic.String.Build("select Left(h.Router,17) as Router,Substring(h.Router,18,3) as Rev,rtrim(h.DESCRIPTION_ROUTER) as Description,rtrim(d.Desc_Router_2) as Description_2,rtrim(d.Desc_Router_3) as Description_3,h.UM_INVENTORY as UM_Inventory ,h.PROD_LINE as Product_Line,Case When s.Inactive = '1' then 'No' Else 'Yes' End as Active,s.Complete  from v_router_header h left join v_router_desc d on h.Router = d.Router and h.Router_Suffix = d.Router_Suffix left join v_ROUTER_SUPP_HDR s on h.Router = s.Rtr_Num and h.Router_Suffix = s.Suffix  where h.ROUTER = '{0}' ",V.Local.sParent.PSQLFriendly,v.Local.sSql)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
			'Router does not exist
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Router does not exist. What the router grid displaying is Bom view ONLY.","Attention")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			gui.Form.txtFocusParent.Text(v.Local.sParent.Left17)
			f.Intrinsic.String.Mid(v.Local.sParent,18,3,v.Local.sRev)
			gui.Form.txtFocusRev.Text(v.Local.sRev)
			gui.Form.txtFocusDescr.Text(V.DataTable.CHILD(0).DESCR_BP!FIELDVALSTRING)
		f.Intrinsic.Control.Else
			'Router exists set router header texboxes
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			gui.Form.txtFocusParent.Text(V.Local.sRet(0))
			gui.Form.txtFocusRev.Text(v.Local.sRet(1))
			gui.Form.txtFocusDescr.Text(V.Local.sRet(2))
			gui.Form.txtDescr2.Text(v.Local.sRet(3))
			gui.Form.txtDescr3.Text(v.Local.sRet(4))
			gui.Form.txtUM.Text(V.Local.sRet(5))	
			gui.Form.txtPL.Text(v.Local.sRet(6))
			f.Intrinsic.Control.If(v.Local.sRet(7),=,"True")
				gui.Form.chkRtrComp.Value(1)
			f.Intrinsic.Control.Else
				gui.Form.chkRtrComp.Value(0)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf			

		gui.Form.txtBomQty.Text(V.DataTable.CHILD(0).QTY!FIELDVALFLOAT)		

		F.Intrinsic.Control.For(V.Local.iCount,0,v.DataTable.CHILD.RowCount--,1)
			F.Intrinsic.Control.If(V.DataTable.CHILD(V.Local.iCount).RTR_SEQ!FIELDVALTRIM,<,"990000")
				v.local.fBomSeq.Set(v.DataTable.CHILD(v.Local.iCount).BOM_SEQ!FIELDVALTRIM)
				V.local.fRTRSeq.Set(v.DataTable.CHILD(v.Local.iCount).RTR_SEQ!FIELDVALTRIM)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Next(V.Local.iCount)		
		F.Intrinsic.Control.CallSub(getRouter,"PART",V.Args.PARENT,"DESCR",V.DataTable.CHILD(0).DESCR_BP!FIELDVALSTRING,"BSEQ",V.Local.fBomSeq,"RSEQ",V.Local.fRTRSeq)
		f.Intrinsic.Control.UnBlockEvents
		
		'For Cutlist
		f.Intrinsic.Control.If(v.Global.bBindCutList)
			f.Intrinsic.Control.CallSub(Bind_CutList)		
		f.Intrinsic.Control.EndIf			
		
	f.Intrinsic.Control.Else
	
		F.Data.DataTable.Close("TEMP_CHILD")
		'f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		'f.Intrinsic.UI.Msgbox("Create BOM for this part?","Child Part",4,v.Local.iRet)
		'f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		'f.Intrinsic.Control.If(v.Local.iRet,=,6)
			'call newbom to create new Bom, pass the Part clicked as the parent, the node clicked position(CH_Index within current Bom table) as the Tier
			f.Intrinsic.Control.CallSub(NewBom_From_TrvNodeClick,"PART",V.Args.PARENT,"CH_Index",V.Args.TIER)
			f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,<,2)
				v.Local.sPart.Set(v.DataTable.CHILD(0).BPARENT!FIELDVALSTRING)
				f.Intrinsic.String.Build("select ROUTER from V_ROUTER_HEADER where ROUTER = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
				F.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
				f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
					f.Intrinsic.Control.CallSub(getRouter,"PART",V.Local.sPart,"BSEQ","0000","QTY","1","DESCR",V.Screen.Form!txtFocusDescr.TEXT)
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
		'f.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.CHILD(0).COMPLETE!FIELDVALTRIM,=,"Y")
		'blocking events to the chkBomComp_click doesn't fire
		f.Intrinsic.Control.If(V.Global.iRights,<,2)
			v.Global.bReadOnly.Set(True)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		'blocking events to the chkBomComp_click doesn't fire
		f.Intrinsic.Control.If(V.Global.iRights,>,0)
			v.Global.bReadOnly.Set(False)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
	'extend the cost for material sequences only
	f.Data.DataTable.SetValueFormat("Child",-1,"PurchCost2","Purch_Cost","0.00000000")
	
	'Fill
	f.Intrinsic.Control.CallSub(Fill_From_Dictionaries_CHILD)	
	
	'Quantity 
	f.Intrinsic.Control.CallSub(getQuantities,"PART",V.Screen.Form!txtFocusParent.TEXT,"REV",V.Screen.Form!txtFocusRev.TEXT)
	
	f.Intrinsic.Control.CallSub(Populate_LongPart_Router)
	
	
	gui.Form.GGC_Bom.visible(True)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.buildRouterGrid_From_TrvNodeClick.End

Program.Sub.NewBom_From_TrvNodeClick.Start
'This sub is called only by buildRouterGrid_From_TrvNodeClick
'Must have Part ant TIER as arguments
'actually this sub gets only 1 record from the current Bom. That record is the Bom_Seq 0000 or RTR_Seq 000000
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sFilter.Declare
	v.Local.sRet.Declare
	V.Local.sIndex.Declare
	V.Local.sPart.Declare
	v.Local.sCH_Index.Declare
	v.Local.sRev.Declare
	v.Local.sSerialize.Declare
	
	'we are taking an existing component of BOM and making it a PARENT or a subassembly.
	'add this record to the CHILD datatable with a SEQ of '0000'
	v.Local.sPart.Set(v.Args.Part)
	v.Local.sCH_Index.Set(v.Args.CH_Index)
	f.Intrinsic.String.Build("PART = '{0}' AND CH_INDEX = '{1}'",v.Local.sPart.PSQLFriendly,v.Local.sCH_Index.PSQLFriendly,v.Local.sFilter)
	F.Data.DataView.SetFilter("BOM","V_BOM",v.Local.sFilter)
	f.Data.DataView.ToDataTable("BOM","V_BOM","TEMP_CHILD",True)
	F.Data.DataTable.AddColumn("TEMP_CHILD","LMO","STRING","",1)
	'If we go to this point, Temp_Child must have a record, but we double check.
	f.Intrinsic.Control.If(v.DataTable.TEMP_CHILD.RowCount,>,0)
		'change some values before we add it to the "child" grid
		f.Data.DataTable.SetValue("TEMP_CHILD",0,"BPARENT",V.DataTable.TEMP_CHILD(0).PART!FIELDVALTRIM,"BOM_SEQ","0000","RTR_SEQ","000000","DESCR_BP",V.DataTable.TEMP_CHILD(0).DESCRIPTION!FIELDVALTRIM,"DESCRIPTION_2",V.DataTable.TEMP_CHILD(0).DESCRIPTION_2!FIELDVALTRIM,"DESCRIPTION_3",V.DataTable.TEMP_CHILD(0).DESCRIPTION_3!FIELDVALTRIM,"LMO","M","TIER",v.Local.sCH_Index,"CTIER",0)

		'For Cutlist
		f.Intrinsic.Control.If(v.Global.bBindCutList)
			'Temp Serialize		
			gui.Form.GGC_Bom.Serialize("GV_Child",V.Local.sSerialize)
			f.Intrinsic.Control.CallSub(Recreate_Table_Grid_Child)	
			gui.Form.GGC_Bom.Deserialize(V.Local.sSerialize)
		f.Intrinsic.Control.Else
			F.Data.DataTable.DeleteRow("CHILD")
			F.Data.DataTable.AcceptChanges("CHILD")
		f.Intrinsic.Control.EndIf

		F.Data.DataTable.Merge("TEMP_CHILD","CHILD",FALSE,2)
		
		F.Data.DataView.SetFilter("CHILD","V_CHILD","PART <> [BPARENT] AND Part <> '~~~@!@~~~@!@'")
		v.Local.sPart.Set(V.DataTable.CHILD(0).BPARENT!FIELDVALTRIM)
		'Set Router header texboxes
		f.Intrinsic.Control.BlockEvents
		gui.Form.txtFocusParent.Text(v.Local.sPart.left17)
		f.Intrinsic.String.Mid(v.Local.sPart,18,3,v.Local.sRev)
		gui.Form.txtFocusRev.Text(v.Local.sRev)	
		gui.Form.txtFocusDescr.Text(V.DataTable.CHILD(0).DESCR_BP!FIELDVALTRIM)
		gui.Form.txtUM.Text(v.DataTable.CHILD(0).UM!FIELDVALTRIM)
		gui.Form.txtDescr2.Text(v.DataTable.CHILD(0).DESCRIPTION_2!FIELDVALTRIM)
		gui.Form.txtDescr3.Text(v.DataTable.CHILD(0).DESCRIPTION_3!FIELDVALTRIM)
		f.Intrinsic.Control.UnBlockEvents
		'For Cutlist
		f.Intrinsic.Control.If(v.Global.bBindCutList)
			f.Intrinsic.Control.CallSub(Bind_CutList)		
		f.Intrinsic.Control.EndIf			
		'Refresh router main view
		gui.Form.GGC_Bom.MainView("GV_CHILD")
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.Close("TEMP_CHILD")

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.NewBom_From_TrvNodeClick.End

Program.Sub.cmdCommit_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'Prevent double cycle
	f.Intrinsic.Control.IF(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveCommit)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveCommit.Set(True)	
	
	gui.Form.lblResult.Visible(True)
	f.Intrinsic.Control.CallSub(Delete_Duplicate_000000_RtrSeq)
	f.Intrinsic.Control.CallSub(Update_Header_To_Child_Bom)
	f.Intrinsic.Control.CallSub(Commit_MainGrid_To_Bom)
	gui.Form.lblResult.Visible(False)
	v.Global.bActiveCommit.Set(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdCommit_Click.End

Program.Sub.Commit_MainGrid_To_Bom.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sParent.Declare
	v.Local.iCount.Declare
	v.Local.sTier.Declare
	v.Local.sCTier.Declare
	v.Local.sType.Declare
	V.Local.fQty.Declare
	V.Local.fMax.Declare
	v.Local.sRet.Declare
	V.Local.iBase.Declare
	v.Local.sWeight.Declare
	v.Local.iCnt.Declare
	v.Local.sDesc.Declare
	v.Local.sUM.Declare
	v.Local.fCost.Declare
	v.Local.sSource_Code.Declare
	v.Local.sPart.Declare
	v.Local.sCat_Code.Declare
	v.Local.sSource.Declare
	v.Local.sRow.Declare
	v.Local.sRefDescr.Declare
	v.Local.bFromCreateSubComponent.Declare
	v.Local.sHold.Declare
	v.Local.fHold.Declare
	v.Local.sSQL.Declare
	v.Local.bFromCutlistReturn.Declare

	
	f.Intrinsic.String.RPad("","-",30,v.Local.sRefDescr)
	
	F.Intrinsic.Control.If(v.Global.iRights,<=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("User does not has permission to commit.","Rights 0")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.cmdCommit.Enabled(False)
		f.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Nothing to Commit","Error")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Global.bReadOnly)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Router grid is Readonly.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	gui.Form.cmdSaveBomToGSS.Enabled(False)

	'addressing the CTIER value of any new items added to the ROUTER/BOM
	F.Data.DataView.Create("CHILD","V_CTIER",22,"LMO = 'M' AND CTIER Is Null  AND TRIM([BPARENT]) <> TRIM(PART) ","RTR_SEQ ASC")
	F.Data.DataTable.Compute("CHILD","MAX(CTIER)","",V.Local.fMax)
	F.Intrinsic.Control.If(V.Local.fMax,>,0)
		F.Intrinsic.Math.Add(V.Local.fMax,1,V.Local.fMax)
	F.Intrinsic.Control.Else
		V.Local.fMax.Set(1)
	F.Intrinsic.Control.EndIf
	F.Data.DataView.SetSeries("CHILD","V_CTIER","CTIER",V.Local.fMax,1)
	f.Data.DataView.Close("CHILD","V_CTIER")
	
	f.Intrinsic.Control.BlockEvents
	gui.Form.txtParent.Text(v.Screen.Form!txtFocusParent.text)
	gui.Form.txtParentRev.Text(v.Screen.Form!txtFocusRev.text)

	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.text,v.Screen.Form!txtFocusRev.text,v.Local.sPart)

	'More info from bom head
	f.Intrinsic.String.Build("SELECT Top 1 Bom_Complete,UM_Inventory,Cost,Source,Memo_1,Memo_2 FROM BOM_ENG e left join Bom_Mstr m on e.Part = m.Parent WHERE e.Part = '{0}' and m.PARENT = '{0}'  and m.Sequence_Bom = '0000' ",v.Local.sPart.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		f.Intrinsic.Control.If(v.Local.sRet(0).Trim,=,"Y")
			gui.Form.chkBomComp.Value(1)
		f.Intrinsic.Control.Else
			gui.Form.chkBomComp.Value(0)
		f.Intrinsic.Control.EndIf
		gui.Form.txtBomUM.Text(v.Local.sRet(1).Trim)
		v.Local.fHold.Set(v.Local.sRet(2).Trim)
		f.Intrinsic.Control.CallSub(Build_Mask_Cost)
		f.Intrinsic.String.Format(v.Local.fHold,v.Args.sMaskCost,v.Local.sHold)
		gui.Form.txtBomUnitCost.Text(v.Local.sHold)		
		V.Local.sHold.Set(v.Local.sRet(3).Trim)
		v.Local.sHold.Set(v.Dictionary.SOURCE![V.Local.sHold])
		gui.Form.ddlBomSource.Text(v.Local.sHold)
		gui.Form.txtMemo1.Text(v.Local.sRet(4))
		gui.Form.txtMemo2.Text(v.Local.sRet(5))			
	f.Intrinsic.Control.EndIf
	'Bom Notes
	f.Intrinsic.String.Build("Select Top 1 Text from Bom_Notes where Parent = '{0}' and Parent_Seq = '0000' and Parent_Ins = '00'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		gui.Form.txtBomExtraDescr.Text(v.Local.sRet)
	f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.UnBlockEvents

	gui.Form.txtParentDescr.Text(v.Screen.Form!txtFocusDescr.text)
	Gui.Form.txtBomUM.Text(v.Screen.Form!txtUM.Text.Trim)
	
	
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.text,v.Screen.Form!txtFocusRev.text,v.Local.sParent)
	v.Local.fQty.Set(v.Screen.Form!txtBomQty.text)
	
	f.Data.DataTable.Select("Child","IsNull(RTR_Seq,'') = '000000'",v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		'if this was started as a new router, the RTR_SEQ for the first line is blank. It needs to be filled in.
		F.Data.DataTable.SetValue("CHILD",v.Local.sRet(0),"BPARENT",v.Local.sParent,"DESCR_BP",V.Screen.Form!txtFocusDescr.Text,"BOM_SEQ","0000","RTR_SEQ","000000","PART",v.Local.sParent,"DESCRIPTION",V.Screen.Form!txtFocusDescr.Text,"LMO","M","UM",V.Screen.Form!txtUM.TEXT,"QTY","1")	

	f.Intrinsic.Control.EndIf
	
	
	'the "type" setting affects which sub is called later for building the treeview
	V.Local.sType.Set("NEW")
	f.Intrinsic.Control.UnBlockEvents
		
	'Create a temporary filtered view of child
	f.Data.DataView.Create("CHILD","V_COMMIT",22,"(LMO = 'M' and Trim(PhantomPart) = '' and Trim(RefPart) = '') or (LMO = 'C' and Trim(PhantomPart) <> '' and Cat_Code = 'P') or (LMO = 'C' and Trim(RefPart) <> '' and Cat_Code = 'R')","RTR_Seq Asc")	
	
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.TEXT,V.Screen.Form!txtFocusRev.TEXT,V.Local.sParent)	
	'set the tiers for use in the treeview Keys
	v.Local.sTier.Set(v.DataTable.CHILD(0).TIER!FIELDVALTRIM)
	V.Local.sCTier.Set(V.DataTable.CHILD(0).CTIER!FIELDVALTRIM)
	'we're using .1 as the comparator value since 0 is a valid possibility.  It could be 0 or higher
'	F.Intrinsic.Control.If(V.Local.sTier,>,".1")
'		f.Data.DataView.SetValue("CHILD","V_COMMIT",-1,"TIER",V.Local.sTier)
'	F.Intrinsic.Control.Else
'		f.Data.DataView.SetValue("CHILD","V_COMMIT",-1,"TIER",0)
'	F.Intrinsic.Control.EndIf
	f.Data.DataView.SetValue("CHILD","V_COMMIT",-1,"TIER",0)
'
	F.Intrinsic.Control.If(V.DataTable.TEMP.Exists)
		f.Data.DataTable.Close("Temp")
	F.Intrinsic.Control.EndIf
	
	F.Data.DataView.ToDataTable("CHILD","V_COMMIT","TEMP",True)
	F.DatA.DataView.Close("CHILD","V_COMMIT")
	
	f.Data.DataTable.Select("Temp","(LMO = 'C' and Trim(PhantomPart) <> '' and Cat_Code = 'P') or (LMO = 'C' and Trim(RefPart) <> '' and Cat_Code = 'R')",v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
		
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.sRet.UBound,1)
			v.Local.sRow.Set(v.Local.sRet(v.Local.iCnt))			
			
			f.Intrinsic.Control.If(v.Datatable.Temp(v.local.sRow).PhantomPart!FieldValTrim,<>,"")
				v.Local.sPart.Set(v.Datatable.Temp(v.local.sRow).PhantomPart!FieldValTrim)
				v.Local.sCat_Code.Set("P")
				f.Intrinsic.Control.If(v.Datatable.Temp(v.local.sRow).Description_3!FieldValTrim,<>,"")
					v.Local.sDesc.Set(v.Datatable.Temp(v.local.sRow).Description_3!FieldValString)
				f.Intrinsic.Control.Else
					v.Local.sDesc.Set(v.Dictionary.dPartTrimDescription![v.Local.sPart.Trim])
					f.Intrinsic.Control.If(v.Local.sDesc.Trim,=,"")
						v.Local.sDesc.Set(v.Local.sPart.Trim)
					f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.EndIf
				
			f.Intrinsic.Control.ElseIf(v.Datatable.Temp(v.local.sRow).RefPart!FieldValTrim,<>,"")
				v.Local.sPart.Set(v.Datatable.Temp(v.local.sRow).RefPart!FieldValTrim)
				v.Local.sCat_Code.Set("R")
				v.Local.sDesc.Set(v.Dictionary.dPartTrimDescription![v.Local.sPart.Trim])
				f.Intrinsic.Control.If(v.Local.sDesc.Trim,=,"")
					v.Local.sDesc.Set(v.Local.sRefDescr)
				f.Intrinsic.Control.EndIf				
				
			f.Intrinsic.Control.EndIf
			f.Intrinsic.String.RPad(v.Local.sPart," ",20,v.Local.sPart)
			
			f.Intrinsic.Control.If(v.Datatable.Temp(v.local.sRow).UM!FieldValTrim,<>,"")
				v.Local.sUM.Set(v.Datatable.Temp(v.local.sRow).UM!FieldValTrim)
			f.Intrinsic.Control.Else
				v.Local.sUM.Set("EA")
			f.Intrinsic.Control.EndIf		
			v.Local.fCost.Set(v.Datatable.Temp(v.local.sRow).Cost!FieldValString)
			v.Local.fQty.Set(v.Datatable.Temp(v.local.sRow).Qty!FieldValString)
			
			v.Local.sSource_Code.Set(v.Datatable.Temp(v.local.sRow).Description_2!FieldValString)
			v.Local.sSource.Set(v.dictionary.Source![v.Local.sSource_Code])
			f.Intrinsic.Control.If(v.Local.sSource.Trim,=,"")
				v.Local.sSource_Code.Set("M")
			f.Intrinsic.Control.EndIf
					
			f.Data.DataTable.SetValue("Temp",v.Local.sRow,"Part",v.Local.sPart,"Description",v.Local.sDesc,"LMO","M","UM",v.local.sUM.left2,"Cat_Code",v.Local.sCat_Code,"Source_Code",v.Local.sSource_Code)	
			
		f.Intrinsic.Control.Next(v.Local.iCnt)
	f.Intrinsic.Control.EndIf

	f.Data.DataTable.DeleteRow("Bom")
	f.Data.DataTable.AcceptChanges("Bom")

	'Get Weight	
	f.Data.DataTable.Compute("Temp","Sum(ExtendedConsumpWeight)","RTR_Seq <> '000000'",v.Local.sWeight)
	f.Intrinsic.Control.CallSub(Build_Mask)
	f.Intrinsic.String.Format(v.Local.sWeight,v.Args.sMaskWeight,v.Local.sWeight)	
	gui.Form.txtParentWeight.Text(v.Local.sWeight)
	f.Data.DataTable.AcceptChanges("Temp")	

	f.Intrinsic.Control.CallSub(GetBomByCommit,"TABLE","TEMP","PARENT",V.Screen.Form!txtFocusParent.TEXT,"REV",V.Screen.Form!txtFocusRev.TEXT,"TIER",0,"CTIER",0)
	f.Data.DataTable.Close("TEMP")
	
	f.Intrinsic.Variable.ArgExists("bFromCreateSubcomponent",v.Local.bFromCreateSubComponent)
	f.Intrinsic.Variable.ArgExists("bFromCutListReturn",v.Local.bFromCutListReturn)
	f.Intrinsic.Control.If(v.Local.bFromCreateSubComponent)
		f.Intrinsic.Control.CallSub(SaveCoreRouter_from_Commit,"PART",V.Screen.Form!txtFocusParent.TEXT,"REV",v.Screen.Form!txtFocusRev.text,"BOM",True,"bAskOverwrite",False)
	f.Intrinsic.Control.ElseIf(v.Local.bFromCutlistReturn,=,True)
		f.Intrinsic.Control.CallSub(SaveCoreRouter_from_Commit,"PART",V.Screen.Form!txtFocusParent.TEXT,"REV",v.Screen.Form!txtFocusRev.text,"BOM",True,"bAskOverwrite",False)
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(SaveCoreRouter_from_Commit,"PART",V.Screen.Form!txtFocusParent.TEXT,"REV",v.Screen.Form!txtFocusRev.text,"BOM",True)
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(v.Args.sRouterUpload,=,"Failed")
		gui.Form.trvBom.BackColor(v.Color.White)
		gui.Form.cmdSaveBomToGSS.Enabled(True)
		v.Global.bRouterChanged.Set(False)
		gui.Form..AlwaysOnTop(True)
		gui.Form..AlwaysOnTop(False)		
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	

	'Set Bom header
	f.Intrinsic.Control.If(v.DataTable.BOM.Exists)
		f.Intrinsic.Control.If(v.DataTable.BOM.RowCount,>,0)
			v.Local.iBase.Set(0)
			v.Local.sParent.Set(v.DataTable.BOM(V.Local.iBase).BParent!FieldValString)
			gui.Form.txtParent.Text(v.Local.sParent.left17)
			f.Intrinsic.String.Mid(v.Local.sParent,18,3,v.Local.sRet)
			gui.Form.txtParentRev.Text(v.Local.sRet)
			gui.Form.txtParentDescr.Text(v.DataTable.BOM(V.Local.iBase).DESCR_BP!FieldValString)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.BUILDQTY.RowCount,>,0)
		f.Intrinsic.Control.CallSub(saveBuildQuantity)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.If(v.Screen.Form!frameTree.Visible,=,0)
		f.Intrinsic.Control.CallSub(picHideTree_Click)
	f.Intrinsic.Control.EndIf	
	
	gui.Form.cmdSaveBomToGSS.Enabled(True)
	v.Global.bRouterChanged.Set(False)
	
	'Turn color on the bom tree to say that it has just been committed, it needs to be saved to core
	gui.Form.trvBom.BackColor(10666132)
	
	gui.Form..AlwaysOnTop(True)
	gui.Form..AlwaysOnTop(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Commit_MainGrid_To_Bom.End

Program.Sub.GetBomByCommit.Start
F.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iCount.Declare
	V.Local.sParent.Declare
	V.Local.sOldParent.Declare
	V.Local.sParentFilter.Declare
	v.Local.sParentTrim.Declare
	v.Local.sFilter.Declare	
	v.Local.iBomSeq.Declare
	v.Local.sBomSeq.Declare	
	v.Local.sPartList.Declare
	v.Local.sWeight.Declare
	v.Local.sMsg.Declare
	'loading the bom in to the table BOM  ============================================================== 
	'Don comment: should we check for softlocks at this time, or only when loading the router?. I think every parent within the BOM should record a LOCK and clear it later.	
	
	''F.Intrinsic.UI.InvokeWaitDialog("Retrieving BOM....","PLEASE WAIT",0)
	
	f.Intrinsic.String.GSSPartString(v.Args.parent,v.Args.rev,v.Local.sParent)
	
	'Build first level
	f.Data.DataView.Create("TEMP","V_TEMP",22,"","RTR_SEQ ASC,BOM_SEQ ASC")
	F.Intrinsic.Control.If(V.DataTable.TBom.Exists)
		f.Data.DataTable.Close("TBom")
	F.Intrinsic.Control.EndIf
	F.Data.DataView.ToDataTable("TEMP","V_TEMP","TBom",True)
	f.Data.DataView.Close("TEMP","V_TEMP")
	
	f.Intrinsic.Control.If(v.DataTable.TBom.RowCount,=,0)	
		f.Data.DataTable.Close("TBom")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No BOM found","BOM Return")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		F.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf
	
	'check the sequence 0000 in the getbom sub, if not existed, exitsub, otherwise the treeview building will break.
	F.Intrinsic.String.Build("BPARENT = '{0}' and Bom_Seq = '0000'",V.Local.sParent.PSQLFriendly,v.Local.sFilter)
	f.Data.DataView.Create("TBom","dv0000check",22,v.Local.sFilter,"")
	f.Intrinsic.Control.If(v.DataView.TBom!dv0000check.RowCount,=,0)	
		f.Data.DataTable.Close("TBom")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("The parent Bom does not have the Bom Sequence 0000 from DB.","Invalid")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		F.Intrinsic.Control.ExitSub
'	F.Intrinsic.Control.ElseIf(v.DataView.TBom!dv0000check.RowCount,>,1)
'		f.Data.DataTable.Close("TBom")
'		f.Intrinsic.UI.Msgbox("The parent Bom has more than 1 sequence 0000","Invalid")
'		F.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf		
	'Check if child is parent
	v.Local.sParentTrim.Set(v.Local.sParent.Trim)
	F.Intrinsic.String.Build("Trim(BPARENT) = '{0}' and Trim(Part) = '{0}'",V.Local.sParentTrim.PSQLFriendly,v.Local.sFilter)
	f.Data.DataView.SetFilter("TBom","dv0000check",v.Local.sFilter)
	F.Intrinsic.Control.If(v.DataView.TBom!dv0000check.RowCount,>,1)
		f.Data.DataTable.Close("TBom")
		f.Intrinsic.UI.Msgbox("The parent Bom has child that is parent","Child is Parent")
		F.Intrinsic.Control.ExitSub			
	F.Intrinsic.Control.EndIf
	'Check if has more than 1 row wit 0000
	f.Data.DataView.SetFilter("TBom","dv0000check","RTR_Seq = '000000'")
	F.Intrinsic.Control.If(v.DataView.TBom!dv0000check.RowCount,>,1)
		f.Data.DataTable.Close("TBom")
		f.Intrinsic.UI.Msgbox("The Router has more than 1 sequence 000000","Router Root Seq Issue")
		F.Intrinsic.Control.ExitSub			
	F.Intrinsic.Control.EndIf	

	f.Data.DataView.Close("TBom","dv0000check")	
	
	F.Intrinsic.Control.For(V.Local.iCount,0,V.DataTable.TBom.RowCount--,1)
		f.Intrinsic.String.LPad(v.Local.iBomSeq,"0",4,v.Local.sBomSeq)
		f.Data.DataTable.SetValue("TBom",v.Local.iCount,"Bom_Seq",v.Local.sBomSeq)
		f.Intrinsic.Math.Add(v.Local.iBomSeq,v.Global.iBSeq,v.Local.iBomSeq)
	F.Intrinsic.Control.Next(V.Local.iCount)
	
	F.Data.DataTable.SetValue("TBom",-1,"TIER",V.Args.CTier)
	f.Data.DataTable.SetSeries("TBom","CTIER",0,1)	
	F.Data.DataTable.RemoveColumn("TBom","CH_INDEX")
	F.Data.DataTable.AddExpressionColumn("TBom","CH_INDEX","STRING","IIF(TIER < '1', CTIER, TIER + '.' + CTIER)")
	F.Data.DataTable.Merge("TBom","BOM",False,2)
	f.Data.DataTable.AcceptChanges("Bom")
	'remove the parent item so we don't join it's children in again
	f.Data.DataTable.DeleteRow("TBom",0)
	F.Data.DataTable.AddExpressionColumn("TBom","OLDPARENT","STRING","BPARENT")	
	
	F.Intrinsic.Control.DoUntil(V.DataTable.TBom.RowCount,<,1)	
		'Prepare parent part list for the next level
		f.Data.DataView.Create("TBom","v_Lev")
		f.Data.DataView.ToString("TBom","v_Lev","PART","","*!*",V.Local.sPartList)
		f.Intrinsic.String.Replace(v.Local.sPartList,"'","''",v.Local.sPartList)
		f.Intrinsic.String.Replace(v.Local.sPartList,"*!*","','",v.Local.sPartList)
		
		'Check if the Bom has a grand children is also a children which causes infinite loop
		f.Intrinsic.String.Build(" IN ('{0}')",v.Local.sPartList,v.Local.sFilter)		
		f.Intrinsic.Control.CallSub(Check_GrandChildren_Is_Children,"sFilter",v.Local.sFilter)
		f.Intrinsic.Control.If(v.Args.bChildrenAreParent)
			f.Intrinsic.String.Replace(v.Args.sChildrenAreParentList,"#$#",", ",v.Local.sMsg)
			f.Intrinsic.String.Build("One of these parts has children as the parent. Please contact GSS to fix at database level:{0}{1}",v.Ambient.NewLine,v.Local.sMsg,v.Local.sMsg)
			f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Fatal Issue")
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf		
	
		f.ODBC.Connection!conx.Execute(v.Global.sDeleteExplodeStageSQL)
		f.Data.DataTable.AddColumn("TBom","UserID","String",v.Caller.User)
		f.Data.DataTable.AddColumn("TBom","Trmnl","String",v.Caller.Terminal)
		
		f.Data.DataTable.SaveToDB("TBom","conx","GCG_4986_Stge","",128,"UserID@!@UserID*!*Trmnl@!@Trmnl*!*OLDPARENT@!@OLDPARENT*!*Part@!@Part*!*TIER@!@TIER*!*CTIER@!@CTIER*!*CH_Index@!@CH_Index")
		f.Data.DataTable.Close("TBom")	
		
		'Already PSQLFriendly
		f.Intrinsic.String.Build(" IN ('{0}')",v.Local.sPartList,v.Local.sFilter)
		f.Intrinsic.Control.CallSub(Get_Bom_Mstr,"sTargetTable","TEMP_RETURN","sFilter",v.Local.sFilter)

		F.Intrinsic.Control.If(V.DataTable.TEMP_RETURN.RowCount,>,0)
			F.Data.DataView.Create("TEMP_RETURN","V_RETURN",22)
			'create a view of just the parent items where bom_seq = 0000
			F.Data.DataView.Create("TEMP_RETURN","V_PARENTS",22,"BOM_SEQ = '0000'","CTIER")
					
			'for each parent item in view, filter our v_return and then set the tier and ctier values for that set of parts			
			F.Intrinsic.Control.For(V.Local.iCount,0,v.Dataview.Temp_Return!V_Parents.RowCount--,1)
				V.Local.sParent.Set(v.Dataview.Temp_Return!V_Parents(V.Local.iCount).BPARENT!FIELDVAL)
				v.Local.sOldParent.Set(v.Dataview.Temp_Return!V_Parents(V.Local.iCount).OLDPARENT!FIELDVAL)
				'To avoid part number is dublicated, we enforce by adding the condition CH_Index in the filter
				F.Intrinsic.String.Build("OLDPARENT = '{0}' AND BPARENT = '{1}' and CH_INDEX = '{2}'",V.Local.sOldParent,V.Local.sParent,v.Dataview.Temp_Return!V_Parents(V.Local.iCount).CH_INDEX!FIELDVAL,V.Local.sParentFilter)
				f.Data.DataView.SetFilter("TEMP_RETURN","V_RETURN",V.Local.sParentFilter)
				F.Data.DataView.SetValue("TEMP_RETURN","V_RETURN",-1,"TIER",v.Dataview.Temp_Return!V_Parents(V.Local.iCount).CH_INDEX!FIELDVALSTRING)
				F.Data.DataView.SetSeries("TEMP_RETURN","V_RETURN","CTIER",0,1)

			F.Intrinsic.Control.Next(V.Local.iCount)			
			
			'added: for temp_return, CH_Index must be reindexed before adding to Bom
			F.Data.DataTable.RemoveColumn("TEMP_RETURN","CH_INDEX")
			F.Data.DataTable.AddExpressionColumn("TEMP_RETURN","CH_INDEX","STRING","IIF(TIER < '1', CTIER, TIER + '.' + CTIER)")			
			F.Data.DataTable.RemoveColumn("TEMP_RETURN","OLDPARENT")		
			F.Data.DataTable.Merge("TEMP_RETURN","BOM",False,2)
			f.Data.DataTable.AcceptChanges("Bom")
			
			'Prepare for the next round
			F.Data.DataView.Create("TEMP_RETURN","V_Lines",22,"BOM_SEQ <> '0000'","BPARENT,BOM_SEQ,RTR_SEQ")	
			f.Data.DataView.ToDataTable("TEMP_RETURN","V_Lines","TBom",True)						
			F.Data.DataTable.AddExpressionColumn("TBom","OLDPARENT","STRING","BPARENT")
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.ExitDo
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Loop

	F.Intrinsic.Control.If(V.DataTable.TEMP_RETURN.Exists)
		f.Data.DataTable.Close("TEMP_RETURN")
	F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.If(v.DataTable.TBom.Exists)
		f.Data.DataTable.Close("TBom")
	f.Intrinsic.Control.EndIf		
	
	'fixing bom data, this was added to address the occassional missing PART number on the parent row of any BOM.
	'the missing PART is normal in core data, but it's useful to have it populated here.	
	f.Data.DataView.Create("BOM","V_VALIDATE",22,"TRIM(BOM_SEQ) = '0000'","[BPARENT] ASC")
	F.Intrinsic.Control.For(v.Local.iCount,0,v.DataView.BOM!V_VALIDATE.RowCount--,1)
		F.Data.DataView.SetValue("BOM","V_VALIDATE",V.Local.iCount,"PART",V.DataView.BOM!V_VALIDATE(V.Local.iCount).BPARENT!FIELDVALTRIM)
	F.Intrinsic.Control.Next(V.Local.iCount)
	F.Data.DataView.Close("BOM","V_VALIDATE")
	
	'Fill fields from Inventory, only for empty cells
	f.Intrinsic.Control.CallSub(Fill_Empty_Cells_Bom)
	
	F.Data.DataTable.Compute("BOM","Sum(ExtendedConsumpWeight)","BPARENT <> Part and Tier = '0'",v.Local.sWeight)
	f.Intrinsic.Control.CallSub(Build_Mask)
	f.Intrinsic.String.Format(v.Local.sWeight,v.Args.sMaskWeight,v.Local.sWeight)	
	gui.Form.txtParentWeight.Text(v.Local.sWeight)			
	
	'Also Reorder Bom to have a better visibility *** what you see is what you get
	f.Intrinsic.Control.CallSub(ReIndex_Bom_WhatSee_Is_WhatGet)
	
	'hide the treeview, build the treeview, and unhide
	gui.Form.trvBom.Visible(False)
	
	f.Intrinsic.Control.CallSub(Populate_Loc_Part_ID)
	F.Intrinsic.Control.CallSub(TreeViewKeySet,"TABLE","BOM","TYPE","LOAD","PARENT",V.Args.Parent.TRIM,"REV",V.Args.Rev)
	gui.Form.trvBom.Visible(True)	
	
	'f.Intrinsic.UI.CloseWaitDialog

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GetBomByCommit.End

Program.Sub.SaveCoreRouter_from_Commit.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iCount.Declare
	v.Local.iLine.Declare
	v.Local.sMapLab.Declare
	v.Local.sMapMat.Declare
	v.Local.sMapOutside.Declare
	V.Local.sMapCmt.Declare
	V.Local.sMapTask.Declare
	v.Local.sSql.Declare
	v.Local.sPart.Declare
	v.Local.iField.Declare
	v.Local.sField.Declare
	v.Local.bExists.Declare
	v.Local.sRet.Declare
	v.Local.bBom.Declare
	v.Local.iRet.Declare
	v.Local.iBaseRow.Declare(Long,0)
	v.Local.sHold.Declare
	v.Local.bHeaderOnly.Declare	
	v.Local.fLead.Declare
	v.Local.bExistAskOverwrite.Declare
	v.Local.sSimilar.Declare
	v.Local.fCommission.Declare
	v.Local.fScrap.Declare	
	v.Local.sPartID.Declare
	v.Local.sDesc2.Declare
	v.Local.sDesc3.Declare
	v.Local.sDescription.Declare
	
	v.Local.sParentDescription.Declare
	v.Local.sParentDesc2.Declare
	v.Local.sParentDesc3.Declare	
	
	f.Intrinsic.Variable.ArgExists("REV",V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists)
		f.Intrinsic.String.GSSPartString(v.Args.PART,V.Args.REV,v.Local.sPart)
	F.Intrinsic.Control.Else
		V.Local.sPart.Set(V.Args.PART)
	F.Intrinsic.Control.EndIf
	
	v.Local.bBom.Set(v.Args.BOM)
	
	'if the "copy" arg exists, we're not going to delete any existing records
	F.Intrinsic.Variable.ArgExists("COPY",V.Local.bExists)
	F.Intrinsic.Variable.ArgExists("bAskOverwrite",V.Local.bExistAskOverwrite)
'	f.Intrinsic.Control.If(v.Local.bExists,=,False,and,v.Local.bExistAskOverwrite,=,False)	
'		'this first section is to see if the router already exists and then give the user the opportunity to decide if they want to overwrite it.
'		f.Intrinsic.String.Build("select distinct router from v_router_header where router = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
'		f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
'		
'		f.Intrinsic.Control.If(v.Local.sRet.Trim,=,v.Local.sPart.Trim)
'			f.Intrinsic.String.Build("Router {0} already exists. Overwrite?",v.Local.sPart.Trim,v.Local.sRet)
'			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
'			f.Intrinsic.UI.Msgbox(v.Local.sRet,"Router Exists",4,v.Local.iRet)
'			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
'			'last chance here - if user says yes, the old router is deleted before it's saved again
'			f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxNo)
'				F.Intrinsic.Control.CallSub(optBomView_Click)
'				f.Intrinsic.Control.ExitSub
'			f.Intrinsic.Control.EndIf
'		f.Intrinsic.Control.EndIf
		
		'update row 0 of the datatable to include description, um, pl if it's not already there
		'f.Data.DataTable.SetValue("CHILD",0,"DESCRIPTION",V.Screen.Form!txtFocusDescr.TEXT,"PL",V.Screen.Form!txtPL.TEXT,"UM",V.Screen.Form!txtUM.TEXT)
'	f.Intrinsic.Control.EndIf
	
	F.Data.DataTable.Acceptchanges("CHILD")
	
	'Check Header Only: In case only Router header, add a fake sequence for callwraper to save router
	f.Intrinsic.Control.CallSub(Add_Fake_Router_Line,"sPart",v.Local.sPart,"sTable","Child")
	v.Local.bHeaderOnly.Set(v.Args.bHeaderOnly)	

	'MAP FOR LABOR RECORDS
	f.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}*!*{25}","RouterNum","RouterDesc","Seq","LineType","WC","PartStepDesc","SetupQty","RuntimeMatlQty","CustID","OperationCodeVend","RateUC","UM","ExtraDesc1","ExtraDesc2","Freq","Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","SortCode","SignOffGroupUser","SignOffType",V.Local.sMapLab)
	'MAP for MATERIAL
	F.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}*!*{25}*!*{26}","RouterNum","RouterDesc","Seq","LineType","PartNum","PartStepDesc","SetupQty","RuntimeMatlQty","CustID","OperationCodeVend","RateUC","UM","ExtraDesc1","ExtraDesc2","Freq","Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","SortCode","LeadTime","MinFlag","MinOutside",V.Local.sMapMat)
	'MAP FOR OUTSIDE 
	F.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}*!*{25}*!*{26}","RouterNum","RouterDesc","Seq","LineType","PartNum","PartStepDesc","SetupQty","RuntimeMatlQty","CustID","OperationCodeVend","RateUC","UM","ExtraDesc1","ExtraDesc2","Freq","Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","SortCode","LeadTime","MinFlag","MinOutside",V.Local.sMapOutside)	
	'MAP FOR COMMENT LINES
	f.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}","RouterNum","RouterDesc","Seq","LineType","WC","PartStepDesc","SetupQty","RuntimeMatlQty","CustID","OperationCodeVend","RateUC","UM","ExtraDesc1","ExtraDesc2","Freq", "Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","MainCommentFlag","SortCode",V.Local.sMapCmt)
	'MAP FOR TASK LINES
	f.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}*!*{25}*!*{26}","RouterNum","RouterDesc","Seq","LineType","WC","PartStepDesc","SetupQty","RuntimeMatlQty","CustID", "OperationCodeVend","RateUC","UM","ExtraDesc1", "ExtraDesc2","Freq","Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","MainCommentFlag","SignOffGroupUser","SignOffType","SortCode",V.Local.sMapTask)
	
	'Using the long value of the router sequence because the filter was not accepting 2 string values for the same column ( > 'x' and < 'y')
	F.Data.DataView.Create("CHILD","V_UPDATE",22,"","RTR_SEQ ASC")	
	
	f.Intrinsic.String.RTrim(v.Screen.Form!txtDescr2.Text,v.Local.sParentDesc2)
	f.Intrinsic.String.RTrim(v.Screen.Form!txtDescr3.text,v.Local.sParentDesc3)
	f.Intrinsic.String.RTrim(v.Screen.Form!txtFocusDescr.text,v.Local.sParentDescription)	
	
	'adding records using different maps based on LMO C or T
	f.Intrinsic.Control.For(v.Local.iCount,0,v.DataView.CHILD!V_UPDATE.RowCount--,1)
		F.Intrinsic.Control.If(V.DataView.CHILD!V_UPDATE(V.Local.iCount).RTR_SEQ!FIELDVALLONG,>,0,AND,V.DataView.CHILD!V_UPDATE(V.Local.iCount).RTR_SEQ!FIELDVALLONG,<,990000)
			F.Intrinsic.Control.If(V.DataView.CHILD!V_UPDATE(V.Local.iCount).CATEGORY!FIELDVALTRIM,<>,"EXCLUDE")
				v.Local.fLead.Set(v.DataView.CHILD!V_UPDATE(v.Local.iCount).Lead!FIELDVALString)
				f.Intrinsic.String.RTrim(v.DataView.CHILD!V_UPDATE(v.Local.iCount).DESCRIPTION_2!FIELDVALSTRING,V.Local.sDesc2)
				f.Intrinsic.String.RTrim(v.DataView.CHILD!V_UPDATE(v.Local.iCount).DESCRIPTION_3!FIELDVALSTRING,V.Local.sDesc3)
				f.Intrinsic.String.RTrim(v.DataView.CHILD!V_UPDATE(v.Local.iCount).DESCRIPTION!FIELDVALSTRING,V.Local.sDescription)
				f.Intrinsic.Control.SelectCase(v.DataView.CHILD!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM)
					'labor lines
					f.Intrinsic.Control.Case("L")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapLab,v.DataView.CHILD!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sParentDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,v.Screen.Form!txtRtrCust.text,v.DataView.CHILD!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.CHILD!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.CHILD!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","",v.DataView.CHILD!V_UPDATE(v.Local.iCount).WC_Factor!FIELDVALTRIM,"",v.Local.sParentDescription.Left30,v.Local.sParentDesc2.Left71,v.Local.sParentDesc3.Left71,V.Screen.Form!txtPL.text,v.DataView.CHILD!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).SIGNOFF_GRPUSR!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).SIGNOFF_TYPE!FIELDVALTRIM)
					'material lines
					f.Intrinsic.Control.Case("M")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapMat,v.DataView.CHILD!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sParentDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,v.Screen.Form!txtRtrCust.text,v.DataView.CHILD!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.CHILD!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.CHILD!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","","","",v.Local.sParentDescription.Left30,v.Local.sParentDesc2.Left71,v.Local.sParentDesc3.Left71,V.Screen.Form!txtPL.text,v.DataView.CHILD!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM,v.local.fLead,v.DataView.CHILD!V_UPDATE(v.Local.iCount).MinFlag!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).Amt_Minimum!FIELDVALTRIM)
					'material lines
					f.Intrinsic.Control.Case("O")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapOutside,v.DataView.CHILD!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sParentDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,v.Screen.Form!txtRtrCust.text,v.DataView.CHILD!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.CHILD!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.CHILD!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","","","",v.Local.sParentDescription.Left30,v.Local.sParentDesc2.Left71,v.Local.sParentDesc3.Left71,V.Screen.Form!txtPL.text,v.DataView.CHILD!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM,v.local.fLead,v.DataView.CHILD!V_UPDATE(v.Local.iCount).MinFlag!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).Amt_Minimum!FIELDVALTRIM)
					'comment lines
					f.Intrinsic.Control.Case("C")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapCmt,v.DataView.CHILD!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sParentDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,v.Screen.Form!txtRtrCust.text,v.DataView.CHILD!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.CHILD!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.CHILD!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","","","",v.Local.sParentDescription.Left30,v.Local.sParentDesc2.Left71,v.Local.sParentDesc3.Left71,V.Screen.Form!txtPL.text,"Y",v.DataView.CHILD!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM)
					'task lines
					F.Intrinsic.Control.Case("T")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapTask,v.DataView.CHILD!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sParentDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,"L",v.DataView.CHILD!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,v.Screen.Form!txtRtrCust.text,v.DataView.CHILD!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.CHILD!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.CHILD!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","","","",v.Local.sParentDescription.Left30,v.Local.sParentDesc2.Left71,v.Local.sParentDesc3.Left71,V.Screen.Form!txtPL.text,"T",v.DataView.CHILD!V_UPDATE(v.Local.iCount).SIGNOFF_GRPUSR!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).SIGNOFF_TYPE!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM)
				
				f.Intrinsic.Control.EndSelect
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.iCount)
	
	F.Data.DataView.Close("CHILD","V_UPDATE")
	
	f.Intrinsic.Control.CallSub(Backup_Router)	
	
	'add in the quantities
	f.Intrinsic.Control.CallSub(updateBuildQuantity)

	f.Intrinsic.Control.CallSub(6021Sync,"sRouter",v.Local.sPart)

	'In case only Router header.
	f.Intrinsic.Control.If(v.Local.bHeaderOnly)
		F.Intrinsic.Control.CallSub(Delete_Fake_Line,"sPart",v.Local.sPart,"sTable","Child")
	f.Intrinsic.Control.EndIf

	'Return: IsForcedToStopped, IsStillBusyAtTimeOut, ErrorAtCheck_Queue, ErrorAt6021, IsGoodToGo
	f.Intrinsic.Control.If(v.Args.s6021Status,<>,"IsGoodToGo")
	
		f.Intrinsic.Control.If(v.Args.s6021Status,<>,"NoRecordFound")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Router Upload is unsuccessful. You can verify from core Router or your version in backup database.","Router Upload Fail")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("No Router Record founds","Router Upload Fail")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)			
		f.Intrinsic.Control.EndIf		
		
		f.Intrinsic.Variable.AddRV("sRouterUpload","Failed")
		
		F.Data.DataTable.DeleteRow("6021")
		f.Data.DataTable.AcceptChanges("6021")		
		
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'once this upload completes, we need to add in the "line comments" via savetoDB and the "complete flag" via udpate query
	
	'there is a possibility that the user can edit the router without having a BOM populated, so we're going to check the BOM_MSTR for being a PARENT.  If it is, set bBom to true
	v.Local.sHold.Set(V.DataTable.CHILD(v.Local.iBaseRow).BPARENT!FIELDVALTRIM)
	f.Intrinsic.String.Build("select PARENT from V_BOM_MSTR where PARENT = '{0}'",v.Local.sHold.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		v.Local.bBom.Set(True)
	f.Intrinsic.Control.EndIf
	
	'there is also a possibility that the BOM hasn't been saved to GSS yet, in this case args.bom would have already set bBOM to true
	f.Intrinsic.Control.If(v.Local.bBom)
		v.Local.sHold.Set(V.DataTable.CHILD(v.Local.iBaseRow).BPARENT!FIELDVALTRIM)
		f.Intrinsic.String.Build("UPDATE ROUTER_LINE SET BUILT_FROM_BOM = 'Y' WHERE ROUTER = '{0}' AND LMO = 'M'",v.Local.sHold.PSQLFriendly,V.Local.sSql)
		F.ODBC.Connection!conx.execute(v.Local.sSql)
	f.Intrinsic.Control.EndIf
	
	'Save Extra header as 6021 does not update successfully
	v.Local.fCommission.Set(v.Screen.Form!txtComm.Text.Trim)
	v.Local.fScrap.Set(v.Screen.Form!txtScrap.Text.Trim)
	v.Local.sNo_Reprice.Declare
	f.Intrinsic.Math.Div(v.Local.fScrap,100,v.Local.fScrap)
	f.Intrinsic.Control.If(v.Screen.Form!chkOmitFromRTRReprice.Value,=,1)
		v.Local.sNo_Reprice.Set("Y")
	f.Intrinsic.Control.Else
		v.Local.sNo_Reprice.Set("N")
	f.Intrinsic.Control.EndIf	
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtSimilar.Text.Trim,v.Screen.Form!txtSimilarRev.Text.Trim,v.Local.sSimilar)
	
	v.Local.sPartID.Set(v.Screen.Form!txtPartID.Text.Trim)
	v.Local.sPartID.Set(v.Local.sPartID.left20)

	f.Intrinsic.String.Build("UPDATE ROUTER_HEADER SET UM_Inventory = '{0}',Prod_Line = '{2}',Similar = '{3}',Commission = '{4}',Scrap = '{5}',No_Reprice = '{6}',Part_Customer = '{7}' where Router = '{1}' and Router_Type = 'H'",v.Screen.Form!txtUM.Text.Trim,v.Local.sPart.PSQLFriendly,v.Screen.Form!txtPL.Text.Trim,v.Local.sSimilar.PSQLFriendly,v.Local.fCommission,v.Local.fScrap,v.Local.sNo_Reprice,v.Local.sPartID.PSQLFriendly,V.Local.sSql)
	F.ODBC.Connection!conx.execute(v.Local.sSql)		
	
	f.Intrinsic.String.RTrim(v.Screen.Form!txtRTRExtraDescr.Text,v.Local.sHold)
	f.Intrinsic.String.Build("Select Text from Inv_Extra_Text where Part = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		f.Intrinsic.String.Build("Insert into INV_EXTRA_TEXT (Part,Text) values ('{0}','{1}')",v.Local.sPart.PSQLFriendly,v.Local.sHold.PSQLFriendly,V.Local.sSql)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("UPDATE INV_EXTRA_TEXT SET TEXT = '{1}' Where Part = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sHold.PSQLFriendly,V.Local.sSql)
	f.Intrinsic.Control.EndIf	
	F.ODBC.Connection!conx.execute(v.Local.sSql)		
	
	'create a filter then datatable for the comments
	f.Data.DataView.Create("CHILD","V_COMMENTS",22,"TRIM(COMMENTS) > ''","RTR_SEQ ASC")
	F.Data.DataView.ToDataTable("CHILD","V_COMMENTS","TEMP_COMMENTS",True)
	f.Data.DataView.Close("CHILD","V_COMMENTS")
	
	'tochange 1
	'save the comments
	f.Data.DataTable.SaveToDB("TEMP_COMMENTS","conx","RTR_SEQ_COMMENTS","BPARENT*!*RTR_SEQ",128,"BPARENT@!@RTR_NUMBER*!*RTR_SEQ@!@RTR_SEQ*!*COMMENTS@!@TEXT")
	F.Data.DataTable.Close("TEMP_COMMENTS")
	
	'set the router complete flag
	f.Intrinsic.Control.If(v.Screen.Form!chkRtrComp.checkedasboolean,=,True)
		v.Local.sHold.Set(1)
	f.Intrinsic.Control.Else
		v.Local.sHold.Set(0)
	f.Intrinsic.Control.EndIf

	f.Intrinsic.String.Build("select COUNT(rtr_num) from v_router_supp_hdr where rtr_num = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.iLine)
	f.Intrinsic.Control.If(v.Local.iLine,>,0)
		f.Intrinsic.String.Build("update router_supp_hdr set complete = {1} where rtr_num = '{0}' and type = 'H'",v.Local.sPart.PSQLFriendly,v.Local.sHold,v.Local.sSql)
		f.ODBC.Connection!conx.execute(v.Local.sSql)
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.CallSub(optBomView_Click)
	v.Global.bQtySaved.Set(True)
	f.Intrinsic.Variable.AddRV("sRouterUpload","Successful")

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.SaveCoreRouter_from_Commit.End

Program.Sub.cmdBomCompare_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.bCompare.Declare
	v.Local.iRet.Declare
	v.Local.bAccessBomCompare.Declare
	v.Local.sPart.Declare
	v.Local.sCompleteFlag.Declare
	v.Local.sSQL.Declare
	v.Local.bExist.Declare
	
	'Prevent double cycle
	f.Intrinsic.Control.IF(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		
	
	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveBomCompare)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveBomCompare.Set(True)	
	
	f.Intrinsic.Control.If(V.Global.iRights,=,0)	
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("User does not has permission to run Bom Compare and save Bom.","Rights 0")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		v.Global.bActiveBomCompare.Set(False)
		f.Intrinsic.Control.ExitSub		
	F.Intrinsic.Control.EndIf	
	
	Function.Global.Security.CheckUserAccessIPM(1002,0,v.Local.bAccessBomCompare)
	f.Intrinsic.Control.If(v.Local.bAccessBomCompare.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("User is not assigned to menu item Bill Of Material > Transactions > BOM Compare to run Bom Compare and save Bom.","Menu Item Not Assigned")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		v.Global.bActiveBomCompare.Set(False)
		f.Intrinsic.Control.ExitSub				
	f.Intrinsic.Control.EndIf
	
	'check if Bom has records
	f.Intrinsic.Control.If(v.DataTable.BOM.RowCount,>,0)
		'Open BomCompare with the Bom file, inside BomCompare_Load, we have Wait_For_PID which disables the Form and waits until the BomCompare screen close to get back control to the Form		
		f.Intrinsic.Control.CallSub(BomCompare_Load,"MODE","SCREENLESS")			
		f.Intrinsic.Control.CallSub(deduplicate)
	f.Intrinsic.Control.Else
		gui.Form..Enabled(False)
		'Launch Menu Task		
		f.Global.General.LaunchMenuTask(1002,0,v.Local.iRet)
		'Within Wait_For_PID, we disable the form, wait until the BomCompare closes, then return the control to the form. We create this loop to give the same effect of Synchronous
		f.Intrinsic.Control.CallSub("Wait_For_PID","sProgram","BOMCompare")
	f.Intrinsic.Control.EndIf
	'Update Bom Complete
	f.Intrinsic.Control.If(v.Screen.Form!chkBomComp.checkedasboolean,=,True)
		v.Local.sCompleteFlag.Set("Y")
	f.Intrinsic.Control.Else
		v.Local.sCompleteFlag.Set("")
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtParent.Text,v.Screen.Form!txtParentRev.Text,v.Local.sPart)
	f.Intrinsic.String.Build("Update BOM_MSTR Set Bom_Complete = '{0}' where parent = '{1}' and Sequence_Bom = '0000'",v.Local.sCompleteFlag,v.Local.sPart.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.execute(v.Local.sSql)
	
	f.Intrinsic.Control.CallSub(Return_From_BomCompare)
	gui.Form..AlwaysOnTop(True)
	gui.Form..AlwaysOnTop(False)
	v.Global.bActiveBomCompare.Set(False)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdBomCompare_Click.End

Program.Sub.cmdSaveBomToGSS_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sFilter.Declare
	v.Local.sDate.Declare
	v.Local.sTime.Declare
	v.Local.sMap.Declare
	v.Local.sParent.Declare
	v.Local.sSQL.Declare
	v.Local.sCompleteFlag.Declare
	V.Local.iCnt.Declare
	v.Local.sRet.Declare
	v.Local.sDescr.Declare
	v.Local.sBParent.Declare
	v.Local.sMemo1.Declare
	v.Local.sMemo2.Declare
	v.Local.sUM.Declare
	v.Local.fCost.Declare
	v.Local.sSource_Code.Declare
	v.Local.sNotes.Declare
	
	'Prevent double cycle
	f.Intrinsic.Control.IF(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		
	
	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveSaveBom)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveSaveBom.Set(True)	
	
	gui.Form.trvBom.BackColor(9157775)
	v.Local.sDate.Set(v.Ambient.Date.FormatYYYYMMDD)
	f.Intrinsic.String.Build("{0}00",v.Ambient.Now.FormatHHNNSS,v.Local.sTime)
	
	F.Intrinsic.Control.If(V.DataTable.BOM.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("No Bom Header to save","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.trvBom.BackColor(16777215)
		v.Global.bActiveSaveBom.Set(False)
		f.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf	
	
	v.Local.sBParent.Set(v.DataTable.BOM(0).BParent!FieldValString)
	f.Intrinsic.Control.If(v.DataTable.BOM.RowCount,>,1)
		f.Intrinsic.String.Build("BParent = '{0}' and Tier = 0",v.Local.sBParent.PSQLFriendly,v.Local.sFilter)
	f.Intrinsic.Control.Else
		v.Local.sFilter.Set("")
	f.Intrinsic.Control.EndIf
	
	f.Data.DataView.Create("Bom","V_Save",22,V.Local.sFilter,"Ord asc")
	v.Local.sParent.Set(v.DataTable.BOM(0).BParent!FieldValString)
	v.Local.sDescr.Set(v.DataTable.BOM(0).Descr_BP!FieldValString)	
	F.Data.DataView.ToDataTable("Bom","V_Save","Bom1stLevelToSave",True)
	f.Data.DataView.Close("Bom","V_Save")	

	'Set Bom header value
	v.Local.sUM.Set(v.Screen.Form!txtBomUM.Text.Trim)
	v.Local.fCost.Set(v.Screen.Form!txtBomUnitCost.Text.Trim)
	f.Intrinsic.Control.If(v.Screen.Form!ddlBomSource.Text.Trim,<>,"")
		f.Data.Dictionary.ReturnKeyFromValue("SOURCE",V.Screen.Form!ddlBomSource.Text.Trim,False,V.Local.sSource_Code)
	f.Intrinsic.Control.EndIf
	'Update Bom Complete
	f.Intrinsic.Control.If(v.Screen.Form!chkBomComp.checkedasboolean,=,True)
		v.Local.sCompleteFlag.Set("Y")
	f.Intrinsic.Control.Else
		v.Local.sCompleteFlag.Set("")
	f.Intrinsic.Control.EndIf	
	'Set 
	f.Data.DataTable.SetValue("Bom1stLevelToSave",0,"UM",v.Local.sUM.left2,"Cost",v.Local.fCost,"SOURCE_CODE",v.Local.sSource_Code,"Complete",v.Local.sCompleteFlag)
	'Set timestamp
	f.Data.DataTable.SetValue("Bom1stLevelToSave",-1,"Date_Maintenance",v.Local.sDate.right6,"Date_Last_Chg",v.Local.sDate.Right6,"Time_Last_Chg",v.Local.sTime,"Last_Chg_By",v.Caller.User,"Last_Chg_Prog","ESTIMATE")	
	'Set Seq
	f.Data.DataTable.AddColumn("Bom1stLevelToSave","SeqLong","Long",0)
	f.Data.DataTable.SetSeries("Bom1stLevelToSave","SeqLong",0,v.Global.iBSeq)	
	f.Data.DataTable.AddExpressionColumn("Bom1stLevelToSave","BomSeqString","String","SubString('0000' + Convert(SeqLong,System.String),len('0000' + Convert(SeqLong,System.String)) - 3,4)")
	
	f.Intrinsic.String.Build("Delete from Bom_MSTR Where Parent = '{0}'",v.Local.sParent.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)

	v.Local.sMap.Set("BPARENT@!@PARENT*!*BomSeqString@!@SEQUENCE_BOM*!*INSERT_BOM@!@INSERT_BOM*!*DATE_MAINTENANCE@!@DATE_MAINTENANCE*!*COST@!@COST*!*QTY@!@QUANTITY*!*PART@!@PART*!*DATE_START@!@DATE_START*!*DATE_STOP@!@DATE_STOP*!*BM_SERIAL_START@!@BM_SERIAL_START*!*BM_SERIAL_STOP@!@BM_SERIAL_STOP*!*UM@!@UM_INVENTORY*!*PURGE_FLAG@!@PURGE_FLAG*!*ORDR_USR_FLAG@!@ORDR_USR_FLAG*!*QUANTITY_6@!@QUANTITY_6*!*DRAWING@!@DRAWING*!*TAG@!@TAG*!*CAT_CODE@!@CATEGORY*!*SOURCE_CODE@!@SOURCE*!*FREQUENCY@!@FREQUENCY*!*DATE_LAST_CHG@!@DATE_LAST_CHG*!*TIME_LAST_CHG@!@TIME_LAST_CHG*!*LAST_CHG_BY@!@LAST_CHG_BY*!*LAST_CHG_PROG@!@LAST_CHG_PROG*!*DRAWING_SIZE@!@DRAWING_SIZE*!*REQ_TRACE@!@REQ_TRACE*!*COST_DATE@!@COST_DATE*!*COMPLETE@!@BOM_COMPLETE*!*INACTIVE@!@INACTIVE*!*SETUP_QTY@!@SETUP_QTY")

	f.Data.DataTable.SaveToDB("Bom1stLevelToSave","conx","Bom_MSTR","",128,v.Local.sMap)
	f.Data.DataTable.Close("Bom1stLevelToSave")
	
	'Save to Bom_Eng
	v.Local.sMemo1.Set(v.Screen.Form!txtMemo1.Text)
	v.Local.sMemo2.Set(v.Screen.Form!txtMemo2.Text)
	f.Intrinsic.String.Build("Select * from Bom_Eng where Part = '{0}' and Location = ''",v.Local.sParent.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		f.Intrinsic.String.Build("Update Bom_Eng set Description = '{1}', Is_Parent = 'Y',Memo_1 = '{2}',Memo_2 = '{3}' where Part = '{0}' and Location = ''",v.Local.sParent.PSQLFriendly,v.Local.sDescr.PSQLFriendly,v.Local.sMemo1.PSQLFriendly,v.Local.sMemo2.PSQLFriendly,v.Local.sSQL)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("Insert into Bom_Eng (Part,Location,Description,Is_Parent,Date_Revision,Memo_1,Memo_2) values ('{0}','','{1}','Y','000000','{2}','{3}')",v.Local.sParent.PSQLFriendly,v.Local.sDescr.PSQLFriendly,v.Local.sMemo1.PSQLFriendly,v.Local.sMemo2.PSQLFriendly,v.Local.sSQL)	
	f.Intrinsic.Control.EndIf
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)
	
	'Bom Notes
	v.Local.sNotes.Set(v.Screen.Form!txtBomExtraDescr.Text)
	f.Intrinsic.String.Build("Select Top 1 Text from Bom_Notes where Parent = '{0}' and Parent_Seq = '0000' and Parent_Ins = '00'",v.Local.sParent.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		f.Intrinsic.String.Build("Insert into Bom_Notes (Parent,Parent_Seq,Parent_Ins,Text) values ('{0}','0000','00','{1}')",v.Local.sParent.PSQLFriendly,v.Local.sNotes.PSQLFriendly,v.Local.sSQL)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("Update Bom_Notes set Text = '{1}' where Parent = '{0}' and Parent_Seq = '0000' and Parent_Ins = '00'",v.Local.sParent.PSQLFriendly,v.Local.sNotes.PSQLFriendly,v.Local.sSQL)
	f.Intrinsic.Control.EndIf	
	f.ODBC.Connection!conx.Execute(v.Local.sSql)
	
	'Return back color to normal to indicate that the bom has been saved to gss
	gui.Form.trvBom.BackColor(16777215)
	v.Global.bActiveSaveBom.Set(False)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdSaveBomToGSS_Click.End

Program.Sub.Wait_For_PID.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sList.Declare
	v.Local.sRet.Declare
	v.Local.sPID.Declare
	v.Local.sIndex.Declare
	v.Local.bExit.Declare
	v.Local.bRunning.Declare
	v.Local.sFilter.Declare
	v.Local.iCnt.Declare

	'We disable the form, wait until the BomCompare closes, then return the control to the form. We create this loop to give the same effect of Synchronous
	'Send IPM can not be applied in this case
	gui.Form..Enabled(False)
	f.Intrinsic.Control.DoUntil(v.Local.bExit,=,True,or,v.Local.iCnt,=,15)
		
		f.Intrinsic.UI.Sleep(1)		
		'Get List
		f.Intrinsic.Task.GetProcessList(v.Local.sList)
		'Check list has values
		f.Intrinsic.Control.If(v.Local.sList.Trim,<>,"")
			f.Data.DataTable.CreateFromString("PList",v.Local.sList,"PID*!*Name*!*Executable*!*Memory","String*!*String*!*String*!*String","!*!","*!*",True)
			f.Intrinsic.String.build("Trim(Name) = '{0}'","BOMCompare",v.Local.sFilter)
			f.Data.DataTable.Select("PList",v.Local.sFilter,v.Local.sRet)
			f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
				f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
				v.Local.sIndex.Set(v.Local.sRet(0))
				v.Local.sPID.Set(v.DataTable.PList(v.Local.sIndex).PID!FieldValString)
				f.Intrinsic.Control.DoUntil(v.Local.bExit,=,True,or,v.Local.iCnt,=,15)
					f.Intrinsic.UI.Sleep(1)
					Function.Intrinsic.Task.PIDRunning(v.Local.sPID,v.Local.bRunning)
					f.Intrinsic.Control.If(v.Local.bRunning.Not)
						v.Local.bExit.Set(True)
					f.Intrinsic.Control.EndIf					
				f.Intrinsic.Control.Loop	
			F.Intrinsic.Control.Else
				'Maybe the BomCompare is open and closed so quickly, so loop for 15 secs then exist
				f.Intrinsic.Math.Add(v.Local.iCnt,1,v.Local.iCnt)
			f.Intrinsic.Control.EndIf
			f.Data.DataTable.Close("PList")			
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Loop
	
	gui.Form..Enabled(True)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Wait_For_PID.End

Program.Sub.BomCompare_Load.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sBegRow.Declare
	v.Local.sPairSeparator.Declare
	v.Local.sColumnSeparator.Declare
	v.Local.sEndRow.Declare
	V.Local.sEndFile.Declare
	V.Local.sLine.Declare
	v.Local.iCount.Declare
	v.Local.sPart.Declare
	v.Local.sRev.Declare
	V.Local.sFile.Declare
	V.Local.sDir.Declare
	v.Local.sFileDir.Declare
	V.Local.sIpmFile.Declare
	v.Local.sHold.Declare
	
	'update the product lines in the BOM - --------------No need anymore because the PL is sure to be populated when GetBom (fill_empty_cells), and when insert, we must have a PL
	'f.Data.DataTable.FillFromDictionary("BOM","PROD_LINES","PART","PL")
	
	f.Intrinsic.StringBuilder.create("EXPORT")
	
	'top string required in a GSSXML file.
	f.Intrinsic.String.Build("<?xml version={1}1.0{1} encoding={1}utf-16{1}?>{0}<Table xmlns:xsd={1}http://www.w3.org/2001/XMLSchema{1} xmlns:xsi={1}http://www.w3.org/2001/XMLSchema-instance{1}>{0}  <Rows>{0}",v.Ambient.NewLine,v.Ambient.DblQuote,v.Local.sLine)
	f.Intrinsic.stringBuilder.AppendLine("EXPORT",V.Local.sLine)
	
	''F.Intrinsic.UI.InvokeWaitDialog("Writing to XML.....")
	
	'these strings are the xml data required before a row, between the name and the value of the pair, between two pairs, and end of row.
	F.Intrinsic.String.Build("    <Row>{0}      <Values>{0}        <NameValuePair>{0}          <Name>",v.Ambient.NewLine,v.Local.sBegRow)
	f.Intrinsic.String.Build("</Name>{0}          <Value>",v.Ambient.NewLine,v.Local.sPairSeparator)
	f.Intrinsic.String.Build("</Value>{0}        </NameValuePair>{0}        <NameValuePair>{0}          <Name>",v.Ambient.NewLine,v.Local.sColumnSeparator)
	f.Intrinsic.String.Build("</Value>{0}        </NameValuePair>{0}      </Values>{0}    </Row>",v.Ambient.NewLine,v.Local.sEndRow)
	f.Intrinsic.String.Build("  </Rows>{0}</Table>",v.Ambient.NewLine,v.Local.sEndFile)
	F.Data.DataView.Create("BOM","V_COMPARE",22,"","TIER ASC, CTIER ASC")
	
	'fill in each column name and value (in pairs) to create a full XML row, then loop to the next datatable row
	f.Intrinsic.Control.For(v.Local.iCount,0,v.DataView.BOM!V_COMPARE.RowCount--,1)
		'the IF statement is to confirm that we are only selecting the top level PARENT and all the remaining rows will only be addressed as child rows with an associated parent.
		'unlike the top parent that has to be addressed - lower level parent items get skipped.
		F.Intrinsic.Control.If(V.Local.iCount,=,0,OR,v.DataView.BOM!V_COMPARE(V.Local.iCount).BOM_SEQ!FIELDVALLONG,<>,0)
			'f.Intrinsic.UI.ChangeWaitStatus("Writing to XML......",v.Local.iCount,1,v.DataView.BOM!V_COMPARE.RowCount)
			F.Intrinsic.String.Left(V.DataView.BOM!V_COMPARE(V.Local.iCount).PART!FIELDVALSTRING,17,V.Local.sPart)
			F.Intrinsic.String.Mid(V.DataView.BOM!V_COMPARE(V.Local.iCount).PART!FIELDVALSTRING,18,3,V.Local.sRev)
			F.Intrinsic.String.Build("{0}PartNo{1}{2}{3}",v.Local.sBegRow,v.Local.sPairSeparator,V.DataView.BOM!V_COMPARE(V.Local.iCount).PART!FIELDVALSTRING,V.Local.sColumnSeparator,v.Local.sLine)
			F.Intrinsic.String.Build("{0}Revision{1}{2}{3}",v.Local.sLine,v.Local.sPairSeparator,v.Local.sRev.Trim,v.Local.sColumnSeparator,v.Local.sLine)
			f.Intrinsic.Control.If(v.DataView.BOM!V_COMPARE(V.Local.iCount).BOM_SEQ!FIELDVALSTRING,=,"0000")
				f.Intrinsic.String.Build("{0}Description{1}{2}{3}",v.Local.sLine,v.Local.sPairSeparator,V.DataView.BOM!V_COMPARE(V.Local.iCount).DESCR_BP!FIELDVALTRIM,V.Local.sColumnSeparator,V.Local.sLine)
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("{0}Description{1}{2}{3}",v.Local.sLine,v.Local.sPairSeparator,V.DataView.BOM!V_COMPARE(V.Local.iCount).DESCRIPTION!FIELDVALTRIM,V.Local.sColumnSeparator,V.Local.sLine)
			f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.If(V.DataView.BOM!V_COMPARE(V.Local.iCount).CAT_CODE!FIELDVALTRIM,=,1)
				F.Intrinsic.String.Build("{0}Quantity{1}{2}{3}",v.Local.sLine,v.Local.sPairSeparator,V.DataView.BOM!V_COMPARE(V.Local.iCount).SET_UP!FIELDVALFLOAT,V.Local.sColumnSeparator,V.Local.sLine)
			F.Intrinsic.Control.Else
				F.Intrinsic.String.Build("{0}Quantity{1}{2}{3}",v.Local.sLine,v.Local.sPairSeparator,V.DataView.BOM!V_COMPARE(V.Local.iCount).QTY!FIELDVALFLOAT,V.Local.sColumnSeparator,V.Local.sLine)
			F.Intrinsic.Control.EndIf
			F.Intrinsic.String.Build("{0}UM{1}{2}{3}",v.Local.sLine,v.Local.sPairSeparator,V.DataView.BOM!V_COMPARE(V.Local.iCount).UM!FIELDVALTRIM,V.Local.sColumnSeparator,V.Local.sLine)
			F.Intrinsic.String.Build("{0}Cost{1}{2}{3}",v.Local.sLine,v.Local.sPairSeparator,V.DataView.BOM!V_COMPARE(V.Local.iCount).COST!FIELDVALFLOAT,V.Local.sColumnSeparator,V.Local.sLine)
			F.Intrinsic.String.Build("{0}Source{1}{2}{3}",v.Local.sLine,v.Local.sPairSeparator,V.DataView.BOM!V_COMPARE(V.Local.iCount).SOURCE_CODE!FIELDVALTRIM,V.Local.sColumnSeparator,V.Local.sLine)
			F.Intrinsic.String.Build("{0}Parent{1}{2}{3}",v.Local.sLine,v.Local.sPairSeparator,V.DataView.BOM!V_COMPARE(V.Local.iCount).BPARENT!FIELDVALTRIM,V.Local.sColumnSeparator,V.Local.sLine)
			F.Intrinsic.String.Build("{0}Productline{1}{2}{3}",v.Local.sLine,v.Local.sPairSeparator,V.DataView.BOM!V_COMPARE(V.Local.iCount).PL!FIELDVALTRIM,V.Local.sColumnSeparator,V.Local.sLine)
			F.Intrinsic.String.Build("{0}SEQUENCE{1}{2}{3}",v.Local.sLine,v.Local.sPairSeparator,V.DataView.BOM!V_COMPARE(V.Local.iCount).BOM_SEQ!FIELDVALLONG,V.Local.sColumnSeparator,V.Local.sLine)
			F.Intrinsic.String.Build("{0}Frequency{1}{2}{3}",v.Local.sLine,v.Local.sPairSeparator,V.DataView.BOM!V_COMPARE(V.Local.iCount).FREQUENCY!FIELDVALFLOAT,V.Local.sColumnSeparator,V.Local.sLine)
			F.Intrinsic.String.Build("{0}Category{1}{2}{3}",v.Local.sLine,v.Local.sPairSeparator,V.DataView.BOM!V_COMPARE(V.Local.iCount).CAT_CODE!FIELDVALTRIM,V.Local.sEndRow,V.Local.sLine)
			F.Intrinsic.StringBuilder.AppendLine("EXPORT",V.Local.sLine)
		F.Intrinsic.Control.Else
		'check the complete flags
			f.Intrinsic.Control.If(v.DataView.BOM!V_COMPARE(V.Local.iCount).BOM_SEQ!FIELDVALSTRING,=,"0000",AND,v.DataView.BOM!V_COMPARE(V.Local.iCount).COMPLETE!FIELDVALTRIM,=,"Y")
				F.Intrinsic.Control.If(V.DataTable.BOMCOMPLETE.Exists)
					F.Data.DataTable.AddRow("BOMCOMPLETE","BPARENT",v.DataView.BOM!V_COMPARE(V.Local.iCount).BPARENT!FIELDVALSTRING)
				F.Intrinsic.Control.Else
					F.Data.DataTable.Create("BOMCOMPLETE",True)
					f.Data.DataTable.AddColumn("BOMCOMPLETE","BPARENT","STRING")
					F.Data.DataTable.AddRow("BOMCOMPLETE","BPARENT",v.DataView.BOM!V_COMPARE(V.Local.iCount).BPARENT!FIELDVALSTRING)
				F.Intrinsic.Control.EndIf			
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.iCount)
	
	f.Intrinsic.StringBuilder.AppendLine("EXPORT",V.Local.sEndFile)
	
	'f.Intrinsic.UI.ChangeWaitStatus("Saving File......")
	
	'save the string to a GSSXML file so we can shellexecute it against BOMCompare
	f.Intrinsic.String.Build("{0}.GSSXML",v.DataView.BOM!V_COMPARE(0).BPARENT!FIELDVALTRIM,V.Local.sFile)
	f.Intrinsic.String.Build("{0}\Cad_Export\",v.Caller.GlobalDir,V.Local.sDir)
	F.Intrinsic.String.Build("{0}{1}",V.Local.sDir,V.Local.sFile,V.Local.sFileDir)
	F.Intrinsic.StringBuilder.ToString("EXPORT",V.Local.sLine)
	F.Intrinsic.File.String2File(v.Local.sFileDir,v.Local.sLine)
	f.Intrinsic.StringBuilder.Dispose("EXPORT")
	
	F.Data.DataView.Close("BOM","V_COMPARE")
	
	'checking a company option here to make sure that the BOM Compare settings will honor the BOM values being passed instead of getting the values from the inventory master
	'COST to make sure the values entered in the BOM take precedence, and Description because some parts in the BOM might not be in the inventory master.
	F.Global.General.ReadOption(402432,1,"","0001",V.Local.sHold)
	f.Intrinsic.Control.If(v.Local.sHold,<>,"Description::Cost")
		v.Global.sBOMCompare.Set(v.Local.sHold)
		f.Global.General.SaveOption(402432,"0001",,,"Description::Cost",,,)
	f.Intrinsic.Control.EndIf
	
	'f.Intrinsic.UI.ChangeWaitStatus("Launching upload......")
	'figure out why this script isn't waiting on the Sync command.
	'Instead, I opted to use an IPM message being sent back from bomcompare on the program exit.
	'f.Global.General.ReadOption(402388,0,False,v.Local.bCompare)
	
	'create a file to hold the IMP value - when BOM Compare finishes, it will pick up this file and send a message back
	f.Intrinsic.String.Build("{0}\CUSTOM\4986\4986IPM{1}.TXT",V.Caller.GlobalDir,v.Caller.User.Trim,v.Local.sIpmFile)
	f.Intrinsic.File.String2File(v.Local.sIpmFile,V.Ambient.MyIPMh)
	
	'f.Intrinsic.UI.CloseWaitDialog	
	'Open BomCompare. We can not use LaunchMenuTask because we do not only open BomCompare, but we need to open the bom xml with BomCompare. So we use ShellExecSync.	
	'Wait_For_PID will combine with ShellExecSync to run as synchronous
	F.Intrinsic.Task.ShellExecSync(0,"Open",v.Local.sFile,"",v.Local.sDir,1)
	'Within Wait_For_PID, we disable the form, wait until the BomCompare closes, then return the control to the form. We create this loop to give the same effect of Synchronous
	f.Intrinsic.Control.CallSub("Wait_For_PID","sProgram","BOMCompare")
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.BomCompare_Load.End

Program.Sub.Return_From_BomCompare.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.iCount.Declare
	v.Local.sRet.Declare
	v.Local.iFrequency.Declare
	v.Local.sBParent.Declare
	v.Local.sPartF.Declare

	'we are returning from a BOM Compare upload.
	'we need to do 2 things here. 
	'1 update the frequency column in bom_mstr table since the uploader doesn't handle it
	'2.then update the local bom.	
	'f.Intrinsic.UI.ChangeWaitStatus("Cleaning up BOM....")
	'checking BOM Compare option to see if it needs to be reset.
	f.Intrinsic.Control.If(v.Global.sBOMCompare.Length,>,0)
		f.Global.General.ReadOption("402432",1,"",1,V.Local.sRet)
		f.Intrinsic.Control.If(v.Global.sBOMCompare,<>,v.Local.sRet)
			f.Global.General.SaveOption(402432,"0001",,,v.Global.sBOMCompare,,,)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf

	'checking if any lines in the current BOM have a frequency
	'BOM Compare doesn't support that field, so we're updating it after the fact.
	F.Data.DataView.Create("BOM","V_FREQ",22,"FREQUENCY > '0'","")
	f.Intrinsic.Control.If(v.DataView.BOM!V_FREQ.RowCount,>,0)
		F.Intrinsic.Control.For(V.Local.iCount,0,v.DataView.BOM!V_FREQ.RowCount--,1)
			v.Local.iFrequency.Set(v.DataView.BOM!V_FREQ(v.Local.iCount).FREQUENCY!FIELDVALString)
			v.Local.sBParent.Set(v.DataView.BOM!V_FREQ(v.Local.iCount).BPARENT!FIELDVALTRIM)
			v.Local.sPartF.Set(.DataView.BOM!V_FREQ(v.Local.iCount).PART!FIELDVALTRIM)
			f.Intrinsic.String.Build("update bom_mstr set frequency = {0} where parent = '{1}' and part = '{2}'",v.Local.iFrequency,v.Local.sBParent.PSQLFriendly,v.Local.sPartF.PSQLFriendly,V.Local.sSql)
			F.ODBC.Connection!conx.execute(v.Local.sSql)
		F.Intrinsic.Control.Next(V.Local.iCount)
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Close("BOM","V_FREQ")	
	
	'set the complete flags
	f.Intrinsic.Control.If(v.DataTable.BOMCOMPLETE.Exists)
		f.Intrinsic.Control.For(v.Local.iCount,0,v.DataTable.BOMCOMPLETE.RowCount--,1)
			v.Local.sBParent.Set(V.DataTable.BOMCOMPLETE(v.Local.iCount).BPARENT!FIELDVALSTRING)
			f.Intrinsic.String.Build("update BOM_MSTR set BOM_COMPLETE = 'Y' where PARENT = '{0}' AND SEQUENCE_BOM = '0000'",v.Local.sBParent.PSQLFriendly,V.Local.sSql)
			F.ODBC.Connection!conx.EXECUTE(V.Local.sSql)
		f.Intrinsic.Control.Next(v.Local.iCount)
	f.Intrinsic.Control.EndIf
			
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Return_From_BomCompare.End

Program.Sub.cmdBrwBom_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare	
	v.Local.sHold.Declare
	v.Local.fHold.Declare
	v.Local.sPart.Declare
	v.Local.sSQL.Declare
	
	f.Intrinsic.Control.If(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bLoadingPleaseWait.Set(True)
	gui.Form.lblResult.Visible(True)
	
	f.Intrinsic.Control.If(v.Global.bActiveBrwBom)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveBrwBom.Set(True)
	
	f.Intrinsic.Control.CallSub(Check_Work_Saved)
	f.Intrinsic.Control.If(v.Args.bStop)
		v.Global.bActiveBrwBom.Set(False)
		v.Global.bLoadingPleaseWait.Set(False)
		gui.Form.lblResult.Visible(False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.If(v.Global.bLongPart)
		f.Intrinsic.UI.Browser("Select Bill of Material","conx","SELECT Left(A.PARENT,17) as Part,Substring(A.PARENT,18,3) as Rev, B.Description,A.UM_Inventory as UM,A.Inactive,Case When a.Bom_Complete = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Complete, x.DISPLAY_PART,x.DISPLAY_REV FROM  V_BOM_ENG B LEFT JOIN V_BOM_MSTR A ON B.PART = A.PARENT Left Join INV_LXR x ON x.GSS_PART = b.Part WHERE b.Location = '' and B.IS_PARENT = 'Y' AND A.SEQUENCE_BOM = '0000'","Parent*!*Rev*!*Description*!*UM*!*Inactive*!*Compl.*!*Long Part*!*Rev Long Part","500*!*200*!*700*!*200*!*200*!*200*!*500*!*200","15000","10000",v.Local.sRet)
	f.Intrinsic.Control.Else
		f.Intrinsic.UI.Browser("Select Bill of Material","conx","SELECT Left(A.PARENT,17) as Part,Substring(A.PARENT,18,3) as Rev, B.Description,A.UM_Inventory as UM,A.Inactive,Case When a.Bom_Complete = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Complete FROM  V_BOM_ENG B LEFT JOIN V_BOM_MSTR A ON B.PART = A.PARENT WHERE b.Location = '' and B.IS_PARENT = 'Y' AND A.SEQUENCE_BOM = '0000'","Parent*!*Rev*!*Description*!*UM*!*Inactive*!*Compl.","500*!*200*!*700*!*200*!*200*!*200","15000","10000",v.Local.sRet)
	f.Intrinsic.Control.EndIf
	
	'handle return
	F.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
		
		f.Intrinsic.Control.If(v.Screen.Form!chkBomOnly.Value,=,0)
			f.Intrinsic.Control.CallSub(Clear_2_Sides)
			f.Intrinsic.Control.CallSub(Enable_Disable_Router_Bom_PartHead,"ActiveFlag","Disable")	
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.CallSub(Clear_Bom_Side)
			f.Intrinsic.Control.CallSub(Enable_Disable_Bom_PartHead,"ActiveFlag","Disable")	
		f.Intrinsic.Control.EndIf
				
		f.Intrinsic.Control.If(v.DataTable.BUILDQTY.RowCount,>,0)
			f.Intrinsic.Control.CallSub(saveBuildQuantity)
		f.Intrinsic.Control.EndIf
		
		F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
		'Set texboxes
		f.Intrinsic.Control.BlockEvents
		gui.Form.txtParent.Text(V.Local.sRet(0))
		gui.Form.txtParentRev.Text(v.Local.sRet(1))
		gui.Form.txtParentDescr.Text(V.Local.sRet(2))
		f.Intrinsic.String.GSSPartString(v.Local.sRet(0),v.Local.sRet(1),v.Local.sPart)

		'More info from bom head
		f.Intrinsic.String.Build("SELECT Top 1 Bom_Complete,UM_Inventory,Cost,Source,Memo_1,Memo_2 FROM BOM_ENG e left join Bom_Mstr m on e.Part = m.Parent WHERE e.Part = '{0}' and m.PARENT = '{0}'  and m.Sequence_Bom = '0000' ",v.Local.sPart.PSQLFriendly,v.Local.sSql)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			f.Intrinsic.Control.If(v.Local.sRet(0).Trim,=,"Y")
				gui.Form.chkBomComp.Value(1)
			f.Intrinsic.Control.Else
				gui.Form.chkBomComp.Value(0)
			f.Intrinsic.Control.EndIf
			gui.Form.txtBomUM.Text(v.Local.sRet(1).Trim)
			v.Local.fHold.Set(v.Local.sRet(2).Trim)
			f.Intrinsic.Control.CallSub(Build_Mask_Cost)
			f.Intrinsic.String.Format(v.Local.fHold,v.Args.sMaskCost,v.Local.sHold)
			gui.Form.txtBomUnitCost.Text(v.Local.sHold)			
			V.Local.sHold.Set(v.Local.sRet(3).Trim)
			v.Local.sHold.Set(v.Dictionary.SOURCE![V.Local.sHold])
			gui.Form.ddlBomSource.Text(v.Local.sHold)
			gui.Form.txtMemo1.Text(v.Local.sRet(4))
			gui.Form.txtMemo2.Text(v.Local.sRet(5))			
		f.Intrinsic.Control.EndIf
		'Bom Notes
		f.Intrinsic.String.Build("Select Top 1 Text from Bom_Notes where Parent = '{0}' and Parent_Seq = '0000' and Parent_Ins = '00'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			gui.Form.txtBomExtraDescr.Text(v.Local.sRet)
		f.Intrinsic.Control.EndIf		
		f.Intrinsic.Control.UnBlockEvents
			
		f.Intrinsic.Control.CallSub(GetBom_If_HasRouter_GetRouter,"Part17",V.Screen.Form!txtParent.Text,"Rev",v.Screen.Form!txtParentRev.Text)
		f.Intrinsic.Control.CallSub(Check_RTR_Doc)
		v.Global.bRouterChanged.Set(False)
	f.Intrinsic.Control.EndIf
	
	v.Global.bActiveBrwBom.Set(False)
	v.Global.bLoadingPleaseWait.Set(False)
	gui.Form.lblResult.Visible(False)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdBrwBom_Click.End

Program.Sub.txtParentRev_LostFocus.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare	
	v.Local.sSql.Declare	
	v.Local.sPart.Declare
	V.Local.sRev.Declare
	v.Local.sPart17.Declare
	v.Local.sMsg.Declare
	v.Local.iRet.Declare
	v.Local.sHold.Declare
	v.Local.fHold.Declare
	
	f.Intrinsic.Control.If(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bLoadingPleaseWait.Set(True)	
	gui.Form.lblResult.Visible(True)
	
	'Make Ucase Rev
	v.Local.sRev.Set(v.Screen.Form!txtParentRev.Text)
	v.Local.sRev.Set(v.Local.sRev.UCase)
	v.Local.sPart17.Set(V.Screen.Form!txtParent.Text.Trim)
	v.Local.sPart17.Set(v.Local.sPart17.UCase)
	
	gui.Form.txtParentRev.Text(v.Local.sRev.UCase)
	'Build Part number
	f.Intrinsic.String.GSSPartString(v.Local.sPart17,v.Local.sRev,v.Local.sPart)	
	'Check if the Bom exist
	f.Intrinsic.String.Build("SELECT Left(A.PARENT,17) as Part,Substring(A.PARENT,18,3) as Rev, B.Description,A.UM_Inventory as UM,a.Bom_Complete as Complete,Case When A.Inactive = '1' then 'No' Else 'Yes' End as Active,UM_Inventory,Cost,Source,Memo_1,Memo_2      FROM  V_BOM_ENG B LEFT JOIN V_BOM_MSTR A ON B.PART = A.PARENT WHERE B.Location = '' and A.PARENT = '{0}' AND B.IS_PARENT = 'Y' AND A.SEQUENCE_BOM = '0000'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
	F.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		'There is no Bom found, check if the part is a Router
		f.Intrinsic.String.Build("select Left(h.Router,17) as Router,Substring(h.Router,18,3) as Rev,rtrim(h.DESCRIPTION_ROUTER) as Description,rtrim(d.Desc_Router_2) as Description_2,rtrim(d.Desc_Router_3) as Description_3,h.UM_INVENTORY as UM_Inventory ,h.PROD_LINE as Product_Line,Case When s.Inactive = '1' then 'No' Else 'Yes' End as Active,s.Complete  from v_router_header h left join v_router_desc d on h.Router = d.Router and h.Router_Suffix = d.Router_Suffix left join v_ROUTER_SUPP_HDR s on h.Router = s.Rtr_Num and h.Router_Suffix = s.Suffix  where h.ROUTER = '{0}' ",v.Local.sPart.PSQLFriendly,v.Local.sSql)	
		f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
		F.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)	
			'fixed 2
			F.Intrinsic.String.Build("{0} is not a Bom nor Router. Do you want to create new?",v.Local.sPart,v.Local.sPart)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox(v.Local.sPart,"Invalid Entry",4,v.Local.iRet)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxYes)			
							
				f.Intrinsic.Control.CallSub(Clear_2_Sides,"bDeleteChild",True)
				f.Intrinsic.Control.If(v.Global.bBindCutList)
					f.Intrinsic.Control.CallSub(Bind_CutList)
				f.Intrinsic.Control.EndIf
				gui.NonInv..Caption("New Router/Bom")
				'pass forward the type (NEW means a new router or bom, INSERT means we are inserting a new part in to the visible router)
				gui.NonInv.cmdBrowseInv.Visible(True)				
				f.Intrinsic.Control.CallSub(newPartCheck,"TYPE","NEW")
				gui.NonInv.txtPart.Text(v.Local.sPart17)
				gui.NonInv.txtRev.Text(v.Local.sRev)			
				v.Global.bRouterChanged.Set(False)				
				
			f.Intrinsic.Control.Else	
				gui.Form.txtParent.SetFocus				
			f.Intrinsic.Control.EndIf
			
			v.Global.bLoadingPleaseWait.Set(False)
			gui.Form.lblResult.Visible(False)
			f.Intrinsic.Control.UnBlockEvents
			f.Intrinsic.Control.ExitSub	
		
		'This part is a Router
		f.Intrinsic.Control.Else
	
			f.Intrinsic.String.Build("This part {0} is not a Bom, but a Router. Do you want to load to Router grid?",v.Local.sPart.Trim,v.Local.sMsg)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Bom not Found - Router Found",4,v.Local.iRet)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxYes)
				gui.Form.txtFocusParent.Text(v.Local.sPart17)
				gui.Form.txtFocusRev.Text(v.Local.sRev)
				V.Global.bLoadingPleaseWait.Set(False)
				f.Intrinsic.Control.CallSub(cmdRefreshRouterLoad_Click)	
				f.Intrinsic.Control.CallSub(Enable_Disable_Router_Bom_PartHead,"ActiveFlag","Disable")
			f.Intrinsic.Control.EndIf
			
			v.Global.bLoadingPleaseWait.Set(False)
			gui.Form.lblResult.Visible(False)
			f.Intrinsic.Control.UnBlockEvents
			f.Intrinsic.Control.ExitSub		
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf		

	'This bom exists	
	f.Intrinsic.Control.If(v.Screen.Form!chkBomOnly.Value,=,0)
		f.Intrinsic.Control.CallSub(Clear_2_Sides)
		f.Intrinsic.Control.CallSub(Enable_Disable_Router_Bom_PartHead,"ActiveFlag","Disable")	
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Clear_Bom_Side)
		f.Intrinsic.Control.CallSub(Enable_Disable_Bom_PartHead,"ActiveFlag","Disable")	
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
	'Set Bom Parent/Rev/Description Textbox
	gui.Form.txtParent.Text(v.Local.sRet(0))
	gui.Form.txtParentRev.Text(v.Local.sRet(1))
	gui.Form.txtParentDescr.Text(v.Local.sRet(2))
	'More info from bom head
	f.Intrinsic.Control.If(v.Local.sRet(4).Trim,=,"Y")
		gui.Form.chkBomComp.Value(1)
	f.Intrinsic.Control.Else
		gui.Form.chkBomComp.Value(0)
	f.Intrinsic.Control.EndIf
	gui.Form.txtBomUM.Text(v.Local.sRet(6).Trim)
	v.Local.fHold.Set(v.Local.sRet(7).Trim)
	f.Intrinsic.Control.CallSub(Build_Mask_Cost)
	f.Intrinsic.String.Format(v.Local.fHold,v.Args.sMaskCost,v.Local.sHold)
	gui.Form.txtBomUnitCost.Text(v.Local.sHold)	
	V.Local.sHold.Set(v.Local.sRet(8).Trim)
	v.Local.sHold.Set(v.Dictionary.SOURCE![V.Local.sHold])
	gui.Form.ddlBomSource.Text(v.Local.sHold)
	gui.Form.txtMemo1.Text(v.Local.sRet(9))
	gui.Form.txtMemo2.Text(v.Local.sRet(10))
	'Bom Notes
	f.Intrinsic.String.Build("Select Top 1 Text from Bom_Notes where Parent = '{0}' and Parent_Seq = '0000' and Parent_Ins = '00'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		gui.Form.txtBomExtraDescr.Text(v.Local.sRet)
	f.Intrinsic.Control.EndIf	
	
	'Get Router Extra Description
	F.Intrinsic.String.Build("Select Text from Inv_Extra_Text where Part = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		gui.Form.txtRTRExtraDescr.Text(v.Local.sRet)
	f.Intrinsic.Control.EndIf		
	
	f.Intrinsic.Control.CallSub(GetBom_If_HasRouter_GetRouter,"Part17",v.Local.sPart17,"Rev",v.Local.sRev)		
	f.Intrinsic.Control.CallSub(Check_RTR_Doc)
	v.Global.bRouterChanged.Set(False)
	f.Intrinsic.Control.CallSub(optRouterHdr_Click)
	
	v.Global.bLoadingPleaseWait.Set(False)
	gui.Form.lblResult.Visible(False)
	
	f.Intrinsic.Control.UnBlockEvents
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtParentRev_LostFocus.End

Program.Sub.cmdRefreshBomTreeLoad_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	f.Intrinsic.Control.IF(v.Global.bActiveRefreshBomTree)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveRefreshBomTree.Set(True)

	f.Intrinsic.Control.CallSub(Check_Work_Saved)
	f.Intrinsic.Control.If(v.Args.bStop)
		v.Global.bActiveRefreshBomTree.Set(False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.CallSub(txtParentRev_LostFocus)
	v.Global.bActiveRefreshBomTree.Set(False)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdRefreshBomTreeLoad_Click.End

Program.Sub.PopulateRouterGrid_When_BomOnly.Start
'working
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)	
	v.Local.sRet.Declare	
	v.Local.sSql.Declare	
	V.Local.sRev.Declare
	v.Local.sPart17.Declare
	v.Local.sSerialize.Declare
	v.Local.iCount.Declare
	V.Local.sParent.Declare
	v.Local.sFilter.Declare	
	v.Local.sBomCompletFlag.Declare
	V.Local.fCost.Declare
	v.Local.fPurch_Factor.Declare
	v.Local.fPurch.Declare
	v.Local.iIndex.Declare	
	v.Local.bPhamtomArgsExist.Declare
	v.Local.bRefArgsExist.Declare	
	v.Local.sMsg.Declare
	
	'must pass UCASE)
	v.Local.sRev.Set(v.Args.sRev)
	v.Local.sPart17.Set(v.Args.sPart17)
	
	gui.Form.GGC_Bom.Visible(False)
	
	f.Intrinsic.String.GSSPartString(v.Local.sPart17,v.Local.sRev,v.Local.sParent)

	'Check if the Bom has a child is also a parent which causes infinite loop
	f.Intrinsic.String.Build(" = '{0}'",v.Local.sParent.PSQLFriendly,v.Local.sFilter)
	f.Intrinsic.Control.CallSub(Check_Child_Is_Parent,"sFilter",v.Local.sFilter)
	f.Intrinsic.Control.If(v.Args.iChildIsParent,>,1)
		gui.Form.GGC_Bom.visible(True)
		f.Intrinsic.String.Build("Bom '{0}' has child the same as parent. Please contact GSS to fix at database level.",v.Local.sParent,v.Local.sMsg)
		f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Fatal Issue")		
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'Build first level
	f.ODBC.Connection!conx.Execute(v.Global.sDeleteExplodeStageSQL)
	f.Intrinsic.String.Build("Insert Into GCG_4986_Stge (UserID,TRMNL,OldParent,Part,Tier,CTier,CH_Index) values ('{0}','{1}','{2}','{2}','',0,'')",v.Caller.User,v.Caller.Terminal,v.Local.sParent.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)	
	f.Intrinsic.String.Build(" = '{0}'",v.Local.sParent.PSQLFriendly,v.Local.sFilter)
	f.Intrinsic.Control.CallSub(Get_Bom_Mstr,"sTargetTable","TEMP_BOM","sFilter",v.Local.sFilter)
	'Check first level to see if 
	f.Intrinsic.Control.If(v.DataTable.TEMP_BOM.RowCount,=,0)	
		'f.Intrinsic.UI.CloseWaitDialog
		f.Data.DataTable.Close("TEMP_BOM")
		gui.Form.GGC_Bom.visible(True)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No BOM found.","BOM Return")		
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)		
		F.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf	
	'check the sequence 0000 in the getbom sub, if not existed, exitsub, otherwise the treeview building will break.
	F.Intrinsic.String.Build("BPARENT = '{0}' and Bom_Seq = '0000'",V.Local.sParent.PSQLFriendly,v.Local.sFilter)
	f.Data.DataView.Create("TEMP_BOM","dv0000check",22,v.Local.sFilter,"")
	f.Intrinsic.Control.If(v.DataView.TEMP_BOM!dv0000check.RowCount,=,0)
		'f.Intrinsic.UI.CloseWaitDialog
		f.Data.DataTable.Close("TEMP_BOM")
		gui.Form.GGC_Bom.visible(True)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("The parent Bom does not have the Bom Sequence 0000 from DB.","Invalid")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)		
		F.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Close("TEMP_BOM","dv0000check")
	
	'Set TIER,CTIER,CH_Index for first level
	F.Data.DataTable.SetValue("TEMP_BOM",-1,"TIER",0)
	f.Data.DataTable.SetSeries("TEMP_BOM","CTIER",0,1)	
	F.Data.DataTable.RemoveColumn("TEMP_BOM","CH_INDEX")
	F.Data.DataTable.AddExpressionColumn("TEMP_BOM","CH_INDEX","STRING","IIF(TIER < '1', CTIER, TIER + '.' + CTIER)")
	
	'Merge 1st level to Bom
	f.Intrinsic.Control.If(v.DataTable.BomForRouter.Exists)
		f.Data.DataTable.Close("BomForRouter")
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.CallSub("Create_Bom_Table","sTable","BomForRouter")
	f.Intrinsic.Control.If(v.DataTable.Temp_Bom.RowCount,=,0)
		gui.Form.GGC_Bom.visible(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	F.Data.DataTable.Merge("TEMP_BOM","BomForRouter",False,2)
	F.Data.DataTable.AcceptChanges("BomForRouter")
	f.Data.DataTable.Close("TEMP_BOM")
	
	'fixing bom data, this was added to address the occassional missing PART number on the parent row of any BOM.
	'the missing PART is normal in core data, but it's useful to have it populated here.	
	f.Data.DataView.Create("BomForRouter","V_VALIDATE",22,"TRIM(BOM_SEQ) = '0000'","[BPARENT] ASC")
	F.Intrinsic.Control.For(v.Local.iCount,0,v.DataView.BomForRouter!V_VALIDATE.RowCount--,1)
		F.Data.DataView.SetValue("BomForRouter","V_VALIDATE",V.Local.iCount,"PART",V.DataView.BomForRouter!V_VALIDATE(V.Local.iCount).BPARENT!FIELDVALTRIM)
	F.Intrinsic.Control.Next(V.Local.iCount)
	F.Data.DataView.Close("BomForRouter","V_VALIDATE")
	
	'Fill fields from Inventory, only for empty cells	
	f.Intrinsic.Control.CallSub(Fill_Empty_Cells_BomForRouter)

	'Get Bom Complete flag and set the bomcomplete checkbox
	f.Intrinsic.String.Build("select Bom_Complete from BOM_MSTR where parent = '{0}' and Sequence_Bom = '0000'",v.Local.sParent,v.Local.sSQL)
	f.ODBC.Connection!Conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	v.Local.sBomCompletFlag.Set("")
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		v.Local.sBomCompletFlag.Set(v.Local.sRet.Trim)
	f.Intrinsic.Control.EndIf	
	f.Data.DataTable.SetValue("BomForRouter",0,"COMPLETE",V.Local.sBomCompletFlag)

	f.Intrinsic.Control.If(v.DataTable.TEMP_CHILD.Exists,=,True)
		f.Data.DataTable.Close("TEMP_CHILD")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Build("[BPARENT] = '{0}'",v.Local.sParent.PSQLFriendly,V.Local.sFilter)
	f.Data.DataView.Create("BomForRouter","V_BOM",22,V.Local.sFilter,"")
	f.Data.DataView.ToDataTable("BomForRouter","V_BOM","TEMP_CHILD",True)
	F.Data.DataView.Close("BomForRouter","V_BOM")
	'filter the view and add these records to the 'child' data table.
	
	'For Cutlist
	f.Intrinsic.Control.If(v.Global.bBindCutList)
		'Temp Serialize		
		gui.Form.GGC_Bom.Serialize("GV_Child",V.Local.sSerialize)
		f.Intrinsic.Control.CallSub(Recreate_Table_Grid_Child)	
		gui.Form.GGC_Bom.Deserialize(V.Local.sSerialize)
	f.Intrinsic.Control.Else
		F.Data.DataTable.DeleteRow("CHILD")
		F.Data.DataTable.ACCEPTCHANGES("CHILD")
	f.Intrinsic.Control.EndIf

	'Prepare to merge from TEMP_CHILD  to CHILD
	f.Data.DataTable.AddColumn("TEMP_CHILD","LMO","STRING","M",1)
	F.Data.DataTable.Merge("TEMP_CHILD","CHILD",FALSE,2)
	f.Data.DataTable.Close("TEMP_CHILD")
	'Resequence 99 rows
	f.Intrinsic.Control.If(v.DataTable.Child.RowCount,>,0)
		f.Data.DataTable.SetValue("Child",0,"RTR_SEQ","000000")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("CHILD","V_ROUTER",22,"[PART] <> [BPARENT] and ([RTR_SEQ] IS NULL OR ([RTR_SEQ] IS NOT NULL AND [RTR_SEQ] <> '000000'))","")
	f.Data.DataView.SetSeries("CHILD","V_ROUTER","RTR_SEQ",990000,V.Global.iRSeq)
	F.Data.DataView.Close("CHILD","V_ROUTER")	
	
	'extend the cost for material sequences only
	f.Data.DataTable.SetValueFormat("Child",-1,"PurchCost2","Purch_Cost","0.00000000")

	'Fill
	f.Intrinsic.Control.CallSub(Fill_From_Dictionaries_CHILD)	
	
	'Quantity 
	f.Intrinsic.Control.CallSub(getQuantities,"PART",V.Screen.Form!txtFocusParent.TEXT,"REV",V.Screen.Form!txtFocusRev.TEXT)

	'For Cutlist
	f.Intrinsic.Control.If(v.Global.bBindCutList)
		f.Intrinsic.Control.CallSub(Bind_CutList)		
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.CallSub(Process_PhantomComments)
	f.Intrinsic.Control.CallSub(Process_Double_Reference)
	
	f.Intrinsic.Variable.ArgExists("bPhantom",v.Local.bPhamtomArgsExist)
	f.Intrinsic.Variable.ArgExists("bReference",v.Local.bRefArgsExist)
	f.Intrinsic.Control.If(v.Local.bPhamtomArgsExist,=,True,and,v.Local.bRefArgsExist,=,True)	
	
		f.Intrinsic.Control.If(v.Args.bPhantom,=,True,or,v.Args.bReference,=,True)
		
			f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)
			F.Intrinsic.Control.CallSub(ReSeq99s)
			f.Data.DataTable.AcceptChanges("CHILD")	
		
		f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.EndIf	
		
	'set the main view to router or bom.
	f.Intrinsic.Control.CallSub(optBomView_Click)
		
	f.Intrinsic.Control.CallSub(Populate_LongPart_Router)	
	gui.Form.GGC_Bom.visible(True)	
	
	f.Intrinsic.Control.CallSub(Check_RTR_Doc)	
	v.Global.bRouterChanged.Set(False)
	f.Intrinsic.Control.CallSub(optRouterHdr_Click)	
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.PopulateRouterGrid_When_BomOnly.End

Program.Sub.GetBom_If_HasRouter_GetRouter.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare	
	v.Local.sPart.Declare
	v.Local.sPart17.Declare
	V.Local.sRev.Declare	
	v.Local.sSerialize.Declare
	
	v.Local.sPart17.Set(v.Args.Part17)
	v.Local.sRev.Set(v.Args.Rev)
	f.Intrinsic.String.GSSPartString(v.Local.sPart17,v.Local.sRev,v.Local.sPart)
	
	f.Intrinsic.Control.CallSub(Check_Bom_Doc)
	
	gui.Form.GGC_Bom.Visible(False)
	
	'Get Bom
	f.Intrinsic.Control.CallSub(getbom,"PARENT",v.Local.sPart17,"REV",v.Local.sRev,"TIER",0,"CTIER",0)
	
	'Get Router
	f.Intrinsic.Control.If(v.Screen.Form!chkBomOnly.Value,=,0)

		f.Intrinsic.Control.If(v.DataTable.BOM.Exists)
			f.Intrinsic.Control.If(v.DataTable.BOM.RowCount,>,0)
				f.Intrinsic.Control.If(v.DataTable.CHILD.Exists,=,False)
					gui.Form.GGC_Bom.visible(True)
					f.Intrinsic.Control.Exitsub
				f.Intrinsic.Control.EndIf		

				f.Intrinsic.Control.CallSub(buildRouterGrid_From_GetBomIfHasRtrGetRtr,"PARENT",V.Local.sPart)
				'Copy values from Ext2 to Extended	
				f.Data.DataTable.SetValueFormat("Child",-1,"Ext2","Extended","0.00000000")
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.EndIf
	
	'set the main view to router or bom.
	f.Intrinsic.Control.CallSub(optBomView_Click)
		
	f.Intrinsic.Control.CallSub(Populate_LongPart_Router)	
	
	gui.Form.GGC_Bom.visible(True)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GetBom_If_HasRouter_GetRouter.End

Program.Sub.buildRouterGrid_From_GetBomIfHasRtrGetRtr.Start
'This sub is only called from cmdBrwRouter_Click with precondition that the BOM table exists and has at least 1 row
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sParent.Declare
	v.Local.sFilter.Declare
	v.Local.iRet.Declare
	V.Local.fBomSeq.Declare
	v.Local.fRTRSeq.Declare
	V.Local.iCount.Declare
	v.Local.sRev.Declare
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	
	V.Local.fCost.Declare
	v.Local.fPurch_Factor.Declare
	v.Local.fPurch.Declare
	v.Local.iIndex.Declare
	v.Local.sSerialize.Declare
	
	v.Local.bPhamtomArgsExist.Declare
	v.Local.bRefArgsExist.Declare	
	v.Local.sHold.Declare
	
	f.Intrinsic.Control.If(v.DataTable.TEMP_CHILD.Exists,=,True)
		f.Data.DataTable.Close("TEMP_CHILD")
	f.Intrinsic.Control.EndIf
	
	v.Local.sParent.Set(v.Args.PARENT)
	f.Intrinsic.String.Build("[BPARENT] = '{0}'",v.Local.sParent.PSQLFriendly,V.Local.sFilter)
	f.Data.DataView.SetFilter("BOM","V_BOM",V.Local.sFilter)

	f.Data.DataView.ToDataTable("BOM","V_BOM","TEMP_CHILD",True)

	'filter the view and add these records to the 'child' data table.

	'Make grid Router invisible
	gui.Form.GGC_Bom.visible(False)
	
	'For Cutlist
	f.Intrinsic.Control.If(v.Global.bBindCutList)
		'Temp Serialize		
		gui.Form.GGC_Bom.Serialize("GV_Child",V.Local.sSerialize)
		f.Intrinsic.Control.CallSub(Recreate_Table_Grid_Child)	
		gui.Form.GGC_Bom.Deserialize(V.Local.sSerialize)
	f.Intrinsic.Control.Else
		F.Data.DataTable.DeleteRow("CHILD")
		F.Data.DataTable.ACCEPTCHANGES("CHILD")
	f.Intrinsic.Control.EndIf
	
	'Prepare to merge from TEMP_CHILD  to CHILD
	f.Data.DataTable.AddColumn("TEMP_CHILD","LMO","STRING","M",1)
	F.Data.DataTable.Merge("TEMP_CHILD","CHILD",FALSE,2)
	F.Intrinsic.Control.CallSub(Resequence99sOrderNaturalIndex)
	'Set Mainview for grid Router
	'gui.Form.GGC_Bom.MainView("GV_CHILD")
	
	gui.Form.txtBomQty.Text(V.DataTable.CHILD(0).QTY!FIELDVALFLOAT)	
	
	'Seems to get the last sequence number of router_Seq and of Bom_Seq?
	F.Intrinsic.Control.For(V.Local.iCount,0,v.DataTable.CHILD.RowCount--,1)
		F.Intrinsic.Control.If(V.DataTable.CHILD(V.Local.iCount).RTR_SEQ!FIELDVALTRIM,<,"990000")
			v.local.fBomSeq.Set(v.DataTable.CHILD(v.Local.iCount).BOM_SEQ!FIELDVALTRIM)
			V.local.fRTRSeq.Set(v.DataTable.CHILD(v.Local.iCount).RTR_SEQ!FIELDVALTRIM)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCount)
	
	f.Intrinsic.String.Build("select Left(h.Router,17) as Router,Substring(h.Router,18,3) as Rev,rtrim(h.DESCRIPTION_ROUTER) as Description,rtrim(d.Desc_Router_2) as Description_2,rtrim(d.Desc_Router_3) as Description_3,h.UM_INVENTORY as UM_Inventory ,h.PROD_LINE as Product_Line,Case When s.Inactive = '1' then 'No' Else 'Yes' End as Active,s.Complete,left(Similar,17) as Similar17,substring(Similar,18,3) as SimilarRev,Commission,Scrap * 100 as Scrap,No_Reprice,Part_Customer  from v_router_header h left join v_router_desc d on h.Router = d.Router and h.Router_Suffix = d.Router_Suffix left join v_ROUTER_SUPP_HDR s on h.Router = s.Rtr_Num and h.Router_Suffix = s.Suffix  where h.ROUTER = '{0}' ",V.Local.sParent.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		'Router does not exist
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Router does not exist. What the router grid will display is Bom view.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.txtFocusParent.Text(v.Local.sParent.Left17)
		f.Intrinsic.String.Mid(v.Local.sParent,18,3,v.Local.sRev)
		gui.Form.txtFocusRev.Text(v.Local.sRev)
		gui.Form.txtFocusDescr.Text(V.DataTable.CHILD(0).DESCR_BP!FIELDVALSTRING)
	f.Intrinsic.Control.Else
		'Router exists set router header texboxes
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		gui.Form.txtFocusParent.Text(V.Local.sRet(0))
		gui.Form.txtFocusRev.Text(v.Local.sRet(1))
		gui.Form.txtFocusDescr.Text(V.Local.sRet(2))
		gui.Form.txtDescr2.Text(v.Local.sRet(3))
		gui.Form.txtDescr3.Text(v.Local.sRet(4))
		gui.Form.txtUM.Text(V.Local.sRet(5))	
		gui.Form.txtPL.Text(v.Local.sRet(6))
		f.Intrinsic.Control.If(v.Local.sRet(8),=,"True")
			gui.Form.chkRtrComp.Value(1)
		f.Intrinsic.Control.Else
			gui.Form.chkRtrComp.Value(0)
		f.Intrinsic.Control.EndIf
		'Extra fields for router header
		gui.Form.txtSimilar.Text(v.Local.sRet(9))
		gui.Form.txtSimilarRev.Text(v.Local.sRet(10))
		f.Intrinsic.String.Format(v.Local.sRet(11),"0.00",v.Local.sHold)
		gui.Form.txtComm.Text(v.Local.sHold)
		f.Intrinsic.String.Format(v.Local.sRet(12),"0.00",v.Local.sHold)
		gui.Form.txtScrap.Text(v.Local.sHold)
		f.Intrinsic.Control.If(v.Local.sRet(13).Trim,=,"Y")
			gui.Form.chkOmitFromRTRReprice.Value(1)
		f.Intrinsic.Control.Else
			gui.Form.chkOmitFromRTRReprice.Value(0)
		f.Intrinsic.Control.EndIf
		gui.Form.txtPartID.Text(v.Local.sRet(14))
		
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.CallSub(getRouter,"PART",V.Args.PARENT,"DESCR",V.DataTable.CHILD(0).DESCR_BP!FIELDVALSTRING,"BSEQ",V.Local.fBomSeq,"RSEQ",V.Local.fRTRSeq)
		
	f.Intrinsic.Control.If(v.DataTable.CHILD(0).COMPLETE!FIELDVALTRIM,=,"Y")
		'ROUTER is complete
		'blocking events to the chkBomComp_click doesn't fire
		f.Intrinsic.Control.If(V.Global.iRights,<,2)
			'Cannot change the grid if no right or be an ESTIMATOR
			v.Global.bReadOnly.Set(True)
		f.Intrinsic.Control.Else
			'Still can change the grid if ENGINEER
			v.Global.bReadOnly.Set(False)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		'Router is NOT complete
		'blocking events to the chkBomComp_click doesn't fire	
		f.Intrinsic.Control.If(V.Global.iRights,>,0)
			'Can change if ESTIMATE/ENGINEER
			v.Global.bReadOnly.Set(False)
		f.Intrinsic.Control.Else
			'Can not change if no right
			v.Global.bReadOnly.Set(True)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	'just making sure the temp datatable gets closed out before we exit this sub
	f.Intrinsic.Control.If(v.DataTable.TEMP_CHILD.Exists,=,True)
		f.Data.DataTable.Close("TEMP_CHILD")
	f.Intrinsic.Control.EndIf
	
	'extend the cost for material sequences only
	f.Data.DataTable.SetValueFormat("Child",-1,"PurchCost2","Purch_Cost","0.00000000")

	'Fill
	f.Intrinsic.Control.CallSub(Fill_From_Dictionaries_CHILD)	
	
	'Quantity 
	f.Intrinsic.Control.CallSub(getQuantities,"PART",V.Screen.Form!txtFocusParent.TEXT,"REV",V.Screen.Form!txtFocusRev.TEXT)

	'For Cutlist
	f.Intrinsic.Control.If(v.Global.bBindCutList)
		f.Intrinsic.Control.CallSub(Bind_CutList)		
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.CallSub(Process_PhantomComments)
	f.Intrinsic.Control.CallSub(Process_Double_Reference)
	
	f.Intrinsic.Variable.ArgExists("bPhantom",v.Local.bPhamtomArgsExist)
	f.Intrinsic.Variable.ArgExists("bReference",v.Local.bRefArgsExist)
	f.Intrinsic.Control.If(v.Local.bPhamtomArgsExist,=,True,and,v.Local.bRefArgsExist,=,True)	
	
		f.Intrinsic.Control.If(v.Args.bPhantom,=,True,or,v.Args.bReference,=,True)
		
			f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)
			F.Intrinsic.Control.CallSub(ReSeq99s)
			f.Data.DataTable.AcceptChanges("CHILD")	
		
		f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.EndIf
	
	gui.Form.GGC_Bom.visible(True)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.buildRouterGrid_From_GetBomIfHasRtrGetRtr.End

Program.Sub.getQuantities.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRouter.Declare
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	v.Local.sQuantity.Declare
	
	f.Intrinsic.String.GSSPartString(v.Args.PART,V.Args.REV,V.Local.sRouter)
	
	f.Data.DataTable.DeleteRow("BUILDQTY")
	f.Data.DataTable.AcceptChanges("BUILDQTY")

	'query the router tables for an existing build quantity
	f.Intrinsic.String.Build("Select QUANTITY_1, QUANTITY_2, QUANTITY_3, QUANTITY_4 from V_RTR_PRICE_1_4 where ROUTER = '{0}'",V.Local.sRouter.PSQLFriendly,V.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		v.Local.sQuantity.Set(v.Local.sRet)
		F.Intrinsic.String.Build("Select QUANTITY_5, QUANTITY_6, QUANTITY_7, QUANTITY_8 from V_RTR_PRICE_5_8 where ROUTER = '{0}'",V.Local.sRouter.PSQLFriendly,V.Local.sSql)
		f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.String.Build("{0}*!*{1}",v.Local.sQuantity,v.Local.sRet,v.Local.sQuantity)
		f.Intrinsic.Control.EndIf		
		f.Intrinsic.String.Build("Select QUANTITY_9, QUANTITY_10 from V_RTR_PRICE_9_10 where ROUTER = '{0}'",V.Local.sRouter.PSQLFriendly,V.Local.sSql)
		f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.String.Build("{0}*!*{1}",v.Local.sQuantity,v.Local.sRet,v.Local.sQuantity)
		f.Intrinsic.Control.EndIf		
	
		f.Data.DataTable.CreateFromString("Temp_Qty",v.Local.sQuantity,"Quantity","Float","","*!*")
		f.Data.DataView.Create("Temp_Qty","v_TempQty",22,"Quantity <> 0","")
		f.Data.DataView.ToDataTable("Temp_Qty","v_TempQty","TempQty2",True)
		f.Data.DataTable.Merge("TempQty2","BUILDQTY",False,2)
		f.Data.DataTable.Close("Temp_Qty")
		f.Data.DataTable.Close("TempQty2")
		f.Data.DataTable.SetValue("BUILDQTY",-1,"Part",v.Local.sRouter)
		f.Data.DataTable.AcceptChanges("BUILDQTY")
		f.Intrinsic.Control.If(v.DataTable.BuildQty.RowCount,>,0)
			v.Global.bQtySaved.Set(True)
		f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.getQuantities.End

Program.Sub.saveBuildQuantity.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'check to see if we have a bom or a router based on 
	f.Intrinsic.Control.If(v.DataTable.BOM.RowCount,>,0)
		f.Data.DataTable.SetValue("BUILDQTY",-1,"PART",v.DataTable.BOM(0).BPARENT!FIELDVALTRIM)
	f.Intrinsic.Control.ElseIf(V.DataTable.CHILD.RowCount,>,0)
		f.Data.DataTable.SetValue("BUILDQTY",-1,"PART",V.DataTable.CHILD(0).BPARENT!FIELDVALTRIM)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.saveBuildQuantity.End

Program.Sub.ctmDelete_qty_row.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	V.Local.iCount.Declare
	
	f.Intrinsic.Control.If(v.DataTable.BUILDQTY.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.SelectCase(v.Args.ITEMNAME)
		F.Intrinsic.Control.Case("Q")
			'Delete selected rows
			gui.Form.GGC_Quantity.GetSelectedRows("GV_QTY",V.Local.sRet)
			f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("Please select a Quantity row to delete.","No Row Selected")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			f.Intrinsic.Control.For(v.Local.iCount,v.Local.sRet.UBound,0,-1)
				f.Data.DataTable.DeleteRow("BUILDQTY",V.Local.sRet(V.Local.iCount))
			f.Intrinsic.Control.Next(v.Local.iCount)					
		f.Intrinsic.Control.Case("A")
			'Delete all rows
			f.Data.DataTable.DeleteRow("BUILDQTY")
	f.Intrinsic.Control.EndSelect
	
	f.Data.DataTable.AcceptChanges("BUILDQTY")	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ctmDelete_qty_row.End

'End Populate Bom/Router Browse Router/Bom GetBom GetRouter Populate treeview/router grid

'Simple sub 2
Program.Sub.delete_old_router.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sPart.Declare
	
	v.Local.sPart.Set(v.args.PART)
	
	'THE EXISTING ROUTER AND ASSOCIATED DATA, then reload	
	f.Intrinsic.String.Build("delete from ROUTER_DESC where ROUTER = '{0}'",v.Local.sPart.PSQLFriendly,V.Local.sSql)
	F.ODBC.Connection!conx.EXECUTE(V.Local.sSql)
	F.Intrinsic.String.Build("delete FROM ROUTER_HEADER where ROUTER = '{0}'",v.Local.sPart.PSQLFriendly,V.Local.sSql)
	F.ODBC.Connection!conx.EXECUTE(V.Local.sSql)
	F.Intrinsic.String.Build("delete FROM ROUTER_LINE WHERE ROUTER = '{0}'",v.Local.sPart.PSQLFriendly,V.Local.sSql)
	F.ODBC.Connection!conx.EXECUTE(V.Local.sSql)
	F.Intrinsic.String.Build("delete FROM ROUTER_OP_CODES WHERE ROUTER = '{0}'",v.Local.sPart.PSQLFriendly,V.Local.sSql)
	F.ODBC.Connection!conx.EXECUTE(V.Local.sSql)
	F.Intrinsic.String.Build("delete FROM ROUTER_XREF WHERE ROUTER = '{0}'",v.Local.sPart.PSQLFriendly,V.Local.sSql)
	F.ODBC.Connection!conx.EXECUTE(V.Local.sSql)
	F.Intrinsic.String.Build("delete FROM ROUTER_SUPP_HDR WHERE RTR_NUM = '{0}'",v.Local.sPart.PSQLFriendly,V.Local.sSql)
	F.ODBC.Connection!conx.EXECUTE(V.Local.sSql)
	F.Intrinsic.String.Build("delete FROM ROUTER_SUPP_LINE WHERE RTR_NUM = '{0}'",v.Local.sPart.PSQLFriendly,V.Local.sSql)
	F.ODBC.Connection!conx.EXECUTE(V.Local.sSql)
	F.Intrinsic.String.Build("delete FROM RTR_SEQ_COMMENTS WHERE RTR_NUMBER = '{0}'",v.Local.sPart.PSQLFriendly,V.Local.sSql)
	F.ODBC.Connection!conx.EXECUTE(V.Local.sSql)
	f.Intrinsic.Variable.AddRV("bSuccess",True)

f.Intrinsic.Control.Catch
	F.Intrinsic.UI.Msgbox("Router may be opened in Standard Router screen.","Unsuccessful Transaction")
    f.Intrinsic.Variable.AddRV("bSuccess",False)
f.Intrinsic.Control.EndTry
Program.Sub.delete_old_router.End

Program.Sub.txtFocusParent_LostFocus.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sText.Declare	
	
	v.Local.sText.Set(v.Screen.Form!txtFocusParent.text)
	gui.Form.txtFocusParent.Text(v.Local.sText.UCase)
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtFocusParent_LostFocus.End

Program.Sub.txtParent_LostFocus.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sText.Declare	
	
	v.Local.sText.Set(v.Screen.Form!txtParent.text)
	gui.Form.txtParent.Text(v.Local.sText.UCase)
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtParent_LostFocus.End

Program.Sub.txtPart_LostFocus.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sText.Declare	
	
	v.Local.sText.Set(v.Screen.NonInv!txtPart.text)
	gui.NonInv.txtPart.Text(v.Local.sText.UCase)
	f.Intrinsic.Control.UnBlockEvents
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.txtPart_LostFocus.End

Program.Sub.txtRev_LostFocus.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sText.Declare	
	
	v.Local.sText.Set(v.Screen.NonInv!txtRev.text)
	gui.NonInv.txtRev.Text(v.Local.sText.UCase)
	f.Intrinsic.Control.UnBlockEvents
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.txtRev_LostFocus.End

Program.Sub.optBomView_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	'in BOM view, the 99x sequences are displayed, but the user can not edit the router sequences
	f.Intrinsic.Control.If(v.DataView.CHILD!V_CHILD.Exists)
		f.Data.DataView.SetFilter("CHILD","V_CHILD","PART <> [BPARENT] AND Part <> '~~~@!@~~~@!@'")
		gui.Form.GGC_Bom.SetColumnProperty("GV_CHILD","RTR_SEQ","ReadOnly",True)
		gui.Form.GGC_Bom.SetColumnProperty("GV_CHILD","RTR_SEQ","AllowEdit",False)			
	f.Intrinsic.Control.EndIf
	gui.Form.optBomView.Value(1)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.optBomView_Click.End

Program.Sub.optRtrView_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	'this sets the working view so that the user can change router sequences. the 99x sequences are hidden so they can't change those
	f.Intrinsic.Control.If(v.DataView.CHILD!V_CHILD.Exists)	
		f.Data.DataView.SetFilter("CHILD","V_CHILD","PART <> [BPARENT] AND TRIM(RTR_SEQ) < '990000' AND Part <> '~~~@!@~~~@!@'")
		gui.Form.GGC_Bom.SetColumnProperty("GV_CHILD","RTR_SEQ","ReadOnly",True)
		gui.Form.GGC_Bom.SetColumnProperty("GV_CHILD","RTR_SEQ","AllowEdit",False)
		
	f.Intrinsic.Control.EndIf
	gui.Form.optRtrView.Value(1)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.optRtrView_Click.End

Program.Sub.BomInUse.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sMsg.Declare
	v.Local.iRet.Declare
	v.Local.bInUse.Declare
	v.Local.bCancel.Declare	
	v.Local.sPart.Declare
	
	v.Local.sPart.Set(v.Args.PARENT)
	
	'check to see if this BOM is being edited by someone else
	'if not, add a record to the the table so the current user can lay claim to this bom
	f.Intrinsic.String.Build("SELECT PARENT, USERID, TERMINAL, DATE_TIME from GCG_4986_BOMINUSE where PARENT = '{0}'",V.Local.sPart.PSQLFriendly,V.Local.sSql)
	f.ODBC.Connection!conx.openlocalrecordsetRW("rstBOMIU",v.Local.sSql)
	f.Intrinsic.Control.If(v.ODBC.conx!rstBOMIU.EOF,=,false)
		f.Intrinsic.String.Build("This BOM {0} is in use by {1} on Terminal {2}.  Loaded at {3}",V.Local.sPart,V.ODBC.conx!rstBOMIU(0).FieldValLTrim!USERID,V.ODBC.conx!rstBOMIU(0).FieldValTrim!TERMINAL,V.ODBC.conx!rstBOMIU(0).FieldValTrim!DATE_TIME,V.Local.sMsg)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox(v.Local.sMsg,"BOM LOCKED",1,v.Local.iRet)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.SelectCase(v.Local.iRet)
			f.Intrinsic.Control.Case(1)
				v.Local.bInUse.Set(True)
			f.Intrinsic.Control.Case(2)
				v.Local.bCancel.Set(True)
		f.Intrinsic.Control.EndSelect
	f.Intrinsic.Control.Elseif(v.ODBC.conx!rstBOMIU.EOF,=,True)
		f.ODBC.conx!rstBOMIU.AddNew
		f.ODBC.conx!rstBOMIU.Set!PARENT(V.Args.PARENT)
		f.ODBC.conx!rstBOMIU.Set!USERID(V.Caller.User)
		f.ODBC.conx!rstBOMIU.Set!TERMINAL(V.Caller.Terminal)
		f.ODBC.conx!rstBOMIU.Set!DATE_TIME(V.Ambient.Now)
		F.ODBC.conx!rstBOMIU.Update
		f.ODBC.conx!rstBOMIU.Close	
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Variable.AddRV("INUSE",V.Local.bInUse,"CANCEL",v.Local.bCancel)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.BomInUse.End

Program.Sub.cmdCancel_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sHold.Declare

	f.Intrinsic.Control.BlockEvents
	f.Intrinsic.Control.If(v.Screen.NonInv!txtType.Text.Trim,=,"FROMMOVESEQ")	
		gui.NonInv.txtPart.Enabled(True)
		gui.NonInv.txtPart.Enabled(True)	
	f.Intrinsic.Control.EndIf

	'this form has some "change" events active
	
	'closes the screen from inserting a new/non inventory part
	gui.NonInv..Visible(false)
	gui.Form.frInsertType.Visible(True)
	f.Intrinsic.String.LPad(v.Screen.NonInv!txtNonInvManualSeq.Text.Trim,"0",6,v.Local.sHold)
	gui.Form.txtManualSeq.Text(v.Local.sHold)
	'clear the NonInv form for next time
	gui.NonInv..ClearGroup(1)
	gui.NonInv.ddlCategory.ClearItems
	gui.NonInv.ddlSource.ClearItems
	
	gui.NonInv.txtNoSave.Text("")
	gui.NonInv.cmdBrowseInv.Visible(False)
	
	gui.Form..Enabled(True)
	f.Intrinsic.Control.UnBlockEvents
	
	gui.Form..AlwaysOnTop(True)
	gui.Form..AlwaysOnTop(False)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.cmdCancel_Click.End

Program.Sub.ddlCategory_Change.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iSeq.Declare
	v.Local.sSeq.Declare
	v.Local.sRet.Declare
	v.Local.sRSeq.Declare
	v.Local.iHold.Declare
	v.Local.sBSeq.Declare
	V.Local.sCategory.Declare

	'we also need to make some changes if the user is making a phantom
	f.Intrinsic.Control.If(v.Screen.NonInv!ddlCategory.text,=,"PHANTOM")
		gui.NonInv.ddlSource.Text("MFG-JOB")
	f.Intrinsic.Control.EndIf
	
	'we need to make some changes to the sequence if the user is creating a mfg part and category = 'NORMAL'
	
	v.Local.sCategory.Set(v.Screen.NonInv!ddlCategory.Text)
	
	f.Intrinsic.Control.SelectCase(v.Screen.NonInv!ddlSource.text)
		f.Intrinsic.Control.CaseAny("MFG-STOCK","MFG-JOB")
			F.Intrinsic.Control.If(v.Local.sCategory.UCase,=,"NORMAL")
				F.Data.DataTable.Compute("CHILD","MAX(RTR_SEQ)","RTR_SEQ >= '990000'",V.Local.sRet)
				f.Intrinsic.Control.If(v.Local.sRet,=,"")
					gui.NonInv.txtRTR_SEQ.Text("990000")			
				f.Intrinsic.Control.Else	
					f.Intrinsic.Math.Add(v.Local.sRet,V.Global.iRSeq,v.Local.iHold)	
					f.Intrinsic.String.LPad(v.Local.iHold,"0",6,v.Local.sRSeq)
					gui.NonInv.txtRTR_SEQ.Text(v.Local.sRSeq)
				f.Intrinsic.Control.EndIf	
			F.Intrinsic.Control.Else
	
			V.Local.sRSeq.Set("000000")
			F.Data.DataView.Create("CHILD","v_Seq",22,"RTR_SEQ > '000000' AND RTR_SEQ < '990000'","RTR_SEQ DESC")
			f.Intrinsic.Control.If(v.DataView.CHILD!v_Seq.RowCount,>,0)
				v.Local.sRSeq.Set(V.DataView.CHILD!v_Seq(0).RTR_SEQ!FIELDVALTRIM)			
			f.Intrinsic.Control.EndIf		
			f.Data.DataView.Close("CHILD","v_Seq")		
			
			f.Intrinsic.Math.Add(v.Local.sRSeq,V.Global.iRSeq,v.Local.iHold)	
			f.Intrinsic.String.LPad(v.Local.iHold,"0",6,v.Local.sRSeq)
			gui.NonInv.txtRTR_SEQ.Text(v.Local.sRSeq)	
				
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.CaseElse
			V.Local.sRSeq.Set("000000")
			F.Data.DataView.Create("CHILD","v_Seq",22,"RTR_SEQ > '000000' AND RTR_SEQ < '990000'","RTR_SEQ DESC")
			f.Intrinsic.Control.If(v.DataView.CHILD!v_Seq.RowCount,>,0)
				v.Local.sRSeq.Set(V.DataView.CHILD!v_Seq(0).RTR_SEQ!FIELDVALTRIM)			
			f.Intrinsic.Control.EndIf		
			f.Data.DataView.Close("CHILD","v_Seq")		
			
			f.Intrinsic.Math.Add(v.Local.sRSeq,V.Global.iRSeq,v.Local.iHold)	
			f.Intrinsic.String.LPad(v.Local.iHold,"0",6,v.Local.sRSeq)
			gui.NonInv.txtRTR_SEQ.Text(v.Local.sRSeq)	
			
	f.Intrinsic.Control.EndSelect
	
	v.Global.sInsRtrSeq.Set(v.Screen.NonInv!txtRTR_SEQ.Text)
	gui.NonInv.txtBOM_SEQ.Text("")	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ddlCategory_Change.End

Program.Sub.cmdBrw_RtrCust_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	
	'common browswer for customer/prospect
	f.Intrinsic.UI.CommonBrowser(225,"",v.Local.sRet)
	
	f.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		gui.Form.txtRtrCust.Text(v.Local.sRet(0))
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdBrw_RtrCust_Click.End

Program.Sub.CellComments_UnLoad.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	gui.CellComments..Visible(False)
	gui.Form..Enabled(True)
	gui.Form..AlwaysOnTop(True)
	gui.Form..AlwaysOnTop(False)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.CellComments_UnLoad.End

Program.Sub.cmdCellCmtSave_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sIndex.Declare
	
	v.Local.sIndex.Set(v.Screen.CellComments!txtCmtIndex.Text)
	f.Data.DataTable.SetValue("CHILD",V.Local.sIndex,"COMMENTS",v.Screen.CellComments!txtCmtComments.Text.Trim)	
	v.Global.bRouterChanged.Set(True)
	gui.CellComments..Visible(False)
	gui.Form..Enabled(True)
	gui.Form..AlwaysOnTop(True)
	gui.Form..AlwaysOnTop(False)	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdCellCmtSave_Click.End

Program.Sub.GGC_Bom_KeyPress.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	f.Intrinsic.Control.If(v.Args.COLUMNNAME,=,"TYPE")
		F.Intrinsic.Control.SelectCase(V.DataTable.CHILD(V.Args.ROWINDEX).TYPE!FIELDVALTRIM)
			F.Intrinsic.Control.Case("Parts/Hour")
				F.Data.DataTable.SetValue("CHILD",V.Args.ROWINDEX,"TYPE","PPH")
				v.Global.bRouterChanged.Set(True)
			F.Intrinsic.Control.Case("Hours/Part")
				F.Data.DataTable.SetValue("CHILD",V.Args.ROWINDEX,"TYPE","HPP")
				v.Global.bRouterChanged.Set(True)
			F.Intrinsic.Control.Case("Minutes/Part")
				F.Data.DataTable.SetValue("CHILD",V.Args.ROWINDEX,"TYPE","MPP")
				v.Global.bRouterChanged.Set(True)
			F.Intrinsic.Control.Case("Seconds/Part")
				F.Data.DataTable.SetValue("CHILD",V.Args.ROWINDEX,"TYPE","SPP")
				v.Global.bRouterChanged.Set(True)
			F.Intrinsic.Control.Case("XParts/Minute")
				F.Data.DataTable.SetValue("CHILD",V.Args.ROWINDEX,"TYPE","PPM")
				v.Global.bRouterChanged.Set(True)
			F.Intrinsic.Control.Case("Hundred/Hour")
				F.Data.DataTable.SetValue("CHILD",V.Args.ROWINDEX,"TYPE","HPH")
				v.Global.bRouterChanged.Set(True)
		F.Intrinsic.Control.EndSelect	
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GGC_Bom_KeyPress.End

Program.Sub.cmdAddQty_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sPart.Declare

	'Prevent double cycle
	f.Intrinsic.Control.IF(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	

	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveAddQty)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveAddQty.Set(True)

	f.Intrinsic.Control.If(v.Screen.Form!txtFocusParent.Enabled,=,True,or,v.Screen.Form!txtFocusParent.Text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please select/enter a Router/Bom header.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		v.Global.bActiveAddQty.Set(False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.BUILDQTY.Exists,=,False)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("BUILDQTY does not exist.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		v.Global.bActiveAddQty.Set(False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.BUILDQTY.RowCount,>=,10)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("The system can support maximum 10 quantities.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		v.Global.bActiveAddQty.Set(False)
		f.Intrinsic.Control.exitsub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.BUILDQTY.RowCount,=,0)

		f.Intrinsic.Control.If(v.Screen.Form!txtFocusParent.text.Trim,<>,"")
			f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.text.Trim,v.Screen.Form!txtFocusRev.text.Trim,v.Local.sPart)
		f.Intrinsic.Control.ElseIf(v.Screen.Form!txtParent.text.Trim,<>,"")
			f.Intrinsic.String.GSSPartString(v.Screen.Form!txtParent.text.Trim,v.Screen.Form!txtParentRev.text.Trim,v.Local.sPart)
		f.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.Else
		v.Local.sPart.Set(v.DataTable.BUILDQTY(0).Part!FieldValString)
	f.Intrinsic.Control.EndIf	

	f.Data.DataTable.AddRow("BUILDQTY","Part",V.Local.sPart,"QUANTITY",0)
	v.Global.bActiveAddQty.Set(False)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdAddQty_Click.End

'End Simple sub 2

'Interaction with middle grid (router grid)
'Left click the cell => browser openning/Show context menu by cell/column/LMO type
Program.Sub.GGC_Bom_RowClick.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iX.Declare		
	v.Local.iY.Declare
	v.Local.sSeq.Declare
	v.Local.sCurrentList.Declare	
	v.Local.sLMO.Declare
	
	'Get RowIndex and RowHandle to be used in other subs
	v.Global.iBomRow.Set(v.Args.RowIndex)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GGC_Bom_RowClick.End

Program.Sub.GGC_Bom_RowCellClick.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iX.Declare
	v.Local.iY.Declare
	v.Local.sLMO.Declare
	v.Local.sRet.Declare
	v.Local.iSerie.Declare
	v.Local.sFilter.Declare
	v.Local.sPart.Declare
	v.Local.sItem.Declare
	v.Local.iCnt.Declare
	v.Local.bFlag.Declare
	V.Local.sLabel.Declare
	v.Local.iRet.Declare
	v.Local.sUserType.Declare
	
	v.Global.iBomRow.Set(v.Args.RowIndex)
	'check user rights to see if they can make changes or not, and see if the bom complete flagged is checked (if it is, we don't want to allow editing until it's not checked)
	f.Intrinsic.Control.If(V.Global.iRights,<=,0,or,v.Global.bReadOnly,=,True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'For CHILD$CUTLIST
	f.Intrinsic.Control.If(v.Args.Column.UCase,=,"SELECT_CUTLIST")
		v.Local.bFlag.Set(v.DataTable.CHILD$CUTLIST(v.Args.RowIndex).SELECT_CUTLIST!FieldValString)
		f.Data.DataTable.SetValue("CHILD$CUTLIST",V.Args.RowIndex,"SELECT_CUTLIST",v.Local.bFlag.Not)
		
		'Turn corresponding of Select Seq
		v.Local.iSerie.Set(v.DataTable.CHILD$CUTLIST(v.Args.RowIndex).Serie!FieldValString)
		f.Intrinsic.Control.If(v.Local.bFlag)
			'Set header to False
			f.Intrinsic.String.Build("Serie = '{0}' ",v.Local.iSerie,v.Local.sFilter)		
			f.Data.DataView.Create("Child","vSetCorresponding",22,v.Local.sFilter,"")
			f.Data.DataView.SetValue("Child","vSetCorresponding",-1,"SelectSeq",False)
			f.Data.DataView.Close("Child","vSetCorresponding")
		f.Intrinsic.Control.Else
			'Set header to True if all cutlist item are selected
			f.Intrinsic.String.Build("Serie = '{0}' and Select_Cutlist = 0",v.Local.iSerie,v.Local.sFilter)		
			f.Data.DataView.Create("Child$Cutlist","vSelC",22,v.Local.sFilter,"")
			f.Intrinsic.Control.If(v.DataView.Child$Cutlist!vSelC.RowCount,=,0)
				f.Intrinsic.String.Build("Serie = '{0}'",v.Local.iSerie,v.Local.sFilter)
				f.Data.DataView.Create("Child","vSetCorresponding",22,v.Local.sFilter,"")
				f.Data.DataView.SetValue("Child","vSetCorresponding",-1,"SelectSeq",True)
				f.Data.DataView.Close("Child","vSetCorresponding")
			f.Intrinsic.Control.EndIf
			f.Data.DataView.Close("Child$Cutlist","vSelC")	
		f.Intrinsic.Control.EndIf		
		
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Args.Column.UCase,=,"SELECTSEQ")
		v.Local.bFlag.Set(v.DataTable.CHILD(v.Args.RowIndex).SELECTSEQ!FieldValString)
		f.Data.DataTable.SetValue("CHILD",V.Args.RowIndex,"SELECTSEQ",v.Local.bFlag.Not)
		f.Intrinsic.Control.If(v.Global.bBindCutList)
			f.Intrinsic.String.Build("Serie = '{0}'",v.DataTable.Child(v.Args.RowIndex).Serie!FieldValString,v.Local.sFilter)
			f.Data.DataView.Create("Child$Cutlist","vExp",22,v.Local.sFilter,"")
			f.Data.DataView.SetValue("Child$Cutlist","vExp",-1,"select_cutlist",v.Local.bFlag.Not)
			f.Intrinsic.Control.If(v.DataView.Child$Cutlist!vExp.RowCount,>,0)
				gui.Form.GGC_Bom.ExpandMasterRow("GV_Child",v.Args.RowIndex)
			f.Intrinsic.Control.EndIf
			f.Data.DataView.Close("Child$Cutlist","vExp")			
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf	
	
	
	'For Child table
	f.Intrinsic.Control.If(v.Global.iBomRow,>,v.DataTable.Child.RowCount--)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'context menu's are enabled for specific columns in the main grid view.
	
	v.Local.sLMO.Set(v.Datatable.CHILD(v.Args.RowIndex).LMO!FIELDVALTRIM)	
	F.Intrinsic.Control.If(v.Args.Column.UCase,=,"RTR_SEQ")
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.If(v.Args.Column.UCase,=,"SIGNOFF_GRPUSR",and,v.DataTable.Child(v.Args.RowIndex).Part!FIELDVALTRIM,=,V.Global.sTask)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Click Yes for User, No for Group.","Select User/Group",4,v.Local.iRet)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		'Open User browser
		f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxYes)
			v.Local.sUserType.Set("U")
			f.Intrinsic.UI.CommonBrowser(10,"",v.Local.sRet)
			f.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
				F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
				f.Data.DataTable.SetValue("Child",v.Args.RowIndex,"SIGNOFF_GRPUSR",v.Local.sRet(1).Trim,"SIGNOFF_TYPE",v.Local.sUserType)		
			f.Intrinsic.Control.EndIf				
		''Open Group browser
		f.Intrinsic.Control.Else
			v.Local.sUserType.Set("G")
			'f.Intrinsic.UI.CommonBrowser(15,"",v.Local.sRet)
			f.Intrinsic.UI.Browser("Group Selection","conx","SELECT distinct Eng_Group as EngGroup from v_Eng_Group","Eng Group","300",V.Local.sRet)
			f.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
				F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
				f.Data.DataTable.SetValue("Child",v.Args.RowIndex,"SIGNOFF_GRPUSR",v.Local.sRet(0).Trim,"SIGNOFF_TYPE",v.Local.sUserType)		
			f.Intrinsic.Control.EndIf				
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf	

	f.Intrinsic.API.GetMousePosition(v.Local.iX,v.Local.iY)
	f.Intrinsic.Math.Add(v.Local.iY,15,v.Local.iY)
	
	f.Intrinsic.Control.If(v.Args.Column.UCase,=,"COMMENTS")
		GUI.CellComments.txtCmtSeq.Text(v.DataTable.CHILD(v.Args.RowIndex).RTR_Seq!FieldValString)
		GUI.CellComments.txtCmtPart.Text(v.DataTable.CHILD(v.Args.RowIndex).Part!FieldValString)
		GUI.CellComments.txtCmtDesc.Text(v.DataTable.CHILD(v.Args.RowIndex).Description!FieldValString)
		GUI.CellComments.txtCmtLMO.Text(v.DataTable.CHILD(v.Args.RowIndex).LMO!FieldValString)
		GUI.CellComments.txtCmtComments.Text(v.DataTable.CHILD(v.Args.RowIndex).COMMENTS!FieldValString)
		gui.CellComments.txtCmtIndex.Text(v.Args.RowIndex)
		
		gui.Form..Enabled(False)
		GUI.CellComments..Visible(True)
		F.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf

	F.Intrinsic.Control.If(V.Local.sLMO,=,"L")		
		f.Intrinsic.Control.SelectCase(v.Args.column)
			f.Intrinsic.Control.Case("OP_CODE")
				gui.Form..ContextMenuShow("OPCODEMENU",v.Local.iX,v.Local.iY)
				
			f.Intrinsic.Control.Case("PART")
				gui.Form..ContextMenuShow("LABORWCMENU",v.Local.iX,v.Local.iY)
				'F.Intrinsic.Control.CallSub(BrowseWC)
		f.Intrinsic.Control.EndSelect
	
	F.Intrinsic.Control.ElseIf(V.Local.sLMO,=,"M")
		'category, source, and part context menus only work for Material 'M' lines
		'op_code works for all 3 types of LMO
		f.Intrinsic.Control.SelectCase(v.Args.column)
			f.Intrinsic.Control.Case("CATEGORY")
				gui.Form..ContextMenuShow("catcode",v.Local.ix,v.Local.iy)
				
			F.Intrinsic.Control.Case("SOURCE")
				gui.Form..ContextMenuShow("source",v.Local.ix,v.Local.iy)
				
			f.Intrinsic.Control.Case("PART")
				gui.Form..ContextMenuShow("material",v.Local.iX,v.Local.iY)
				
			F.Intrinsic.Control.Case("UM")		
				'Open browser UM, make it simple
				f.Intrinsic.UI.Browser("UNIT OF MEASURE","conx","SELECT CODE, DESCR from V_UM_CODES","CODE*!*DESCRIPTION","60*!*300",V.Local.sRet)
				F.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
					f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
					f.Data.DataTable.SetValue("CHILD",v.Args.ROWINDEX,"UM",V.Local.sRet(0).TRIM)
					v.Global.bRouterChanged.Set(True)
				F.Intrinsic.Control.EndIf	
				
			f.Intrinsic.Control.Case("OP_CODE")
				f.Intrinsic.Control.If(v.DataTable.Child(v.Args.RowIndex).RTR_SEQ!FieldValString,<,"990000")
					gui.Form..ContextMenuShow("OPCODEMENU",v.Local.iX,v.Local.iY)	
				f.Intrinsic.Control.EndIf
				
			f.Intrinsic.Control.Case("EXTENDED")
				gui.Form..ContextMenuShow("COST",v.Local.iX,v.Local.iY)
		F.Intrinsic.Control.EndSelect
	
	F.Intrinsic.Control.ElseIf(V.Local.sLMO,=,"O")	
		F.Intrinsic.Control.SelectCase(v.Args.column)
			f.Intrinsic.Control.Case("OP_CODE")
				gui.Form..ContextMenuShow("OPVENDCODEMENU",v.Local.iX,v.Local.iY)
			f.Intrinsic.Control.Case("PART")
				gui.Form..ContextMenuShow("OUTSIDESEQCHANGE",v.Local.iX,v.Local.iY)				
		F.Intrinsic.Control.EndSelect
	F.Intrinsic.Control.EndIf	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GGC_Bom_RowCellClick.End

Program.Sub.BrwOPCode.Start
'OnlyCalled by GGC_Bom_RowCellClick so everything is checked before
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	v.Local.sRow.Declare
	v.Local.sLMO.Declare
	v.Local.sWC.Declare
	v.Local.sOpcode.Declare
	v.Local.sDescription.Declare
	
	'Check if CHILD table has at least 2 records in which record 1 is for parent
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,0)
		'Check if user select the grid
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sRow)
		f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Please select a row in Router grid","No Router Row Selected")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		
		'Process	
		'Check before opening the OpCode browser for that WC
		v.Local.sLMO.Set(v.Datatable.CHILD(V.Local.sRow).LMO!FIELDVALTRIM)
		v.Local.sWC.Set(V.DataTable.CHILD(V.Local.sRow).PART!FIELDVALTRIM)
		F.Intrinsic.String.Build("SELECT MACHINE AS IDENTIFIER, OPERATION, DESCRIPTION FROM V_OP_CODES WHERE LMO = '{0}' and MACHINE = '{1}'",V.Local.sLMO,v.Local.sWC.PSQLFriendly,V.Local.sSql)
		f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.UI.Browser("SELECT OP CODE","conx",v.Local.sSql,"IDENTIFIER*!*OPERATION*!*DESCRIPTION","300*!*300*!*600",V.Local.sRet)	
			'Get the return from browser
			f.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
				f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
				v.Local.sOpcode.Set(v.Local.sRet(1).Trim)
				v.Local.sDescription.Set(v.Local.sRet(2).Trim)
				F.Intrinsic.String.Build("Select Top 1 Rate from  v_Op_Codes where rtrim(Machine) = '{0}' and rtrim(Operation) = '{1}'",v.DataTable.Child(v.Local.sRow).Part!FieldValTrim,v.Local.sOpcode,v.Local.sSql)
				f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)				
				f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
					f.Data.DataTable.SetValue("CHILD",v.Local.sRow,"OP_CODE",v.Local.sOpcode,"DESCRIPTION",v.Local.sDescription)
				f.Intrinsic.Control.Else				
					f.Data.DataTable.SetValue("CHILD",v.Local.sRow,"OP_CODE",v.Local.sOpcode,"DESCRIPTION",v.Local.sDescription,"Cost",v.Local.sRet.Trim)
				f.Intrinsic.Control.EndIf				
				v.Global.bRouterChanged.Set(True)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.If(v.Local.sLMO,<>,"M")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("No OPCODE found for this WC/WG.","Attention")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.EndIf				
		f.Intrinsic.Control.EndIf	
		'End Process	
		
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("CHILD table does not have row.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.BrwOPCode.End

Program.Sub.CategoryMenuClick.Start
'Get back later
'Called only by GGC_Bom_RowCellClick that shows context menu for catcode context menu
'so everything is checked before
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRow.Declare
	
	'Check if CHILD table has at least 2 records in which record 1 is for parent
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,0)
		'Check if user select the grid
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sRow)
		f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Please select a row in Router grid")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		
		'Process
		f.Data.DataTable.SetValue("CHILD",V.Local.sRow,"CAT_CODE",V.Args.ItemName,"CATEGORY",v.Dictionary.CATEGORY![V.Args.ItemName])
		v.Global.bRouterChanged.Set(True)

		'End Process
		
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("CHILD table does not have row.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.CategoryMenuClick.End

Program.Sub.SourceMenuClick.Start
'OnlyCalled by GGC_Bom_RowCellClick so everything is checked before. This is the context menu for source code
'Added codes: when user change the Source Code from MFG-JOB/MFG-STOCK to other Source Code, the sequence will be moved back to normal sequence section
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
'need to add in the source/category dependancies===============================================================================================================================
	v.Local.sSql.Declare
	v.Local.fRtrSeq.Declare
	v.Local.sRtrSeq.Declare	
	v.Local.sRet.Declare
	V.Local.sCurrentSeq.Declare
	v.Local.sFilter.Declare	
	v.Local.sTarget.Declare
	v.Local.iTargetRow.Declare
	v.Local.sRow.Declare
	v.Local.sTargetSeq.Declare

	'Check if CHILD table has at least 2 records in which record 1 is for parent
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,0)
		'Check if user select the grid
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sRow)
		f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Please select a row in Router grid.","Not Router Row Selected")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		
		'Just to make sure the grid is not multiselect, if it does, we still get the first row selected
		f.Intrinsic.String.Split(v.Local.sRow,"*!*",v.Local.sRow)
		v.Local.sRow.Set(v.Local.sRow(0))
		
		'Go ahead and process
		f.Data.DataTable.SetValue("CHILD",v.local.sRow,"SOURCE_CODE",V.Args.ItemName)
		v.Global.bRouterChanged.Set(True)
		f.Data.DataTable.FillFromDictionary("CHILD","SOURCE","SOURCE_CODE","SOURCE")
		'this is handling the context menu for source code
		f.Intrinsic.Control.SelectCase(v.Args.itemName)
			f.Intrinsic.Control.CaseAny("P","J")	
				v.Local.sCurrentSeq.Set(V.DataTable.CHILD(v.local.sRow).RTR_SEQ!FIELDVALTrim)					
				f.Intrinsic.Control.If(v.Local.sCurrentSeq.Left2,=,"99")
				
					'Move to section of normal router sequences					
					F.Data.DataTable.Compute("CHILD","MAX(RTR_SEQ)","RTR_SEQ <= '989999' and RTR_SEQ <> '000000'",v.Local.sRet)
					'Return from a Max compute can be blank
					f.Intrinsic.Control.If(v.Local.sRet,=,"")
						'No normal row, so Place Below row 0
						F.Intrinsic.String.LPad(V.Global.iRSeq,"0",6,V.Local.sRtrSeq)
						F.Data.DataTable.SetValue("CHILD",v.local.sRow,"RTR_SEQ",V.Local.sRtrSeq)	
						v.Global.bRouterChanged.Set(True)
						f.Data.DataTable.AcceptChanges("CHILD")						
					F.Intrinsic.Control.Else
						Gui.Form.GGC_Bom.SuspendLayout
						'There is normal sequence, go ahead and place below that sequence
						F.Intrinsic.String.LPad(V.Local.sRet,"0",6,V.Local.sRtrSeq)
						F.Intrinsic.String.Build("RTR_SEQ = '{0}'",V.Local.sRtrSeq,V.Local.sFilter)
						f.Data.DataTable.Select("CHILD",v.Local.sFilter,v.Local.sTarget)						
						f.Intrinsic.Control.If(v.Local.sTarget,<>,"***NORETURN***")					
							f.Intrinsic.String.Split(v.Local.sTarget,"*!*",v.Local.sTarget)
							'Move below this Target row. 
							V.Local.sTarget.Set(V.Local.sTarget(0))
							v.Local.sTargetSeq.Set(v.DataTable.CHILD(V.Local.sTarget).RTR_SEQ!FieldValString)
							f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)	
							f.Data.Datatable.SetValue("CHILD",v.Local.sRow,"RTR_SEQ",v.Local.sTargetSeq,"SeqSort",1)
							f.Intrinsic.Control.CallSub(ReSeqNormals)
							f.Intrinsic.Control.CallSub(ReSeq99s)
							'@holder1
							f.Data.DataTable.AcceptChanges("CHILD")	
							v.Global.bRouterChanged.Set(True)
						f.Intrinsic.Control.EndIf
						gui.Form.GGC_Bom.ResumeLayout
					f.Intrinsic.Control.EndIf
					
				f.Intrinsic.Control.EndIf	
				
			f.Intrinsic.Control.CaseAny("M","F")
				v.Local.sCurrentSeq.Set(V.DataTable.CHILD(v.local.sRow).RTR_SEQ!FIELDVALTrim)					
				'This is a current normal sequence, so if yes, move to the 99 section
				F.Intrinsic.Control.If(v.Local.sCurrentSeq.Left2,<>,"99")	
					gui.Form.GGC_Bom.SuspendLayout
					'Move to the last row and resequence
					f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)	
					f.Data.Datatable.SetValue("CHILD",v.Local.sRow,"RTR_SEQ","999999","SeqSort",1)
					f.Intrinsic.Control.CallSub(ReSeqNormals)
					f.Intrinsic.Control.CallSub(ReSeq99s)
					'@holder1
					f.Data.DataTable.AcceptChanges("CHILD")		
					gui.Form.GGC_Bom.ResumeLayout
				F.Intrinsic.Control.EndIf
				
		f.Intrinsic.Control.EndSelect	
		'End process

	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("CHILD table does not have row.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.SourceMenuClick.End

Program.Sub.SupplyDemand.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRow.Declare
	v.Local.bSDAccess.Declare

	'Check if CHILD table has at least 2 records in which record 1 is for parent
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,0)
		'Check if user select the grid
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sRow)
		f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Please select a row in Router grid.","No Router Row Selected")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		'Check if user has permission to access to menu item
		Function.Global.Security.CheckUserAccessIPM(321,0,v.Local.bSDAccess)
		f.Intrinsic.Control.If(v.Local.bSDAccess.Not)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("User does not have permission to Supply and Demand screen.","Menu Item Not Assigned")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf

		F.Intrinsic.Control.CallSub(Get_Location_Input)
		f.Intrinsic.Control.If(v.Args.bCancel)
			f.Intrinsic.Control.ExitSub				
		f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.If(v.Args.bValid,=,False)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		
		f.Data.DataTable.AddRow("300010","Part",v.DataTable.CHILD(v.Local.sRow).PART!FIELDVALTRIM,"Loc",v.Args.sLoc)
		f.Intrinsic.Control.CallSub(300010Sync)
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("CHILD table does not have row.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.SupplyDemand.End

Program.Sub.MaterialMenuClick.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sRSeq.Declare
	v.Local.sKey.Declare
	v.Local.iRow.Declare
	v.Local.sRow.Declare
	v.Local.bAuth.Declare	

	'Check if CHILD table has at least 2 records in which record 1 is for parent
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,0)
		'Check if user select the grid
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sRow)
		f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Please select a row in Router grid.","No Router Row Selected")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf			
		
		f.Intrinsic.Control.SelectCase(v.Args.ItemName)
			f.Intrinsic.Control.Case("B")
				f.Intrinsic.Control.CallSub(AddtoBookMarks,"sPart",V.DataTable.CHILD(v.local.sRow).PART!FIELDVALString,"sDescr",V.DataTable.CHILD(v.local.sRow).Description!FIELDVALString)
			f.Intrinsic.Control.Case("D")
				v.Local.sRSeq.Set(v.DataTable.CHILD(v.local.sRow).RTR_SEQ!FIELDVALTRIM)
				v.Local.sKey.Set(v.Datatable.CHILD(v.local.sRow).CH_INDEX!FIELDVALTRIM)
				f.Data.DataTable.DeleteRow("CHILD",v.local.sRow)
				v.Global.bRouterChanged.Set(True)
				F.Data.DataTable.AcceptChanges("CHILD")
			f.Intrinsic.Control.Case("V")
				Function.Global.Security.CheckUserAccessIPM(312,0,v.Local.bAuth)
				f.Intrinsic.Control.If(v.Local.bAuth.Not)
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
					f.Intrinsic.UI.Msgbox("User does not have permission to Inventory > View > Inventory Parts.","Menu Item Not Assigned")
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
					f.Intrinsic.Control.ExitSub
				f.Intrinsic.Control.EndIf	
				
				F.Intrinsic.Control.CallSub(Get_Location_Input)
				f.Intrinsic.Control.If(v.Args.bCancel)
					f.Intrinsic.Control.ExitSub				
				f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.If(v.Args.bValid,=,False)
					f.Intrinsic.Control.ExitSub
				f.Intrinsic.Control.EndIf
				
				f.Data.DataTable.AddRow("3500","CompanyCode",v.Caller.CompanyCode,"Mode","V","PART",V.DataTable.CHILD(v.local.sRow).PART!FIELDVALTRIM,"LOC",v.Args.sLoc)
				F.Intrinsic.Control.CallSub(3500Sync)
			f.Intrinsic.Control.Case("O")
				Function.Global.Security.CheckUserAccessIPM(310,1,v.Local.bAuth)
				f.Intrinsic.Control.If(v.Local.bAuth.Not)
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
					f.Intrinsic.UI.Msgbox("User does not have permission to Inventory > File > Inventory Parts > Open.","Menu Item Not Assigned")
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
					f.Intrinsic.Control.ExitSub
				f.Intrinsic.Control.EndIf	
				
				F.Intrinsic.Control.CallSub(Get_Location_Input)
				f.Intrinsic.Control.If(v.Args.bCancel)
					f.Intrinsic.Control.ExitSub				
				f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.If(v.Args.bValid,=,False)
					f.Intrinsic.Control.ExitSub
				f.Intrinsic.Control.EndIf				
				
				f.Data.DataTable.AddRow("3500","CompanyCode",v.Caller.CompanyCode,"Mode","O","PART",V.DataTable.CHILD(v.local.sRow).PART!FIELDVALTRIM,"LOC",V.Args.sLoc)
				F.Intrinsic.Control.CallSub(3500Sync)
		f.Intrinsic.Control.EndSelect		
		
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("CHILD table does not have row.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.MaterialMenuClick.End

'End 'Cell browser openning/Show context menu by cell


'Interaction with middle grid (router grid)
'Right click menu context by row
'The right click context menu can be access even the Bom/Child table is not ready. This will lead to error. So, every sub of context menu must pass a ready check
Program.Sub.Validate_If_Grid_Ready.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRow.Declare
	v.Local.bGridReady.Declare
	
	v.Local.bGridReady.Set(True)
	'Check if CHILD table exist beforehand
	f.Intrinsic.Control.If(v.DataTable.CHILD.Exists,=,False)
		v.Local.bGridReady.Set(False)
	f.Intrinsic.Control.EndIf
	
	'Check if CHILD table has at least 2 records in which record 1 is for parent
	f.Intrinsic.Control.If(v.Global.bTableGridLoaded.Not)
		v.Local.bGridReady.Set(False)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Variable.AddRV("bGridReady",v.Local.bGridReady)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Validate_If_Grid_Ready.End

'Move Row
Program.Sub.MoveChildRow.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRow.Declare

	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		v.Global.sSeqtoMove.Set("")
		v.Global.sRowToMove.Set("")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf

	gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sRow)
	f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		v.Global.sSeqtoMove.Set("")
		v.Global.sRowToMove.Set("")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'The grid is not in multi-selection mode, but to be safe, we take the first row selected.
	f.Intrinsic.String.Split(v.Local.sRow,"*!*",v.Local.sRow)
	v.Local.sRow.Set(v.Local.sRow(0))
	v.Global.sSeqtoMove.Set(v.DataTable.CHILD(v.Local.sRow).RTR_SEQ!FIELDVALTrim)
	v.Global.sRowToMove.Set(v.Local.sRow)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.MoveChildRow.End

Program.Sub.PlaceRowBelow.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sTargetRow.Declare
	v.Local.sTargetSeq.Declare
	
	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf

	gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sTargetRow)
	f.Intrinsic.Control.If(v.Local.sTargetRow.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.String.Split(v.Local.sTargetRow,"*!*",v.Local.sTargetRow)
	v.Local.sTargetRow.Set(v.Local.sTargetRow(0))
	f.Intrinsic.Control.If(v.Global.sRowToMove,=,v.Local.sTargetRow)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("TARGET row is the same as SOURCE row.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub			
	f.Intrinsic.Control.EndIf		
	
	f.Intrinsic.Control.If(v.Global.sRowToMove,=,"")
		'Msgbox No SOURCE row is selected...and instructions
		f.Intrinsic.Control.CallSub(MsgNoSourceSeq)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	v.Local.sTargetSeq.Set(v.DataTable.CHILD(v.Local.sTargetRow).RTR_SEQ!FIELDVALTRIM)
	f.Intrinsic.Control.CallSub(PlaceRow,"sType","Below","sTargetRow",v.Local.sTargetRow,"sTargetSeq",v.Local.sTargetSeq)	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.PlaceRowBelow.End

Program.Sub.PlaceRowAbove.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sTargetRow.Declare
	v.Local.sTargetSeq.Declare
	
	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf

	gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sTargetRow)
	f.Intrinsic.Control.If(v.Local.sTargetRow.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.String.Split(v.Local.sTargetRow,"*!*",v.Local.sTargetRow)
	v.Local.sTargetRow.Set(v.Local.sTargetRow(0))	
	f.Intrinsic.Control.If(v.Global.sRowToMove,=,v.Local.sTargetRow)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("TARGET row is the same as SOURCE row.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub			
	f.Intrinsic.Control.EndIf		
	
	f.Intrinsic.Control.If(v.Global.sRowToMove,=,"")
		'Msgbox No SOURCE row is selected...and instructions
		f.Intrinsic.Control.CallSub(MsgNoSourceSeq)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		
	
	v.Local.sTargetSeq.Set(v.DataTable.CHILD(v.Local.sTargetRow).RTR_SEQ!FIELDVALTRIM)
	f.Intrinsic.Control.CallSub(PlaceRow,"sType","Above","sTargetRow",v.Local.sTargetRow,"sTargetSeq",v.Local.sTargetSeq)		
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.PlaceRowAbove.End

Program.Sub.MsgNoSourceSeq.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sMsg.Declare
	
	f.Intrinsic.String.Build("RTF{\rtf1\fbidis\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset1 Segoe UI Emoji;}{\f1\fnil Calibri;}{\f2\fnil\fcharset0 Times New Roman;}{\f3\fnil\fcharset1 Segoe UI Symbol;}{\f4\fnil Times New Roman;}}{0}{\colortbl ;\red255\green128\blue64;\red0\green128\blue255;\red0\green128\blue0;\red255\green0\blue0;\red192\green80\blue77;\red158\green124\blue124;}{0}{\*\generator Riched20 10.0.18362}\viewkind4\uc1 {0}\pard\sl240\slmult1\tx810\tx1080\cf1\b\f0\fs28\u9888?\u-497?\f1  \cf0\f2\fs20\lang9 No Source seq is selected. \b0 How to move seq?\par{0}\tab\par{0}\tab\cf2\b Normal\cf0\b0  seq (less than 99XXXX) can be moved within \cf2\b Normal \cf0\b0 section.\tab  \par{0}\cf3\lang1033\tab\cf2\f3\fs22\u-10180?\u-8248?\f4  \cf3\fs20  \cf0\f2 Select a \cf2\b Normal\cf0\b0  seq > Right Click  > Select Move.\par{0}\cf3\tab\cf2\f3\fs22\u-10180?\u-8248?\cf4\f4  \cf3\fs20  \cf0\f2 Select a \cf2\b Normal \cf0\b0 seq > Right Click  > Select Place Above/Below.\par{0}\par{0}\lang9\tab\cf5\b 99XXXX\b0  \cf0 Seq can be moved within \cf5\b 99XXXX\cf0\b0  section.\tab  \par{0}\cf3\lang1033\tab\cf6\f3\fs22\u-10180?\u-8248?\cf4\f4  \cf3\fs20  \cf0\f2 Select a \cf5\b 99XXXX\cf0\b0  seq > Right Click  > Select Move.\par{0}\cf3\tab\cf6\f3\fs22\u-10180?\u-8248?\cf4\f4  \cf3\fs20  \cf0\f2 Select a \cf5\b 99XXXX\cf0\b0  seq > Right Click  > Select Place Above/Below.\cf4\par{0}}",v.Ambient.NewLine,v.Local.sMsg)
	
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.UI.MsgboxExt("Moving Sequence Instructions",v.Local.sMsg,1)
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.MsgNoSourceSeq.End

Program.Sub.PlaceRow.Start
'Called by PlaceRowAbove or PlaceRowBelow, everything is checked before
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sTargetRow.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sRTR_Seq_ColIndex.Declare
	
	v.Local.sTargetRow.Set(v.Args.sTargetRow)
	v.Local.sTargetSeq.Set(v.Args.sTargetSeq)
	
	'Check type: 99 or normal
	f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,=,"99",and,v.Global.sSeqtoMove.Left2,<>,"99")
		'Display msg sections mismatched and how to move row
		f.Intrinsic.Control.CallSub(MsgSectionsMismatched)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.ElseIf(v.Local.sTargetSeq.Left2,<>,"99",and,v.Global.sSeqtoMove.Left2,=,"99")
		'Display msg sections mismatched and how to move row
		f.Intrinsic.Control.CallSub(MsgSectionsMismatched)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	gui.Form.GGC_Bom.SuspendLayout
	
	'Place 99 source row at target row
	f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)	
	f.Intrinsic.Control.If(v.Args.sType,=,"Above")	
		f.Data.Datatable.SetValue("CHILD",v.Global.sRowToMove,"RTR_SEQ",V.Local.sTargetSeq,"SeqSort",-1)
	f.Intrinsic.Control.ElseIf(v.Args.sType,=,"Below")
		f.Data.Datatable.SetValue("CHILD",v.Global.sRowToMove,"RTR_SEQ",V.Local.sTargetSeq,"SeqSort",1)
	f.Intrinsic.Control.EndIf

	'Resequence 99 rows
	f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,=,"99")
		f.Intrinsic.Control.CallSub("ReSeq99s")
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub("ReSeqNormals")
	f.Intrinsic.Control.EndIf	
	
	'@holder1
	f.Data.DataTable.AcceptChanges("CHILD")
		
	gui.Form.GGC_Bom.ResumeLayout
	
	Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
	gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.Global.sRowToMove,v.Local.sRTR_Seq_ColIndex)	
	
	v.Global.sRowToMove.Set("")	
	v.Global.sSeqtoMove.Set("")
	v.Global.bRouterChanged.Set(True)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.PlaceRow.End

Program.Sub.MsgSectionsMismatched.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sMsg.Declare
	
	f.Intrinsic.String.Build("RTF{\rtf1\fbidis\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset1 Segoe UI Emoji;}{\f1\fnil Calibri;}{\f2\fnil\fcharset0 Times New Roman;}{\f3\fnil\fcharset1 Segoe UI Symbol;}{\f4\fnil Times New Roman;}}{0}{\colortbl ;\red255\green128\blue64;\red0\green128\blue255;\red0\green128\blue0;\red255\green0\blue0;\red192\green80\blue77;\red158\green124\blue124;}{0}{\*\generator Riched20 10.0.18362}\viewkind4\uc1 {0}\pard\sl240\slmult1\tx810\tx1080\cf1\b\f0\fs28\u9888?\u-497?\f1  \cf0\f2\fs20\lang9 Sections mismatched! \b0 How to move seq?\par{0}\tab\par{0}\tab\cf2\b Normal\cf0\b0  seq (less than 99XXXX) can be moved within \cf2\b Normal \cf0\b0 section.\tab  \par{0}\cf3\lang1033\tab\cf2\f3\fs22\u-10180?\u-8248?\f4  \cf3\fs20  \cf0\f2 Select a \cf2\b Normal\cf0\b0  seq > Right Click  > Select Move.\par{0}\cf3\tab\cf2\f3\fs22\u-10180?\u-8248?\cf4\f4  \cf3\fs20  \cf0\f2 Select a \cf2\b Normal \cf0\b0 seq > Right Click  > Select Place Above/Below.\par{0}\par{0}\lang9\tab\cf5\b 99XXXX\b0  \cf0 Seq can be moved within \cf5\b 99XXXX\cf0\b0  section.\tab  \par{0}\cf3\lang1033\tab\cf6\f3\fs22\u-10180?\u-8248?\cf4\f4  \cf3\fs20  \cf0\f2 Select a \cf5\b 99XXXX\cf0\b0  seq > Right Click  > Select Move.\par{0}\cf3\tab\cf6\f3\fs22\u-10180?\u-8248?\cf4\f4  \cf3\fs20  \cf0\f2 Select a \cf5\b 99XXXX\cf0\b0  seq > Right Click  > Select Place Above/Below.\cf4\par{0}}",v.Ambient.NewLine,v.Local.sMsg)
	
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.UI.MsgboxExt("Moving Sequence Instructions",v.Local.sMsg,1)
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.MsgSectionsMismatched.End

Program.Sub.Resequence99sOrderNaturalIndex.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iSeq.Declare
	'Resequence 99 rows
	f.Data.DataView.Create("CHILD","V_ROUTER",22,"PART <> [BPARENT] AND TRIM(RTR_SEQ) >= '990000'","")
	V.Local.iSeq.Set(990000)
	f.Data.DataView.SetSeries("CHILD","V_ROUTER","RTR_SEQ",V.Local.iSeq,V.Global.iRSeq)
	F.Data.DataView.Close("CHILD","V_ROUTER")
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Resequence99sOrderNaturalIndex.End

Program.Sub.ReSeq99s.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iSeq.Declare

	'Resequence 99 rows
	f.Data.DataTable.SetValueFormat("CHILD",-1,"RTR_SEQ","RTR_SEQ_NUM","000000")
	
	f.Data.DataView.Create("CHILD","V_ROUTER",22,"PART <> [BPARENT] AND TRIM(RTR_SEQ) >= '990000'","RTR_Seq,SeqSort")
	
	V.Local.iSeq.Set(990000)
	f.Data.DataView.SetSeries("CHILD","V_ROUTER","RTR_SEQ_NUM",V.Local.iSeq,V.Global.iRSeq)
	F.Data.DataView.Close("CHILD","V_ROUTER")
	
	f.Data.DataTable.SetValueFormat("CHILD",-1,"RTR_SEQ_NUM","RTR_SEQ","000000")
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ReSeq99s.End

Program.Sub.ReSeqStartFrom_99s.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iSeq.Declare
	v.Local.sSeq.Declare
	v.Local.iCnt.Declare
	v.Local.sFilter.Declare
	v.Local.sFromSeq.Declare
	v.Local.iHold.Declare
	v.Local.iStartSeries.Declare
	
	v.Local.sFromSeq.Set(v.Args.sFromSeq)
	
	f.Data.DataTable.SetValueFormat("CHILD",-1,"RTR_SEQ","RTR_SEQ_NUM","000000")
	
	f.Intrinsic.String.Build("PART <> [BPARENT] AND TRIM(RTR_SEQ) >= '990000' and RTR_Seq  >= '{0}'",v.Local.sFromSeq,v.Local.sFilter)

	'Resequence 99 rows
	f.Data.DataView.Create("CHILD","V_ROUTER",22,v.Local.sFilter,"RTR_Seq,SeqSort")
	'add a numerical column to set the router sequences then convert to string
	f.Intrinsic.Math.Mod(v.Local.sFromSeq,v.Global.iRSeq,v.Local.iHold)	
	f.Intrinsic.Control.If(v.Local.iHold,=,0)
		v.Local.iStartSeries.Set(v.Local.sFromSeq)
	f.Intrinsic.Control.Else
		f.Intrinsic.Math.IDiv(v.Local.sFromSeq,v.Global.iRSeq,v.Local.iHold)
		f.Intrinsic.Math.Mult(v.Local.iHold,v.Global.iRSeq,v.Local.iStartSeries)		
	f.Intrinsic.Control.EndIf	
	
	f.Data.DataView.SetSeries("CHILD","V_ROUTER","RTR_SEQ_Num",v.Local.iStartSeries,V.Global.iRSeq)	
	f.Intrinsic.Control.If(v.DataView.Child!V_ROUTER.RowCount,>,0)
		'Set First position
		f.Data.DataView.SetValue("CHILD","V_ROUTER",0,"RTR_SEQ_Num",v.Local.sFromSeq)	
	f.Intrinsic.Control.EndIf

	F.Data.DataView.Close("CHILD","V_ROUTER")
	f.Data.DataTable.SetValueFormat("CHILD",-1,"RTR_SEQ_NUM","RTR_SEQ","000000")
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ReSeqStartFrom_99s.End

Program.Sub.ReSeqNormals.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	f.Data.DataTable.SetValueFormat("CHILD",-1,"RTR_SEQ","RTR_SEQ_NUM","000000")
	f.Data.DataView.Create("CHILD","V_ROUTER",22,"PART <> [BPARENT] AND TRIM(RTR_SEQ) < '990000'","RTR_Seq,SeqSort")
	f.Data.DataView.SetSeries("CHILD","V_ROUTER","RTR_SEQ_Num",V.Global.iRSeq,V.Global.iRSeq)
	F.Data.DataView.Close("CHILD","V_ROUTER")
	f.Data.DataTable.SetValueFormat("CHILD",-1,"RTR_SEQ_NUM","RTR_SEQ","000000")
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ReSeqNormals.End

Program.Sub.ReseqStartFrom_Normal.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iSeq.Declare
	v.Local.sSeq.Declare
	v.Local.iCnt.Declare
	v.Local.sFilter.Declare
	v.Local.sFromSeq.Declare
	v.Local.iHold.Declare
	v.Local.iStartSeries.Declare
	
	v.Local.sFromSeq.Set(v.Args.sFromSeq)
	
	f.Data.DataTable.SetValueFormat("CHILD",-1,"RTR_SEQ","RTR_SEQ_NUM","000000")
	
	f.Intrinsic.String.Build("PART <> [BPARENT] AND TRIM(RTR_SEQ) < '990000' and RTR_Seq  >= '{0}'",v.Local.sFromSeq,v.Local.sFilter)

	'Resequence 99 rows
	f.Data.DataView.Create("CHILD","V_ROUTER",22,v.Local.sFilter,"RTR_Seq,SeqSort")
	'add a numerical column to set the router sequences then convert to string
	f.Intrinsic.Math.Mod(v.Local.sFromSeq,v.Global.iRSeq,v.Local.iHold)	
	f.Intrinsic.Control.If(v.Local.iHold,=,0)
		v.Local.iStartSeries.Set(v.Local.sFromSeq)
	f.Intrinsic.Control.Else
		f.Intrinsic.Math.IDiv(v.Local.sFromSeq,v.Global.iRSeq,v.Local.iHold)
		f.Intrinsic.Math.Mult(v.Local.iHold,v.Global.iRSeq,v.Local.iStartSeries)		
	f.Intrinsic.Control.EndIf	
	
	f.Data.DataView.SetSeries("CHILD","V_ROUTER","RTR_SEQ_Num",v.Local.iStartSeries,V.Global.iRSeq)	
	f.Intrinsic.Control.If(v.DataView.Child!V_ROUTER.RowCount,>,0)
		'First position is sFromSeq
		f.Data.DataView.SetValue("CHILD","V_ROUTER",0,"RTR_SEQ_Num",v.Local.sFromSeq)
	f.Intrinsic.Control.EndIf	
	F.Data.DataView.Close("CHILD","V_ROUTER")
	f.Data.DataTable.SetValueFormat("CHILD",-1,"RTR_SEQ_NUM","RTR_SEQ","000000")
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ReseqStartFrom_Normal.End

'End Move Row

'New bom/router
Program.Sub.cmdNewRtr_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iPart.Declare
	v.Local.bRet.Declare
	v.Local.sPart.Declare

	'Prevent double cycle
	f.Intrinsic.Control.IF(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		

	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveNewRTR)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveNewRTR.Set(True)
	
	f.Intrinsic.Control.CallSub(Check_Work_Saved)
	f.Intrinsic.Control.If(v.Args.bStop)
		v.Global.bActiveNewRTR.Set(False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	gui.NonInv..Caption("New Router/Bom")
	'clear the main entry points of data for creating a new bom/router
	f.Intrinsic.Control.If(v.Screen.Form!chkRouterOnly.Value,=,0)
		f.Intrinsic.Control.CallSub(Clear_2_Sides,"bDeleteChild",True)
		f.Intrinsic.Control.If(v.Global.bBindCutList)
			f.Intrinsic.Control.CallSub(Bind_CutList)		
		f.Intrinsic.Control.EndIf			
		
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Clear_Router_Side,"bDeleteChild",True)
		f.Intrinsic.Control.If(v.Global.bBindCutList)
			f.Intrinsic.Control.CallSub(Bind_CutList)		
		f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.EndIf
	'pass forward the type (NEW means a new router or bom, INSERT means we are inserting a new part in to the visible router)
	gui.NonInv.cmdBrowseInv.Visible(True)
	
	f.Intrinsic.Control.CallSub(Visible_Cost_Qty,"bVisible",False)
	f.Intrinsic.Control.CallSub(newPartCheck,"TYPE","NEW")
	
	v.Global.bRouterChanged.Set(False)
	v.Global.bActiveNewRTR.Set(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdNewRtr_Click.End

Program.Sub.cmdBrowseInv_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sPart.Declare
	v.Local.sSQL.Declare
	v.Local.sHold.Declare
	V.Local.sSource_code.Declare
	
	F.Intrinsic.Control.If(V.Global.bLongPart)
		f.Intrinsic.UI.Browser("Select Inventory Part","conx","select Left(i1.Part,17) as Part,substring(i1.Part,18,3) as Rev,i1.Location, i1.Description, i1.UM_Inventory as UM,i1.Product_Line,Case when i1.Flag_Inactive = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Inactive,x.Display_Part,x.Display_Rev,i2.Code_Source as Source  from INVENTORY_MSTR i1 left join Inv_Lxr x on i1.Part = x.GSS_PART left join Inventory_mst2 i2 on i1.Part = i2.Part and i1.Location = i2.Location  where i2.Code_Source in ('M','F')  order by i1.Part","Part*!*Rev*!*Locn*!*Description*!*UM*!*PL*!*Inactive*!*Long Part*!*Rev Long Part*!*Source","500*!*200*!*200*!*700*!*130*!*130*!*200*!*500*!*200*!*150","15000","10000",v.Local.sRet)
	F.Intrinsic.Control.Else
		f.Intrinsic.UI.Browser("Select Inventory Part","conx","select Left(i1.Part,17) as Part,substring(i1.Part,18,3) as Rev,i1.Location, i1.Description, i1.UM_Inventory as UM,i1.Product_Line,Case when i1.Flag_Inactive = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Inactive, i2.Code_Source as Source  from INVENTORY_MSTR i1 left join Inventory_mst2 i2 on i1.Part = i2.Part and i1.Location = i2.Location  where i2.Code_Source in ('M','F')  order by i1.Part","Part*!*Rev*!*Locn*!*Description*!*UM*!*PL*!*Inactive*!*Source","500*!*200*!*200*!*700*!*130*!*130*!*200*!*160","15000","10000",v.Local.sRet)
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
		F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
		f.Intrinsic.String.GSSPartString(v.Local.sRet(0),v.Local.sRet(1),v.Local.sPart)
		f.Intrinsic.String.Build("select Router from v_router_header h  where h.ROUTER = '{0}' ",V.Local.sPart.PSQLFriendly,v.Local.sSql)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sSQL)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			'Router does not exist
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Router exists. Please use the main screen to pull existing Routers.","Invalid")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			gui.NonInv.txtPart.SetFocus
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.String.Build("select Part from v_Bom_eng where Part = '{0}' ",V.Local.sPart.PSQLFriendly,v.Local.sSql)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sSQL)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			'Router does not exist
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Bom exists. Please use the main screen to pull existing Bom.","Invalid")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			gui.NonInv.txtPart.SetFocus
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf		
		
		f.Intrinsic.Control.BlockEvents
		GUI.NonInv.txtPart.Text(v.Local.sRet(0))
		gui.NonInv.txtRev.Text(v.Local.sRet(1))
		GUI.NonInv.txtDescr.Text(v.Local.sRet(3))
		v.Local.sHold.Set(v.Local.sRet(4).Trim)
		GUI.NonInv.txtUM.Text(v.Local.sHold.Left2)
		GUI.NonInv.txtPL.Text(v.Local.sRet(5))		
		GUI.NonInv.txtDescr2.Text("")
		GUI.NonInv.txtDescr3.Text("")
		f.Intrinsic.Control.If(v.Global.bLongPart)
			v.Local.sSource_code.Set(v.Local.sRet(9).Trim)
		f.Intrinsic.Control.Else
			v.Local.sSource_code.Set(v.Local.sRet(7).Trim)
		f.Intrinsic.Control.EndIf
	
		f.Intrinsic.Control.If(v.Local.sSource_code,=,"F")
			gui.NonInv.ddlSource.Text("MFG-JOB")
		F.Intrinsic.Control.ElseIf(v.Local.sSource_code,=,"M")	
			gui.NonInv.ddlSource.Text("MFG-STOCK")
		f.Intrinsic.Control.EndIf		
		f.Intrinsic.Control.UnBlockEvents
		
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdBrowseInv_Click.End

'End newbom/router

'New Part
Program.Sub.cmdNewPart_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRSeq.Declare
	v.Local.sBSeq.Declare	
	v.Local.sRow.Declare
	v.Local.sSelectedSeq.Declare
	
	'Prevent double cycle
	f.Intrinsic.Control.IF(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		

	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveNewPart)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveNewPart.Set(True)	

	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		v.Global.bActiveNewPart.Set(False)		
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.IF(V.DataTable.CHILD.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		v.Global.bActiveNewPart.Set(False)
		f.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
		
	gui.NonInv.ddlSelectedSeq.ClearItems
	
	'Generate next Router Seq and Bom Sequence
	F.Intrinsic.Control.If(V.DataTable.CHILD.RowCount,=,1)
		
		gui.NonInv.ddlSelectedSeq.Text("")
		
	f.Intrinsic.Control.ElseIf(v.DataTable.CHILD.RowCount,>,1)	
		gui.Form.GGC_Bom.GetSelectedRows("GV_Child",v.Local.sRow)
		f.Intrinsic.Control.If(v.Local.sRow,=,"")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Please select a row from the Router grid.","Attention")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			v.Global.bActiveNewPart.Set(False)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		f.Intrinsic.String.Split(v.Local.sRow,"*!*",v.Local.sRow)
		v.Local.sRow.Set(v.Local.sRow(0))
		v.Local.sSelectedSeq.Set(v.DataTable.Child(v.Local.sRow).RTR_Seq!FieldValString)		
	
		
		F.Data.DataView.Create("CHILD","v_Seq",22,"RTR_SEQ > '000000'","RTR_SEQ Asc")
		f.Data.DataView.ToDataTableDistinct("child","v_Seq","SeqList","RTR_Seq",True)
		f.Data.DataTable.AddExpressionColumn("SeqList","RTR_Seq2","String","RTR_Seq")
		f.Data.Dictionary.CreateFromDataTable("dSeqList","SeqList","RTR_Seq","RTR_Seq2")
		f.Data.Dictionary.SetDefaultReturn("dSeqList","")
		
		gui.NonInv.ddlSelectedSeq.AddItems("DICTIONARY","dSeqList")
		gui.NonInv.ddlSelectedSeq.Text(v.Local.sSelectedSeq)
		
		f.Data.Dictionary.Close("dSeqList")
		f.Data.DataTable.Close("SeqList")		
		f.Data.DataView.Close("CHILD","v_Seq")
			
	F.Intrinsic.Control.EndIf
	
	gui.NonInv..Caption("Create New Part")
	'set the values to the form before we open it
	f.Intrinsic.Control.BlockEvents
	GUI.NonInv.txtPart.Text("")
	GUI.NonInv.txtRev.Text("")
	GUI.NonInv.txtDescr.Text("")
	GUI.NonInv.txtDescr2.Text("")
	GUI.NonInv.txtDescr3.Text("")
	GUI.NonInv.txtUM.Text("")
	GUI.NonInv.txtPL.Text("")
	gui.NonInv.txtExtra.Text("")
	Gui.NonInv.cmdBrowseInv.Visible(False)
	f.Intrinsic.Control.CallSub(Visible_Cost_Qty,"bVisible",True)	
	f.Intrinsic.Control.CallSub(Default_Cost_Quantity)	
	f.Intrinsic.Control.UnBlockEvents
	
	F.Intrinsic.Control.CallSub(NewPartCheck,"TYPE","INSERT","BSEQ",V.Local.sBSeq,"RSEQ",V.Local.sRSeq)
	v.Global.bActiveNewPart.Set(False)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdNewPart_Click.End

Program.Sub.txtUM_LostFocus.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sUM.Declare
	v.Local.sRet.Declare
	v.Local.sSQL.Declare	
	
	v.Local.sUM.Set(V.Screen.NonInv!txtUM.TEXT.Trim)
	v.Local.sUM.Set(v.Local.sUM.UCase)
	gui.NonInv.txtUM.Text(v.Local.sUM.left2)
	
	'Validate UM
	f.Intrinsic.String.Build("select CODE from V_UM_CODES where CODE = '{0}'",v.Local.sUM.PSQLFriendly,V.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(V.Local.sSql,V.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"",or,v.Local.sRet.UCase,<>,v.Local.sUM)
		f.Intrinsic.UI.Browser("UNIT OF MEASURE","conx","SELECT CODE, DESCR from V_UM_CODES","CODE*!*DESCRIPTION","60*!*300",V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			gui.NonInv.txtUM.text(V.Local.sRet(0).Trim)
		f.Intrinsic.Control.Else
			gui.NonInv.txtUM.text("")
			gui.NonInv.txtUM.SetFocus
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtUM_LostFocus.End

Program.Sub.txtPL_LostFocus.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	V.Local.sPL.Declare	
		
	v.Local.sPL.Set(v.Screen.NonInv!txtPL.Text.Trim)
	v.Local.sPL.Set(v.Local.sPL.UCase)
	gui.NonInv.txtPL.Text(v.Local.sPL)	
	
	'build a statement to validate the product line

	f.Intrinsic.Control.If(v.Caller.GSSVersion,<,"2019.1")
		F.Intrinsic.String.Build("SELECT PRODUCT_LINE FROM V_PRODUCT_LINE WHERE rtrim(PRODUCT_LINE) = '{0}'",v.Local.sPL.PSQLFriendly,V.Local.sSql)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("SELECT PROD_LINE FROM V_PL_MASTER WHERE rtrim(PROD_LINE) = '{0}'",v.Local.sPL.PSQLFriendly,V.Local.sSql)
	f.Intrinsic.Control.EndIf	
	
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
	v.Local.sRet.Set(v.Local.sRet.Trim)
	f.Intrinsic.Control.If(v.Local.sRet,=,"",or,v.Local.sRet.UCase,<>,v.Local.sPL)
		f.Intrinsic.UI.CommonBrowser(130,"",v.Local.sRet)
		f.Intrinsic.Control.If(v.Local.sRet,<>,v.Ambient.cancel)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			gui.NonInv.txtPL.Text(v.Local.sRet(0).Trim)
		F.Intrinsic.Control.Else
			gui.NonInv.txtPL.Text("")
			gui.NonInv.txtPL.SetFocus
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtPL_LostFocus.End

'End New Part
Program.Sub.DeleteLine.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRseq.Declare
	v.Local.sRow.Declare
	
	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sRow)
	f.Intrinsic.Control.If(v.Local.sRow,=,"")	
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf

	f.Intrinsic.String.Split(v.Local.sRow,"*!*",v.Local.sRow)
	v.Local.sRow.Set(v.Local.sRow(0))
	v.Local.sRSeq.Set(v.DataTable.CHILD(v.Local.sRow).RTR_SEQ!FIELDVALTRIM)
	f.Data.DataTable.DeleteRow("CHILD",v.Local.sRow)
	F.Data.DataTable.AcceptChanges("CHILD")	
	v.Global.bRouterChanged.Set(True)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.DeleteLine.End

Program.Sub.DELETESELECTEDSEQ.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iCnt.Declare
	
	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	F.Data.DataView.Create("CHILD","vDelSelectedSeq",22,"SelectSeq = 1","")
	f.Intrinsic.Control.If(v.DataView.Child!vDelSelectedSeq.RowCount,=,0)
		f.Data.DataView.Close("CHILD","vDelSelectedSeq")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No sequence selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.For(V.Local.iCnt,v.DataView.Child!vDelSelectedSeq.RowCount--,0,-1)
		f.Data.DataView.DeleteRow("Child","vDelSelectedSeq",v.Local.iCnt)
	F.Intrinsic.Control.Next(V.Local.iCnt)
	f.Data.DataView.Close("CHILD","vDelSelectedSeq")
		
	F.Data.DataTable.AcceptChanges("CHILD")	
	v.Global.bRouterChanged.Set(True)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.DELETESELECTEDSEQ.End

Program.Sub.ResequenceNormalsMenu.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,<=,1)
		F.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf

	gui.Form.GGC_Bom.SuspendLayout

	f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)	
	f.Intrinsic.Control.CallSub("ReSeqNormals")	
	f.Data.DataTable.AcceptChanges("CHILD")
		
	gui.Form.GGC_Bom.ResumeLayout
	
	v.Global.bRouterChanged.Set(True)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.ResequenceNormalsMenu.End

Program.Sub.Resequence99sMenu.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,<=,1)
		F.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	gui.Form.GGC_Bom.SuspendLayout
	
	f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)	
	f.Intrinsic.Control.CallSub("ReSeq99s")
	f.Data.DataTable.AcceptChanges("CHILD")
		
	gui.Form.GGC_Bom.ResumeLayout
	
	v.Global.bRouterChanged.Set(True)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Resequence99sMenu.End

Program.Sub.addTextCode.Start
'For Context Menu right click of router grid "  Add Text Code"
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sRow.Declare
	V.Local.sSeq.Declare

	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sRow)
	f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.String.Split(V.Local.sRow,"*!*",V.Local.sRow)
	V.Local.sRow.Set(V.Local.sRow(0))
'	v.Local.sSeq.Set(v.DataTable.CHILD(V.Local.sRow).RTR_Seq!FieldValString)
'	f.Intrinsic.Control.If(v.Local.sSeq.Left2,=,"99")
'		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
'		f.Intrinsic.UI.Msgbox("Please select a Normal sequence.","Invalid Router Sequence for Text Code")
'		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
'		f.Intrinsic.Control.ExitSub
'	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.UI.Browser("Text Code","conx","Select number, text from v_text_codes","Code*!*Text","100*!*300",v.Local.sRet)
	
	f.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		f.Data.DataTable.SetValue("CHILD",v.Local.sRow,"COMMENTS",V.Local.sRet(1))
		v.Global.bRouterChanged.Set(True)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.addTextCode.End

Program.Sub.copyrouter_pop.Start
'This sub will copy sequences from a router to the current router
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRouter.Declare
	v.Local.sSeq.Declare
	v.Local.iSeq.Declare
	v.Local.sTargetRow.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sSql.Declare
	V.Local.sStart.Declare
	v.Local.sEnd.Declare
	v.Local.iRow.Declare
	V.Local.iCount.Declare
	v.Local.fSetup.Declare
	v.Local.fExt.Declare
	v.Local.sRow.Declare
	V.Local.sFilter.Declare
	v.Local.sNewSeq.Declare	
	v.Local.iSeqSort.Declare
	v.Local.sRTR_Seq_ColIndex.Declare
	v.Local.sHold.Declare
	v.Local.bInserted.Declare
	v.Local.bAboveException.Declare	
	v.Local.iSerie.Declare
	v.Local.iCnt.Declare
	v.Local.sRet.Declare

	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,True)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please select Insert Above or Below before inserting Router Lines.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,1)
		'Router has row, user must select a row
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",V.Local.sRow)
		f.Intrinsic.Control.If(v.Local.sRow,=,"")	
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Please select a NORMAL sequence","Attention")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		f.Intrinsic.String.Split(v.Local.sRow,"*!*",v.Local.sRow)
		v.Local.iRow.Set(v.Local.sRow(0))
		
		V.Local.sTargetSeq.Set(V.DataTable.CHILD(v.Local.iRow).RTR_SEQ!FIELDVALTRIM)
		
		f.Intrinsic.Control.If(V.Local.sTargetSeq,<,"990000")
			gui.POPROUTER.txtTargetSeq.Text(v.Local.sTargetSeq)
		F.Intrinsic.Control.Else
		
			f.Data.DataView.Create("Child","vNor",22,"RTR_Seq > '000000' and RTR_Seq < '990000'","")
			f.Intrinsic.Control.If(v.DataView.Child!vNor.RowCount,=,0)			
				f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)					
			f.Intrinsic.Control.Else			
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("A router or labor step can not be insterted after sequence 990000 from another router.","Invalid Sequence Selection")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Data.DataView.Close("Child","vNor")
				F.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
			f.Data.DataView.Close("Child","vNor")
			
		F.Intrinsic.Control.EndIF
	
	f.Intrinsic.Control.Else
		F.Intrinsic.String.LPad(V.Global.iRSeq,"0",6,V.Local.sTargetSeq)
		gui.POPROUTER.txtTargetSeq.Text(v.Local.sTargetSeq)
	F.Intrinsic.Control.EndIf	
	
	gui.POPROUTER.txtRouter.Text("")
	gui.POPROUTER.txtStartSeq.Text("")
	gui.POPROUTER.txtEndSeq.Text("")	
	
	gui.Form..Enabled(False)
	gui.POPROUTER..Visible(True)
	gui.POPROUTER..WaitForDismiss
	
	v.Local.sRouter.Set(v.Screen.POPROUTER!txtRouter.text.Trim)
	v.Local.sStart.Set(V.Screen.POPROUTER!txtStartSeq.TEXT.Trim)
	v.Local.sEnd.Set(V.Screen.POPROUTER!txtEndSeq.TEXT.Trim)
	
	'If user does not click Cancel/Close button
	F.Intrinsic.Control.If(V.Args.PopRouterCancel,=,"NO")		
		'load the router being copied
		'can't use the normal sRow sub 
		f.Intrinsic.Control.If(v.local.sEnd,>,V.Screen.POPROUTER!txtStartSeq.Text.Trim)
			f.Intrinsic.String.Build("select cast('0' as CHAR) AS BPARENT, CAST('0' as CHAR) AS DESCR_BP, CAST('' AS CHAR) AS BOM_SEQ,LINE_ROUTER AS RTR_SEQ, PART_WC_OUTSIDE AS PART, IF(FLAG_MAIN_COMMENT = 'T','T',LMO) AS LMO, DESC_RT_LINE AS DESCRIPTION, CAST(LMO AS CHAR) AS CAT_CODE, CAST ('J' AS CHAR) AS SOURCE_CODE, FREQUENCY, CAST(SET_UP AS DOUBLE) AS SET_UP, CAST (RUN_TIME AS DOUBLE) AS QTY, CAST(RATE AS DOUBLE) AS COST, CAST('1' AS INTEGER) AS RTR_SEQ_NUM,Lead_time as Lead,Amt_Minimum,UM_Inventory as UM,WC_Factor,Operation as Op_Code FROM ROUTER_LINE WHERE ROUTER = '{0}' and IsNull(Router_Type,'') = 'L' AND LINE_ROUTER >= '{1}' AND LINE_ROUTER <= '{2}' ORDER BY RTR_SEQ ASC",v.local.sRouter.PSQLFriendly,v.local.sStart.PSQLFriendly,v.local.sEnd.PSQLFriendly,V.Local.sSql)
		f.Intrinsic.Control.Else
			f.Intrinsic.String.Build("select cast('0' as CHAR) AS BPARENT, CAST('1' as CHAR) AS DESCR_BP, CAST('' AS CHAR) AS BOM_SEQ,LINE_ROUTER AS RTR_SEQ, PART_WC_OUTSIDE AS PART, IF(FLAG_MAIN_COMMENT = 'T','T',LMO) AS LMO, DESC_RT_LINE AS DESCRIPTION, CAST('L' AS CHAR) AS CAT_CODE, CAST ('J' AS CHAR) AS SOURCE_CODE, FREQUENCY, CAST(SET_UP AS DOUBLE) AS SET_UP, CAST (RUN_TIME AS DOUBLE) AS QTY, CAST(RATE AS DOUBLE) AS COST, CAST('1' AS INTEGER) AS RTR_SEQ_NUM,Lead_time as Lead,Amt_Minimum,UM_Inventory as UM, WC_Factor,Operation as Op_Code FROM ROUTER_LINE WHERE ROUTER = '{0}' and IsNull(Router_Type,'') = 'L' AND LINE_ROUTER = '{1}' ORDER BY RTR_SEQ ASC",v.local.sRouter.PSQLFriendly,v.local.sStart.PSQLFriendly,V.Local.sSql)
		f.Intrinsic.Control.EndIF	
	
		'get the router records we want
		F.Intrinsic.Control.If(V.DataTable.TEMP_CHILD.Exists)
			F.Data.DataTable.Close("TEMP_CHILD")
		F.Intrinsic.Control.EndIf
		
		f.Data.DataTable.CreateFromSQL("TEMP_CHILD","conx",V.Local.sSql,True)
	
		f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1,or,v.DataTable.CHILD.RowCount,=,2)
			v.Local.bAboveException.Set(True)
		f.Intrinsic.Control.EndIf	
			
		'now we have the target sequence, loop through the lines to add
		f.Intrinsic.Control.If(v.Screen.Form!optInsertAbove.Value,=,True)
			'Loop backward for inserting Above
			f.Intrinsic.Math.Sub(-1,v.DataTable.TEMP_CHILD.RowCount,v.Local.iSeqSort)
		f.Intrinsic.Control.EndIf			

		F.Data.DataTable.AddColumn("TEMP_CHILD","TYPE","STRING")
		
		'Add copy Comments for Bayside
		f.Data.DataTable.AddColumn("Temp_Child","Comments","String","")
		f.Data.DataTable.SetValue("Temp_Child",-1,"BParent",v.Local.sRouter.Trim)
		f.Data.DataTable.AddExpressionColumn("Temp_Child","RouterAndSeq","String","BParent +  RTR_SEQ")
		f.Data.DataView.Create("Temp_Child","vTemp_Child_RSeq")
		f.Data.DataView.ToString("Temp_Child","vTemp_Child_RSeq","RouterAndSeq","","','",v.Local.sFilter)
		f.Data.DataView.Close("Temp_Child","vTemp_Child_RSeq")
		
		'BN changed on 06 22 2021 as Bayside issue loading 26000 records (4 MB) for 93 seconds! Narrrow down dictionary size
		f.Intrinsic.String.Build("Select rtrim(RTR_number) + Rtr_Seq as RouterAndSeq,rtrim(Text) from V_Rtr_Seq_Comments where RouterAndSeq in ('{0}') ",v.Local.sFilter,v.Local.sSql)
		f.Data.Dictionary.CreateFromSQL("dictComments","conx",v.Local.sSql)
		f.Data.Dictionary.SetDefaultReturn("dictComments","")
		f.Data.DataTable.FillFromDictionary("Temp_Child","dictComments","RouterAndSeq","Comments")
		f.Data.DataTable.RemoveColumn("Temp_Child","RouterAndSeq")
		f.Data.DataTable.AcceptChanges("Temp_Child")
		f.Data.Dictionary.Close("dictComments")
	
		'fix source code values based on LMO.  All materials are assumed "J" as it's not really important except for coloring in the screen
		f.Data.DataView.Create("TEMP_CHILD","V_TEMP",22,"LMO IN ('L','O','C','T')","")
		f.Data.DataTable.SetValue("TEMP_CHILD",-1,"RTR_SEQ",V.Local.sTargetSeq)
		f.Data.DataView.SetValue("TEMP_CHILD","V_TEMP",-1,"SOURCE_CODE","")
		F.Data.DataView.SetFilter("TEMP_CHILD","V_TEMP","LMO = 'L'")
		F.Data.DataView.SetValue("TEMP_CHILD","V_TEMP",-1,"TYPE",V.Global.sType)
		
		'add missing data and update the sequences
		f.Data.DataTable.SetValue("TEMP_CHILD",-1,"BPARENT",v.DataTable.CHILD(0).BPARENT!FIELDVALSTRING,"DESCR_BP",V.DataTable.CHILD(0).DESCR_BP!FIELDVALSTRING)
		f.Data.DataTable.AddColumn("TEMP_CHILD","SeqSort","Long",0)			
				
		f.Intrinsic.Control.For(v.Local.iCount,0,v.DataTable.TEMP_CHILD.RowCount--,1)
			f.Intrinsic.Math.Add(v.Local.iSeqSort,1,v.Local.iSeqSort)	
			f.Data.DataTable.SetValue("TEMP_CHILD",v.Local.iCount,"RTR_SEQ",V.Local.sTargetSeq,"RTR_SEQ",V.Local.sTargetSeq,"SeqSort",v.Local.iSeqSort)		
		f.Intrinsic.Control.Next(v.Local.iCount)
		
		f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)	
		'set the estimating "type" before copying to the main table
	
		'New version will auto calculate extended	
		
		'merge the data in to the CHILD table (main center grid)
		F.Data.DataTable.Clone("CHILD","CHILD_Stage",True)	
		
		'Get next Serie
		f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
		f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)	
		
		f.Data.DataTable.AddColumn("Temp_Child","Serie","Long",0)
		f.Data.DataTable.SetSeries("Temp_Child","Serie",v.Local.iSerie,1)			
		
		f.Data.DataTable.Merge("TEMP_CHILD","CHILD_Stage",False,2)
		f.Intrinsic.Control.CallSub(Fill_From_Dictionaries_CHILD_Stage)

		gui.Form.GGC_Bom.SuspendLayout		
		
		f.Data.DataTable.Merge("CHILD_Stage","CHILD",False,2)
		f.Data.DataTable.FillFromDictionary("Child","dictMQD","PartTrim2","MQD")
		
		F.Data.DataTable.Close("TEMP_CHILD")
		f.Data.DataTable.Close("CHILD_Stage")
		
		'Insert Below case we will ReseqStartFrom_Normal
		f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value)
			f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.Local.sTargetSeq)		
		'Insert Above case
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.If(v.Local.bAboveException.Not)
	
				F.Intrinsic.String.Build("RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
				f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
				F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
					f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
						f.Intrinsic.Control.CallSub(ReSeqNormals)						
					f.Intrinsic.Control.Else	
						f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
					f.Intrinsic.Control.EndIf					
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.CallSub(ReSeqNormals)
				F.Intrinsic.Control.EndIf
				f.Data.DataView.Close("CHILD","vAbove")		
			
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.CallSub(ReSeqNormals)
			f.Intrinsic.Control.EndIf

		f.Intrinsic.Control.EndIf			
		
		f.Data.DataTable.AcceptChanges("CHILD")		
		f.Data.DataTable.SetValueFormat("Child",-1,"Ext2","Extended","0.00000000")
		
		gui.Form.GGC_Bom.ResumeLayout
		v.Global.bRouterChanged.Set(True)
			
		f.Intrinsic.Control.CallSub(Populate_LongPart_Router)
	
	f.Intrinsic.Control.EndIf
	
	gui.Form..Enabled(True)
	gui.Form..AlwaysOnTop(True)
	gui.Form..AlwaysOnTop(False)
		
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.copyrouter_pop.End

Program.Sub.cmdPopRtr_OK_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	F.Intrinsic.Variable.AddRV("PopRouterCancel","NO")
	gui.POPROUTER..Visible(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdPopRtr_OK_Click.End

Program.Sub.cmdPopRtr_Cancel_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)	
	f.Intrinsic.Variable.AddRV("PopRouterCancel","YES")
	gui.POPROUTER..Visible(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdPopRtr_Cancel_Click.End

Program.Sub.POPROUTER_UnLoad.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	f.Intrinsic.Variable.AddRV("PopRouterCancel","YES")
	gui.POPROUTER..Visible(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.POPROUTER_UnLoad.End

Program.Sub.cmdPopRouter_brwRtr_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sPart.Declare
	
	gui.POPROUTER.cmdPopRouter_brwRtr.Enabled(False)
	'common browser for routers
	'Open custom browser Router	
	F.Intrinsic.Control.If(V.Global.bLongPart)
		f.Intrinsic.UI.Browser("Select Router","conx","select Left(h.Router,17) as Router,Substring(h.Router,18,3) as Rev,rtrim(h.DESCRIPTION_ROUTER) as Description,rtrim(d.Desc_Router_2) as Description_2,rtrim(d.Desc_Router_3) as Description_3,h.UM_INVENTORY as UM_Inventory ,h.PROD_LINE as Product_Line,s.Inactive,s.Complete, x.DISPLAY_PART,x.DISPLAY_REV  from v_router_header h left join v_router_desc d on h.Router = d.Router and h.Router_Suffix = d.Router_Suffix left join v_ROUTER_SUPP_HDR s on h.Router = s.Rtr_Num and h.Router_Suffix = s.Suffix  left join Inv_lxr x on h.Router = x.GSS_Part order by h.Router","Router*!*Rev*!*Description*!*Description 2*!*Description 3*!*UM*!*PL*!*Inactive*!*Compl.*!*Long Part*!*Rev Long Part","500*!*200*!*700*!*200*!*200*!*200*!*200*!*300*!*300*!*500*!*200","15000","10000",v.Local.sRet)
	F.Intrinsic.Control.Else
		f.Intrinsic.UI.Browser("Select Router","conx","select Left(h.Router,17) as Router,Substring(h.Router,18,3) as Rev,rtrim(h.DESCRIPTION_ROUTER) as Description,rtrim(d.Desc_Router_2) as Description_2,rtrim(d.Desc_Router_3) as Description_3,h.UM_INVENTORY as UM_Inventory ,h.PROD_LINE as Product_Line,s.Inactive,s.Complete  from v_router_header h left join v_router_desc d on h.Router = d.Router and h.Router_Suffix = d.Router_Suffix left join v_ROUTER_SUPP_HDR s on h.Router = s.Rtr_Num and h.Router_Suffix = s.Suffix order by h.Router","Router*!*Rev*!*Description*!*Description 2*!*Description 3*!*UM*!*PL*!*Inactive*!*Compl.","500*!*200*!*700*!*700*!*700*!*200*!*200*!*300*!*400","15000","10000",v.Local.sRet)
	F.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		f.Intrinsic.String.GSSPartString(v.Local.sRet(0),v.Local.sRet(1),v.Local.sPart)
		gui.POPROUTER.txtRouter.Text(v.Local.sPart)
	f.Intrinsic.Control.EndIf

	gui.POPROUTER.cmdPopRouter_brwRtr.Enabled(True)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdPopRouter_brwRtr_Click.End

Program.Sub.cmdPopRtr_BrwSeqStart_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRouter.Declare
	v.Local.sRet.Declare
	v.Local.sSql.Declare
	
	
	gui.POPROUTER.cmdPopRtr_BrwSeqStart.Enabled(False)
	v.Local.sRouter.Set(V.Screen.POPROUTER!txtRouter.TEXT)
	'create a browser to select the starting sequence
	f.Intrinsic.String.Build("SELECT LINE_ROUTER AS SEQUENCE, PART_WC_OUTSIDE AS PART_WC, DESC_RT_LINE AS DESCRIPTION FROM ROUTER_LINE WHERE ROUTER = '{0}' and IsNull(Router_Type,'') = 'L' ORDER BY SEQUENCE ASC",v.Local.sRouter.PSQLFriendly,V.Local.sSql)
	f.Intrinsic.UI.Browser("SELECT STARTING SEQUENCE","conx",V.Local.sSql,"SEQUENCE*!*PART_WC*!*DESCRIPTION","300*!*600*!*600",V.Local.sRet)
	
	'Populate the starting sequence on the screen
	F.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
		F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
		GUI.POPROUTER.txtStartSeq.Text(V.Local.sRet(0))
		F.Intrinsic.String.Build("SELECT TOP 1 LINE_ROUTER FROM ROUTER_LINE WHERE ROUTER = '{0}' and IsNull(Router_Type,'') = 'L' ORDER BY LINE_ROUTER DESC",v.Local.sRouter.PSQLFriendly,V.Local.sSql)
		F.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
		GUI.POPROUTER.txtEndSeq.Text(v.Local.sRet)
	F.Intrinsic.Control.EndIf
	gui.POPROUTER.cmdPopRtr_BrwSeqStart.Enabled(True)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdPopRtr_BrwSeqStart_Click.End

Program.Sub.cmdPopRtr_BrwSeqStop_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRouter.Declare
	v.Local.sRet.Declare
	v.Local.sSql.Declare
	v.Local.sStartSeq.Declare
	
	gui.POPROUTER.cmdPopRtr_BrwSeqStop.Enabled(False)
	
	v.Local.sRouter.Set(V.Screen.POPROUTER!txtRouter.TEXT)
	v.Local.sStartSeq.Set(V.Screen.POPROUTER!txtStartSeq.TEXT.TRIM)
	'create a browser to select the starting sequence
	f.Intrinsic.String.Build("SELECT LINE_ROUTER AS SEQUENCE, PART_WC_OUTSIDE AS PART_WC, DESC_RT_LINE AS DESCRIPTION FROM ROUTER_LINE WHERE ROUTER = '{0}' and IsNull(Router_Type,'') = 'L' AND LINE_ROUTER >= '{1}' ORDER BY SEQUENCE ASC",v.Local.sRouter.PSQLFriendly,v.Local.sStartSeq.PSQLFriendly,V.Local.sSql)
	f.Intrinsic.UI.Browser("SELECT STARTING SEQUENCE","conx",V.Local.sSql,"SEQUENCE*!*PART_WC*!*DESCRIPTION","300*!*600*!*600",V.Local.sRet)	
	'Populate the starting sequence on the screen
	F.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
		F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
		GUI.POPROUTER.txtEndSeq.Text(V.Local.sRet(0))
	F.Intrinsic.Control.EndIf

	gui.POPROUTER.cmdPopRtr_BrwSeqStop.Enabled(True)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdPopRtr_BrwSeqStop_Click.End

Program.Sub.CopyRouterHeader_pop.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sPart.Declare
	v.Local.sDescription.Declare
	v.Local.sSQL.Declare
	v.Local.sSourceCode.Declare
	v.Local.sHold.Declare
	v.Local.iHold.Declare
	v.Local.sCustClause.Declare
	v.Local.sDescription_2.Declare
	v.Local.sDescription_3.Declare
	v.Local.sRouterDescMulti.Declare
	v.Local.sInvUM.Declare
	v.Local.sPL.Declare
	v.Local.fPurchase_Factor.Declare
	v.Local.fPurchase_Cost.Declare
	v.Local.fCost.Declare
	v.Local.sIssueUM.Declare
	v.Local.fConsumpConv.Declare
	v.Local.sTargetRow.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sUbound.Declare
	v.Local.iSeqSort.Declare
	v.Local.sRTR_Seq_ColIndex.Declare
	v.Local.sFilter.Declare
	v.Local.bInserted.Declare
	v.Local.bAboveException.Declare	
	v.Local.sParent.Declare
	v.Local.iSerie.Declare
	
	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
		
	'Check: must be right click, bom complete flag not completed, user right (normal,estimator,engineer),datatable Child exist
	f.Intrinsic.Control.If(v.Global.bReadOnly,=,True,or,v.Global.iRights,<=,0,v.DataTable.CHILD.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate if Router header is created
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No router or parent part in focus.","Cannot insert sequence")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.String.GSSPartString(v.screen.Form!txtFocusParent.text.Trim,v.Screen.Form!txtFocusRev.text.Trim,v.Local.sParent)
	
	'If Insert Manual option is selected we don't need the user to select a row
	f.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,True)
		'Validate the sequence entered by user. If it does not exists in the current router, it is valid. Then check if is a 99XXXX sequence
		f.Intrinsic.String.LPad(v.Screen.Form!txtManualSeq.Text.Trim,"0",6,v.Local.sTargetSeq)
		f.Intrinsic.Control.If(v.Local.sTargetSeq,=,"",or,v.Local.sTargetSeq,=,"000000",v.Local.sTargetSeq,<,990000)
			f.Intrinsic.Control.CallSub(Msg2LinesSoccer,"Title","Invalid Manual Sequence Entered","MainLine","Router as Component (MFG Part) will be inserted as a 99XXXX seq.","FirstLine","Type in a 99XXXX seq at the Manual textbox.","SecondLine","Right click, select Router as Component.")		
			gui.Form.txtManualSeq.SetFocus			
			f.Intrinsic.Control.ExitSub	
		f.Intrinsic.Control.EndIf
		'Check if target sequence exists
		f.Intrinsic.String.Build("RTR_Seq = '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
		f.Data.DataView.Create("CHILD","vSeqExist",22,v.Local.sFilter,"")
		f.Intrinsic.Control.If(v.DataView.CHILD!vSeqExist.RowCount,>,0)
			f.Data.DataView.Close("CHILD","vSeqExist")
			f.Intrinsic.String.Build("Sequence {0} already exists in the current Router.",v.Local.sTargetSeq,v.Local.sHold)				
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox(v.Local.sHold,"Invalid Manual Sequence Entered")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			gui.Form.txtManualSeq.SetFocus		
			f.Intrinsic.Control.ExitSub	
		f.Intrinsic.Control.EndIf
		f.Data.DataView.Close("CHILD","vSeqExist")
		
	'Insert Manual option is not selected, we need user to select a row from Router grid
	f.Intrinsic.Control.Else
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sTargetRow)

		'User does not select a router row
		f.Intrinsic.Control.If(v.Local.sTargetRow.Trim,=,"")
			f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,1)
				f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","No Router Sequence Selected","MainLine","Router as Component (MFG Part) will be inserted as a 99XXXX seq.","FirstLine","Select a 99XXXX SEQ from the Router grid.","SecondLine","Select Above/Below/Manual radio button.","ThirdLine","Right click, select Router as Component.")
				f.Intrinsic.Control.ExitSub	
				
			'This case CHILD Rowcount = 1	
			f.Intrinsic.Control.Else
				v.Local.sTargetRow.Set(0)
				v.Local.sTargetSeq.Set("990000")
			f.Intrinsic.Control.EndIf
			
		'User currently select a router row	
		f.Intrinsic.Control.Else	
			f.Intrinsic.String.Split(v.Local.sTargetRow,"*!*",v.Local.sTargetRow)
			v.Local.sUbound.Set(v.Local.sTargetRow.UBound)
			v.Local.sTargetRow.Set(v.Local.sTargetRow(v.Local.sUbound))
			v.Local.sTargetSeq.Set(v.DataTable.CHILD(V.Local.sTargetRow).RTR_SEQ!FieldValString)
			f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,<>,"99")
			
				f.Data.DataView.Create("Child","vNor",22,"RTR_Seq >= '990000'","")
				f.Intrinsic.Control.If(v.DataView.Child!vNor.RowCount,=,0)			
					v.Local.sTargetSeq.Set("990000")					
				f.Intrinsic.Control.Else						
					f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","Invalid Router Sequence Selected","MainLine","Router as Component (MFG Part) will be inserted as 99XXXX seq.","FirstLine","Select a 99XXXX seq from the Router grid.","SecondLine","Select Above/Below/Manual radio button.","ThirdLine","Right click, select Router as Component.")
					f.Data.DataView.Close("Child","vNor")						
					f.Intrinsic.Control.ExitSub		
				f.Intrinsic.Control.EndIf
				f.Data.DataView.Close("Child","vNor")	
									
			f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.EndIf	
		
	f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1,or,v.DataTable.CHILD.RowCount,=,2)
		v.Local.bAboveException.Set(True)
	f.Intrinsic.Control.EndIf
	
	'Open custom browser Router	
	F.Intrinsic.Control.If(V.Global.bLongPart)
		f.Intrinsic.UI.Browser("Select Router","conx","select Left(h.Router,17) as Router,Substring(h.Router,18,3) as Rev,rtrim(h.DESCRIPTION_ROUTER) as Description,rtrim(d.Desc_Router_2) as Description_2,rtrim(d.Desc_Router_3) as Description_3,h.UM_INVENTORY as UM_Inventory ,h.PROD_LINE as Product_Line,s.Inactive,s.Complete, x.DISPLAY_PART,x.DISPLAY_REV  from v_router_header h left join v_router_desc d on h.Router = d.Router and h.Router_Suffix = d.Router_Suffix left join v_ROUTER_SUPP_HDR s on h.Router = s.Rtr_Num and h.Router_Suffix = s.Suffix  left join Inv_lxr x on h.Router = x.GSS_Part order by h.Router","Router*!*Rev*!*Description*!*Description 2*!*Description 3*!*UM*!*PL*!*Inactive*!*Compl.*!*Long Part*!*Rev Long Part","500*!*200*!*700*!*200*!*200*!*200*!*200*!*300*!*300*!*500*!*200","15000","10000",v.Local.sRet)
	F.Intrinsic.Control.Else
		f.Intrinsic.UI.Browser("Select Router","conx","select Left(h.Router,17) as Router,Substring(h.Router,18,3) as Rev,rtrim(h.DESCRIPTION_ROUTER) as Description,rtrim(d.Desc_Router_2) as Description_2,rtrim(d.Desc_Router_3) as Description_3,h.UM_INVENTORY as UM_Inventory ,h.PROD_LINE as Product_Line,s.Inactive,s.Complete  from v_router_header h left join v_router_desc d on h.Router = d.Router and h.Router_Suffix = d.Router_Suffix left join v_ROUTER_SUPP_HDR s on h.Router = s.Rtr_Num and h.Router_Suffix = s.Suffix order by h.Router","Router*!*Rev*!*Description*!*Description 2*!*Description 3*!*UM*!*PL*!*Inactive*!*Compl.","500*!*200*!*700*!*700*!*700*!*200*!*200*!*300*!*400","15000","10000",v.Local.sRet)
	F.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		f.Intrinsic.String.GSSPartString(v.Local.sRet(0),v.Local.sRet(1),v.Local.sPart)
		f.Intrinsic.Control.If(v.Local.sPart.Trim,=,v.Local.sParent.Trim)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("The Router as Component is the same as the Router header.","Attention")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		
		v.Local.sDescription.Set(v.Local.sRet(2).Trim)
		v.Local.sDescription_2.Set(v.Local.sRet(3))
		v.Local.sDescription_3.Set(v.Local.sRet(4))
		v.Local.sInvUM.Set(v.Local.sRet(5))
		v.Local.sPL.Set(v.Local.sRet(6))
		'Back Insert the row selected into Child datatable		
		
		'Check if the router is an Inventory Part, Yes, get the Source code to determine how to add Row to the Router grid
		f.Intrinsic.String.Build("Select Top 1 Code_Source from Inventory_MST2  where Part = '{0}' and Location = '{1}'",v.Local.sPart.PSQLFriendly,v.Global.sDefaultLoc,v.Local.sSQL)	
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)	
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			v.Local.sSourceCode.Set(v.Local.sRet.Trim)
		f.Intrinsic.Control.Else
			'If not inventory part, defaut source code to F and add Row to grid
			v.Local.sSourceCode.Set("F")
		f.Intrinsic.Control.EndIf
		
		'Inventory_MSTR.FACTOR_CONVERSION
		v.Local.fPurchase_Factor.Set(v.Dictionary.PURCONVERSION![v.Local.sPart.Trim])		
		'Purch_Cost/per part
		v.Local.fPurchase_Cost.Set(v.Dictionary.PURCOST![v.Local.sPart.Trim])		
		'Cost	
		v.Local.fCost.Set(v.Dictionary.INVCOST![v.Local.sPart.Trim])
		'IssueUM
		v.Local.sIssueUM.Set(v.Dictionary.IssueUM![v.Local.sPart.Trim])
		'ConsumpConv
		v.Local.fConsumpConv.Set(v.Dictionary.ConsumpConv![v.Local.sPart.Trim])
		
		'Get Router Description
		f.Intrinsic.Control.If(v.Screen.Form!txtCustNo.Text.Trim,=,"")
			v.Local.sCustClause.Set("")
		f.Intrinsic.Control.Else
			v.Local.sHold.Set(v.Screen.Form!txtCustNo.Text.Trim)
			f.Intrinsic.String.Build(" and Rtrim(Router_Suffix) = '{0}'",v.Local.sHold.PSQLFriendly,v.Local.sCustClause)
		f.Intrinsic.Control.EndIf
		f.Intrinsic.String.Build("Select Top 1 DESC_ROUTER_2,DESC_ROUTER_3 from V_Router_Desc where Router = '{0}' {1}",v.Local.sPart.PSQLFriendly,v.Local.sCustClause,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRouterDescMulti)
			f.Intrinsic.Control.If(v.Local.sRouterDescMulti(0).Trim,<>,"")
				v.Local.sDescription_2.Set(v.Local.sRouterDescMulti(0))			
			f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.If(v.Local.sRouterDescMulti(1).Trim,<>,"")
				v.Local.sDescription_3.Set(v.Local.sRouterDescMulti(1))			
			f.Intrinsic.Control.EndIf			
		f.Intrinsic.Control.EndIf
		
		gui.Form.GGC_Bom.SuspendLayout
		f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)

		f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value,=,True)
			v.Local.iSeqSort.Set(1)
		f.Intrinsic.Control.ElseIf(v.Screen.Form!optInsertAbove.Value,=,True)
			v.Local.iSeqSort.Set(-1)
		f.Intrinsic.Control.ElseIf(v.Screen.Form!optInsertManual.Value,=,True)
			v.Local.iSeqSort.Set(0)
		f.Intrinsic.Control.EndIf		
		
		'Get next Serie
		f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
		f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)
		
		'Add
		F.Data.DataTable.AddRow("CHILD","BPARENT",v.DataTable.Child(0).BPARENT!FieldValString,"DESCR_BP",v.DataTable.Child(0).DESCR_BP!FieldVal,"BOM_SEQ","0000","RTR_SEQ",v.Local.sTargetSeq,"SeqSort",v.Local.iSeqSort,"PART",v.Local.sPart,"DESCRIPTION",v.Local.sDescription,"DESCRIPTION_2",v.Local.sDescription_2,"DESCRIPTION_3",v.Local.sDescription_3,"LMO","M","CATEGORY","NORMAL","SOURCE_CODE",v.Local.sSourceCode,"UM",v.Local.sInvUM,"COST",v.Local.fCost,"SOURCE",v.Dictionary.SOURCE![v.Local.sSourceCode],"PURCHASE_FACTOR",v.Local.fPurchase_Factor,"PURCH_COST",v.Local.fPurchase_Cost,"PL",v.Local.sPL,"Issue_UM",v.Local.sIssueUM,"Consump_Conv",v.Local.fConsumpConv,"Serie",v.Local.iSerie,"Lead",v.Dictionary.LEADHOURS![v.Local.sPart.Trim],"MQD",v.Dictionary.dictMQD![v.Local.sPart.Trim])		
		
		v.Global.bRouterChanged.Set(True)
		
		'No need to bind cutlist here as it is 990000		
		
		f.Intrinsic.Control.CallSub(Populate_LongPart_Router)		

		'No need to resequence if it is Manual Insert
		F.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,False)
			'Insert Below case we will ReSeqStartFrom_99s
			f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value)
				f.Intrinsic.Control.CallSub(ReSeqStartFrom_99s,"sFromSeq",v.Local.sTargetSeq)		
			'Insert Above case
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.If(v.Local.bAboveException.Not)		
					F.Intrinsic.String.Build("RTR_Seq >= '990000' and  RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
					f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
					F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
						f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
							f.Intrinsic.Control.CallSub(Reseq99s)						
						f.Intrinsic.Control.Else	
							f.Intrinsic.Control.CallSub(ReSeqStartFrom_99s,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
						f.Intrinsic.Control.EndIf					
					f.Intrinsic.Control.Else
						f.Intrinsic.Control.CallSub(Reseq99s)
					F.Intrinsic.Control.EndIf
					f.Data.DataView.Close("CHILD","vAbove")		
				
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.CallSub(Reseq99s)
				f.Intrinsic.Control.EndIf
	
			f.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.EndIf

		'@holder1			
		f.Data.DataTable.AcceptChanges("CHILD")
		
		'move the focus to that row
		Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
		gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)
		
		gui.Form.GGC_Bom.ResumeLayout
	
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.CopyRouterHeader_pop.End

Program.Sub.InsNonInventory.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRow.Declare
	v.Local.sSelectedSeq.Declare

	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.IF(V.DataTable.CHILD.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
		
	gui.NonInv.ddlSelectedSeq.ClearItems	
		
	'Generate next Router Seq and Bom Sequence
	F.Intrinsic.Control.If(V.DataTable.CHILD.RowCount,=,1)
	
		gui.NonInv.ddlSelectedSeq.Text("")
		
	f.Intrinsic.Control.ElseIf(v.DataTable.CHILD.RowCount,>,1)
		gui.Form.GGC_Bom.GetSelectedRows("GV_Child",v.Local.sRow)
		f.Intrinsic.Control.If(v.Local.sRow,=,"")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Please select a row from the Router grid.","Attention")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		f.Intrinsic.String.Split(v.Local.sRow,"*!*",v.Local.sRow)
		v.Local.sRow.Set(v.Local.sRow(0))
		v.Local.sSelectedSeq.Set(v.DataTable.Child(v.Local.sRow).RTR_Seq!FieldValString)	
	
		F.Data.DataView.Create("CHILD","v_Seq",22,"RTR_SEQ > '000000'","RTR_SEQ Asc")
		f.Data.DataView.ToDataTableDistinct("child","v_Seq","SeqList","RTR_Seq",True)
		f.Data.DataTable.AddExpressionColumn("SeqList","RTR_Seq2","String","RTR_Seq")
		f.Data.Dictionary.CreateFromDataTable("dSeqList","SeqList","RTR_Seq","RTR_Seq2")
		f.Data.Dictionary.SetDefaultReturn("dSeqList","")
		
		gui.NonInv.ddlSelectedSeq.AddItems("DICTIONARY","dSeqList")
		gui.NonInv.ddlSelectedSeq.Text(v.Local.sSelectedSeq)
		
		f.Data.Dictionary.Close("dSeqList")
		f.Data.DataTable.Close("SeqList")		
		f.Data.DataView.Close("CHILD","v_Seq")		
			
	F.Intrinsic.Control.EndIf

	gui.NonInv..Caption("Insert Non Part")
	'set the values to the form before we open it
	f.Intrinsic.Control.BlockEvents
	GUI.NonInv.txtPart.Text("")
	GUI.NonInv.txtRev.Text("")
	GUI.NonInv.txtDescr.Text("")
	GUI.NonInv.txtDescr2.Text("")
	GUI.NonInv.txtDescr3.Text("")
	GUI.NonInv.txtUM.Text("")
	GUI.NonInv.txtPL.Text("")
	gui.NonInv.txtExtra.Text("")
	Gui.NonInv.cmdBrowseInv.Visible(False)		

	'set controls in the form
	GUI.NonInv.txtType.Text("INSERT")
	
	'setting form values that have  "change" events active
	'Clear dropdown before adding new items
	gui.NonInv.ddlSource.ClearItems
	gui.NonInv.ddlSource.AddItem("SOURCE")
	gui.NonInv.ddlSource.AddItems("DICTIONARY","SOURCE")
	
	'Clear dropdown before adding new items
	gui.NonInv.ddlCategory.ClearItems
	gui.NonInv.ddlCategory.AddItems("DICTIONARY","ddLCategr")
	
	'Clear dropdown before adding new items
	gui.NonInv.cboSort.ClearItems
	gui.NonInv.cboSort.AddItems("DICTIONARY","DICTSORT")
	gui.NonInv.cboSort.Additem("SORT CODE")
	
	'Set default value
	gui.NonInv.cboSort.Text("SORT CODE")
	gui.NonInv.ddlSource.Text("SOURCE")
	gui.NonInv.ddlCategory.Text("NORMAL")
	
	f.Intrinsic.Control.CallSub(Visible_Cost_Qty,"bVisible",True)
	f.Intrinsic.Control.CallSub(Default_Cost_Quantity)
	
	gui.NonInv.txtNoSave.Text("NOSAVE")	
	gui.NonInv.ddlNewPartLoc.ListIndex(0)	
	f.Intrinsic.Control.UnBlockEvents

	gui.Form..Enabled(False)
	'Resize form NonInv
	f.Intrinsic.Control.If(v.Screen.NonInv!txtType.Text.Trim,=,"NEW")
		'4365
		gui.NonInv..Size(10260, 4300)		
	f.Intrinsic.Control.ElseIf(v.Screen.NonInv!txtType.Text.Trim,=,"INSERT")	
		gui.NonInv..Size(10260,5130)		
	f.Intrinsic.Control.EndIf	
	
	gui.NonInv..Visible(True)
	gui.Form.frInsertType.Visible(False)
	gui.NonInv.txtPart.SetFocus
		
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.InsNonInventory.End

Program.Sub.NewPartCheck.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sBSeq.Declare
	v.Local.sRSeq.Declare
	V.Local.bArgs.Declare
	v.Local.iRet.Declare
	v.Local.sFile.Declare		
	
	'Check if sequence has been passed - generally for insert commands
	F.Intrinsic.Variable.ArgExists("BSEQ",v.Local.bArgs)
	f.Intrinsic.Control.If(v.Local.bArgs)
		v.Local.sBSeq.Set(v.Args.BSEQ)
		V.Local.sRSeq.Set(V.Args.RSEQ)
	f.Intrinsic.Control.EndIf
	'checking to see what their part numbering scheme is
	f.Intrinsic.Control.SelectCase(v.Global.iPart)
		f.Intrinsic.Control.Case(1)
			f.Intrinsic.Control.CallSub(ManualPart,"TYPE",V.Args.TYPE,"BSEQ",V.Local.sBSeq,"RSEQ",V.Local.sRSeq)
		f.Intrinsic.Control.Case(2)
			F.Intrinsic.Control.CallSub(AutoPart,"TYPE",V.Args.TYPE,"BSEQ",V.Local.sBSeq,"RSEQ",V.Local.sRSeq)
		f.Intrinsic.Control.Case(4)
			'for all library files created for custom part number, it should have a starting subroutine called CUSTOM
			f.Intrinsic.Control.CallSub(CustomPart,"TYPE",V.Args.TYPE,"BSEQ",V.Local.sBSeq,"RSEQ",V.Local.sRSeq)
		f.Intrinsic.Control.Case(8)
			'Part generator 
			'store the args to global.spart for the return from the part number generator
			f.Intrinsic.String.Build("{0}*!*{1}*!*{2}",v.Args.TYPE,V.Local.sBSeq,V.Local.sRSeq,V.Global.sPart)			
			'create a file to hold the IMP value - when the save button is clicked on the PNG, it will send a message back with the part number in it
			f.Intrinsic.String.Build("{0}\CUSTOM\4986\{1}\4986IPM{2}.TXT",V.Caller.GlobalDir,v.Caller.CompanyCode,v.Caller.User.Trim,V.Local.sFile)
			f.Intrinsic.File.String2File(V.Local.sFile,V.Ambient.MyIPMh)			
			'launch the part number generator
			f.Global.General.LaunchMenuTask(390,0,v.Local.iRet)			
	f.Intrinsic.Control.EndSelect

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.NewPartCheck.End

Program.Sub.ManualPart.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bRet.Declare
	
	'set the values to the form before we open it
	f.Intrinsic.Control.BlockEvents
	GUI.NonInv.txtPart.Text("")
	GUI.NonInv.txtRev.Text("")
	GUI.NonInv.txtDescr.Text("")
	GUI.NonInv.txtDescr2.Text("")
	GUI.NonInv.txtDescr3.Text("")
	GUI.NonInv.txtUM.Text("")
	GUI.NonInv.txtPL.Text("")
	GUI.NonInv.txtExtra.Text("")
	f.Intrinsic.Control.UnBlockEvents
	
	F.Intrinsic.Variable.ArgExists("PART",V.Local.bRet)
	F.Intrinsic.Control.If(V.Local.bRet)
		GUI.NonInv.txtPart.Text(V.Args.PART)
	F.Intrinsic.Control.EndIf
	
	'set controls in the form
	GUI.NonInv.txtBOM_SEQ.Text(v.Args.BSEQ)
	GUI.NonInv.txtRTR_SEQ.Text(V.Args.RSEQ)
	GUI.NonInv.txtType.Text(V.Args.TYPE)
	
	'setting form values that have  "change" events active
	f.Intrinsic.Control.BlockEvents
	'Clear dropdown before adding new items
	gui.NonInv.ddlSource.ClearItems
	gui.NonInv.ddlCategory.ClearItems
	gui.NonInv.cboSort.ClearItems
	gui.NonInv.cboSort.AddItems("DICTIONARY","DICTSORT")
	gui.NonInv.cboSort.Additem("SORT CODE")
	
	'Set default value
	gui.NonInv.cboSort.Text("SORT CODE")

	
	gui.Form..Enabled(False)
	'Resize form NonInv
	f.Intrinsic.Control.If(v.Screen.NonInv!txtType.Text.Trim,=,"NEW")
		gui.NonInv.ddlSource.AddItem("MFG-STOCK")
		gui.NonInv.ddlSource.AddItem("MFG-JOB")		
		GUI.NonInv.ddlSource.ListIndex(0)		
		gui.NonInv.ddlCategory.AddItem("NORMAL")	
		GUI.NonInv.ddlCategory.ListIndex(0)		
	
		gui.NonInv..Size(10260, 4300)		
	f.Intrinsic.Control.ElseIf(v.Screen.NonInv!txtType.Text.Trim,=,"INSERT")
		gui.NonInv.ddlSource.AddItem("SOURCE")
		gui.NonInv.ddlSource.AddItems("DICTIONARY","SOURCE")			
		gui.NonInv.ddlCategory.AddItems("DICTIONARY","ddLCategr")		
		gui.NonInv.ddlSource.Text("SOURCE")
		gui.NonInv.ddlCategory.Text("NORMAL")		
		gui.NonInv..Size(10260,5130)		
	f.Intrinsic.Control.EndIf
	
	gui.NonInv.ddlNewPartLoc.ListIndex(0)
	
	f.Intrinsic.Control.UnBlockEvents
	
	gui.NonInv..Visible(True)
	gui.Form.frInsertType.Visible(False)
	gui.NonInv.txtPart.SetFocus

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ManualPart.End

Program.Sub.AutoPart.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sPart.Declare
	v.Local.iPart.Declare
	v.Local.sOption.Declare
	v.Local.sSql.Declare
	
	'incoming ARGS = TYPE, BSEQ, RSEQ  (BSEQ and RSEQ may be blank, but that's fine, pass them forward anyway)
	'customer is using "auto number inventory parts" - we're using this for all BOM/Routers/Parts
	'no need to check T/F for this company option, we are here because it's resolved to T already
	
	f.Global.General.ReadOption("400460",3,0,"0002",v.Local.iPart)
	f.Intrinsic.String.ConvertToString(v.Local.iPart,v.Local.sPart)
	f.Intrinsic.Math.Add(v.Local.iPart,1,v.Local.iPart)
	'this saves to the op_header
	f.Global.General.SaveOption(400460,"0002",False,"","","",0,v.Ambient.Date,v.Local.iPart)
	'this saves to the custom option
	F.Intrinsic.String.LPad(V.Local.iPart,"0",6,V.Local.sOption)
	f.Intrinsic.String.Build("UPDATE ASSIGN_CUST_OPT SET PART_START_NUM = '{0}' WHERE ASS_SYS = 'CUS' AND ASS_SUB_SYS = 'TOM'",V.Local.sOption,V.Local.sSql)
	f.ODBC.Connection!conx.execute(v.Local.sSql)
	
	f.Intrinsic.Control.CallSub(manualPart,"PART",v.Local.sPart,"TYPE",V.Args.TYPE,"BSEQ",V.Args.BSEQ,"RSEQ",V.Args.RSEQ)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.AutoPart.End

Program.Sub.ddlSource_Change.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iSeq.Declare
	v.Local.sSeq.Declare
	v.Local.sRet.Declare
	v.Local.sRSeq.Declare
	v.Local.iHold.Declare
	v.Local.sBSeq.Declare
	V.Local.sCategory.Declare
	'we need to make some changes to the sequence if the user is creating a mfg part.
	v.Local.sCategory.Set(v.Screen.NonInv!ddlCategory.Text)
	
	f.Intrinsic.Control.SelectCase(v.Screen.NonInv!ddlSource.text)
		f.Intrinsic.Control.CaseAny("MFG-STOCK","MFG-JOB")
			F.Intrinsic.Control.If(v.Local.sCategory.UCase,=,"NORMAL")
				F.Data.DataTable.Compute("CHILD","MAX(RTR_SEQ)","RTR_SEQ >= '990000'",V.Local.sRet)
				f.Intrinsic.Control.If(v.Local.sRet,=,"")
					gui.NonInv.txtRTR_SEQ.Text("990000")			
				f.Intrinsic.Control.Else	
					f.Intrinsic.Math.Add(v.Local.sRet,V.Global.iRSeq,v.Local.iHold)	
					f.Intrinsic.String.LPad(v.Local.iHold,"0",6,v.Local.sRSeq)
					gui.NonInv.txtRTR_SEQ.Text(v.Local.sRSeq)
				f.Intrinsic.Control.EndIf	
			F.Intrinsic.Control.Else
		
				V.Local.sRSeq.Set("000000")
				F.Data.DataView.Create("CHILD","v_Seq",22,"RTR_SEQ > '000000' AND RTR_SEQ < '990000'","RTR_SEQ DESC")
				f.Intrinsic.Control.If(v.DataView.CHILD!v_Seq.RowCount,>,0)
					v.Local.sRSeq.Set(V.DataView.CHILD!v_Seq(0).RTR_SEQ!FIELDVALTRIM)			
				f.Intrinsic.Control.EndIf		
				f.Data.DataView.Close("CHILD","v_Seq")		
				
				f.Intrinsic.Math.Add(v.Local.sRSeq,V.Global.iRSeq,v.Local.iHold)	
				f.Intrinsic.String.LPad(v.Local.iHold,"0",6,v.Local.sRSeq)
				gui.NonInv.txtRTR_SEQ.Text(v.Local.sRSeq)	
				
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.CaseElse
			V.Local.sRSeq.Set("000000")
			F.Data.DataView.Create("CHILD","v_Seq",22,"RTR_SEQ > '000000' AND RTR_SEQ < '990000'","RTR_SEQ DESC")
			f.Intrinsic.Control.If(v.DataView.CHILD!v_Seq.RowCount,>,0)
				v.Local.sRSeq.Set(V.DataView.CHILD!v_Seq(0).RTR_SEQ!FIELDVALTRIM)			
			f.Intrinsic.Control.EndIf		
			f.Data.DataView.Close("CHILD","v_Seq")		
			
			f.Intrinsic.Math.Add(v.Local.sRSeq,V.Global.iRSeq,v.Local.iHold)	
			f.Intrinsic.String.LPad(v.Local.iHold,"0",6,v.Local.sRSeq)
			gui.NonInv.txtRTR_SEQ.Text(v.Local.sRSeq)	
			
	f.Intrinsic.Control.EndSelect
	
	v.Global.sInsRtrSeq.Set(v.Screen.NonInv!txtRTR_SEQ.Text)
	gui.NonInv.txtBOM_SEQ.Text("")	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ddlSource_Change.End

Program.Sub.cmdOK_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sPart.Declare
	v.Local.sSource.Declare
	v.Local.sCategory.Declare
	v.Local.iRow.Declare
	V.Local.sParent.Declare
	V.Local.sFilter.Declare	
	v.Local.sHold.Declare
	v.Local.iSerie.Declare

	v.Local.sTargetSeq.Declare
	v.Local.iSeqSort.Declare
	v.Local.sRTR_Seq_ColIndex.Declare	
	v.Local.sSource_Code.Declare
	v.Local.sCategoryCode.Declare
	v.Local.bAboveException.Declare
	V.Local.sSort.Declare
	v.Local.fCost.Declare
	v.Local.fQty.Declare
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.iCnt.Declare
		
	gui.NonInv..Enabled(False)
	
	f.Intrinsic.Control.If(v.Screen.NonInv!cboSort.Text.Trim,<>,"SORT CODE")
		f.Intrinsic.String.Split(v.Screen.NonInv!cboSort.Text.Trim,"|",v.Local.sSort)
		v.Local.sSort.Set(v.Local.sSort(0).Trim)
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(v.Screen.NonInv!txtType.Text.Trim,=,"BOMCUTBySelectSeq")
		'Check if the same as Parent
		f.Intrinsic.String.GSSPartString(V.Screen.Form!txtFocusParent.text,v.Screen.Form!txtFocusRev.text,v.Local.sParent)
		f.Intrinsic.String.GSSPartString(v.Screen.NonInv!txtPart.text,V.Screen.NonInv!txtRev.text,v.Local.sPart)		

		f.Intrinsic.Control.If(v.Local.sParent.Trim,=,v.Local.sPart.Trim)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox("The Part is the same as the Parent!","Invalid")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			gui.NonInv.txtPart.SetFocus
			gui.NonInv..Enabled(True)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf	
	
		gui.Form.lblResult.Visible(True)
		v.Global.bPassedNonInvScreen.Set(False)
		f.Intrinsic.Control.If(v.Global.bBindCutList)
			f.Intrinsic.Control.CallSub(Process_OK_BomCutBySelectSeq_WithCutlist_Option)
		f.Intrinsic.Control.Else			
			f.Intrinsic.Control.CallSub(Process_OK_BomCutBySelectSeq)
		f.Intrinsic.Control.EndIf
		
		gui.Form.lblResult.Visible(False)
		f.Intrinsic.Control.If(v.Global.bPassedNonInvScreen)
			'Unload form NonInv
			f.Intrinsic.Control.CallSub(cmdCancel_Click)
		f.Intrinsic.Control.EndIf
		gui.NonInv..Enabled(True)
		
		'Expand based on Series
		f.Intrinsic.Control.If(v.Global.sSeriesToExpand.Trim,<>,"")

			f.Intrinsic.String.Build("Serie in ('{0}')",v.Global.sSeriesToExpand,v.Local.sFilter)
			f.Data.DataTable.Select("Child",v.Local.sFilter,v.Local.sRet)
			f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
				f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
				f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.sRet.UBound,1)
					gui.Form.GGC_Bom.ExpandMasterRow("GV_Child",v.Local.sRet(v.Local.iCnt))
				f.Intrinsic.Control.Next(v.Local.iCnt)
			f.Intrinsic.Control.EndIf
		
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Screen.NonInv!txtType.Text.Trim,=,"FROMMOVESEQ")
		v.Global.bPassedNonInvScreen.Set(False)
		f.Intrinsic.Control.If(v.Global.bBindCutList)
			f.Intrinsic.Control.CallSub(Process_MoveSeq_WithCutList_Option)
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.CallSub(Process_MoveSeq)
		f.Intrinsic.Control.EndIf
		
		gui.NonInv.txtPart.Enabled(True)
		gui.NonInv.txtRev.Enabled(True)
		
		f.Intrinsic.Control.If(v.Global.bPassedNonInvScreen)
			'Unload form NonInv
			f.Intrinsic.Control.CallSub(cmdCancel_Click)
		f.Intrinsic.Control.EndIf
		gui.NonInv..Enabled(True)
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Screen.NonInv!txtPart.text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Part number is blank","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.txtPart.SetFocus
		gui.NonInv..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'made the part has a valid source and category
	f.Intrinsic.Control.If(v.Screen.NonInv!ddlSource.text,=,"SOURCE",Or,V.Screen.NonInv!ddlCategory.TEXT,=,"CATEGORY")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select a category and source","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.ddlSource.SetFocus
		gui.NonInv..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'Validate UM
	f.Intrinsic.Control.If(v.Screen.NonInv!txtUM.text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select a UM and source","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.txtUM.SetFocus
		gui.NonInv..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate PL
	f.Intrinsic.Control.If(v.Screen.NonInv!txtPL.text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select a PL and source","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.txtPL.SetFocus
		gui.NonInv..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Data.Dictionary.ReturnKeyFromValue("SOURCE",V.Screen.NonInv!ddlSource.TEXT,False,V.Local.sSource)
	F.Data.Dictionary.ReturnKeyFromValue("CATEGORY",V.Screen.NonInv!ddlCategory.Text,False,v.Local.sCategory)
	
	f.Intrinsic.Control.SelectCase(V.Screen.NonInv!txtType.TEXT)
	
		F.Intrinsic.Control.Case("INSERT")
			'insert the row where it belongs using RTR_SEQ
			f.Intrinsic.String.GSSPartString(V.Screen.Form!txtFocusParent.text,v.Screen.Form!txtFocusRev.text,v.Local.sParent)
			f.Intrinsic.String.GSSPartString(v.Screen.NonInv!txtPart.text,V.Screen.NonInv!txtRev.text,v.Local.sPart)
			
			'Check if it is insert manually			
			'v.Screen.Form!optInsertManual.Value
			f.Intrinsic.Control.If(v.Screen.NonInv!optNonInvInsertManual.Value,=,True)
				'Validate the sequence entered by user. If it does not exists in the current router, it is valid. 
				f.Intrinsic.String.LPad(v.Screen.NonInv!txtNonInvManualSeq.Text.Trim,"0",6,v.Local.sTargetSeq)
				f.Intrinsic.Control.If(v.Local.sTargetSeq,=,"",or,v.Local.sTargetSeq,=,"000000",v.Local.sTargetSeq,>,999999)
					f.Intrinsic.Control.CallSub(Msg3Lines,"Title","Manually Insert Instructions","MainLine","Please enter a valid Material sequence at Manual textbox.","FirstLine","Select the right Material Source Type to insert.","SecondLine","NON-MANUFACTURE Part seq must be in range (0,990000).","ThirdLine","MANUFACTURE Part seq must be in range [990000,999999]")			
					gui.NonInv.txtNonInvManualSeq.SetFocus
					gui.NonInv..Enabled(True)
					f.Intrinsic.Control.ExitSub	
				f.Intrinsic.Control.EndIf
				'Check if target sequence exists
				f.Intrinsic.String.Build("RTR_Seq = '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
				f.Data.DataView.Create("CHILD","vSeqExist",22,v.Local.sFilter,"")
				f.Intrinsic.Control.If(v.DataView.CHILD!vSeqExist.RowCount,>,0)
					f.Data.DataView.Close("CHILD","vSeqExist")
					f.Intrinsic.String.Build("Sequence {0} already exists in the current Router.",v.Local.sTargetSeq,v.Local.sHold)				
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
					F.Intrinsic.UI.Msgbox(v.Local.sHold,"Manually Insert Instructions")
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
					gui.NonInv.txtNonInvManualSeq.SetFocus	
					gui.NonInv..Enabled(True)
					f.Intrinsic.Control.ExitSub				
				f.Intrinsic.Control.EndIf
				f.Data.DataView.Close("CHILD","vSeqExist")	

				'Check Source Code
				f.Intrinsic.Control.If(v.Local.sSource,=,"M",or,v.Local.sSource,=,"F")
					f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,<>,"99")
						f.Intrinsic.Control.CallSub(Msg3Lines,"Title","Manually Insert Instructions","MainLine","Please enter a valid Material sequence at Manual textbox.","FirstLine","Select the right Material Source Type to insert.","SecondLine","NON-MANUFACTURE Part seq must be in range (0,990000).","ThirdLine","MANUFACTURE Part seq must be in range [990000,999999]")	
						gui.NonInv.txtNonInvManualSeq.SetFocus	
						gui.NonInv..Enabled(True)
						f.Intrinsic.Control.ExitSub					
					f.Intrinsic.Control.EndIf	
				f.Intrinsic.Control.Else
						f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,=,"99")
						f.Intrinsic.Control.CallSub(Msg3Lines,"Title","Manually Insert Instructions","MainLine","Please enter a valid Material sequence at Manual textbox.","FirstLine","Select the right Material Source Type to insert.","SecondLine","NON-MANUFACTURE Part seq must be in range (0,990000).","ThirdLine","MANUFACTURE Part seq must be in range [990000,999999]")	
						gui.NonInv.txtNonInvManualSeq.SetFocus	
						gui.NonInv..Enabled(True)
						f.Intrinsic.Control.ExitSub					
					f.Intrinsic.Control.EndIf		
				f.Intrinsic.Control.EndIf
				
				'The material is the same as the Router header
				f.Intrinsic.Control.If(v.Local.sPart.Trim,=,v.Local.sParent.Trim)
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
					f.Intrinsic.UI.Msgbox("The material is the same as the Router header.","Attention")	
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
					gui.NonInv..Enabled(True)
					f.Intrinsic.Control.ExitSub
				f.Intrinsic.Control.EndIf
				
			'Insert Manual option is not selected, we need user to select a row from Router grid
			f.Intrinsic.Control.Else
				
				'Selected Sequence is blank (there is header and no row inserted yet)
				f.Intrinsic.Control.If(v.Screen.NonInv!ddlSelectedSeq.Text.Trim,=,"")
	
					'The material is the same as the Router header
					f.Intrinsic.Control.If(v.Local.sPart.Trim,=,v.Local.sParent.Trim)
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
						f.Intrinsic.UI.Msgbox("The material is the same as the Router header.","Attention")	
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
						gui.NonInv..Enabled(True)
						f.Intrinsic.Control.ExitSub
					f.Intrinsic.Control.EndIf
					
					'This case CHILD Rowcount = 1, meaning there is the header and no row for sequence yet
					f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1)
						f.Intrinsic.Control.If(v.Local.sSource,=,"M",or,v.Local.sSource,=,"F")
							V.Local.sTargetSeq.Set("990000")	
						F.Intrinsic.Control.Else
							f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)
						f.Intrinsic.Control.EndIf	
					f.Intrinsic.Control.Else
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
						f.Intrinsic.UI.Msgbox("Selected Seq is blank. This can only be done for empty grid. Please select a sequence to insert above/below.","Attention")
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
						gui.NonInv..Enabled(True)
						f.Intrinsic.Control.ExitSub					
					f.Intrinsic.Control.EndIf		
				
				'Selected Seq is not blank
				f.Intrinsic.Control.Else
					v.Local.sTargetSeq.Set(v.Screen.NonInv!ddlSelectedSeq.Text.Trim)
					
					'The material is the same as the Router header
					f.Intrinsic.Control.If(v.Local.sPart.Trim,=,v.Local.sParent.Trim)
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
						f.Intrinsic.UI.Msgbox("The material is the same as the Router header.","Attention")	
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
						gui.NonInv..Enabled(True)
						f.Intrinsic.Control.ExitSub
					f.Intrinsic.Control.EndIf
					
					'Normal Seq is selected 
					f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,<>,"99")
						'If Source code is manufacture part
						f.Intrinsic.Control.If(v.Local.sSource,=,"M",or,v.Local.sSource,=,"F")
							F.Data.DataView.Create("CHILD","v99",22,"RTR_SEQ >= '990000'","")
							'Check if there is a 99XXXX seq exists
							f.Intrinsic.Control.If(v.DataView.CHILD!v99.RowCount,>,0)
								f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
								f.Intrinsic.UI.Msgbox("MFG-PART can only be inserted into 99XXXX Sequence section.","Attention")
								f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
								f.Data.DataView.Close("CHILD","v99")
								gui.NonInv..Enabled(True)
								f.Intrinsic.Control.ExitSub	
							f.Intrinsic.Control.Else
								'This is the first 990000 with existing normal Seqs
								V.Local.sTargetSeq.Set("990000")
							f.Intrinsic.Control.EndIf
							f.Data.DataView.Close("CHILD","v99")													
						f.Intrinsic.Control.EndIf					
				
					'99 Seq is selected
					f.Intrinsic.Control.Else	
						'Source code is non manufacture part
						f.Intrinsic.Control.If(v.Local.sSource,<>,"M",and,v.Local.sSource,<>,"F")
							F.Data.DataView.Create("CHILD","vNormal",22,"RTR_SEQ < '990000' and RTR_Seq <> '000000'" ,"")
							'Check if there is a normal Seq exists
							f.Intrinsic.Control.If(v.DataView.CHILD!vNormal.RowCount,>,0)
								f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
								f.Intrinsic.UI.Msgbox("NON-MFG-PART can only be inserted into Normal Sequence section.","Attention")
								f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
								f.Data.DataView.Close("CHILD","vNormal")
								gui.NonInv..Enabled(True)
								f.Intrinsic.Control.ExitSub	
							f.Intrinsic.Control.Else
								'This is the first normal seq with existing 99XXXX Seqs
								f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)
							f.Intrinsic.Control.EndIf	
							f.Data.DataView.Close("CHILD","vNormal")
						f.Intrinsic.Control.EndIf
					f.Intrinsic.Control.EndIf						
					
				
				f.Intrinsic.Control.EndIf			
			
			f.Intrinsic.Control.EndIf
					
			'close the form
			gui.NonInv..Visible(False)			
			gui.Form.frInsertType.Visible(True)
			
			f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1,or,v.DataTable.CHILD.RowCount,=,2)
				v.Local.bAboveException.Set(True)
			f.Intrinsic.Control.EndIf		
					
			gui.Form.GGC_Bom.SuspendLayout
			f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)
			f.Data.DataTable.AcceptChanges("CHILD")
			
			'now we have the target sequence
			f.Intrinsic.Control.If(v.Screen.NonInv!optNonInvInsertAbove.Value,=,True)
				v.Local.iSeqSort.Set(-1)
			f.Intrinsic.Control.Else	
				v.Local.iSeqSort.Set(1)
			f.Intrinsic.Control.EndIf	
				
			'Get next Serie
			f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
			f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)	
			'Add Row
			v.Local.fCost.Set(v.Screen.NonInv!txtCost.Text.Trim)
			v.Local.fQty.Set(v.Screen.NonInv!txtQty.Text.Trim)
			f.Data.DataTable.AddRow("CHILD","BPARENT",v.Local.sParent,"DESCR_BP",V.Screen.Form!txtFocusDescr.text, "RTR_SEQ",v.Local.sTargetSeq, "PART",v.Local.sPart, "DESCRIPTION", v.Screen.NonInv!txtDescr.text, "DESCRIPTION_2", V.Screen.NonInv!txtDescr2.TEXT, "DESCRIPTION_3", V.Screen.NonInv!txtDescr3.TEXT, "UM", v.Screen.NonInv!txtUM.text,"PL",V.Screen.NonInv!txtPL.text,"LMO","M","SOURCE_CODE",V.Local.sSource,"SOURCE",v.Screen.NonInv!ddlSource.Text.Trim,"Category",v.Screen.NonInv!ddlCategory.Text.Trim,"CAT_CODE",V.Local.sCategory,"Serie",v.Local.iSerie,"SeqSort",v.Local.iSeqSort,"Cost",v.Local.fCost,"Qty",v.Local.fQty,"Sort_Code",v.Local.sSort,"MQD",v.Dictionary.dictMQD![v.Local.sPart.Trim])	
			f.Data.DataTable.AcceptChanges("CHILD")					
			
			f.Intrinsic.Control.If(v.Global.bBindCutList)
				f.Intrinsic.Control.CallSub(Bind_AddedMaterial_Cutlist,"BParent",v.Local.sParent,"Part",v.Local.sPart,"Serie",V.Local.iSerie)
			f.Intrinsic.Control.EndIf
			
			'Determine to resequence
						
			'Insert case:  Non Manufacture part
			f.Intrinsic.Control.If(v.Local.sSource,<>,"M",and,v.Local.sSource,<>,"F")
				'No need to resequence if it is Manual Insert
				F.Intrinsic.Control.If(v.Screen.NonInv!optNonInvInsertManual.Value,=,False)
					'Insert Below case we will ReseqStartFrom_Normal
					f.Intrinsic.Control.If(v.Screen.NonInv!optNonInvInsertBelow.Value)
						f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.Local.sTargetSeq)		
					'Insert Above case
					f.Intrinsic.Control.Else
						f.Intrinsic.Control.If(v.Local.bAboveException.Not)		
							F.Intrinsic.String.Build("RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
							f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
							F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
								f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
									f.Intrinsic.Control.CallSub(ReSeqNormals)						
								f.Intrinsic.Control.Else	
									f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
								f.Intrinsic.Control.EndIf					
							f.Intrinsic.Control.Else
								f.Intrinsic.Control.CallSub(ReSeqNormals)
							F.Intrinsic.Control.EndIf
							f.Data.DataView.Close("CHILD","vAbove")		
						
						f.Intrinsic.Control.Else
							f.Intrinsic.Control.CallSub(ReSeqNormals)
						f.Intrinsic.Control.EndIf
			
					f.Intrinsic.Control.EndIf
					
				F.Intrinsic.Control.EndIf			
			
			'Insert case: Manufacture part at 99XXXXs
			f.Intrinsic.Control.Else
	
				'No need to resequence if it is Manual Insert
				F.Intrinsic.Control.If(v.Screen.NonInv!optNonInvInsertManual.Value,=,False)
					'Insert Below case we will ReSeqStartFrom_99s
					f.Intrinsic.Control.If(v.Screen.NonInv!optNonInvInsertBelow.Value)
						f.Intrinsic.Control.CallSub(ReSeqStartFrom_99s,"sFromSeq",v.Local.sTargetSeq)		
					'Insert Above case
					f.Intrinsic.Control.Else
						f.Intrinsic.Control.If(v.Local.bAboveException.Not)		
							F.Intrinsic.String.Build("RTR_Seq >= '990000' and  RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
							f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
							F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
								f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
									f.Intrinsic.Control.CallSub(Reseq99s)						
								f.Intrinsic.Control.Else	
									f.Intrinsic.Control.CallSub(ReSeqStartFrom_99s,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
								f.Intrinsic.Control.EndIf					
							f.Intrinsic.Control.Else
								f.Intrinsic.Control.CallSub(Reseq99s)
							F.Intrinsic.Control.EndIf
							f.Data.DataView.Close("CHILD","vAbove")		
						
						f.Intrinsic.Control.Else
							f.Intrinsic.Control.CallSub(Reseq99s)
						f.Intrinsic.Control.EndIf
			
					f.Intrinsic.Control.EndIf
					
				F.Intrinsic.Control.EndIf			
			
			f.Intrinsic.Control.EndIf
						
			'@holder1
			f.Data.DataTable.AcceptChanges("CHILD")	
			gui.Form.GGC_Bom.ResumeLayout
			
			v.Global.bRouterChanged.Set(True)
			
			'pass required values to create inventory part			
			f.Intrinsic.Control.If(v.Screen.NonInv!txtNoSave.Text.Trim,=,"")
				F.Intrinsic.Control.CallSub(createInventory_Part,"PART",v.Local.sPart,"UM",v.Screen.NonInv!txtUM.text,"DESC",v.Screen.NonInv!txtDescr.text,"PL",V.Screen.NonInv!txtPL.text,"SOURCE",V.Local.sSource,"ALT1",V.Screen.NonInv!txtDescr2.TEXT,"ALT2",V.Screen.NonInv!txtDescr3.TEXT,"PRICE","0.00","Location",v.Screen.NonInv!ddlNewPartLoc.Text.Trim,"Code_Sort",v.Local.sSort,"ExtraText",v.Screen.NonInv!txtExtra.Text)					
			F.Intrinsic.Control.Else
				gui.NonInv.txtNoSave.Text("")
			f.Intrinsic.Control.EndIf				
					
		F.Intrinsic.Control.Case("NEW")
			'Check if this is an existing Bom/router
			f.Intrinsic.String.GSSPartString(V.Screen.NonInv!txtPart.TEXT,v.Screen.NonInv!txtRev.TEXT,v.Local.sPart)
			f.Intrinsic.String.Build("Select Router From Router_header where Router = '{0}'",v.Local.sPart,v.Local.sSQL)
			f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
			f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				F.Intrinsic.UI.Msgbox("Router exists!","Invalid")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				gui.NonInv.txtPart.SetFocus
				gui.NonInv..Enabled(True)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
			
			f.Intrinsic.String.Build("Select Part From Bom_MSTR where Part = '{0}' AND SEQUENCE_BOM = '0000' ",v.Local.sPart,v.Local.sSQL)
			f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
			f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				F.Intrinsic.UI.Msgbox("Bom exists!","Invalid")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				gui.NonInv.txtPart.SetFocus
				gui.NonInv..Enabled(True)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf	
		
			gui.NonInv..Visible(False)	
			gui.Form.frInsertType.Visible(True)
			
			'get the values back from the pop form
			f.Intrinsic.Control.BlockEvents
			gui.Form.txtFocusParent.Text(V.Screen.NonInv!txtPart.TEXT)
			gui.Form.txtFocusRev.Text(v.Screen.NonInv!txtRev.TEXT)
			gui.Form.txtFocusDescr.Text(V.Screen.NonInv!txtDescr.TEXT)
			gui.Form.txtDescr2.Text(V.Screen.NonInv!txtDescr2.TEXT)
			gui.Form.txtDescr3.Text(V.Screen.NonInv!txtDescr3.TEXT)
			gui.Form.txtUM.Text(V.Screen.NonInv!txtUM.TEXT.Trim)
			gui.Form.txtPL.Text(v.Screen.NonInv!txtPL.TEXT)
			gui.Form.txtRTRExtraDescr.Text(v.Screen.NonInv!txtExtra.Text)
			gui.Form.txtPartID.Text(v.Screen.NonInv!ddlNewPartLoc.Text.Trim)
			f.Intrinsic.Control.UnBlockEvents
			'add the PARENT row to CHILD
			f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.text,v.Screen.Form!txtFocusRev.text,v.Local.sPart)
			f.Intrinsic.Control.CallSub(Enable_Disable_Router_Bom_PartHead,"ActiveFlag","Disable")
			F.Intrinsic.Control.If(V.DataTable.CHILD.RowCount,=,0)
			
				'No need...Get next Serie as it is the first sequence			
				F.Data.DataTable.AddRow("CHILD","BPARENT",V.Local.sPart,"DESCR_BP",v.Screen.Form!txtFocusDescr.text,"RTR_SEQ","000000","BOM_SEQ","0000", "PART",V.Local.sPart,"DESCRIPTION",V.Screen.Form!txtFocusDescr.text, "DESCRIPTION_2",V.Screen.NonInv!txtDescr2.text,"DESCRIPTION_3",V.Screen.NonInv!txtDescr3.TEXT,"COMMENTS",V.Screen.NonInv!txtExtra.text, "PL",V.Screen.Form!txtPL.TEXT,"UM",V.Screen.Form!txtUM.TEXT, "LMO","M","TIER","0","CTIER","0","SOURCE_CODE",V.Local.sSource,"CAT_CODE",V.Local.sCategory,"SOURCE",v.Screen.NonInv!ddlSource.Text.Trim,"Category",v.Screen.NonInv!ddlCategory.Text.Trim,"Sort_Code",v.Local.sSort,"MQD",v.Dictionary.dictMQD![V.Local.sPart.Trim])
				
				v.Global.bRouterChanged.Set(True)				
				'pass required values to create inventory part				
				f.Intrinsic.Control.If(v.Screen.NonInv!txtNoSave.Text.Trim,=,"")
					F.Intrinsic.Control.CallSub(createInventory_Part,"PART",v.Local.sPart,"UM",v.Screen.NonInv!txtUM.text,"DESC",v.Screen.NonInv!txtDescr.text,"PL",V.Screen.NonInv!txtPL.text,"SOURCE",V.Local.sSource,"ALT1",V.Screen.NonInv!txtDescr2.TEXT,"ALT2",V.Screen.NonInv!txtDescr3.TEXT,"PRICE","0.00","Location",v.Screen.NonInv!ddlNewPartLoc.Text.Trim,"Code_Sort",v.Local.sSort,"ExtraText",v.Screen.NonInv!txtExtra.Text)
				F.Intrinsic.Control.Else
					gui.NonInv.txtNoSave.Text("")
				f.Intrinsic.Control.EndIf	
				
				f.Data.DataTable.AddRow("BUILDQTY","Part",V.Local.sPart,"QUANTITY",1)
				
				'Save Main Router and Commit to Bom
				f.Intrinsic.Control.CallSub(Update_Header_To_Child_Bom)
				f.Intrinsic.Control.CallSub(Commit_MainGrid_To_Bom,"bFromCreateSubcomponent",True)
				f.Intrinsic.Control.BlockEvents
					gui.Form.ddlBomSource.Text(v.Screen.NonInv!ddlSource.Text.Trim)
				f.Intrinsic.Control.UnBlockEvents
				'Save Bom to GSS	
				f.Intrinsic.Control.CallSub(cmdSaveBomToGSS_Click)
				
			F.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.Case("BOMCOPY")
			f.Intrinsic.String.GSSPartString(v.Screen.NonInv!txtPart.text,V.Screen.NonInv!txtRev.text,v.Local.sPart)
			GUI.POPBOM.GGC_BOMDTL.GetSelectedRows("gvParents",V.Local.iRow)
			f.Data.DataTable.SetValue("PARENTS",V.Local.iRow,"NEWPARENT",v.Screen.NonInv!txtPart.text,"REV",v.Screen.NonInv!txtRev.text,"DESCRIPTION",V.Screen.NonInv!txtDescr.text,"INVPART",V.Local.sPart)
		
			f.Intrinsic.Control.If(v.Screen.NonInv!txtNoSave.Text.Trim,=,"")
				F.Intrinsic.Control.CallSub(createInventory_Part,"PART",V.Local.sPart,"UM",V.Screen.NonInv!txtUM.text,"DESC",V.Screen.NonInv!txtDescr.text,"PL",V.Screen.NonInv!txtPL.text,"SOURCE",V.Local.sSource,"ALT1",V.Screen.NonInv!txtDescr2.text,"ALT2",V.Screen.NonInv!txtDescr3.text,"PRICE","0.00","Location",v.Screen.NonInv!ddlNewPartLoc.Text.Trim,"Code_Sort",v.Local.sSort,"ExtraText",v.Screen.NonInv!txtExtra.Text)
			F.Intrinsic.Control.Else
				gui.NonInv.txtNoSave.Text("")
			f.Intrinsic.Control.EndIf	
			
		f.Intrinsic.Control.CaseElse
			gui.NonInv..Visible(False)
			gui.Form.frInsertType.Visible(True)
			
	F.Intrinsic.Control.EndSelect
	
	gui.NonInv.txtNoSave.Text("")
	gui.NonInv.cmdBrowseInv.Visible(False)
	
	gui.Form..Enabled(True)
	f.Data.DataView.SetFilter("Child","V_Child","RTR_SEq <> '000000' AND Part <> '~~~@!@~~~@!@'")
	f.Data.DataView.SetSort("Child","V_Child","RTR_Seq")
	gui.Form.GGC_Bom.MainView("GV_CHILD")
	
	f.Intrinsic.Control.If(v.Screen.NonInv!txtType.Text,=,"INSERT")
		Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
		gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)
	f.Intrinsic.Control.EndIf	
	
	'this form has some "change" events active	
	f.Intrinsic.Control.BlockEvents
	'clear the NonInv form for next time
	gui.NonInv..ClearGroup(1)
	gui.NonInv.ddlCategory.ClearItems
	gui.NonInv.ddlSource.ClearItems
	f.Intrinsic.Control.UnBlockEvents	
	
	gui.NonInv..Enabled(True)
	gui.Form..AlwaysOnTop(True)
	gui.Form..AlwaysOnTop(False)	
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdOK_Click.End

Program.Sub.Process_MoveSeq.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sPart.Declare
	v.Local.sCat_Code.Declare
	V.Local.sFilter.Declare	
	v.Local.sHold.Declare
	v.Local.iSerie.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sRTR_Seq_ColIndex.Declare	
	v.Local.sSource_Code.Declare
	v.Local.fQty.Declare
	v.Local.sSQL.Declare
	v.Local.iCnt.Declare
	v.Local.iInner.Declare	
	v.Local.fHold.Declare
	v.Local.sDescr.Declare
	
	v.Local.sMsg.Declare
	v.Local.iRet.Declare
	v.Local.sRet.Declare
	v.Local.sRev.Declare
	v.Local.sCost.Declare
	v.Local.sFlag.Declare
	v.Local.sLoc.Declare
	v.Local.sDescription.Declare
	v.Local.sUM.Declare
	v.Local.sPL.Declare
	v.Local.sSource.Declare
	v.Local.sBomSeq.Declare
	v.Local.sDate.Declare
	v.Local.sTime.Declare
	v.Local.sMap.Declare
	v.Local.sSort.Declare
	
	'made the part has a valid source and category
	f.Intrinsic.Control.If(v.Screen.NonInv!ddlSource.text,=,"SOURCE",Or,V.Screen.NonInv!ddlCategory.TEXT,=,"CATEGORY")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select a category and source","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.ddlSource.SetFocus
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate UM
	f.Intrinsic.Control.If(v.Screen.NonInv!txtUM.text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select a UM and source","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.txtUM.SetFocus
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate PL
	f.Intrinsic.Control.If(v.Screen.NonInv!txtPL.text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select a PL and source","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.txtPL.SetFocus
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(v.Screen.NonInv!ddlSource.text,<>,"MFG-STOCK",and,v.Screen.NonInv!ddlSource.Text,<>,"MFG-JOB")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Router must be MFG-STOCK or MFG-JOB.","Invalid Source")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.ddlSource.SetFocus
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	
	'Prepare
	f.Intrinsic.String.GSSPartString(v.Screen.NonInv!txtPart.text,V.Screen.NonInv!txtRev.text,v.Local.sPart)	

	'Check if the Bom has a child is also a parent which causes infinite loop
	f.Intrinsic.String.Build(" = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sFilter)
	f.Intrinsic.Control.CallSub(Check_Child_Is_Parent,"sFilter",v.Local.sFilter)
	f.Intrinsic.Control.If(v.Args.iChildIsParent,>,1)
		f.Intrinsic.String.Build("Bom '{0}' has child the same as parent. Please contact GSS to fix at database level.",v.Local.sPart,v.Local.sMsg)
		f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Fatal Issue")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	v.Global.bPassedNonInvScreen.Set(True)
	
	f.Data.Dictionary.ReturnKeyFromValue("SOURCE",V.Screen.NonInv!ddlSource.TEXT,False,V.Local.sSource_Code)	
	F.Data.Dictionary.ReturnKeyFromValue("CATEGORY",V.Screen.NonInv!ddlCategory.Text,False,v.Local.sCat_Code)

	'Create parent record 000000 for subcomponent
	f.Data.DataTable.AddRow("CHILDCUT","BPARENT",v.Local.sPart,"DESCR_BP",v.Screen.NonInv!txtDescr.text, "RTR_SEQ","000000", "PART", v.Local.sPart, "DESCRIPTION", v.Screen.NonInv!txtDescr.text, "DESCRIPTION_2", V.Screen.NonInv!txtDescr2.TEXT, "DESCRIPTION_3", V.Screen.NonInv!txtDescr3.TEXT, "UM", v.Screen.NonInv!txtUM.text,"PL",V.Screen.NonInv!txtPL.text,"LMO","M","SOURCE_CODE",V.Local.sSource_Code,"SOURCE",v.Screen.NonInv!ddlSource.Text.Trim,"Category",v.Screen.NonInv!ddlCategory.Text.Trim,"CAT_CODE",V.Local.sCat_Code,"Serie",0,"SeqSort",0)

	f.Data.DataTable.MoveRow("CHILDCut",v.DataTable.ChildCut.RowCount--,0)
	f.Data.DataTable.AcceptChanges("ChildCut")

	f.Data.DataTable.SetValue("ChildCut",-1,"BParent",v.Local.sPart,"Descr_BP",v.Screen.NonInv!txtDescr.text)
	
	'Create Router	
	'Resequence ChildCut before saving
	f.Data.DataTable.SetSeries("ChildCut","RTR_SEQ_NUM",0,v.Global.iRSeq)
	f.Data.DataTable.SetValueFormat("ChildCut",-1,"RTR_SEQ_NUM","RTR_SEQ","000000")

	'Save Cutlist Router Core side
	f.Intrinsic.Control.CallSub(BuildCutListRouter_CoreSide,"sPart",v.Local.sPart)
		
	f.Intrinsic.Control.If(v.Args.sRouterUpload,=,"Failed")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Router Upload for Move Seq failed","")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf

	'pass required values to create inventory part
	f.Intrinsic.String.Split(v.Screen.NonInv!cboSort.text.Trim,v.Local.sSort)
	v.Local.sSort.Set(v.Local.sSort(0).Trim)
	F.Intrinsic.Control.CallSub(createInventory_Part,"PART",v.Local.sPart,"UM",v.Screen.NonInv!txtUM.text,"DESC",v.Screen.NonInv!txtDescr.text,"PL",V.Screen.NonInv!txtPL.text,"SOURCE",V.Local.sSource_Code,"ALT1",V.Screen.NonInv!txtDescr2.TEXT,"ALT2",V.Screen.NonInv!txtDescr3.TEXT,"PRICE","0.00","Location",v.Screen.NonInv!ddlNewPartLoc.Text.Trim,"Code_Sort",v.Local.sSort,"ExtraText",v.Screen.NonInv!txtExtra.Text)

	'Prepare for appending Bom Record
	f.Data.DataView.SetFilter("Child","vMoveSeq","SelectSeq = 1 and RTR_Seq > '000000' and LMO = 'M'")
	f.Intrinsic.Control.If(v.DataTable.BomCutMove.Exists)
		f.Data.DataTable.Close("BomCutMove")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.ToDataTable("Child","vMoveSeq","BomCutMove",True)

	'Get current Bom node and append	
	'Get Bom
	v.Local.sDescr.Set(v.Screen.NonInv!txtDescr.Text)
	f.ODBC.Connection!conx.Execute(v.Global.sDeleteExplodeStageSQL)
	f.Intrinsic.String.Build("Insert Into GCG_4986_Stge (UserID,TRMNL,OldParent,Part,Tier,CTier,CH_Index) values ('{0}','{1}','{2}','{2}','',0,'')",v.Caller.User,v.Caller.Terminal,v.local.sPart.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)	
	f.Intrinsic.String.Build(" = '{0}'",v.local.sPart.PSQLFriendly,v.Local.sFilter)
	f.Intrinsic.Control.CallSub(Get_Bom_Mstr,"sTargetTable","Bom_Temp","sFilter",v.Local.sFilter)
	f.Intrinsic.Control.If(v.DataTable.Bom_Temp.RowCount,=,0)
		F.Data.DataTable.AddRow("Bom_Temp","BPARENT",v.local.sPart,"DESCR_BP",v.local.sDescr,"RTR_SEQ","000000","BOM_SEQ","0000", "PART",v.local.sPart,"DESCRIPTION",v.local.sDescr,"PL",v.local.sPL,"UM",v.local.sUM.left2,"TIER","0","CTIER","0","SOURCE_CODE",v.Local.sSource_Code,"CAT_CODE","N","Qty",1,"Set_up",0,"Cost",0,"Frequency",0,"Date_Start","000000","Date_Stop","000000","Cost_Date","00000000","Insert_Bom","00","Setup_Qty",0)	
	f.Intrinsic.Control.EndIf		
		
	'Get Bom Seq
	f.Data.DataTable.Compute("Bom_Temp","Max(Bom_Seq)","",v.Local.sBomSeq)
	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.BomCutMove.RowCount--,1)
		f.Intrinsic.Math.Add(v.Local.sBomSeq,v.Global.iBSeq,v.Local.sBomSeq)
		f.Intrinsic.String.LPad(v.Local.sBomSeq,"0",4,v.Local.sBomSeq)		
		F.Data.DataTable.SetValue("BomCutMove",v.Local.iCnt,"Bom_Seq",v.Local.sBomSeq)	
	f.Intrinsic.Control.Next(v.Local.iCnt)
	
	f.Data.DataTable.Merge("BomCutMove","Bom_Temp",False,2)
	f.Data.DataTable.SetValue("Bom_Temp",-1,"BParent",v.Local.sPart,"DESCR_BP",v.local.sDescr)	

	''''''''''''''
	v.Local.sDate.Set(v.Ambient.Date.FormatYYYYMMDD)
	f.Intrinsic.String.Build("{0}00",v.Ambient.Now.FormatHHNNSS,v.Local.sTime)	
	
	'Set timestamp
	f.Data.DataTable.SetValue("Bom_Temp",-1,"Date_Maintenance",v.Local.sDate.right6,"Date_Last_Chg",v.Local.sDate,"Time_Last_Chg",v.Local.sTime,"Last_Chg_By",v.Caller.User,"Last_Chg_Prog","ESTIMATE")
	'Create Bomclicked
	f.Intrinsic.Control.If(v.DataTable.BomClicked.Exists)
		F.Data.DataTable.Close("BomClicked")
	f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.CallSub(Create_Bom_Table,"sTable","BomClicked")
	f.Data.DataTable.Merge("Bom_Temp","BomClicked",False,2)
	
	f.Intrinsic.String.Build("Delete from Bom_MSTR Where Parent = '{0}'",v.local.sPart.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)
	
	v.Local.sMap.Set("BPARENT@!@PARENT*!*Bom_seq@!@SEQUENCE_BOM*!*INSERT_BOM@!@INSERT_BOM*!*DATE_MAINTENANCE@!@DATE_MAINTENANCE*!*COST@!@COST*!*QTY@!@QUANTITY*!*PART@!@PART*!*DATE_START@!@DATE_START*!*DATE_STOP@!@DATE_STOP*!*BM_SERIAL_START@!@BM_SERIAL_START*!*BM_SERIAL_STOP@!@BM_SERIAL_STOP*!*UM@!@UM_INVENTORY*!*PURGE_FLAG@!@PURGE_FLAG*!*ORDR_USR_FLAG@!@ORDR_USR_FLAG*!*QUANTITY_6@!@QUANTITY_6*!*DRAWING@!@DRAWING*!*TAG@!@TAG*!*CAT_CODE@!@CATEGORY*!*SOURCE_CODE@!@SOURCE*!*FREQUENCY@!@FREQUENCY*!*DATE_LAST_CHG@!@DATE_LAST_CHG*!*TIME_LAST_CHG@!@TIME_LAST_CHG*!*LAST_CHG_BY@!@LAST_CHG_BY*!*LAST_CHG_PROG@!@LAST_CHG_PROG*!*DRAWING_SIZE@!@DRAWING_SIZE*!*REQ_TRACE@!@REQ_TRACE*!*COST_DATE@!@COST_DATE*!*COMPLETE@!@BOM_COMPLETE*!*INACTIVE@!@INACTIVE*!*SETUP_QTY@!@SETUP_QTY")
	f.Data.DataTable.SaveToDB("BomClicked","conx","Bom_MSTR","",128,v.Local.sMap)
	f.Data.DataTable.Close("BomClicked")
	f.Data.DataTable.Close("Bom_Temp")
	
	'Save to Bom_Eng
	f.Intrinsic.String.Build("Select * from Bom_Eng where Part = '{0}' and Location = ''",v.local.sPart.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		f.Intrinsic.String.Build("Update Bom_Eng set Description = '{1}', Is_Parent = 'Y' where Part = '{0}' and Location = ''",v.local.sPart.PSQLFriendly,v.local.sDescr.PSQLFriendly,v.Local.sSQL)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("Insert into Bom_Eng (Part,Location,Description,Is_Parent,Date_Revision) values ('{0}','','{1}','Y','000000')",v.local.sPart.PSQLFriendly,v.local.sDescr.PSQLFriendly,v.Local.sSQL)	
	f.Intrinsic.Control.EndIf
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)		
	
	'Delete Selected seq
	f.Data.DataView.SetFilter("Child","vMoveSeq","SelectSeq = 1")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.Child!vMoveSeq.RowCount--,0,-1)
		f.Data.DataView.DeleteRow("Child","vMoveSeq",v.Local.iCnt)
	f.Intrinsic.Control.Next(v.Local.iCnt)
	f.Data.DataTable.AcceptChanges("Child")		
	
	f.Data.DataView.Close("Child","vMoveSeq")
	
	'Save Main Router and Commit to Bom
	f.Intrinsic.Control.CallSub(Update_Header_To_Child_Bom)
	f.Intrinsic.Control.CallSub(Commit_MainGrid_To_Bom,"bFromCreateSubcomponent",True)
	'Save Bom to GSS	
	f.Intrinsic.Control.CallSub(cmdSaveBomToGSS_Click)
	
	gui.Form..Enabled(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Process_MoveSeq.End

Program.Sub.Process_MoveSeq_WithCutlist_Option.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sPart.Declare
	v.Local.sCat_Code.Declare
	V.Local.sFilter.Declare	
	v.Local.sHold.Declare
	v.Local.iSerie.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sRTR_Seq_ColIndex.Declare	
	v.Local.sSource_Code.Declare
	v.Local.fQty.Declare
	v.Local.sSQL.Declare
	v.Local.iCnt.Declare
	v.Local.iInner.Declare	
	v.Local.fHold.Declare
	v.Local.sDescr.Declare
	
	v.Local.sMsg.Declare
	v.Local.iRet.Declare
	v.Local.sRet.Declare
	v.Local.sRev.Declare
	v.Local.sCost.Declare
	v.Local.sFlag.Declare
	v.Local.sLoc.Declare
	v.Local.sDescription.Declare
	v.Local.sUM.Declare
	v.Local.sPL.Declare
	v.Local.sSource.Declare
	v.Local.sBomSeq.Declare
	v.Local.sDate.Declare
	v.Local.sTime.Declare
	v.Local.sMap.Declare
	v.Local.sRow.Declare
	v.Local.sParent.Declare
	v.Local.sSort.Declare
	
	'made the part has a valid source and category
	f.Intrinsic.Control.If(v.Screen.NonInv!ddlSource.text,=,"SOURCE",Or,V.Screen.NonInv!ddlCategory.TEXT,=,"CATEGORY")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select a category and source","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.ddlSource.SetFocus
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate UM
	f.Intrinsic.Control.If(v.Screen.NonInv!txtUM.text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select a UM and source","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.txtUM.SetFocus
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate PL
	f.Intrinsic.Control.If(v.Screen.NonInv!txtPL.text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select a PL and source","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.txtPL.SetFocus
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(v.Screen.NonInv!ddlSource.text,<>,"MFG-STOCK",and,v.Screen.NonInv!ddlSource.Text,<>,"MFG-JOB")
		F.Intrinsic.UI.Msgbox("Router must be MFG-STOCK or MFG-JOB.","Invalid Source")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.ddlSource.SetFocus
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	
	'Prepare
	f.Intrinsic.String.GSSPartString(v.Screen.NonInv!txtPart.text,V.Screen.NonInv!txtRev.text,v.Local.sPart)	

	'Check if the Bom has a child is also a parent which causes infinite loop
	f.Intrinsic.String.Build(" = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sFilter)
	f.Intrinsic.Control.CallSub(Check_Child_Is_Parent,"sFilter",v.Local.sFilter)
	f.Intrinsic.Control.If(v.Args.iChildIsParent,>,1)
		f.Intrinsic.String.Build("Bom '{0}' has child the same as parent. Please contact GSS to fix at database level.",v.Local.sPart,v.Local.sMsg)
		f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Fatal Issue")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		
	
	v.Global.bPassedNonInvScreen.Set(True)
	
	'Prepare	
	f.Data.Dictionary.ReturnKeyFromValue("SOURCE",V.Screen.NonInv!ddlSource.TEXT,False,V.Local.sSource_Code)	
	F.Data.Dictionary.ReturnKeyFromValue("CATEGORY",V.Screen.NonInv!ddlCategory.Text,False,v.Local.sCat_Code)

	'Create parent record 000000 for subcomponent
	f.Data.DataTable.AddRow("CHILDCUT","BPARENT",v.Local.sPart,"DESCR_BP",v.Screen.NonInv!txtDescr.text, "RTR_SEQ","000000", "PART", v.Local.sPart, "DESCRIPTION", v.Screen.NonInv!txtDescr.text, "DESCRIPTION_2", V.Screen.NonInv!txtDescr2.TEXT, "DESCRIPTION_3", V.Screen.NonInv!txtDescr3.TEXT, "UM", v.Screen.NonInv!txtUM.text,"PL",V.Screen.NonInv!txtPL.text,"LMO","M","SOURCE_CODE",V.Local.sSource_Code,"SOURCE",v.Screen.NonInv!ddlSource.Text.Trim,"Category",v.Screen.NonInv!ddlCategory.Text.Trim,"CAT_CODE",V.Local.sCat_Code,"Serie",0,"SeqSort",0)

	f.Data.DataTable.MoveRow("CHILDCut",v.DataTable.ChildCut.RowCount--,0)
	f.Data.DataTable.AcceptChanges("ChildCut")

	f.Data.DataTable.SetValue("ChildCut",-1,"BParent",v.Local.sPart,"Descr_BP",v.Screen.NonInv!txtDescr.text)
	
	'Create Router	
	'Resequence ChildCut before saving
	f.Data.DataTable.SetSeries("ChildCut","RTR_SEQ_NUM",0,v.Global.iRSeq)
	f.Data.DataTable.SetValueFormat("ChildCut",-1,"RTR_SEQ_NUM","RTR_SEQ","000000")

	'Save Cutlist Router Core side
	f.Intrinsic.Control.CallSub(BuildCutListRouter_CoreSide,"sPart",v.Local.sPart)
	f.Intrinsic.Control.If(v.Args.sRouterUpload,=,"Failed")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Router Upload for Move Seq failed","")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	

	'pass required values to create inventory part
	f.Intrinsic.String.Split(v.Screen.NonInv!cboSort.Text.Trim,"|",v.Local.sSort)
	v.Local.sSort.Set(v.Local.sSort(0).Trim)
	F.Intrinsic.Control.CallSub(createInventory_Part,"PART",v.Local.sPart,"UM",v.Screen.NonInv!txtUM.text,"DESC",v.Screen.NonInv!txtDescr.text,"PL",V.Screen.NonInv!txtPL.text,"SOURCE",V.Local.sSource_Code,"ALT1",V.Screen.NonInv!txtDescr2.TEXT,"ALT2",V.Screen.NonInv!txtDescr3.TEXT,"PRICE","0.00","Location",v.Screen.NonInv!ddlNewPartLoc.Text.Trim,"Code_Sort",v.Local.sSort,"ExtraText",v.Screen.NonInv!txtExtra.Text)

	'Prepare for appending Bom Record
	f.Data.DataView.SetFilter("Child","vMoveSeq","SelectSeq = 1 and RTR_Seq > '000000' and LMO = 'M'")
	f.Intrinsic.Control.If(v.DataTable.BomCutMove.Exists)
		f.Data.DataTable.Close("BomCutMove")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.ToDataTable("Child","vMoveSeq","BomCutMove",True)

	'Get current Bom node and append	
	'Get Bom
	v.Local.sDescr.Set(v.Screen.NonInv!txtDescr.Text)
	f.ODBC.Connection!conx.Execute(v.Global.sDeleteExplodeStageSQL)
	f.Intrinsic.String.Build("Insert Into GCG_4986_Stge (UserID,TRMNL,OldParent,Part,Tier,CTier,CH_Index) values ('{0}','{1}','{2}','{2}','',0,'')",v.Caller.User,v.Caller.Terminal,v.local.sPart.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)	
	f.Intrinsic.String.Build(" = '{0}'",v.local.sPart.PSQLFriendly,v.Local.sFilter)
	f.Intrinsic.Control.CallSub(Get_Bom_Mstr,"sTargetTable","Bom_Temp","sFilter",v.Local.sFilter)
	f.Intrinsic.Control.If(v.DataTable.Bom_Temp.RowCount,=,0)
		F.Data.DataTable.AddRow("Bom_Temp","BPARENT",v.local.sPart,"DESCR_BP",v.local.sDescr,"RTR_SEQ","000000","BOM_SEQ","0000", "PART",v.local.sPart,"DESCRIPTION",v.local.sDescr,"PL",v.local.sPL,"UM",v.local.sUM.left2,"TIER","0","CTIER","0","SOURCE_CODE",v.Local.sSource_Code,"CAT_CODE","N","Qty",1,"Set_up",0,"Cost",0,"Frequency",0,"Date_Start","000000","Date_Stop","000000","Cost_Date","00000000","Insert_Bom","00","Setup_Qty",0)	
	f.Intrinsic.Control.EndIf		
		
	'Get Bom Seq
	f.Data.DataTable.Compute("Bom_Temp","Max(Bom_Seq)","",v.Local.sBomSeq)
	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.BomCutMove.RowCount--,1)
		f.Intrinsic.Math.Add(v.Local.sBomSeq,v.Global.iBSeq,v.Local.sBomSeq)
		f.Intrinsic.String.LPad(v.Local.sBomSeq,"0",4,v.Local.sBomSeq)		
		F.Data.DataTable.SetValue("BomCutMove",v.Local.iCnt,"Bom_Seq",v.Local.sBomSeq)	
	f.Intrinsic.Control.Next(v.Local.iCnt)
	
	f.Data.DataTable.Merge("BomCutMove","Bom_Temp",False,2)
	f.Data.DataTable.SetValue("Bom_Temp",-1,"BParent",v.Local.sPart,"DESCR_BP",v.local.sDescr)	

	''''''''''''''
	v.Local.sDate.Set(v.Ambient.Date.FormatYYYYMMDD)
	f.Intrinsic.String.Build("{0}00",v.Ambient.Now.FormatHHNNSS,v.Local.sTime)	
	
	'Set timestamp
	f.Data.DataTable.SetValue("Bom_Temp",-1,"Date_Maintenance",v.Local.sDate.right6,"Date_Last_Chg",v.Local.sDate,"Time_Last_Chg",v.Local.sTime,"Last_Chg_By",v.Caller.User,"Last_Chg_Prog","ESTIMATE")
	'Create Bomclicked
	f.Intrinsic.Control.If(v.DataTable.BomClicked.Exists)
		F.Data.DataTable.Close("BomClicked")
	f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.CallSub(Create_Bom_Table,"sTable","BomClicked")
	f.Data.DataTable.Merge("Bom_Temp","BomClicked",False,2)
	
	f.Intrinsic.String.Build("Delete from Bom_MSTR Where Parent = '{0}'",v.local.sPart.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)
	
	v.Local.sMap.Set("BPARENT@!@PARENT*!*Bom_seq@!@SEQUENCE_BOM*!*INSERT_BOM@!@INSERT_BOM*!*DATE_MAINTENANCE@!@DATE_MAINTENANCE*!*COST@!@COST*!*QTY@!@QUANTITY*!*PART@!@PART*!*DATE_START@!@DATE_START*!*DATE_STOP@!@DATE_STOP*!*BM_SERIAL_START@!@BM_SERIAL_START*!*BM_SERIAL_STOP@!@BM_SERIAL_STOP*!*UM@!@UM_INVENTORY*!*PURGE_FLAG@!@PURGE_FLAG*!*ORDR_USR_FLAG@!@ORDR_USR_FLAG*!*QUANTITY_6@!@QUANTITY_6*!*DRAWING@!@DRAWING*!*TAG@!@TAG*!*CAT_CODE@!@CATEGORY*!*SOURCE_CODE@!@SOURCE*!*FREQUENCY@!@FREQUENCY*!*DATE_LAST_CHG@!@DATE_LAST_CHG*!*TIME_LAST_CHG@!@TIME_LAST_CHG*!*LAST_CHG_BY@!@LAST_CHG_BY*!*LAST_CHG_PROG@!@LAST_CHG_PROG*!*DRAWING_SIZE@!@DRAWING_SIZE*!*REQ_TRACE@!@REQ_TRACE*!*COST_DATE@!@COST_DATE*!*COMPLETE@!@BOM_COMPLETE*!*INACTIVE@!@INACTIVE*!*SETUP_QTY@!@SETUP_QTY")
	f.Data.DataTable.SaveToDB("BomClicked","conx","Bom_MSTR","",128,v.Local.sMap)
	f.Data.DataTable.Close("BomClicked")
	f.Data.DataTable.Close("Bom_Temp")
	
	'Save to Bom_Eng
	f.Intrinsic.String.Build("Select * from Bom_Eng where Part = '{0}' and Location = ''",v.local.sPart.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		f.Intrinsic.String.Build("Update Bom_Eng set Description = '{1}', Is_Parent = 'Y' where Part = '{0}' and Location = ''",v.local.sPart.PSQLFriendly,v.local.sDescr.PSQLFriendly,v.Local.sSQL)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("Insert into Bom_Eng (Part,Location,Description,Is_Parent,Date_Revision) values ('{0}','','{1}','Y','000000')",v.local.sPart.PSQLFriendly,v.local.sDescr.PSQLFriendly,v.Local.sSQL)	
	f.Intrinsic.Control.EndIf
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)	

	'First delete relating serie for CHILD$CUTLIST	
	f.Intrinsic.Control.For(v.Local.iInner,v.DataView.Child$CutList!vGetSerie.RowCount--,0,-1)
		f.Data.DataView.deleteRow("CHILD$CUTLIST","vGetSerie",v.Local.iInner)
	f.Intrinsic.Control.Next(v.Local.iInner)			
	f.Data.DataTable.AcceptChanges("CHILD$CUTLIST")
	
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.Text.Trim,v.Screen.Form!txtFocusRev.Text.Trim,v.Local.sParent)
	
	'Move Cutlist Total or Partial
	'Get selected Seq
	f.Intrinsic.Control.If(v.Global.sCutlistSeries,<>,"")
	
		f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.TotalOrPartial.RowCount--,1)
			f.Intrinsic.String.Build("Select PART,COMPONENT,JOB,SUFFIX,SEQ,CUTLIST_ITEM,Property_Code,DIMENSION_1,DIMENSION_2,DIMENSION_3,DIMENSION_4,DIMENSION_5,ANGLE_A,ANGLE_B,ANGLE_C,PIECES,SCRAP_PERCENT,DRAWING_NO,TAG_NO,WORKCENTER,EST_UM_UNITS,USQL_2ND_UM_UNITS,SCHEDULE_NO,SCHEDULE_SUFFIX,PIECES_COMPLETE,LOCATION,NEXT_WORKCTR,BUILT_FROM_BOM,FILLER from RTR_Cutlist where Part = '{0}' and Component = '{1}' and Cutlist_item in ('{2}')",v.Local.sParent,v.DataTable.TotalOrPartial(v.Local.iCnt).Component!FieldValString,v.DataTable.TotalOrPartial(v.Local.iCnt).CutListItemMove!FieldValString,v.Local.sSQL)
			f.Data.DataTable.CreateFromSQL("CutTemp","conx",v.Local.sSQL,True)
			f.Intrinsic.Control.If(v.DataTable.CutTemp.RowCount,>,0)
				f.Intrinsic.String.Build("Delete from RTR_Cutlist where Part = '{0}' and Component = '{1}' and Cutlist_item in ('{2}')",v.Local.sParent,v.DataTable.TotalOrPartial(v.Local.iCnt).Component!FieldValString,v.DataTable.TotalOrPartial(v.Local.iCnt).CutListItemMove!FieldValString,v.Local.sSQL)
				f.ODBC.Connection!conx.Execute(v.Local.sSQL)
				f.Data.DataTable.SetValue("CutTemp",-1,"Part",v.Local.sPart)
				f.Data.DataTable.SaveToDB("CutTemp","conx","RTR_Cutlist","",128,"PART@!@PART*!*COMPONENT@!@COMPONENT*!*JOB@!@JOB*!*SUFFIX@!@SUFFIX*!*SEQ@!@SEQ*!*CUTLIST_ITEM@!@CUTLIST_ITEM*!*Property_Code@!@Property_Code*!*DIMENSION_1@!@DIMENSION_1*!*DIMENSION_2@!@DIMENSION_2*!*DIMENSION_3@!@DIMENSION_3*!*DIMENSION_4@!@DIMENSION_4*!*DIMENSION_5@!@DIMENSION_5*!*ANGLE_A@!@ANGLE_A*!*ANGLE_B@!@ANGLE_B*!*ANGLE_C@!@ANGLE_C*!*PIECES@!@PIECES*!*SCRAP_PERCENT@!@SCRAP_PERCENT*!*DRAWING_NO@!@DRAWING_NO*!*TAG_NO@!@TAG_NO*!*WORKCENTER@!@WORKCENTER*!*EST_UM_UNITS@!@EST_UM_UNITS*!*USQL_2ND_UM_UNITS@!@USQL_2ND_UM_UNITS*!*SCHEDULE_NO@!@SCHEDULE_NO*!*SCHEDULE_SUFFIX@!@SCHEDULE_SUFFIX*!*PIECES_COMPLETE@!@PIECES_COMPLETE*!*LOCATION@!@LOCATION*!*NEXT_WORKCTR@!@NEXT_WORKCTR*!*BUILT_FROM_BOM@!@BUILT_FROM_BOM*!*FILLER@!@FILLER")			
			f.Intrinsic.Control.EndIf
			f.Data.DataTable.Close("CutTemp")			
		f.Intrinsic.Control.Next(v.Local.iCnt)
		
	f.Intrinsic.Control.EndIf	

	'Delete sequences
	f.Intrinsic.Control.If(v.Global.sCutlistSeries.Trim,<>,"")
		f.Intrinsic.String.Build("SelectSeq = 1 or Serie in ({0})",v.Global.sCutlistSeries,v.Local.sFilter)
	f.Intrinsic.Control.Else
		v.Global.sCutlistSeries.Set("")
		v.Local.sFilter.Set("SelectSeq = 1")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.SetFilter("Child","vMoveSeq",v.Local.sFilter)
	
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.Child!vMoveSeq.RowCount--,0,-1)
		v.Local.iSerie.Set(v.DataView.Child!vMoveSeq(v.Local.iCnt).Serie!FieldValString)
		f.Intrinsic.String.Build("Serie = '{0}'",v.Local.iSerie,v.Local.sFilter)
		f.Data.DataTable.Select("TotalorPartial",v.Local.sFilter,v.Local.sRow)
		'Material with Cutlist selected
		f.Intrinsic.Control.If(v.Local.sRow,<>,"***NORETURN***")
			'All to move
			f.Intrinsic.Control.If(v.DataTable.TotalOrPartial(v.Local.sRow).TotalCountPerSerie!FieldValString,=,v.DataTable.TotalOrPartial(v.Local.sRow).TotalCountCutListMove!FieldValString)
				f.Data.DataView.DeleteRow("Child","vMoveSeq",v.Local.iCnt)
			'Partial move, so reset the material seq	
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.If(v.DataTable.TotalOrPartial(v.Local.sRow).DifferenceQty!FieldValString,>,0)
					f.Data.DataView.SetValue("Child","vMoveSeq",v.Local.iCnt,"Qty",v.DataTable.TotalOrPartial(v.Local.sRow).DifferenceQty!FieldValString)
				f.Intrinsic.Control.Else
					f.Data.DataView.SetValue("Child","vMoveSeq",v.Local.iCnt,"Qty",0)
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
			
		'Other sequences type	
		f.Intrinsic.Control.Else
			f.Data.DataView.DeleteRow("Child","vMoveSeq",v.Local.iCnt)		
		f.Intrinsic.Control.EndIf	
		
	f.Intrinsic.Control.Next(v.Local.iCnt)
	f.Data.DataTable.AcceptChanges("Child")			
	f.Data.DataView.Close("Child","vMoveSeq")	
	
	'Save Main Router and Commit to Bom
	f.Intrinsic.Control.CallSub(Update_Header_To_Child_Bom)
	f.Intrinsic.Control.CallSub(Commit_MainGrid_To_Bom,"bFromCreateSubcomponent",True)
	'Save Bom to GSS	
	f.Intrinsic.Control.CallSub(cmdSaveBomToGSS_Click)
	
	gui.Form..Enabled(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Process_MoveSeq_WithCutlist_Option.End

Program.Sub.InsSequence.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRSeq.Declare
	V.Local.sFilter.Declare
	v.Local.iCount.Declare
	v.Local.sNewSeq.Declare
	
	v.Local.sRSeq.Set(v.Args.SEQ)
	'create a filtered view to loop through
	F.Intrinsic.String.Build("RTR_SEQ {0} '{1}' AND RTR_SEQ < '990000'",V.Args.OPERATOR,V.Local.sRSeq,V.Local.sFilter)
	
	'increase the router sequence to make room for the insterted sequences
	f.Data.DataView.Create("CHILD","V_INSEQUENCE",22,V.Local.sFilter,"RTR_SEQ DESC")
	F.Intrinsic.Control.For(V.Local.iCount,0,V.DataView.CHILD!V_INSEQUENCE.RowCount--,1)
		f.Intrinsic.Math.Add(v.DataView.CHILD!V_INSEQUENCE(v.Local.iCount).RTR_SEQ!FIELDVALLONG,V.ARGS.MULTI,V.Local.sNewSeq)
		f.Intrinsic.String.LPad(v.Local.sNewSeq,"0",6,v.Local.sNewSeq)
		f.Data.DataView.SetValue("CHILD","V_INSEQUENCE",V.Local.iCount,"RTR_SEQ",V.Local.sNewSeq)
	F.Intrinsic.Control.Next(V.Local.iCount)
	'close the view since we are done with it
	f.Data.DataView.Close("CHILD","V_INSEQUENCE")
	
	f.Intrinsic.Control.ExitSub

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.InsSequence.End

Program.Sub.createInventory_Part.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)	
	v.Local.iRet.Declare
	V.Local.sSql.Declare
	V.Local.sText.Declare
	v.Local.sPart.Declare
	v.Local.sSource.Declare
	v.Local.sFilter.Declare
	v.Local.sHold.Declare
	'pass all args to this subroutine to create the part.
	'V.Args.PART, V.Args.UM, V.Args.DESC,  V.Args.PL, V.Args.SOURCE, V.Args.ALT1, V.Args.ALT2, V.Args.PRICE	

	v.Local.sSource.Set(v.Dictionary.Source![v.Args.Source])
	f.Intrinsic.String.RPad(v.Args.PART," ",20,v.Local.sPart)
	'Update dictionaries
	f.Data.Dictionary.AddItem("PROD_LINES",v.Local.sPart.Trim,v.Args.PL)
	f.Data.Dictionary.AddItem("Part_SourceCode",v.Local.sPart.Trim,v.Args.SOURCE)
	f.Data.Dictionary.AddItem("Part_Source",v.Local.sPart.Trim,v.Local.sSource)
	f.Data.Dictionary.AddItem("dPartTrimDescription",v.Local.sPart.Trim,v.Args.DESC)	
	
	f.Intrinsic.Control.SelectCase(v.Global.iNewPart)
		f.Intrinsic.Control.Case(2)
			F.Global.Inventory.CreatePart(V.Args.PART, V.Args.UM, V.Args.DESC,v.Args.Location, V.Args.PL, V.Args.SOURCE, V.Args.ALT1, V.Args.ALT2, V.Args.PRICE, "4986")
			
			v.Local.sText.Set(v.Args.ExtraText)
			v.Local.sHold.Set(v.Local.sPart.Trim)			
			f.Intrinsic.String.Build("Trim(Part) = '{0}'",v.Local.sHold.PSQLFriendly,v.Local.sFilter)
			F.Data.DataView.Create("Material","vFindMaterial",22,v.Local.sFilter,"")
			f.Intrinsic.Control.If(v.DataView.Material!vFindMaterial.RowCount,=,0)
				f.Data.DataTable.AddRow("MATERIAL","PART",V.Local.sPart,"Location",v.Args.Location,"DESCRIPTION",V.Args.DESC,"Sort_Code",v.Args.Code_Sort.Left10,"UM",V.Args.UM,"PL",v.Args.PL,"DESCRIPTION_2",V.Args.ALT1,"DESCRIPTION_3",V.Args.ALT2,"SOURCE_CODE",V.Args.SOURCE,"Source",v.Local.sSource,"TEXT",V.Local.sText,"COST",V.Args.PRICE)			
			f.Intrinsic.Control.EndIf
			f.Data.DataView.Close("Material","vFindMaterial")
			'Get back later: update inverntory when part already exists???
						
			'fill in extra text
			f.Intrinsic.Control.If(v.Local.sText.Trim,<>,"")				
				f.Intrinsic.String.Build("select part, text from inv_extra_text where part = '{0}' ",v.Local.sPart.PSQLFriendly,v.Local.sSql)
				f.ODBC.Connection!conx.openlocalrecordsetRW("rst",v.Local.sSql)
				f.Intrinsic.Control.If(v.ODBC.conx!rst.EOF,=,True)
					f.ODBC.conx!rst.AddNew
					f.ODBC.conx!rst.Set!PART(V.Args.PART)
				f.Intrinsic.Control.EndIf
				f.ODBC.conx!rst.Set!TEXT(V.Local.sText)
				F.ODBC.conx!rst.Update
				F.ODBC.conx!rst.Close
			f.Intrinsic.Control.EndIf
			'fill in the sort code
			f.Intrinsic.Control.If(v.Args.Code_Sort.left10,<>,"SORT CODE")
				F.Intrinsic.String.Build("UPDATE INVENTORY_MSTR SET CODE_SORT = '{0}' WHERE PART = '{1}' and Location = '{2}'",v.Args.Code_Sort.left10,V.Local.sPart.PSQLFriendly,v.Args.Location,V.Local.sSql)
				F.ODBC.Connection!conx.EXECUTE(V.Local.sSql)
			f.Intrinsic.Control.EndIf
				
		f.Intrinsic.Control.Case(4)
			F.Global.Inventory.AddPartToBatch(V.Args.PART, V.Args.UM, V.Args.DESC, v.Args.Location, V.Args.PL, V.Args.SOURCE, V.Args.ALT1, V.Args.ALT2, V.Args.PRICE, "4986")
			v.Local.sText.Set(v.Args.ExtraText)
			v.Local.sHold.Set(v.Local.sPart.Trim)
			f.Intrinsic.String.Build("Trim(Part) = '{0}'",v.Local.sHold.PSQLFriendly,v.Local.sFilter)
			F.Data.DataView.Create("Material","vFindMaterial",22,v.Local.sFilter,"")
			f.Intrinsic.Control.If(v.DataView.Material!vFindMaterial.RowCount,=,0)
				f.Data.DataTable.AddRow("MATERIAL","PART",V.Local.sPart,"Location",v.Args.Location,"DESCRIPTION",V.Args.DESC,"Sort_Code",v.Args.Code_Sort.Left10,"UM",V.Args.UM,"PL",v.Args.PL,"DESCRIPTION_2",V.Args.ALT1,"DESCRIPTION_3",V.Args.ALT2,"SOURCE_CODE",V.Args.SOURCE,"Source",v.Local.sSource,"TEXT",V.Local.sText,"COST",V.Args.PRICE)		
			f.Intrinsic.Control.EndIf
			f.Data.DataView.Close("Material","vFindMaterial")
			
			'fill in extra text
			f.Intrinsic.Control.If(v.Local.sText.IsNullOrWhiteSpace,=,False)
				f.Intrinsic.String.Build("select part, text from inv_extra_text where part = '{0}'",V.Local.sPart.PSQLFriendly,v.Local.sSql)
				f.ODBC.Connection!conx.openlocalrecordsetRW("rst",v.Local.sSql)
				f.Intrinsic.Control.If(v.ODBC.conx!rst.EOF,=,True)
					f.ODBC.conx!rst.AddNew
					f.ODBC.conx!rst.Set!PART(V.Args.PART)
				f.Intrinsic.Control.EndIf
				f.ODBC.conx!rst.Set!TEXT(V.Local.sText)
				F.ODBC.conx!rst.Update
				F.ODBC.conx!rst.Close
			f.Intrinsic.Control.EndIf
			'fill in the sort code
			f.Intrinsic.Control.If(v.Args.Code_Sort.left10,<>,"SORT CODE")
				F.Intrinsic.String.Build("UPDATE INVENTORY_MSTR SET CODE_SORT = '{0}' WHERE PART = '{1}' and Location = '{2}'",v.Args.Code_Sort.left10,V.Local.sPart.PSQLFriendly,v.Args.Location,V.Local.sSql)
				F.ODBC.Connection!conx.EXECUTE(V.Local.sSql)
			f.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.Case(8)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Create Part in Inventory?","New Part",4,v.Local.iRet)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxYes)
				F.Global.Inventory.CreatePart(V.Args.PART, V.Args.UM, V.Args.DESC,v.Args.Location, V.Args.PL, V.Args.SOURCE, V.Args.ALT1, V.Args.ALT2, V.Args.PRICE, "4986")
				v.Local.sText.Set(v.Args.ExtraText)
				v.Local.sHold.Set(v.Local.sPart.Trim)
				f.Intrinsic.String.Build("Trim(Part) = '{0}'",v.Local.sHold.PSQLFriendly,v.Local.sFilter)
				F.Data.DataView.Create("Material","vFindMaterial",22,v.Local.sFilter,"")
				f.Intrinsic.Control.If(v.DataView.Material!vFindMaterial.RowCount,=,0)
					f.Data.DataTable.AddRow("MATERIAL","PART",V.Local.sPart,"Location",v.Args.Location,"DESCRIPTION",V.Args.DESC,"Sort_Code",v.Args.Code_Sort.Left10,"UM",V.Args.UM,"PL",v.Args.PL,"DESCRIPTION_2",V.Args.ALT1,"DESCRIPTION_3",V.Args.ALT2,"SOURCE_CODE",V.Args.SOURCE,"Source",v.Local.sSource,"TEXT",V.Local.sText,"COST",V.Args.PRICE)			
				f.Intrinsic.Control.EndIf
				f.Data.DataView.Close("Material","vFindMaterial")
				
				'fill in extra text
				f.Intrinsic.Control.If(v.Local.sText.IsNullOrWhiteSpace,=,False)
					f.Intrinsic.String.Build("select part, text from inv_extra_text where part = '{0}'",V.Local.sPart.PSQLFriendly,v.Local.sSql)
					f.ODBC.Connection!conx.openlocalrecordsetRW("rst",v.Local.sSql)
					f.Intrinsic.Control.If(v.ODBC.conx!rst.EOF,=,True)
						f.ODBC.conx!rst.AddNew
						f.ODBC.conx!rst.Set!PART(V.Args.PART)
					f.Intrinsic.Control.EndIf
					f.ODBC.conx!rst.Set!TEXT(V.Local.sText)
					F.ODBC.conx!rst.Update
					F.ODBC.conx!rst.Close
				f.Intrinsic.Control.EndIf
				'fill in the sort code
				f.Intrinsic.Control.If(v.Args.Code_Sort.left10,<>,"SORT CODE")
					F.Intrinsic.String.Build("UPDATE INVENTORY_MSTR SET CODE_SORT = '{0}' WHERE PART = '{1}' and Location = '{2}'",v.Args.Code_Sort.left10,V.Local.sPart.PSQLFriendly,v.Args.Location,V.Local.sSql)
					F.ODBC.Connection!conx.EXECUTE(V.Local.sSql)
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndSelect

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.createInventory_Part.End

Program.Sub.InsComment.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sPart.Declare
	v.Local.sFilter.Declare
	v.Local.sTargetRow.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sUbound.Declare
	v.Local.iSeqSort.Declare
	v.Local.sRTR_Seq_ColIndex.Declare
	v.Local.sKey.Declare
	v.Local.sHold.Declare
	v.Local.bAboveException.Declare	
	v.Local.iCount.Declare
	v.Local.iSerie.Declare
			
	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'Check: must be right click, bom complete flag not completed, user right (normal,estimator,engineer),datatable Child exist
	f.Intrinsic.Control.If(v.Global.bReadOnly,=,True,or,v.Global.iRights,<=,0,v.DataTable.CHILD.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate if Router header is created
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No router or parent part in focus.","Cannot Insert Sequence")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'If Insert Manual option is selected we don't need the user to select a row
	f.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,True)
		'Validate the sequence entered by user. If it does not exists in the current router, it is valid. Then check if is a 99XXXX sequence
		f.Intrinsic.String.LPad(v.Screen.Form!txtManualSeq.Text.Trim,"0",6,v.Local.sTargetSeq)
		f.Intrinsic.Control.If(v.Local.sTargetSeq,=,"",or,v.Local.sTargetSeq,=,"000000",v.Local.sTargetSeq,>=,990000)
			f.Intrinsic.Control.CallSub(Msg2LinesSoccer,"Title","Invalid Manual Sequence Entered","MainLine","Comment seq must be a Normal seq (0 < Seq < 990000).","FirstLine","Type in a Normal seq at the Manual textbox.","SecondLine","Right click, select Comment.")	
			gui.Form.txtManualSeq.SetFocus			
			f.Intrinsic.Control.ExitSub	
		f.Intrinsic.Control.EndIf
		'Check if target sequence exists
		f.Intrinsic.String.Build("RTR_Seq = '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
		f.Data.DataView.Create("CHILD","vSeqExist",22,v.Local.sFilter,"")
		f.Intrinsic.Control.If(v.DataView.CHILD!vSeqExist.RowCount,>,0)
			f.Data.DataView.Close("CHILD","vSeqExist")
			f.Intrinsic.String.Build("Sequence {0} already exists in the current Router.",v.Local.sTargetSeq,v.Local.sHold)				
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox(v.Local.sHold,"Invalid Manual Sequence Entered")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			gui.Form.txtManualSeq.SetFocus		
			f.Intrinsic.Control.ExitSub	
		f.Intrinsic.Control.EndIf
		f.Data.DataView.Close("CHILD","vSeqExist")
		
	'Insert Manual option is not selected, we need user to select a row from Router grid
	f.Intrinsic.Control.Else	
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sTargetRow)
		
		'User does not select a router row
		f.Intrinsic.Control.If(v.Local.sTargetRow.Trim,=,"")
			f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,1)
				f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","No Router Sequence Selected","MainLine","Router sequence is not selected.","FirstLine","Select a Normal seq from the Router grid.","SecondLine","Select Above/Below/Manual radio button.","ThirdLine","Right click, select Comment.")
				f.Intrinsic.Control.ExitSub	
				
			'This case CHILD Rowcount = 1	
			f.Intrinsic.Control.Else
				v.Local.sTargetRow.Set(0)
				f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)
			f.Intrinsic.Control.EndIf

		'User currently select a router row	
		f.Intrinsic.Control.Else	
			f.Intrinsic.String.Split(v.Local.sTargetRow,"*!*",v.Local.sTargetRow)
			v.Local.sUbound.Set(v.Local.sTargetRow.UBound)
			v.Local.sTargetRow.Set(v.Local.sTargetRow(v.Local.sUbound))
			v.Local.sTargetSeq.Set(v.DataTable.CHILD(V.Local.sTargetRow).RTR_SEQ!FieldValString)
			f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,=,"99")
			
				f.Data.DataView.Create("Child","vNor",22,"RTR_Seq > '000000' and RTR_Seq < '990000'","")
				f.Intrinsic.Control.If(v.DataView.Child!vNor.RowCount,=,0)			
					f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)					
				f.Intrinsic.Control.Else						
					f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","Invalid Router Sequence Selected","MainLine","Invalid Router sequence selected.","FirstLine","Select a Normal seq from the Router grid.","SecondLine","Select Above/Below/Manual radio button.","ThirdLine","Right click, select Comment.")
					f.Data.DataView.Close("Child","vNor")
					gui.Form.txtManualSeq.SetFocus	
					f.Intrinsic.Control.ExitSub		
				f.Intrinsic.Control.EndIf
				f.Data.DataView.Close("Child","vNor")
				
			f.Intrinsic.Control.EndIf			
			
		f.Intrinsic.Control.EndIf	
		
	f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1,or,v.DataTable.CHILD.RowCount,=,2)
		v.Local.bAboveException.Set(True)
	f.Intrinsic.Control.EndIf

	GUI.Comment.txtCode.Text("")
	GUI.Comment.txtDescr.Text("")
	GUI.Comment.txtComment.Text("")	
	
	gui.Form..Enabled(False)
	gui.Comment..Visible(True)	
	gui.Comment..WaitForDismiss	
	
	f.Intrinsic.Control.If(v.Args.ButtonClicked,=,"OK")	
		'iSeqSort
		f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value,=,True)
			v.Local.iSeqSort.Set(1)
		f.Intrinsic.Control.ElseIf(v.Screen.Form!optInsertAbove.Value,=,True)
			v.Local.iSeqSort.Set(-1)
		f.Intrinsic.Control.ElseIf(v.Screen.Form!optInsertManual.Value,=,True)
			v.Local.iSeqSort.Set(0)
		f.Intrinsic.Control.EndIf		
		
		gui.Form.GGC_Bom.SuspendLayout
		f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)			
			
		f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.text,v.Screen.Form!txtFocusRev.text,v.Local.sPart)
		
		'Get next Serie
		f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
		f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)			
		
		'add the non-inventory line item
		f.Data.DataTable.AddRow("CHILD","BPARENT",v.Local.sPart,"DESCR_BP",V.Screen.Form!txtFocusDescr.text,"RTR_SEQ",V.Local.sTargetSeq,"SeqSort",v.Local.iSeqSort,"PART"," ","DESCRIPTION",v.Screen.Comment!txtDescr.text,"COMMENTS",V.Screen.Comment!txtComment.text,"CAT_CODE","C","OP_CODE",V.Screen.Comment!txtCode.text,"LMO","C","Serie",v.Local.iSerie)
		v.Global.bRouterChanged.Set(True)
		
		'No need to resequence if it is Manual Insert
		F.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,False)
			'Insert Below case we will ReseqStartFrom_Normal
			f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value)
				f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.Local.sTargetSeq)		
			'Insert Above case
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.If(v.Local.bAboveException.Not)
		
					F.Intrinsic.String.Build("RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
					f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
					F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
						f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
							f.Intrinsic.Control.CallSub(ReSeqNormals)						
						f.Intrinsic.Control.Else	
							f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
						f.Intrinsic.Control.EndIf					
					f.Intrinsic.Control.Else
						f.Intrinsic.Control.CallSub(ReSeqNormals)
					F.Intrinsic.Control.EndIf
					f.Data.DataView.Close("CHILD","vAbove")		
				
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.CallSub(ReSeqNormals)
				f.Intrinsic.Control.EndIf
	
			f.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.EndIf	

		'@holder1			
		f.Data.DataTable.AcceptChanges("CHILD")

		'If there is a row added, move the focus to that row
		Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
		gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)
			
		gui.Form.GGC_Bom.ResumeLayout
		
	f.Intrinsic.Control.EndIf	

	gui.Form..Enabled(True)
	gui.Form..AlwaysOnTop(True)
	gui.Form..AlwaysOnTop(False)	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.InsComment.End

Program.Sub.InsertReferencePartAsComment.Start
f.Intrinsic.Control.Try
	v.Local.sParent.Declare
	V.Local.sPart.Declare
	v.Local.sPart17.Declare
	v.Local.sRev.Declare
	v.Local.sFilter.Declare
	v.Local.sTargetRow.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sUbound.Declare
	v.Local.iSeqSort.Declare
	v.Local.sRTR_Seq_ColIndex.Declare
	v.Local.sHold.Declare
	v.Local.bAboveException.Declare	
	v.Local.iSerie.Declare
	v.Local.sPartDesc.Declare
	v.Local.sUM.Declare
	v.Local.sPL.Declare
	v.Local.sSource.Declare
	v.Local.sSource_Code.Declare
	v.Local.sRet.Declare
			
	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'Check: must be right click, bom complete flag not completed, user right (normal,estimator,engineer),datatable Child exist
	f.Intrinsic.Control.If(v.Global.bReadOnly,=,True,or,v.Global.iRights,<=,0,v.DataTable.CHILD.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate if Router header is created
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No router or parent part in focus.","Cannot Insert Sequence")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'If Insert Manual option is selected we don't need the user to select a row
	f.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,True)
		'Validate the sequence entered by user. If it does not exists in the current router, it is valid. Then check if is a 99XXXX sequence
		f.Intrinsic.String.LPad(v.Screen.Form!txtManualSeq.Text.Trim,"0",6,v.Local.sTargetSeq)
		f.Intrinsic.Control.If(v.Local.sTargetSeq,=,"",or,v.Local.sTargetSeq,=,"000000",v.Local.sTargetSeq,>=,990000)
			f.Intrinsic.Control.CallSub(Msg2LinesSoccer,"Title","Invalid Manual Sequence Entered","MainLine","Comment seq must be a Normal seq (0 < Seq < 990000).","FirstLine","Type in a Normal seq at the Manual textbox.","SecondLine","Right click, select Comment.")	
			gui.Form.txtManualSeq.SetFocus			
			f.Intrinsic.Control.ExitSub	
		f.Intrinsic.Control.EndIf
		'Check if target sequence exists
		f.Intrinsic.String.Build("RTR_Seq = '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
		f.Data.DataView.Create("CHILD","vSeqExist",22,v.Local.sFilter,"")
		f.Intrinsic.Control.If(v.DataView.CHILD!vSeqExist.RowCount,>,0)
			f.Data.DataView.Close("CHILD","vSeqExist")
			f.Intrinsic.String.Build("Sequence {0} already exists in the current Router.",v.Local.sTargetSeq,v.Local.sHold)				
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox(v.Local.sHold,"Invalid Manual Sequence Entered")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			gui.Form.txtManualSeq.SetFocus		
			f.Intrinsic.Control.ExitSub	
		f.Intrinsic.Control.EndIf
		f.Data.DataView.Close("CHILD","vSeqExist")
		
	'Insert Manual option is not selected, we need user to select a row from Router grid
	f.Intrinsic.Control.Else	
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sTargetRow)
		
		'User does not select a router row
		f.Intrinsic.Control.If(v.Local.sTargetRow.Trim,=,"")
			f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,1)
				f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","No Router Sequence Selected","MainLine","Router sequence is not selected.","FirstLine","Select a Normal seq from the Router grid.","SecondLine","Select Above/Below/Manual radio button.","ThirdLine","Right click, select Comment.")
				f.Intrinsic.Control.ExitSub	
				
			'This case CHILD Rowcount = 1	
			f.Intrinsic.Control.Else
				v.Local.sTargetRow.Set(0)
				f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)
			f.Intrinsic.Control.EndIf

		'User currently select a router row	
		f.Intrinsic.Control.Else	
			f.Intrinsic.String.Split(v.Local.sTargetRow,"*!*",v.Local.sTargetRow)
			v.Local.sUbound.Set(v.Local.sTargetRow.UBound)
			v.Local.sTargetRow.Set(v.Local.sTargetRow(v.Local.sUbound))
			v.Local.sTargetSeq.Set(v.DataTable.CHILD(V.Local.sTargetRow).RTR_SEQ!FieldValString)
			f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,=,"99")
			
				f.Data.DataView.Create("Child","vNor",22,"RTR_Seq > '000000' and RTR_Seq < '990000'","")
				f.Intrinsic.Control.If(v.DataView.Child!vNor.RowCount,=,0)			
					f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)					
				f.Intrinsic.Control.Else						
					f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","Invalid Router Sequence Selected","MainLine","Invalid Router sequence selected.","FirstLine","Select a Normal seq from the Router grid.","SecondLine","Select Above/Below/Manual radio button.","ThirdLine","Right click, select Comment.")
					f.Data.DataView.Close("Child","vNor")
					gui.Form.txtManualSeq.SetFocus	
					f.Intrinsic.Control.ExitSub		
				f.Intrinsic.Control.EndIf
				f.Data.DataView.Close("Child","vNor")
				
			f.Intrinsic.Control.EndIf			
			
		f.Intrinsic.Control.EndIf	
		
	f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1,or,v.DataTable.CHILD.RowCount,=,2)
		v.Local.bAboveException.Set(True)
	f.Intrinsic.Control.EndIf

	'Open Inventorr Browser
	F.Intrinsic.Control.If(V.Global.bLongPart)
		f.Intrinsic.UI.Browser("Select Inventory Part","conx","select Left(i1.Part,17) as Part,substring(i1.Part,18,3) as Rev,i1.Description, i1.UM_Inventory as UM,i1.Product_Line,Case When I2.Code_Source = 'M' Then 'MFG-STOCK' 	When I2.Code_Source = 'F' Then 'MFG-JOB' 	When I2.Code_Source = 'P' Then 'PUR-STOCK' 	When I2.Code_Source = 'J' Then 'PUR-JOB' 	When I2.Code_Source = 'C' Then 'CONS-STOCK' When I2.Code_Source = 'G' Then 'CONS-JOB' Else 'MFG-STOCK' End as Source,Case when i1.Flag_Inactive = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Inactive,x.Display_Part,x.Display_Rev   from INVENTORY_MSTR i1 left join Inv_Lxr x on i1.Part = x.GSS_PART  left join inventory_mst2 i2 on i1.Part = i2.Part and i1.Location = i2.Location order by i1.Part","Part*!*Rev*!*Description*!*UM*!*PL*!*Source*!*Inactive*!*Long Part*!*Rev Long Part","500*!*200*!*700*!*300*!*300*!*300*!*200*!*500*!*200","15000","10000",v.Local.sRet)
	F.Intrinsic.Control.Else
		f.Intrinsic.UI.Browser("Select Inventory Part","conx","select Left(i1.Part,17) as Part,substring(i1.Part,18,3) as Rev, i1.Description, i1.UM_Inventory as UM,i1.Product_Line ,Case When I2.Code_Source = 'M' Then 'MFG-STOCK' 	When I2.Code_Source = 'F' Then 'MFG-JOB' 	When I2.Code_Source = 'P' Then 'PUR-STOCK' 	When I2.Code_Source = 'J' Then 'PUR-JOB' When I2.Code_Source = 'C' Then 'CONS-STOCK' When I2.Code_Source = 'G' Then 'CONS-JOB' Else 'MFG-STOCK' End as Source ,Case when i1.Flag_Inactive = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Inactive  from INVENTORY_MSTR i1  left join inventory_mst2 i2 on i1.Part = i2.Part and i1.Location = i2.Location order by i1.Part","Part*!*Rev*!*Description*!*UM*!*PL*!*Source*!*Inactive","500*!*200*!*700*!*300*!*300*!*300*!*200","15000","10000",v.Local.sRet)
	f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)		
		f.Intrinsic.String.GSSPartString(v.Local.sRet(0),v.Local.sRet(1),v.Local.sPart)
		v.Local.sPart17.Set(v.Local.sRet(0))
		v.Local.sRev.Set(v.Local.sRet(1))
		v.Local.sPartDesc.Set(v.Local.sRet(2))
		v.Local.sHold.Set(v.Local.sRet(3).Trim)
		v.Local.sUM.Set(v.Local.sHold.left2)
		v.Local.sPL.Set(v.Local.sRet(4).Trim)
		v.Local.sSource.Set(v.Local.sRet(5))
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	

	'iSeqSort
	f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value,=,True)
		v.Local.iSeqSort.Set(1)
	f.Intrinsic.Control.ElseIf(v.Screen.Form!optInsertAbove.Value,=,True)
		v.Local.iSeqSort.Set(-1)
	f.Intrinsic.Control.ElseIf(v.Screen.Form!optInsertManual.Value,=,True)
		v.Local.iSeqSort.Set(0)
	f.Intrinsic.Control.EndIf		
	
	gui.Form.GGC_Bom.SuspendLayout
	f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)			
		
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.text,v.Screen.Form!txtFocusRev.text,v.Local.sParent)
	f.Intrinsic.String.GSSPartString(v.Local.sPart17,v.Local.sRev,v.Local.sPart)
	f.Intrinsic.String.Build("Part: {0}",v.Local.sPart,v.Local.sPartDesc)
	
	f.Intrinsic.Control.If(v.Local.sSource.Trim,=,"")
		v.Local.sSource_Code.Set("MFG-STOCK")
	f.Intrinsic.Control.EndIf
	f.Data.Dictionary.ReturnKeyFromValue("SOURCE",V.Local.sSource,v.Local.sSource_Code)
	
	'Get next Serie
	f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
	f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)			
	
	'add the non-inventory line item
	f.Data.DataTable.AddRow("CHILD","BPARENT",v.Local.sParent,"DESCR_BP",V.Screen.Form!txtFocusDescr.text,"RTR_SEQ",V.Local.sTargetSeq,"SeqSort",v.Local.iSeqSort,"PART",v.Local.sPart,"DESCRIPTION",v.Local.sPartDesc,"DESCRIPTION_2",v.Local.sSource_Code,"COMMENTS","","Cat_Code","R","CATEGORY","REFERENCE","LMO","C","PL",v.Local.sPL,"UM",v.local.sUM.left2,"RefPart",v.Local.sPart,"Serie",v.Local.iSerie)
	v.Global.bRouterChanged.Set(True)
	
	'No need to resequence if it is Manual Insert
	F.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,False)
		'Insert Below case we will ReseqStartFrom_Normal
		f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value)
			f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.Local.sTargetSeq)		
		'Insert Above case
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.If(v.Local.bAboveException.Not)
	
				F.Intrinsic.String.Build("RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
				f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
				F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
					f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
						f.Intrinsic.Control.CallSub(ReSeqNormals)						
					f.Intrinsic.Control.Else	
						f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
					f.Intrinsic.Control.EndIf					
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.CallSub(ReSeqNormals)
				F.Intrinsic.Control.EndIf
				f.Data.DataView.Close("CHILD","vAbove")		
			
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.CallSub(ReSeqNormals)
			f.Intrinsic.Control.EndIf

		f.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.EndIf	

	'@holder1			
	f.Data.DataTable.AcceptChanges("CHILD")

	'If there is a row added, move the focus to that row
	Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
	gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)
		
	gui.Form.GGC_Bom.ResumeLayout
		

	'gui.Form..AlwaysOnTop(True)
	'gui.Form..AlwaysOnTop(False)		

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.InsertReferencePartAsComment.End

Program.Sub.InsertPhantomAsBlockOfComments.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sPart.Declare
	v.Local.sFilter.Declare
	v.Local.sTargetRow.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sUbound.Declare
	v.Local.iSeqSort.Declare
	v.Local.sRTR_Seq_ColIndex.Declare
	v.Local.sKey.Declare
	v.Local.sHold.Declare
	v.Local.bAboveException.Declare	
	v.Local.iCount.Declare
	v.Local.iSerie.Declare
	v.Local.sParent.Declare
	v.Local.sRet.Declare
	v.Local.sPart17.Declare
	v.Local.sRev.Declare
	v.Local.sPhantomPart.Declare
	v.Local.iStartSeries.Declare
	V.Local.sUM.Declare
	v.Local.sCat_Code.Declare
	v.Local.sSource_Code.Declare
	v.Local.fCost.Declare
	v.Local.sSourceOfRef.Declare
	v.Local.sPL.Declare
		
	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'Check: must be right click, bom complete flag not completed, user right (normal,estimator,engineer),datatable Child exist
	f.Intrinsic.Control.If(v.Global.bReadOnly,=,True,or,v.Global.iRights,<=,0,v.DataTable.CHILD.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate if Router header is created
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No router or parent part in focus.","Cannot Insert Sequence")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'If Insert Manual, change to below
	f.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,True)
		gui.Form.optInsertBelow.Value(1)
		f.Intrinsic.Control.CallSub(optInsertBelow_click)
	f.Intrinsic.Control.EndIf
	

	gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sTargetRow)
	
	'User does not select a router row
	f.Intrinsic.Control.If(v.Local.sTargetRow.Trim,=,"")
		f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,1)
			f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","No Router Sequence Selected","MainLine","Router sequence is not selected.","FirstLine","Select a Normal seq from the Router grid.","SecondLine","Select Above/Below radio button.","ThirdLine","Right click, Insert Phantom as Block of Comments.")
			f.Intrinsic.Control.ExitSub	
			
		'This case CHILD Rowcount = 1	
		f.Intrinsic.Control.Else
			v.Local.sTargetRow.Set(0)
			f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)
		f.Intrinsic.Control.EndIf
		
	'User currently select a router row	
	f.Intrinsic.Control.Else	
		f.Intrinsic.String.Split(v.Local.sTargetRow,"*!*",v.Local.sTargetRow)
		v.Local.sUbound.Set(v.Local.sTargetRow.UBound)
		v.Local.sTargetRow.Set(v.Local.sTargetRow(v.Local.sUbound))
		v.Local.sTargetSeq.Set(v.DataTable.CHILD(V.Local.sTargetRow).RTR_SEQ!FieldValString)
		f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,=,"99")
			f.Data.DataView.Create("Child","vNor",22,"RTR_Seq > '000000' and RTR_Seq < '990000'","")
			f.Intrinsic.Control.If(v.DataView.Child!vNor.RowCount,=,0)			
				f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)					
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","Invalid Router Sequence Selected","MainLine","Invalid Router sequence selected.","FirstLine","Select a Normal seq from the Router grid.","SecondLine","Select Above/Below radio button.","ThirdLine","Right click, Insert Phantom as Block of Comments.")
				f.Data.DataView.Close("Child","vNor")
				f.Intrinsic.Control.ExitSub	
			f.Intrinsic.Control.EndIf
			f.Data.DataView.Close("Child","vNor")
					
		f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.EndIf	

	gui.Form.GGC_Bom.SuspendLayout
	f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)			
		
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.text,v.Screen.Form!txtFocusRev.text,v.Local.sParent)
	'Exception Above
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1,or,v.DataTable.CHILD.RowCount,=,2)
		v.Local.bAboveException.Set(True)
	f.Intrinsic.Control.EndIf			
	
	'Open Bom Browser
	f.Intrinsic.Control.If(v.Global.bLongPart)
		f.Intrinsic.UI.Browser("Select Bill of Material","conx","SELECT Left(A.PARENT,17) as Part,Substring(A.PARENT,18,3) as Rev, B.Description,A.UM_Inventory as UM,a.Cost as Cost,A.Inactive,Case When a.Bom_Complete = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Complete, x.DISPLAY_PART,x.DISPLAY_REV FROM  V_BOM_ENG B LEFT JOIN V_BOM_MSTR A ON B.PART = A.PARENT Left Join INV_LXR x ON x.GSS_PART = b.Part WHERE b.Location = '' and B.IS_PARENT = 'Y' AND A.SEQUENCE_BOM = '0000'","Parent*!*Rev*!*Description*!*UM*!*Cost*!*Inactive*!*Compl.*!*Long Part*!*Rev Long Part","500*!*200*!*700*!*200*!*400*!*200*!*200*!*500*!*200","15000","10000",v.Local.sRet)
	f.Intrinsic.Control.Else
		f.Intrinsic.UI.Browser("Select Bill of Material","conx","SELECT Left(A.PARENT,17) as Part,Substring(A.PARENT,18,3) as Rev, B.Description,A.UM_Inventory as UM,a.Cost as Cost,A.Inactive,Case When a.Bom_Complete = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Complete FROM  V_BOM_ENG B LEFT JOIN V_BOM_MSTR A ON B.PART = A.PARENT WHERE b.Location = '' and B.IS_PARENT = 'Y' AND A.SEQUENCE_BOM = '0000'","Parent*!*Rev*!*Description*!*UM*!*Cost*!*Inactive*!*Compl.","500*!*200*!*700*!*200*!*400*!*200*!*200","15000","10000",v.Local.sRet)
	f.Intrinsic.Control.EndIf	
	
	'handle return
	F.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
		
		F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
		v.Local.sPart17.Set(v.Local.sRet(0))
		v.Local.sRev.Set(v.Local.sRet(1))	
		v.Local.sHold.Set(v.Local.sRet(3).Trim)
		v.Local.sUM.Set(v.Local.sHold.left2)
		v.Local.fCost.Set(v.Local.sRet(4).Trim)
		
		f.Intrinsic.Control.If(v.DataTable.BomPhantom.Exists)
			f.Data.DataTable.Close("BomPhantom")
		f.Intrinsic.Control.EndIf

		'Create BomPhantom table
		f.Intrinsic.Control.If(v.DataTable.BomPhantom.Exists)
			F.Data.DataTable.Close("BomPhantom")
		f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.CallSub(Create_Bom_Table,"sTable","BomPhantom")
		
		f.Intrinsic.String.GSSPartString(v.Local.sPart17,v.Local.sRev,v.Local.sPhantomPart)
		v.Local.sSource_Code.Set(v.Dictionary.Part_SourceCode![V.Local.sPhantomPart.Trim])
		v.Local.sPL.Set(v.Dictionary.PROD_LINES![v.Local.sPhantomPart.Trim])
		
		f.Intrinsic.Control.CallSub(GetPhantomBom,"Parent",v.Local.sPart17,"Rev",v.Local.sRev,"TIER",0,"CTIER",0,"PL",v.Local.sPL,"UM",v.local.sUM.left2,"CAT_CODE","P","Category","PHANTOM","COST",v.Local.fCost,"Source",v.Local.sSource_Code)			
		
		F.Data.DataTable.AddColumn("BomPhantom","Source","String","")
		F.Data.DataTable.AddColumn("BomPhantom","Category","String","")
		f.Data.DataTable.FillFromDictionary("BomPhantom","SOURCE","SOURCE_CODE","SOURCE")
		f.Data.DataTable.FillFromDictionary("BomPhantom","CATEGORY","CAT_CODE","CATEGORY")
		
		'Refine BomPhantom to BomPhantomFinal which remove the '0000' Bom_Seq
		f.Data.DataView.Create("BomPhantom","vBFinal",22,"BOM_SEQ is Null or Bom_Seq <> '0000'","")
		f.Intrinsic.Control.If(v.DataTable.BomPhantomFinal.Exists)
			f.Data.DataTable.Close("BomPhantomFinal")
		f.Intrinsic.Control.EndIf
		f.Data.DataView.ToDataTable("BomPhantom","vBFinal","BomPhantomFinal",True)
		
		f.Data.DataTable.AddExpressionColumn("BomPhantomFinal","LMO","STRING","IIF((DESCRIPTION like '* START' or DESCRIPTION like '* END') or (Cat_Code is not null and Cat_Code = 'R'),'C','M')")		
		f.Data.DataTable.SetValue("BomPhantomFinal",-1,"PhantomPart",v.Local.sPhantomPart)
		f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value,=,True)
			f.Data.DataTable.SetSeries("BomPhantomFinal","SeqSort",1,1)
		f.Intrinsic.Control.Else
			f.Intrinsic.Math.Mult(-1,v.DataTable.BomPhantomFinal.RowCount,v.Local.iStartSeries)
			f.Data.DataTable.SetSeries("BomPhantomFinal","SeqSort",v.Local.iStartSeries,1)	
		f.Intrinsic.Control.EndIf
		
		f.Data.DataTable.SetValue("BomPhantomFinal",-1,"RTR_Seq",v.Local.sTargetSeq)
		
		f.Intrinsic.String.Build("Bom_Seq is not null and RTR_Seq = '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
		f.Data.DataView.Create("Child","vMaxBomSeq",22,v.Local.sFilter,"Bom_Seq desc")
		f.Intrinsic.Control.If(v.DataView.Child!vMaxBomSeq.RowCount,>,0)
			v.Local.sHold.Set(v.DataView.Child!vMaxBomSeq(0).Bom_Seq!FieldValString)
		f.Intrinsic.Control.Else
			f.Intrinsic.String.LPad(v.Global.iBSeq,"0",4,v.Local.sHold)
		f.Intrinsic.Control.EndIf
		f.Data.DataView.Close("Child","vMaxBomSeq")
		
		f.Data.DataTable.SetValue("BomPhantomFinal",-1,"Bom_Seq",v.Local.sHold)
		'Set Serie unique
		f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
		f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)
		f.Data.DataTable.AddColumn("BomPhantomFinal","Serie","Long",0)
		f.Data.DataTable.SetSeries("BomPhantomFinal","Serie",v.Local.iSerie,1)
		
		F.Data.DataTable.AcceptChanges("BomPhantomFinal")
		
		gui.Form.GGC_Bom.Visible(False)
		
		f.Data.DataTable.SetValue("BomPhantomFinal",-1,"BParent",v.Local.sParent,"Descr_BP",v.DataTable.Child(0).Descr_BP!FieldValsTring)
		f.Intrinsic.Control.If(v.DataTable.BomPhantomFinal.RowCount,>,0)
			f.Data.DataTable.SetValue("BomPhantomFinal",0,"Description_2",v.Local.sSource_Code)
		f.Intrinsic.Control.EndIf
		
		'Set Reference Part to Comment
		f.Data.DataView.Create("BomPhantomFinal","vRef",22,"Cat_Code is not null and Cat_Code = 'R'","")
		f.Intrinsic.Control.For(v.Local.iCount,v.DataView.BomPhantomFinal!vRef.RowCount--,0,-1)
			v.Local.sSourceOfRef.Set(v.DataView.BomPhantomFinal!vRef(v.Local.iCount).Source_Code!FieldValString)
			F.Data.DataView.SetValue("BomPhantomFinal","vRef",v.Local.iCount,"Description_2",v.Local.sSourceOfRef,"Source","","Source_Code","")
		f.Intrinsic.Control.Next(v.Local.iCount)
		f.Data.DataView.Close("BomPhantomFinal","vRef")	
		
		f.Data.DataTable.AcceptChanges("BomPhantomFinal")
		
		f.Data.DataTable.AddExpressionColumn("BomPhantomFinal","PartTrim3","String","Trim([Part])")
		F.Data.DataTable.FillFromDictionary("BomPhantomFinal","LEADHOURS","PartTrim3","Lead")
		F.Data.DataTable.Merge("BomPhantomFinal","CHILD",True,2)
		f.Data.DataTable.AcceptChanges("Child")
		
		'RESEQUENCE
		'Insert Below case we will ReseqStartFrom_Normal
		f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value)
			f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.Local.sTargetSeq)		
		'Insert Above case
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.If(v.Local.bAboveException.Not)
	
				F.Intrinsic.String.Build("RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
				f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
				F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
					f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
						f.Intrinsic.Control.CallSub(ReSeqNormals)						
					f.Intrinsic.Control.Else	
						f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
					f.Intrinsic.Control.EndIf					
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.CallSub(ReSeqNormals)
				F.Intrinsic.Control.EndIf
				f.Data.DataView.Close("CHILD","vAbove")		
			
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.CallSub(ReSeqNormals)
			f.Intrinsic.Control.EndIf
	
		f.Intrinsic.Control.EndIf
	
	
		'move the focus to last row
		Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
		gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)
		
		f.Data.DataView.SetFilter("Child","V_Child","RTR_SEq <> '000000' AND Part <> '~~~@!@~~~@!@'")
		f.Data.DataView.SetSort("Child","V_Child","RTR_Seq")

		f.Data.DataTable.SetValueFormat("Child",-1,"Ext2","Extended","0.00000000")
		gui.Form.GGC_Bom.Visible(True)
		
	f.Intrinsic.Control.EndIf
		
	gui.Form.GGC_Bom.ResumeLayout
		
	gui.Form..Enabled(True)
	gui.Form..AlwaysOnTop(True)
	gui.Form..AlwaysOnTop(False)	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.InsertPhantomAsBlockOfComments.End

Program.Sub.InsertReferencePartAsComment_Material.Start
f.Intrinsic.Control.Try
	v.Local.sParent.Declare
	V.Local.sPart.Declare
	v.Local.sPart17.Declare
	v.Local.sRev.Declare
	v.Local.sFilter.Declare
	v.Local.sTargetRow.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sUbound.Declare
	v.Local.iSeqSort.Declare
	v.Local.sRTR_Seq_ColIndex.Declare
	v.Local.sHold.Declare
	v.Local.bAboveException.Declare	
	v.Local.iSerie.Declare
	v.Local.sPartDesc.Declare
	v.Local.sUM.Declare
	v.Local.sPL.Declare
	v.Local.sSource.Declare
	v.Local.sSource_Code.Declare
	v.Local.sRet.Declare
			
	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'Check: must be right click, bom complete flag not completed, user right (normal,estimator,engineer),datatable Child exist
	f.Intrinsic.Control.If(v.Global.bReadOnly,=,True,or,v.Global.iRights,<=,0,v.DataTable.CHILD.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate if Router header is created
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No router or parent part in focus.","Cannot Insert Sequence")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'If Insert Manual option is selected we don't need the user to select a row
	f.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,True)
		'Validate the sequence entered by user. If it does not exists in the current router, it is valid. Then check if is a 99XXXX sequence
		f.Intrinsic.String.LPad(v.Screen.Form!txtManualSeq.Text.Trim,"0",6,v.Local.sTargetSeq)
		f.Intrinsic.Control.If(v.Local.sTargetSeq,=,"",or,v.Local.sTargetSeq,=,"000000",v.Local.sTargetSeq,>=,990000)
			f.Intrinsic.Control.CallSub(Msg2LinesSoccer,"Title","Invalid Manual Sequence Entered","MainLine","Comment seq must be a Normal seq (0 < Seq < 990000).","FirstLine","Type in a Normal seq at the Manual textbox.","SecondLine","Right click, select Comment.")	
			gui.Form.txtManualSeq.SetFocus			
			f.Intrinsic.Control.ExitSub	
		f.Intrinsic.Control.EndIf
		'Check if target sequence exists
		f.Intrinsic.String.Build("RTR_Seq = '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
		f.Data.DataView.Create("CHILD","vSeqExist",22,v.Local.sFilter,"")
		f.Intrinsic.Control.If(v.DataView.CHILD!vSeqExist.RowCount,>,0)
			f.Data.DataView.Close("CHILD","vSeqExist")
			f.Intrinsic.String.Build("Sequence {0} already exists in the current Router.",v.Local.sTargetSeq,v.Local.sHold)				
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox(v.Local.sHold,"Invalid Manual Sequence Entered")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			gui.Form.txtManualSeq.SetFocus		
			f.Intrinsic.Control.ExitSub	
		f.Intrinsic.Control.EndIf
		f.Data.DataView.Close("CHILD","vSeqExist")
		
	'Insert Manual option is not selected, we need user to select a row from Router grid
	f.Intrinsic.Control.Else	
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sTargetRow)
		
		'User does not select a router row
		f.Intrinsic.Control.If(v.Local.sTargetRow.Trim,=,"")
			f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,1)
				f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","No Router Sequence Selected","MainLine","Router sequence is not selected.","FirstLine","Select a Normal seq from the Router grid.","SecondLine","Select Above/Below/Manual radio button.","ThirdLine","Right click, select Comment.")
				f.Intrinsic.Control.ExitSub	
				
			'This case CHILD Rowcount = 1	
			f.Intrinsic.Control.Else
				v.Local.sTargetRow.Set(0)
				f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)
			f.Intrinsic.Control.EndIf

		'User currently select a router row	
		f.Intrinsic.Control.Else	
			f.Intrinsic.String.Split(v.Local.sTargetRow,"*!*",v.Local.sTargetRow)
			v.Local.sUbound.Set(v.Local.sTargetRow.UBound)
			v.Local.sTargetRow.Set(v.Local.sTargetRow(v.Local.sUbound))
			v.Local.sTargetSeq.Set(v.DataTable.CHILD(V.Local.sTargetRow).RTR_SEQ!FieldValString)
			f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,=,"99")
			
				f.Data.DataView.Create("Child","vNor",22,"RTR_Seq > '000000' and RTR_Seq < '990000'","")
				f.Intrinsic.Control.If(v.DataView.Child!vNor.RowCount,=,0)			
					f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)					
				f.Intrinsic.Control.Else						
					f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","Invalid Router Sequence Selected","MainLine","Invalid Router sequence selected.","FirstLine","Select a Normal seq from the Router grid.","SecondLine","Select Above/Below/Manual radio button.","ThirdLine","Right click, select Comment.")
					f.Data.DataView.Close("Child","vNor")
					gui.Form.txtManualSeq.SetFocus	
					f.Intrinsic.Control.ExitSub		
				f.Intrinsic.Control.EndIf
				f.Data.DataView.Close("Child","vNor")
				
			f.Intrinsic.Control.EndIf			
			
		f.Intrinsic.Control.EndIf	
		
	f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1,or,v.DataTable.CHILD.RowCount,=,2)
		v.Local.bAboveException.Set(True)
	f.Intrinsic.Control.EndIf

	'Get Inventory Part
	v.Local.sPart.Set(v.DataTable.Material(v.Global.iMaterialSourceRowClicked).Part!FieldValString)
	v.Local.sPart17.Set(v.Local.sPart.Left17)
	f.Intrinsic.String.Mid(v.Local.sPart,18,3,v.Local.sRev)
	v.Local.sPartDesc.Set(v.DataTable.Material(v.Global.iMaterialSourceRowClicked).Description!FieldValString)
	v.Local.sUM.Set(v.DataTable.Material(v.Global.iMaterialSourceRowClicked).UM!FieldValString)
	v.Local.sPL.Set(v.DataTable.Material(v.Global.iMaterialSourceRowClicked).PL!FieldValString)
	v.Local.sSource.Set(v.DataTable.Material(v.Global.iMaterialSourceRowClicked).Source!FieldValString)	

	'iSeqSort
	f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value,=,True)
		v.Local.iSeqSort.Set(1)
	f.Intrinsic.Control.ElseIf(v.Screen.Form!optInsertAbove.Value,=,True)
		v.Local.iSeqSort.Set(-1)
	f.Intrinsic.Control.ElseIf(v.Screen.Form!optInsertManual.Value,=,True)
		v.Local.iSeqSort.Set(0)
	f.Intrinsic.Control.EndIf		
	
	gui.Form.GGC_Bom.SuspendLayout
	f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)			
		
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.text,v.Screen.Form!txtFocusRev.text,v.Local.sParent)
	f.Intrinsic.String.GSSPartString(v.Local.sPart17,v.Local.sRev,v.Local.sPart)
	f.Intrinsic.String.Build("Part: {0}",v.Local.sPart,v.Local.sPartDesc)
	
	f.Intrinsic.Control.If(v.Local.sSource.Trim,=,"")
		v.Local.sSource_Code.Set("MFG-STOCK")
	f.Intrinsic.Control.EndIf
	f.Data.Dictionary.ReturnKeyFromValue("SOURCE",V.Local.sSource,v.Local.sSource_Code)
	
	'Get next Serie
	f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
	f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)			
	
	'add the non-inventory line item
	f.Data.DataTable.AddRow("CHILD","BPARENT",v.Local.sParent,"DESCR_BP",V.Screen.Form!txtFocusDescr.text,"RTR_SEQ",V.Local.sTargetSeq,"SeqSort",v.Local.iSeqSort,"PART",v.Local.sPart,"DESCRIPTION",v.Local.sPartDesc,"DESCRIPTION_2",v.Local.sSource_Code,"COMMENTS","","Cat_Code","R","CATEGORY","REFERENCE","LMO","C","PL",v.Local.sPL,"UM",v.local.sUM.left2,"RefPart",v.Local.sPart,"Serie",v.Local.iSerie)
	v.Global.bRouterChanged.Set(True)
	
	'No need to resequence if it is Manual Insert
	F.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,False)
		'Insert Below case we will ReseqStartFrom_Normal
		f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value)
			f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.Local.sTargetSeq)		
		'Insert Above case
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.If(v.Local.bAboveException.Not)
	
				F.Intrinsic.String.Build("RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
				f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
				F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
					f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
						f.Intrinsic.Control.CallSub(ReSeqNormals)						
					f.Intrinsic.Control.Else	
						f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
					f.Intrinsic.Control.EndIf					
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.CallSub(ReSeqNormals)
				F.Intrinsic.Control.EndIf
				f.Data.DataView.Close("CHILD","vAbove")		
			
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.CallSub(ReSeqNormals)
			f.Intrinsic.Control.EndIf

		f.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.EndIf	

	'@holder1			
	f.Data.DataTable.AcceptChanges("CHILD")

	'If there is a row added, move the focus to that row
	Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
	gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)
		
	gui.Form.GGC_Bom.ResumeLayout

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.InsertReferencePartAsComment_Material.End

Program.Sub.InsertPhantomAsBlockOfComments_MaterialList.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sPart.Declare
	v.Local.sFilter.Declare
	v.Local.sTargetRow.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sUbound.Declare
	v.Local.iSeqSort.Declare
	v.Local.sRTR_Seq_ColIndex.Declare
	v.Local.sKey.Declare
	v.Local.sHold.Declare
	v.Local.bAboveException.Declare	
	v.Local.iCount.Declare
	v.Local.iSerie.Declare
	v.Local.sParent.Declare
	v.Local.sRet.Declare
	v.Local.sPart17.Declare
	v.Local.sRev.Declare
	v.Local.sPhantomPart.Declare
	v.Local.iStartSeries.Declare
	V.Local.sUM.Declare
	v.Local.sCat_Code.Declare
	v.Local.sSource_Code.Declare
	v.Local.fCost.Declare
	v.Local.sSourceOfRef.Declare
	v.Local.sPL.Declare	
			
	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'Check: must be right click, bom complete flag not completed, user right (normal,estimator,engineer),datatable Child exist
	f.Intrinsic.Control.If(v.Global.bReadOnly,=,True,or,v.Global.iRights,<=,0,v.DataTable.CHILD.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate if Router header is created
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No router or parent part in focus.","Cannot Insert Sequence")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'If Insert Manual, change to below
	f.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,True)
		gui.Form.optInsertBelow.Value(1)
		f.Intrinsic.Control.CallSub(optInsertBelow_click)
	f.Intrinsic.Control.EndIf
	
	gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sTargetRow)
	
	'User does not select a router row
	f.Intrinsic.Control.If(v.Local.sTargetRow.Trim,=,"")
		f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,1)
			f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","No Router Sequence Selected","MainLine","Router sequence is not selected.","FirstLine","Select a Normal seq from the Router grid.","SecondLine","Select Above/Below radio button.","ThirdLine","Right click, Insert Phantom as Block of Comments.")
			f.Intrinsic.Control.ExitSub	
			
		'This case CHILD Rowcount = 1	
		f.Intrinsic.Control.Else
			v.Local.sTargetRow.Set(0)
			f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)
		f.Intrinsic.Control.EndIf
		
	'User currently select a router row	
	f.Intrinsic.Control.Else	
		f.Intrinsic.String.Split(v.Local.sTargetRow,"*!*",v.Local.sTargetRow)
		v.Local.sUbound.Set(v.Local.sTargetRow.UBound)
		v.Local.sTargetRow.Set(v.Local.sTargetRow(v.Local.sUbound))
		v.Local.sTargetSeq.Set(v.DataTable.CHILD(V.Local.sTargetRow).RTR_SEQ!FieldValString)
		f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,=,"99")
			f.Data.DataView.Create("Child","vNor",22,"RTR_Seq > '000000' and RTR_Seq < '990000'","")
			f.Intrinsic.Control.If(v.DataView.Child!vNor.RowCount,=,0)			
				f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)					
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","Invalid Router Sequence Selected","MainLine","Invalid Router sequence selected.","FirstLine","Select a Normal seq from the Router grid.","SecondLine","Select Above/Below radio button.","ThirdLine","Right click, Insert Phantom as Block of Comments.")
				f.Data.DataView.Close("Child","vNor")
				f.Intrinsic.Control.ExitSub	
			f.Intrinsic.Control.EndIf
			f.Data.DataView.Close("Child","vNor")
					
		f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.EndIf	

	gui.Form.GGC_Bom.SuspendLayout
	f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)			
		
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.text,v.Screen.Form!txtFocusRev.text,v.Local.sParent)
	'Exception Above
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1,or,v.DataTable.CHILD.RowCount,=,2)
		v.Local.bAboveException.Set(True)
	f.Intrinsic.Control.EndIf		
 	
 	'Get Inventory Part
	v.Local.sPhantomPart.Set(v.DataTable.Material(v.Global.iMaterialSourceRowClicked).Part!FieldValString)
	v.Local.sPart17.Set(v.Local.sPhantomPart.Left17)
	f.Intrinsic.String.Mid(v.Local.sPhantomPart,18,3,v.Local.sRev)
	v.Local.sUM.Set(v.DataTable.Material(v.Global.iMaterialSourceRowClicked).UM!FieldValString)
	v.Local.fCost.Set(v.DataTable.Material(v.Global.iMaterialSourceRowClicked).Cost!FieldValString)	
	v.Local.sPL.Set(v.DataTable.Material(v.Global.iMaterialSourceRowClicked).PL!FieldValString)
	v.Local.sSource_Code.Set(v.DataTable.Material(v.Global.iMaterialSourceRowClicked).Source_Code!FieldValTrim)		
	
	'Create BomPhantom table
	f.Intrinsic.Control.If(v.DataTable.BomPhantom.Exists)
		F.Data.DataTable.Close("BomPhantom")
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.CallSub(Create_Bom_Table,"sTable","BomPhantom")
	
	f.Intrinsic.Control.CallSub(GetPhantomBom,"Parent",v.Local.sPart17,"Rev",v.Local.sRev,"TIER",0,"CTIER",0,"PL",v.Local.sPL,"UM",v.local.sUM.left2,"CAT_CODE","P","Category","PHANTOM","COST",v.Local.fCost,"Source",v.Local.sSource_Code)			
	
	F.Data.DataTable.AddColumn("BomPhantom","Source","String","")
	F.Data.DataTable.AddColumn("BomPhantom","Category","String","")
	f.Data.DataTable.FillFromDictionary("BomPhantom","SOURCE","SOURCE_CODE","SOURCE")
	f.Data.DataTable.FillFromDictionary("BomPhantom","CATEGORY","CAT_CODE","CATEGORY")
	
	'Refine BomPhantom to BomPhantomFinal which remove the '0000' Bom_Seq
	f.Data.DataView.Create("BomPhantom","vBFinal",22,"BOM_SEQ is Null or Bom_Seq <> '0000'","")
	f.Intrinsic.Control.If(v.DataTable.BomPhantomFinal.Exists)
		f.Data.DataTable.Close("BomPhantomFinal")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.ToDataTable("BomPhantom","vBFinal","BomPhantomFinal",True)
	
	f.Data.DataTable.AddExpressionColumn("BomPhantomFinal","LMO","STRING","IIF((DESCRIPTION like '* START' or DESCRIPTION like '* END') or (Cat_Code is not null and Cat_Code = 'R'),'C','M')")		
	f.Data.DataTable.SetValue("BomPhantomFinal",-1,"PhantomPart",v.Local.sPhantomPart)
	f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value,=,True)
		f.Data.DataTable.SetSeries("BomPhantomFinal","SeqSort",1,1)
	f.Intrinsic.Control.Else
		f.Intrinsic.Math.Mult(-1,v.DataTable.BomPhantomFinal.RowCount,v.Local.iStartSeries)
		f.Data.DataTable.SetSeries("BomPhantomFinal","SeqSort",v.Local.iStartSeries,1)	
	f.Intrinsic.Control.EndIf
	
	f.Data.DataTable.SetValue("BomPhantomFinal",-1,"RTR_Seq",v.Local.sTargetSeq)
	
	f.Intrinsic.String.Build("Bom_Seq is not null and RTR_Seq = '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
	f.Data.DataView.Create("Child","vMaxBomSeq",22,v.Local.sFilter,"Bom_Seq desc")
	f.Intrinsic.Control.If(v.DataView.Child!vMaxBomSeq.RowCount,>,0)
		v.Local.sHold.Set(v.DataView.Child!vMaxBomSeq(0).Bom_Seq!FieldValString)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.LPad(v.Global.iBSeq,"0",4,v.Local.sHold)
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Close("Child","vMaxBomSeq")
	
	f.Data.DataTable.SetValue("BomPhantomFinal",-1,"Bom_Seq",v.Local.sHold)
	'Set Serie unique
	f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
	f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)
	f.Data.DataTable.AddColumn("BomPhantomFinal","Serie","Long",0)
	f.Data.DataTable.SetSeries("BomPhantomFinal","Serie",v.Local.iSerie,1)
	
	F.Data.DataTable.AcceptChanges("BomPhantomFinal")
	
	gui.Form.GGC_Bom.Visible(False)
	
	f.Data.DataTable.SetValue("BomPhantomFinal",-1,"BParent",v.Local.sParent,"Descr_BP",v.DataTable.Child(0).Descr_BP!FieldValsTring)
	f.Intrinsic.Control.If(v.DataTable.BomPhantomFinal.RowCount,>,0)
		f.Data.DataTable.SetValue("BomPhantomFinal",0,"Description_2",v.Local.sSource_Code)
	f.Intrinsic.Control.EndIf
	
	'Set Reference Part to Comment
	f.Data.DataView.Create("BomPhantomFinal","vRef",22,"Cat_Code is not null and Cat_Code = 'R'","")
	f.Intrinsic.Control.For(v.Local.iCount,v.DataView.BomPhantomFinal!vRef.RowCount--,0,-1)
		v.Local.sSourceOfRef.Set(v.DataView.BomPhantomFinal!vRef(v.Local.iCount).Source_Code!FieldValString)
		F.Data.DataView.SetValue("BomPhantomFinal","vRef",v.Local.iCount,"Description_2",v.Local.sSourceOfRef,"Source","","Source_Code","")
	f.Intrinsic.Control.Next(v.Local.iCount)
	f.Data.DataView.Close("BomPhantomFinal","vRef")	
	
	f.Data.DataTable.AcceptChanges("BomPhantomFinal")
	
	f.Data.DataTable.AddExpressionColumn("BomPhantomFinal","PartTrim3","String","Trim([Part])")
	F.Data.DataTable.FillFromDictionary("BomPhantomFinal","LEADHOURS","PartTrim3","Lead")
	F.Data.DataTable.Merge("BomPhantomFinal","CHILD",True,2)
	f.Data.DataTable.AcceptChanges("Child")
	
	'RESEQUENCE
	'Insert Below case we will ReseqStartFrom_Normal
	f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value)
		f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.Local.sTargetSeq)		
	'Insert Above case
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.If(v.Local.bAboveException.Not)

			F.Intrinsic.String.Build("RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
			f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
			F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
				f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
					f.Intrinsic.Control.CallSub(ReSeqNormals)						
				f.Intrinsic.Control.Else	
					f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
				f.Intrinsic.Control.EndIf					
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.CallSub(ReSeqNormals)
			F.Intrinsic.Control.EndIf
			f.Data.DataView.Close("CHILD","vAbove")		
		
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.CallSub(ReSeqNormals)
		f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.EndIf

	'move the focus to last row
	Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
	gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)
	
	f.Data.DataView.SetFilter("Child","V_Child","RTR_SEq <> '000000' AND Part <> '~~~@!@~~~@!@'")
	f.Data.DataView.SetSort("Child","V_Child","RTR_Seq")

	f.Data.DataTable.SetValueFormat("Child",-1,"Ext2","Extended","0.00000000")
	gui.Form.GGC_Bom.Visible(True)		
		
	gui.Form.GGC_Bom.ResumeLayout
		
	gui.Form..AlwaysOnTop(True)
	gui.Form..AlwaysOnTop(False)	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.InsertPhantomAsBlockOfComments_MaterialList.End

Program.Sub.Get_BomPhantom_MSTR.Start
'Param: sFilter
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSQL.Declare
	
	f.Intrinsic.String.Build("SELECT m.PARENT AS BPARENT,'' as DESCR_BP, m.SEQUENCE_BOM AS BOM_SEQ ,'' as LINE_ROUTER , m.PART as Part ,'' as DESCRIPTION,'' as DESCRIPTION_2,'' as DESCRIPTION_3, IF(IsNull(m.CATEGORY,'') <> '1', m.QUANTITY ,Convert(0,SQL_Float)) AS QTY,m.COST, m.UM_INVENTORY AS UM,'' AS PL, If(Isnull(m.CATEGORY,'') = '','N',m.CATEGORY) AS CAT_CODE, SOURCE AS SOURCE_CODE ,Convert(0,sql_float) as Frequency , IF(IsNull(m.CATEGORY,'') = '1' ,m.QUANTITY, Convert(0,SQL_Float)) AS SET_UP, TAG ,Convert(0,SQL_Float) as Purchase_Factor,g.Tier,g.CTIER , '' as Par_Index,BOM_COMPLETE AS COMPLETE ,g.CH_Index,Convert(0,SQL_Float) as Purch_Cost,'' as Loc,'' as Issue_UM,Convert(0,SQL_Float) as Consump_Conv ,Convert(0,SQL_Float) as Consump_Cost,Convert(0,SQL_Float) as Consump_Extended,Convert(0,SQL_Float) as Weight,Convert(0,SQL_Float) as Consump_Weight ,Convert(0,SQL_Float) as ExtendedWeight,Convert(0,SQL_Float) as ExtendedConsumpWeight,Convert(0,SQL_Float) as Ord,Insert_Bom,m.Date_Maintenance ,m.Date_Start,m.Date_Stop,m.BM_Serial_Start,m.BM_Serial_Stop,m.Purge_Flag,m.Ordr_USR_Flag,m.Drawing,m.Date_Last_Chg,m.Time_Last_Chg,m.Last_Chg_By ,m.Last_Chg_Prog,m.Drawing_Size,m.Req_Trace,m.Cost_Date,m.Inactive,m.Chg_Rev,m.Setup_Qty ,g.OldParent ,'' as Sort_Code  from GCG_4986_Stge g inner join Bom_MSTR m on g.Part = m.Parent 	 where g.UserID = '{0}' and g.Trmnl = '{1}' ORDER BY g.Ctier, m.PARENT, m.SEQUENCE_BOM",v.Caller.User,v.Caller.Terminal,v.Local.sSQL)
	
	'Previous version before Aug 06 2020
	'on m.Parent = r.Router and m.Part = r.PART_WC_OUTSIDE
	f.Intrinsic.Control.If(v.DataTable.BPT.Exists)
		f.Data.DataTable.Close("BPT")
	f.Intrinsic.Control.EndIf

	f.Data.DataTable.CreateFromSQL("BPT","conx",v.Local.sSQL,True)
	f.Data.DataTable.Merge("BPT",v.Args.sTargetTable,False,2)
	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Get_BomPhantom_MSTR.End

Program.Sub.GetPhantomBom.Start
F.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iCount.Declare
	V.Local.sParent.Declare
	V.Local.sOldParent.Declare
	V.Local.sParentFilter.Declare
	v.Local.sFilter.Declare	
	v.Local.sSQL.Declare
	v.Local.sPartList.Declare
	v.Local.sHold.Declare
	v.Local.sSampleSQL.Declare
	v.Local.sPhantomWrapper.Declare
	v.Local.sParentList.Declare
	v.Local.sRet.Declare
	v.Local.iCnt.Declare
	
	f.Intrinsic.String.GSSPartString(v.Args.Parent,v.Args.rev,v.Local.sParent)
	f.Intrinsic.String.RPad(" "," ",20,v.Local.sPhantomWrapper)	
	
	'Create sample structure

	f.Intrinsic.String.Build("SELECT m.PARENT AS BPARENT,'' as DESCR_BP, m.SEQUENCE_BOM AS BOM_SEQ ,'' as LINE_ROUTER , m.PART as Part ,'' as DESCRIPTION,'' as DESCRIPTION_2,'' as DESCRIPTION_3, IF(IsNull(m.CATEGORY,'') <> '1', m.QUANTITY ,Convert(0,SQL_Float)) AS QTY,m.COST, m.UM_INVENTORY AS UM,'' AS PL,If(Isnull(m.CATEGORY,'') = '','N',m.CATEGORY)  AS CAT_CODE, SOURCE AS SOURCE_CODE ,Convert(0,sql_float) as Frequency , IF(IsNull(m.CATEGORY,'') = '1' ,m.QUANTITY, Convert(0,SQL_Float)) AS SET_UP, TAG ,Convert(0,SQL_Float) as Purchase_Factor,g.Tier,g.CTIER , '' as Par_Index,BOM_COMPLETE AS COMPLETE ,g.CH_Index,Convert(0,SQL_Float) as Purch_Cost,'' as Loc,'' as Issue_UM,Convert(0,SQL_Float) as Consump_Conv ,Convert(0,SQL_Float) as Consump_Cost,Convert(0,SQL_Float) as Consump_Extended,Convert(0,SQL_Float) as Weight,Convert(0,SQL_Float) as Consump_Weight ,Convert(0,SQL_Float) as ExtendedWeight,Convert(0,SQL_Float) as ExtendedConsumpWeight,Convert(0,SQL_Float) as Ord,Insert_Bom,m.Date_Maintenance ,m.Date_Start,m.Date_Stop,m.BM_Serial_Start,m.BM_Serial_Stop,m.Purge_Flag,m.Ordr_USR_Flag,m.Drawing,m.Date_Last_Chg,m.Time_Last_Chg,m.Last_Chg_By ,m.Last_Chg_Prog,m.Drawing_Size,m.Req_Trace,m.Cost_Date,m.Inactive,m.Chg_Rev,m.Setup_Qty ,g.OldParent ,'' as Sort_Code  from GCG_4986_Stge g inner join Bom_MSTR m on g.Part = m.Parent 	 where g.UserID = '{0}' and g.Trmnl = '{1}' ORDER BY g.Ctier, m.PARENT, m.SEQUENCE_BOM","~@#$","~~~",v.Local.sSampleSQL)

	'Temp_Bom
	f.Intrinsic.Control.If(v.DataTable.Temp_Bom.Exists)
		f.Data.DataTable.Close("Temp_Bom")
	f.Intrinsic.Control.EndIf	
	f.Data.DataTable.CreateFromSQL("Temp_Bom","conx",v.Local.sSampleSQL,True)	
	
	'Temp_Return
	f.Intrinsic.Control.If(v.DataTable.Temp_Return.Exists)
		f.Data.DataTable.Close("Temp_Return")
	f.Intrinsic.Control.EndIf	
	f.Data.DataTable.CreateFromSQL("Temp_Return","conx",v.Local.sSampleSQL,True)
	
	'Stage
	f.Intrinsic.Control.If(v.DataTable.Stage.Exists)
		f.Data.DataTable.Close("Stage")
	f.Intrinsic.Control.EndIf	
	f.Data.DataTable.CreateFromSQL("Stage","conx",v.Local.sSampleSQL,True)	
	
	'FinalStage
	f.Intrinsic.Control.If(v.DataTable.FinalStage.Exists)
		f.Data.DataTable.Close("FinalStage")
	f.Intrinsic.Control.EndIf	
	f.Data.DataTable.CreateFromSQL("FinalStage","conx",v.Local.sSampleSQL,True)		
	
	
	'Build first level
	f.ODBC.Connection!conx.Execute(v.Global.sDeleteExplodeStageSQL)
	f.Intrinsic.String.Build("Insert Into GCG_4986_Stge (UserID,TRMNL,OldParent,Part,Tier,CTier,CH_Index) values ('{0}','{1}','{2}','{2}','',0,'')",v.Caller.User,v.Caller.Terminal,v.Local.sParent.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)	
	f.Intrinsic.String.Build(" = '{0}'",v.Local.sParent.PSQLFriendly,v.Local.sFilter)

	'Add START before populating data
	f.Intrinsic.String.Build("{0} START",v.Local.sParent.Trim,v.Local.sHold)
	'Get Phantom Part basic values (UM,Cat_Code,Source_Code,Cost,Quantity)
	f.Data.DataTable.AddRow("TEMP_BOM","BPARENT",v.Local.sParent,"Part",v.local.sPhantomWrapper,"Description",v.Local.sHold,"DESCRIPTION_2",v.Args.SOURCE,"PL",v.Args.PL,"UM",v.Args.UM,"Cat_Code",v.Args.Cat_Code,"Cost",v.Args.Cost)	
	
	'Get first Level
	f.Intrinsic.Control.CallSub(Get_BomPhantom_Mstr,"sTargetTable","TEMP_BOM","sFilter",v.Local.sFilter)
	
	'Check first level to see if 
	f.Intrinsic.Control.If(v.DataTable.TEMP_BOM.RowCount,=,1)	
		f.Data.DataTable.Close("TEMP_BOM")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No BOM found.","BOM Return")		
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		F.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf	
	
	'Add END 
	f.Intrinsic.String.Build("{0} END",v.Local.sParent.Trim,v.Local.sHold)
	f.Data.DataTable.AddRow("TEMP_BOM","BPARENT",v.Local.sParent,"Part",v.local.sPhantomWrapper,"Description",v.Local.sHold)
	
	'check the sequence 0000 in the getbom sub, if not existed, exitsub, otherwise the treeview building will break.
	F.Intrinsic.String.Build("BPARENT = '{0}' and Bom_Seq = '0000'",V.Local.sParent.PSQLFriendly,v.Local.sFilter)
	f.Data.DataView.Create("TEMP_BOM","dv0000check",22,v.Local.sFilter,"")
	f.Intrinsic.Control.If(v.DataView.TEMP_BOM!dv0000check.RowCount,=,0)
		'f.Intrinsic.UI.CloseWaitDialog
		f.Data.DataTable.Close("TEMP_BOM")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("The parent Bom does not have the Bom Sequence 0000 from DB.","Invalid")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		F.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Close("TEMP_BOM","dv0000check")
	
	'Set TIER,CTIER,CH_Index for first level
	F.Data.DataTable.SetValue("TEMP_BOM",-1,"TIER",V.Args.CTier)
	f.Data.DataTable.SetSeries("TEMP_BOM","CTIER",0,1)	
	F.Data.DataTable.RemoveColumn("TEMP_BOM","CH_INDEX")
	F.Data.DataTable.AddExpressionColumn("TEMP_BOM","CH_INDEX","STRING","IIF(TIER < '1', CTIER, TIER + '.' + CTIER)")
	
	'Merge 1st level to Bom
	F.Data.DataTable.Merge("TEMP_BOM","BomPhantom",False,2)
	F.Data.DataTable.AcceptChanges("BomPhantom")

	'remove the parent item so we don't join it's children in again
	f.Data.DataTable.DeleteRow("TEMP_BOM",v.DataTable.Temp_Bom.RowCount--)
	f.Data.DataTable.DeleteRow("Temp_Bom",1)
	f.Data.DataTable.DeleteRow("Temp_Bom",0)
	f.Data.DataTable.AcceptChanges("Temp_Bom")
	F.Data.DataTable.RemoveColumn("TEMP_BOM","OLDPARENT")
	f.Data.DataTable.AcceptChanges("Temp_Bom")
	F.Data.DataTable.AddExpressionColumn("TEMP_BOM","OLDPARENT","STRING","BPARENT")	
	
	'Loop next level
	F.Intrinsic.Control.DoUntil(V.DataTable.TEMP_BOM.RowCount,<,1)	
		'Prepare parent part list for the next level
		f.Data.DataView.Create("TEMP_BOM","v_Lev")
		f.Data.DataView.ToString("TEMP_BOM","v_Lev","PART","","*!*",V.Local.sPartList)
		f.Intrinsic.String.Replace(v.Local.sPartList,"'","''",v.Local.sPartList)
		f.Intrinsic.String.Replace(v.Local.sPartList,"*!*","','",v.Local.sPartList)
		'Save parent list of the level
		f.ODBC.Connection!conx.Execute(v.Global.sDeleteExplodeStageSQL)
		f.Data.DataTable.AddColumn("TEMP_BOM","UserID","String",v.Caller.User)
		f.Data.DataTable.AddColumn("TEMP_BOM","Trmnl","String",v.Caller.Terminal)
		f.Data.DataTable.SaveToDB("TEMP_BOM","conx","GCG_4986_Stge","",128,"UserID@!@UserID*!*Trmnl@!@Trmnl*!*OLDPARENT@!@OLDPARENT*!*Part@!@Part*!*TIER@!@TIER*!*CTIER@!@CTIER*!*CH_Index@!@CH_Index")
		f.Intrinsic.String.Build(" IN ('{0}')",v.Local.sPartList,v.Local.sFilter)
		
		f.Data.DataTable.Close("TEMP_BOM")	
		
		f.Data.DataTable.DeleteRow("Temp_Return")
		f.Data.DataTable.AcceptChanges("Temp_Return")		
		f.Intrinsic.Control.CallSub(Get_BomPhantom_Mstr,"sTargetTable","TEMP_RETURN","sFilter",v.Local.sFilter)	
	
		F.Intrinsic.Control.If(V.DataTable.TEMP_RETURN.RowCount,>,0)
			'f.Data.DataTable.AddExpressionColumn("TEMP_RETURN","CH_INDEX","STRING","TIER + '.' + CTIER")
			f.Intrinsic.Control.If(v.DataView.Temp_Return!V_RETURN.Exists)
				f.Data.DataView.Close("TEMP_RETURN","V_RETURN")
			f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.If(v.DataView.Temp_Return!V_PARENTS.Exists)
				f.Data.DataView.Close("TEMP_RETURN","V_PARENTS")
			f.Intrinsic.Control.EndIf			
			
			F.Data.DataView.Create("TEMP_RETURN","V_RETURN",22)
			F.Data.DataView.Create("TEMP_RETURN","V_PARENTS",22,"BOM_SEQ = '0000'","CTIER")
			
			f.Data.DataTable.DeleteRow("FinalStage")
			f.Data.DataTable.AcceptChanges("FinalStage")
			
			'for each parent item in view, filter our v_return and then set the tier and ctier values for that set of parts
			F.Intrinsic.Control.For(V.Local.iCount,0,V.DataView.TEMP_RETURN!V_PARENTS.RowCount--,1)
				V.Local.sParent.Set(v.DataView.TEMP_RETURN!V_PARENTS(V.Local.iCount).BPARENT!FIELDVAL)
				v.Local.sOldParent.Set(v.DataView.TEMP_RETURN!V_PARENTS(V.Local.iCount).OLDPARENT!FIELDVAL)
				'To avoid part number is dublicated, we enforce by adding the condition CH_Index in the filter
				F.Intrinsic.String.Build("OLDPARENT = '{0}' AND BPARENT = '{1}' and CH_Index = '{2}'",V.Local.sOldParent,V.Local.sParent,v.DataView.TEMP_RETURN!V_PARENTS(V.Local.iCount).CH_INDEX!FIELDVAL,V.Local.sParentFilter)
				f.Data.DataView.SetFilter("TEMP_RETURN","V_RETURN",V.Local.sParentFilter)
				
				f.Data.DataTable.DeleteRow("Stage")
				f.Data.DataTable.AcceptChanges("Stage")
				
				'Add START
				f.Intrinsic.String.Build("{0} START",v.Local.sParent.Trim,v.Local.sHold)
				f.Data.DataTable.AddRow("Stage","BPARENT",v.Local.sParent,"Part",v.local.sPhantomWrapper,"Description",v.Local.sHold)
				
				'Merge
				f.Data.DataView.ToDataTable("Temp_Return","v_Return","Stage0",True)
				f.Data.DataTable.Merge("Stage0","Stage",False,2)
				
				'Add END
				f.Intrinsic.String.Build("{0} END",v.Local.sParent.Trim,v.Local.sHold)
				f.Data.DataTable.AddRow("Stage","BPARENT",v.Local.sParent,"Part",v.local.sPhantomWrapper,"Description",v.Local.sHold)	
				
				'Set value and merge to FinalStage
				f.Data.DataTable.SetValue("Stage",-1,"TIER",V.DataView.TEMP_RETURN!V_PARENTS(V.Local.iCount).CH_INDEX!FIELDVALSTRING)
				F.Data.DataTable.SetSeries("Stage","CTIER",0,1)
				f.Data.DataTable.Merge("Stage","FinalStage",False,2)
				
				f.Data.DataTable.Close("Stage0")
				
			F.Intrinsic.Control.Next(V.Local.iCount)

			'added: for temp_return, CH_Index must be reindexed before adding to Bom
			F.Data.DataTable.RemoveColumn("FinalStage","CH_INDEX")
			
			F.Data.DataTable.AddExpressionColumn("FinalStage","CH_INDEX","STRING","IIF(TIER < '1', CTIER, TIER + '.' + CTIER)")			
			F.Data.DataTable.RemoveColumn("FinalStage","OLDPARENT")	
			
			'Delete Parent from BomPhantom as we don't want to display the parent (the parent is exploded as Start, End)
			f.Data.DataView.Create("FinalStage","vDel",22,"","")
			f.Data.DataView.ToString("FinalStage","vDel","Tier","","','",v.Local.sParentList)
			f.Data.DataView.Close("FinalStage","vDel")
			f.Intrinsic.String.Build("CH_Index in ('{0}')",v.Local.sParentList,v.Local.sFilter)
			f.Data.DataTable.Select("BomPhantom",v.Local.sFilter,v.Local.sRet)
			f.Intrinsic.Control.If(v.Local.sRet,<>,"*!*")
				f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
				f.Intrinsic.Control.For(v.Local.icnt,v.Local.sRet.UBound,0,-1)
					f.Data.DataTable.DeleteRow("BomPhantom",v.Local.sRet(v.Local.iCnt))
				f.Intrinsic.Control.Next(v.Local.icnt)
			f.Intrinsic.Control.EndIf
			f.Data.DataTable.AcceptChanges("BomPhantom")			
			
			F.Data.DataTable.Merge("FinalStage","BomPhantom",False,2)
			f.Data.DataTable.AcceptChanges("BomPhantom")
			
			'Prepare for the next round
			
			F.Data.DataView.Create("FinalStage","V_Lines",22,"BOM_SEQ <> '0000' and ((Description not like '* START') or (Description not like '* END'))","BPARENT,BOM_SEQ")	
			f.Data.DataView.ToDataTable("FinalStage","V_Lines","TEMP_BOM",True)	
			f.Data.DataView.Close("FinalStage","V_Lines")
			F.Data.DataTable.AddExpressionColumn("TEMP_BOM","OLDPARENT","STRING","BPARENT")
			
			F.Data.DataTable.AddColumn("FinalStage","OLDPARENT","String","")	
			f.Data.DataTable.AcceptChanges("FinalStage")			
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.ExitDo			
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Loop

	'Fill fields from Inventory, only for empty cells
	f.Intrinsic.Control.CallSub(Fill_Empty_Cells_BomPhantom)

	'Also Reorder Bom to have a better visibility *** what you see is what you get
	f.Intrinsic.Control.CallSub(ReIndex_BomPhantom_WhatSee_Is_WhatGet)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GetPhantomBom.End

Program.Sub.ReIndex_BomPhantom_WhatSee_Is_WhatGet.Start
'This sub is to reindex the BOM table following the treeview, the BOM table after reindexed will have the order as what you see in the treeview
F.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sIndex.Declare
	v.Local.iCnt.Declare
	v.Local.iInner.Declare
	
	f.Intrinsic.Control.If(v.DataTable.BOMPhantom.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'Create Bom_Ord_Temp being indexed	
	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataTable.BomPhantom.RowCount--,1)
		F.Intrinsic.String.Split(V.DataTable.BOMPhantom(v.Local.iCnt).CH_Index!FieldValTrim,".",v.Local.sIndex)
		f.Intrinsic.Control.For(v.Local.iInner,0,v.Local.sIndex.UBound,1)
			f.Intrinsic.String.LPad(v.Local.sIndex(v.Local.iInner),"0",3,v.Local.sIndex(v.Local.iInner))
		f.Intrinsic.Control.Next(v.Local.iInner)
		f.Intrinsic.String.Join(v.Local.sIndex,"",v.Local.sIndex)
		f.Intrinsic.String.RPad(v.Local.sIndex,"0",24,v.Local.sIndex)
		f.Data.DataTable.SetValue("BomPhantom",v.Local.iCnt,"Ord",v.Local.sIndex)
	F.Intrinsic.Control.Next(V.Local.iCnt)
	
	f.Data.DataView.Create("BomPhantom","Bom_Ord",22,"","Ord")	
	f.Data.DataView.ToDataTable("BomPhantom","Bom_Ord","TempOrd",True)
	f.Data.DataView.Close("BomPhantom","Bom_Ord")
	
	f.Data.DataTable.DeleteRow("BomPhantom")
	f.Data.DataTable.AcceptChanges("BomPhantom")
	f.Data.DataTable.Merge("TempOrd","BomPhantom",False,2)
	f.Data.DataTable.AcceptChanges("BomPhantom")
	f.Data.DataTable.Close("TempOrd")

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ReIndex_BomPhantom_WhatSee_Is_WhatGet.End

Program.Sub.Fill_Empty_Cells_BomPhantom.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sFilter.Declare
	v.Local.sParts.Declare
	v.Local.sSQL.Declare
	v.Local.iCnt.Declare
	v.Local.sAPart.Declare
	v.Local.sParents.Declare
	V.Local.bExist.Declare
	
	f.Intrinsic.Control.If(v.DataView.BomPHantom!vFill.Exists)
		f.Data.DataView.Close("BomPhantom","vFill")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("BomPhantom","vFill")
	'Later when setting view, we need to go backward v.local.iCnt because we will set value to view which change the view itself
	
	'DESCR_BP: Fill from Bom_Eng.Description, if empty, fill from Router_Header.Description_Router, else Inventory_Mstr.Description
	f.Data.DataTable.ColumnToString("BomPhantom","Part",v.Local.sParents)
	f.Intrinsic.String.Replace(v.Local.sParents,"'","''",v.Local.sParents)
	f.Intrinsic.String.Replace(v.Local.sParents,"*!*","','",v.Local.sParents)	
	f.Intrinsic.String.Build("Select rtrim(b.Part) as Part,If(rtrim(b.Description) <> '',b.Description,If(IsNull(rtrim(r.Description_Router),'') <> '',r.Description_Router,Isnull(i.Description,''))) from Bom_Eng b LEFT JOIN V_Router_Header r on b.Part = r.Router Left JOIN (Select Part,Location,Description from Inventory_MSTR where Part in ('{0}') and Location = '{1}') i on b.Part = i.Part where b.Part in ('{0}') and b.Location = '{1}'",v.Local.sParents,v.Global.sDefaultLoc,v.Local.sSQL)
	f.Data.Dictionary.CreateFromSQL("dictParentDescr","conx",v.Local.sSQL)
	f.Data.Dictionary.SetDefaultReturn("dictParentDescr","")	
	f.Data.DataView.SetFilter("BomPhantom","vFill","Descr_BP is Null or Trim(Descr_BP) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomPHantom!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BomPHantom!vFill(V.Local.iCnt).BParent!FieldValTrim)
		f.Data.DataView.SetValue("BomPhantom","vFill",v.Local.iCnt,"Descr_BP",v.Dictionary.dictParentDescr![v.Local.sAPart])		
	f.Intrinsic.Control.Next(v.Local.iCnt)	
	f.Data.Dictionary.Close("dictParentDescr")	

	'DESCRIPTION: Fill from Bom_Eng.Description, if empty, fill from Router_Header.Description_Router, else Inventory_Mstr.Description
	f.Data.DataTable.ColumnToString("BomPhantom","Part",v.Local.sParts)
	f.Intrinsic.String.Replace(v.Local.sParts,"'","''",v.Local.sParts)
	f.Intrinsic.String.Replace(v.Local.sParts,"*!*","','",v.Local.sParts)	
	f.Intrinsic.String.Build("Select Rtrim(b.Part) as Part,If(rtrim(b.Description) <> '',b.Description,If(IsNull(rtrim(r.Description_Router),'') <> '',r.Description_Router,Isnull(i.Description,''))) from Bom_Eng b LEFT JOIN V_Router_Header r on b.Part = r.Router Left JOIN (Select Part,Location,Description from Inventory_MSTR where Part in ('{0}') and Location = '{1}') i on b.Part = i.Part where b.Part in ('{0}') and b.Location = '{1}'",v.Local.sParts,v.Global.sDefaultLoc,v.Local.sSQL)
	f.Data.Dictionary.CreateFromSQL("dictPartDescr","conx",v.Local.sSQL)
	f.Data.Dictionary.SetDefaultReturn("dictPartDescr","")
	f.Data.DataTable.AddExpressionColumn("BomPhantom","PartTrim","String","Trim(Part)")
	f.Data.DataView.SetFilter("BomPhantom","vFill","Description is Null or Trim(Description) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomPHantom!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BomPHantom!vFill(V.Local.iCnt).PartTrim!FieldValTrim)
		f.Data.DataView.SetValue("BomPhantom","vFill",v.Local.iCnt,"Description",v.Dictionary.dictPartDescr![v.Local.sAPart])		
	f.Intrinsic.Control.Next(v.Local.iCnt)	
	f.Data.Dictionary.Close("dictPartDescr")	
	'If still empty, get router_header.Description_Router, else Inventory_MSTR.Description
	f.Intrinsic.String.Build("Select rtrim(r.Router) as Router,If(rtrim(r.Description_Router) <> '',r.Description_Router,Isnull(i.Description,'')) from V_Router_Header r Left JOIN (Select Part,Location,Description from Inventory_MSTR where Part in ('{0}') and Location = '{1}') i on r.Router = i.Part where r.Router in ('{0}') ",v.Local.sParts,V.Global.sDefaultLoc,v.Local.sSQL)
	f.Data.Dictionary.CreateFromSQL("dictPartDescrRI","conx",v.Local.sSQL)
	f.Data.Dictionary.SetDefaultReturn("dictPartDescrRI","")	
	f.Data.DataView.SetFilter("BomPhantom","vFill","Description is Null or Trim(Description) = ''")	
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomPHantom!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BomPHantom!vFill(V.Local.iCnt).PartTrim!FieldValTrim)
		f.Data.DataView.SetValue("BomPhantom","vFill",v.Local.iCnt,"Description",v.Dictionary.dictPartDescrRI![v.Local.sAPart])
	f.Intrinsic.Control.Next(v.Local.iCnt)		
	f.Data.Dictionary.Close("dictPartDescrRI")
	
	'Description 2 & 3
	f.Intrinsic.String.Build("Select rtrim(r.Router) as Router,If(rtrim(r.Desc_Router_2) <> '',r.Desc_Router_2,Isnull(i.DESCRIPTION_2,'')) as Description_2,If(rtrim(r.Desc_Router_3) <> '',r.Desc_Router_3,Isnull(i.DESCRIPTION_3,'')) as Description_3 from V_Router_Desc r Left JOIN (Select Part,Location,Description_2,Description_3 from Inventory_MST2 where Part in ('{0}') and Location = '{1}') i on r.Router = i.Part where r.Router in ('{0}')",v.Local.sParts,V.Global.sDefaultLoc,v.Local.sSQL)
	f.Data.DataTable.CreateFromSQL("Desc23","conx",v.Local.sSQL,True)
		
	'DESCRIPTION_2: get Router_Desc.Desc_Router_2, if not found, Inventory_Mst2.Description_2
	f.Data.Dictionary.CreateFromDatatable("dictDesc2","Desc23","Router","Description_2")
	f.Data.Dictionary.SetDefaultReturn("dictDesc2","")
	f.Data.DataView.SetFilter("BomPhantom","vFill","Description_2 is Null or Trim(Description_2) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomPHantom!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BomPHantom!vFill(V.Local.iCnt).PartTrim!FieldValTrim)
		f.Data.DataView.SetValue("BomPhantom","vFill",v.Local.iCnt,"Description_2",v.Dictionary.dictDesc2![v.Local.sAPart])
	f.Intrinsic.Control.Next(v.Local.iCnt)		
	f.Data.Dictionary.Close("dictDesc2")
	
	'DESCRIPTION_3: get Router_Desc.Desc_Router_3, if not found, Inventory_Mst2.Description_3
	f.Data.Dictionary.CreateFromDatatable("dictDesc3","Desc23","Router","Description_3")
	f.Data.Dictionary.SetDefaultReturn("dictDesc3","")
	f.Data.DataView.SetFilter("BomPhantom","vFill","Description_3 is Null or Trim(Description_3) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomPHantom!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BomPHantom!vFill(V.Local.iCnt).PartTrim!FieldValTrim)
		f.Data.DataView.SetValue("BomPhantom","vFill",v.Local.iCnt,"Description_3",v.Dictionary.dictDesc3![v.Local.sAPart])
	f.Intrinsic.Control.Next(v.Local.iCnt)	
	f.Data.Dictionary.Close("dictDesc3")	
	
	f.Data.DataTable.Close("Desc23")	
	f.Data.DataTable.RemoveColumn("BomPhantom","PartTrim")
	
	'Product Line
	'First fill from Router_Header.Prod_Line	
	f.Intrinsic.String.Build("Select Rtrim(Router) as Router,Prod_Line from v_Router_Header where Router in ('{0}') ",v.Local.sParts,v.Local.sSQL)
	f.Data.Dictionary.CreateFromSQL("dictPL","conx",v.Local.sSQL)
	f.Data.Dictionary.SetDefaultReturn("dictPL","")
	f.Data.DataView.SetFilter("BomPhantom","vFill","PL is Null or Trim(PL) = ''")
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomPHantom!vFill.RowCount--,0,-1)
		v.Local.sAPart.Set(v.DataView.BomPHantom!vFill(V.Local.iCnt).Part!FieldValTrim)
		f.Data.DataView.SetValue("BomPhantom","vFill",v.Local.iCnt,"PL",v.Dictionary.dictPL![v.Local.sAPart])
	f.Intrinsic.Control.Next(v.Local.iCnt)	
	f.Data.Dictionary.Close("dictPL")	
	'If still empty cells fill from Inventory_Mstr
	f.Data.Dictionary.Exists("PROD_LINES",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("BomPhantom","vFill","PL is Null or Trim(PL) = ''")
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomPHantom!vFill.RowCount--,0,-1)
			v.Local.sAPart.Set(v.DataView.BomPHantom!vFill(V.Local.iCnt).Part!FieldValTrim)
			f.Data.DataView.SetValue("BomPhantom","vFill",v.Local.iCnt,"PL",v.Dictionary.PROD_LINES![v.Local.sAPart])
		f.Intrinsic.Control.Next(v.Local.iCnt)			
	f.Intrinsic.Control.EndIf
	
	'PURCONSERSION	
	f.Data.Dictionary.Exists("PURCONVERSION",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)		
		f.Data.DataView.SetFilter("BomPhantom","vFill","PURCHASE_FACTOR is Null or PURCHASE_FACTOR = 0")
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomPHantom!vFill.RowCount--,0,-1)
			v.Local.sAPart.Set(v.DataView.BomPHantom!vFill(V.Local.iCnt).Part!FieldValString)
			f.Data.DataView.SetValue("BomPhantom","vFill",v.Local.iCnt,"PURCHASE_FACTOR",v.Dictionary.PURCONVERSION![v.Local.sAPart.Trim])
		f.Intrinsic.Control.Next(v.Local.iCnt)		
	f.Intrinsic.Control.EndIf
	
	'IssueUM
	f.Data.Dictionary.Exists("IssueUM",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("BomPhantom","vFill","Issue_UM is Null or Trim(Issue_UM) = ''")
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomPHantom!vFill.RowCount--,0,-1)
			v.Local.sAPart.Set(v.DataView.BomPHantom!vFill(V.Local.iCnt).Part!FieldValString)
			f.Data.DataView.SetValue("BomPhantom","vFill",v.Local.iCnt,"Issue_UM",v.Dictionary.IssueUM![v.Local.sAPart.Trim])
		f.Intrinsic.Control.Next(v.Local.iCnt)	
	f.Intrinsic.Control.EndIf
	
	'ConsumpConv
	f.Data.Dictionary.Exists("ConsumpConv",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("BomPhantom","vFill","Consump_Conv is Null or Consump_Conv = 0")
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomPHantom!vFill.RowCount--,0,-1)
			v.Local.sAPart.Set(v.DataView.BomPHantom!vFill(V.Local.iCnt).Part!FieldValString)
			f.Data.DataView.SetValue("BomPhantom","vFill",v.Local.iCnt,"Consump_Conv",v.Dictionary.ConsumpConv![v.Local.sAPart.Trim])
		f.Intrinsic.Control.Next(v.Local.iCnt)		
	f.Intrinsic.Control.EndIf	
	
	'Weight
	f.Data.Dictionary.Exists("dictWeight",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.DataView.SetFilter("BomPhantom","vFill","Weight is Null or Weight is Null or Weight = 0")
		f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.BomPHantom!vFill.RowCount--,0,-1)
			v.Local.sAPart.Set(v.DataView.BOMPhantom!vFill(V.Local.iCnt).Part!FieldValString)
			f.Data.DataView.SetValue("BomPhantom","vFill",v.Local.iCnt,"Weight",v.Dictionary.dictWeight![v.Local.sAPart.Trim])
		f.Intrinsic.Control.Next(v.Local.iCnt)			
	f.Intrinsic.Control.EndIf	
	
	f.Data.DataView.Close("BomPhantom","vFill")	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Fill_Empty_Cells_BomPhantom.End

Program.Sub.cmdBrwComment_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	v.Local.sHold.Declare
	
	F.Intrinsic.String.Build("SELECT OPERATION, DESCRIPTION FROM V_OP_CODES WHERE LMO = '{0}'","C",V.Local.sSql)
	f.Intrinsic.UI.Browser("SELECT OP CODE","conx",v.Local.sSql,"OPERATION*!*DESCRIPTION","300*!*600",V.Local.sRet)	
	'biuld the return
	f.Intrinsic.Control.If(v.Ambient.BrowserButton,=,0)
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		f.Intrinsic.Control.If(v.Local.sRet.UBound,=,1)
			gui.Comment.txtCode.Text(v.Local.sRet(0))
			gui.Comment.txtDescr.Text(v.Local.sRet(1))
			v.Local.sHold.Set(V.Local.sRet(0).TRIM)
			F.Intrinsic.String.Build("select TEXT from v_OPCODE_TEXT where LMO = 'C' and OPERATION = '{0}'",v.Local.sHold.PSQLFriendly,V.Local.sSql)
			f.ODBC.Connection!conx.executeandreturn(V.Local.sSql,V.Local.sRet)
			GUI.Comment.txtComment.Text(V.Local.sRet)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.cmdBrwComment_Click.End

Program.Sub.cmdComOK_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	f.Intrinsic.Variable.AddRV("ButtonClicked","OK")
	gui.Comment..Visible(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdComOK_Click.End

Program.Sub.Comment_UnLoad.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	f.Intrinsic.Variable.AddRV("ButtonClicked","CLOSE")
	gui.Comment..Visible(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.Comment_UnLoad.End

Program.Sub.instask.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sTask.Declare
	v.Local.sCode.Declare
	v.Local.sDesc.Declare
	v.Local.sText.Declare
	v.Local.sSql.Declare
	v.Local.sOldSeq.Declare
	v.Local.sRSeq.Declare
	v.Local.sPart.Declare
	v.Local.sRet.Declare
	V.Local.iRow.Declare
	v.Local.sHold.Declare
	v.Local.sRow.Declare
	v.Local.iSerie.Declare
	
	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sRow)
	f.Intrinsic.Control.If(v.Local.sRow,=,"")	
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	V.Local.iRow.Set(V.Local.sRow)
	
	f.Global.General.ReadOption("401238",1,"",v.Local.sTask)
	f.Intrinsic.String.Build("select operation, description from v_op_codes where machine = '{0}'",v.Local.sTask,v.Local.sSql)
		
	F.Intrinsic.UI.Browser("Task Operations","conx",v.Local.sSql,"OP*!*DESCRIPTION","75*!*150",V.Local.sText)
	
	f.Intrinsic.Control.If(v.Local.sTask,<>,v.Ambient.cancel)
		f.Intrinsic.String.Split(v.Local.sText,"*!*",v.Local.sText)
		V.Local.sHold.Set(V.Local.sText(0))
		F.Intrinsic.String.Build("SELECT LMO,MACHINE,OPERATION,DESCRIPTION,STANDARD_SETUP,STANDARD_RUNTIME,UNIT_MEASURE,FREQUENCY,MULTIPLE FROM V_OP_CODES WHERE MACHINE = '{0}' AND OPERATION = '{1}'",V.Local.sTask.PSQLFriendly,v.Local.sHold.PSQLFriendly,V.Local.sSql)
		F.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sText)
		f.Intrinsic.String.Split(v.Local.sText,"*!*",v.Local.sText)
		
		V.Local.sOldSeq.Set(V.DataTable.CHILD(v.Local.iRow).RTR_SEQ!FIELDVALTRIM)
		f.Intrinsic.Math.Add(v.Local.sOldSeq,V.Global.iRSeq,v.Local.sRSeq)
		f.Intrinsic.String.LPad(v.Local.sRSeq,"0",6,v.Local.sRSeq)
		
		'resequence the rest of the router to insert this new line
		F.Intrinsic.Control.CallSub(InsSequence,"SEQ",V.Local.sOldSeq,"OPERATOR",">","MULTI",V.Global.iRSeq)
		f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.text,v.Screen.Form!txtFocusRev.text,v.Local.sPart)		
		
		F.ODBC.Connection!com.opencommonconnection
		
		f.Intrinsic.String.Build("SELECT GS_USER as ID, CAST('U' AS CHAR(1)) AS TYPE, (FIRST_NAME + ' ' + LAST_NAME) AS DESCR FROM USER_INFORMATION WHERE COMPANY IN ('{0}','')",v.Caller.CompanyCode,v.Local.sSql)
		F.Data.DataTable.CreateFromSQL("GROUPS","COM",V.Local.sSql,True)
		
		F.Data.DataTable.CreateFromSQL("TGROUP","conx","SELECT DISTINCT ENG_GROUP AS ID, CAST('G' AS CHAR(1)) AS TYPE, 'GROUP' AS DESCR FROM V_ENG_GROUP",True)
		f.Data.DataTable.Merge("TGROUP","GROUPS",True,2)
		f.Data.DataTable.Close("TGROUP")
		F.Data.DataView.Create("GROUPS","VGROUPS",22)
		F.Data.DataView.ToString("GROUPS","VGROUPS","*!*","@!@",V.Local.sSql)
		F.Data.DataTable.Close("GROUPS")
		
		
		'the user has selected a task, and the task requires a signoff, so I'm going to put them in a loop if they try to cancel the selection from this browser.
		f.Intrinsic.Control.Label("taskbrowser")
		
		f.Intrinsic.UI.BrowserFromString("Must Select Task Signoff",V.Local.sSql,"*!*","@!@","ID*!*Type*!*Description","100*!*25*!*150",v.Local.sRet)
		
		f.Intrinsic.Control.If(v.Local.sRet,<>,v.Ambient.Cancel)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.GoTo("taskbrowser")
		f.Intrinsic.Control.EndIf
		
		f.ODBC.Connection!com.Close
		
		'Get next Serie
		f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
		f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)		
		
		'add the non-inventory line item
		f.Data.DataTable.AddRow("CHILD","BPARENT",v.Local.sPart,"DESCR_BP",V.Screen.Form!txtFocusDescr.text,"RTR_SEQ",V.Local.sRSeq,"PART",v.Local.sTask,"DESCRIPTION",v.Local.sText(3),"CAT_CODE","L","OP_CODE",V.LocaL.sText(2),"LMO","T","UM",V.Local.sText(6),"SET_UP",V.Local.sText(4),"FREQUENCY",V.Local.sText(7),"QTY",V.Local.sText(5),"SIGNOFF_GRPUSR",V.Local.sRet(0),"SIGNOFF_TYPE",V.Local.sRet(1),"Serie",v.Local.iSerie)	
		v.Global.bRouterChanged.Set(True)
		'refresh the view	
		gui.Form.GGC_Bom.MainView("GV_CHILD")
		f.Data.DataTable.AcceptChanges("CHILD")
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.instask.End

Program.Sub.GGC_OPCODE_RowClick.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sLines.Declare
	v.Local.sSeq.Declare
	v.Local.sBSeq.Declare
	v.Local.iRow.Declare
	v.Local.iIncrease.Declare
	v.Local.iMulti.Declare
	v.Local.iCount.Declare
	v.Local.sKey.Declare
	v.Local.sTask.Declare
	v.Local.sParent.Declare
	v.Local.sTargetRow.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sUbound.Declare
	v.Local.iSeqSort.Declare
	v.Local.sRTR_Seq_ColIndex.Declare
	v.Local.sFilter.Declare
	v.Local.sHold.Declare
	v.Local.bInserted.Declare
	v.Local.bAboveException.Declare
	v.Local.iSerie.Declare

	f.Intrinsic.Control.If(v.Global.iRights,=,0)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'Check: must be right click, bom complete flag not completed, user right (normal,estimator,engineer),datatable Child exist
	f.Intrinsic.Control.If(v.Args.Button.Ucase,<>,"RIGHT",or,v.Global.bReadOnly,=,True,v.Global.iRights,<=,0,v.DataTable.CHILD.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	'Validate if Router header is created
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No router or parent part in focus.","Cannot insert sequence")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.BlockEvents
	
	gui.Form.GGC_OPCODE.GetSelectedRows("GV_OPERATIONS",v.Local.sLines)
	f.Intrinsic.Control.If(v.Local.sLines.Trim,=,"")
		f.Intrinsic.Control.UnBlockEvents				
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Split(v.Local.sLines,"*!*",v.Local.sLines)
	
	'Insert Manual can be done by only 1 record at a time
	f.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,True,and,v.Local.sLines.UBound,>=,1)
		f.Intrinsic.Control.CallSub(Msg2Lines,"Title","Manually Insert Instructions","MainLine","ONLY 1 sequence can be inserted at a time.","FirstLine","Type in the Sequence number at the Manual textbox.","SecondLine","At OpCode grid: Left click ONLY 1 row, then Right click to insert.")
		gui.Form.txtManualSeq.SetFocus
		f.Intrinsic.Control.UnBlockEvents				
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	
	'If Insert Manual option is selected we don't need the user to select a row
	f.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,True)
		'Validate the sequence entered by user. If it does not exists in the current router, it is valid. Then check if is a NORMAL sequence
		f.Intrinsic.String.LPad(v.Screen.Form!txtManualSeq.Text.Trim,"0",6,v.Local.sTargetSeq)
		f.Intrinsic.Control.If(v.Local.sTargetSeq,=,"",or,v.Local.sTargetSeq,=,"000000",v.Local.sTargetSeq,>=,990000)
			f.Intrinsic.Control.CallSub(Msg2Lines,"Title","Manually Insert Instructions","MainLine","Requirement: 000000 < Op Code sequence < 990000.","FirstLine","Please enter a valid Op Code sequence at Manual textbox.","SecondLine","Valid sequence must be in range (0,990000).")				
			gui.Form.txtManualSeq.SetFocus
			f.Intrinsic.Control.UnBlockEvents				
			f.Intrinsic.Control.ExitSub	
		f.Intrinsic.Control.EndIf
		'Check if target sequence exists
		f.Intrinsic.String.Build("RTR_Seq = '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
		f.Data.DataView.Create("CHILD","vSeqExist",22,v.Local.sFilter,"")
		f.Intrinsic.Control.If(v.DataView.CHILD!vSeqExist.RowCount,>,0)
			f.Data.DataView.Close("CHILD","vSeqExist")
			f.Intrinsic.String.Build("Sequence {0} already exists in the current Router.",v.Local.sTargetSeq,v.Local.sHold)				
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox(v.Local.sHold,"Manually Insert Instructions")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			gui.Form.txtManualSeq.SetFocus
			f.Intrinsic.Control.UnBlockEvents				
			f.Intrinsic.Control.ExitSub	
		f.Intrinsic.Control.EndIf
		f.Data.DataView.Close("CHILD","vSeqExist")
		
	'Insert Manual option is not selected, we need user to select a row from Router grid
	f.Intrinsic.Control.Else
	
		'Get the selected Row from the Router grid
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sTargetRow)
	
		'User does not select a router row
		f.Intrinsic.Control.If(v.Local.sTargetRow.Trim,=,"")
			f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,1)
				f.Intrinsic.Control.CallSub(Msg3Lines,"Title","Above/Below Insert Instructions","MainLine","Requirements:","FirstLine","Select a Normal sequence from Router grid between (0,990000).","SecondLine","Select Above/Below radio button.","ThirdLine","At OpCode grid: Right click to insert.")	
				f.Intrinsic.Control.UnBlockEvents				
				f.Intrinsic.Control.ExitSub	
				
			'This case CHILD Rowcount = 1, meaning there is the header and no row for sequence yet
			f.Intrinsic.Control.Else				
				v.Local.sTargetRow.Set(0)
				f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)				
			f.Intrinsic.Control.EndIf
			
		'User currently select a router row, the row must be a normal sequence	
		f.Intrinsic.Control.Else	
			f.Intrinsic.String.Split(v.Local.sTargetRow,"*!*",v.Local.sTargetRow)
			v.Local.sUbound.Set(v.Local.sTargetRow.UBound)
			v.Local.sTargetRow.Set(v.Local.sTargetRow(v.Local.sUbound))
			v.Local.sTargetSeq.Set(v.DataTable.CHILD(V.Local.sTargetRow).RTR_SEQ!FieldValString)
			f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,=,"99")			
				f.Intrinsic.Control.If(v.DataView.CHILD!vNormFind.Exists)
					f.Data.DataView.Close("CHILD","vNormFind")
				f.Intrinsic.Control.EndIf
				f.Data.DataView.Create("CHILD","vNormFind",22,"RTR_Seq > '000000' and RTR_Seq < '990000'","RTR_Seq")
				'If there is a normal sequence but user did not select, display message
				f.Intrinsic.Control.If(v.DataView.child!vNormFind.RowCount,>,0)
					f.Intrinsic.Control.CallSub(Msg3Lines,"Title","Above/Below Insert Instructions","MainLine","Requirements:","FirstLine","Select a Normal sequence from Router grid between (0,990000).","SecondLine","Select Above/Below radio button.","ThirdLine","At OpCode grid: Right click to insert.")	
					f.Intrinsic.Control.UnBlockEvents
					f.Intrinsic.Control.ExitSub	
				'If there is no normal sequence, and user selected a 99XXXX, we still move on and add the first normal sequence	
				f.Intrinsic.Control.Else
					v.Local.sTargetRow.Set(0)
					f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)
				f.Intrinsic.Control.EndIf						
			f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1,or,v.DataTable.CHILD.RowCount,=,2)
		v.Local.bAboveException.Set(True)
	f.Intrinsic.Control.EndIf

	gui.Form.GGC_Bom.SuspendLayout
	f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)
	f.Intrinsic.String.GSSPartString(v.screen.Form!txtFocusParent.text.Trim,v.Screen.Form!txtFocusRev.text.Trim,v.Local.sParent)
	
	'now we have the target sequence, loop through the lines to add
	f.Intrinsic.Control.If(v.Screen.Form!optInsertAbove.Value,=,True)
		'Loop backward for inserting Above
		f.Intrinsic.Math.Sub(-2,v.Local.sLines.UBound,v.Local.iSeqSort)
	f.Intrinsic.Control.EndIf
	
	'Loop inserting Below or Manual
	f.Intrinsic.Control.For(v.Local.iCount,0,v.Local.sLines.UBound,1)
		f.Intrinsic.Math.Add(v.Local.iSeqSort,1,v.Local.iSeqSort)
		v.Local.sKey.Set(v.Local.sLines(v.Local.iCount))
		
		f.Intrinsic.Control.If(v.DataTable.OPERATIONS(V.Local.sKey).WG!FIELDVALTRIM,=,V.Global.sTask)
			V.Local.sTask.Set("T")
		F.Intrinsic.Control.Else
			V.Local.sTask.Set("L")
		f.Intrinsic.Control.EndIf
		
		'Get next Serie
		f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
		f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)			
		
		f.Data.DataTable.AddRow("CHILD","BPARENT",v.Local.sParent,"DESCR_BP",v.Screen.Form!txtFocusDescr.text.Trim,"RTR_SEQ",v.Local.sTargetSeq,"SeqSort",v.Local.iSeqSort,"PART",V.DataTable.OPERATIONS(V.Local.sKey).WG!FIELDVALTRIM,"LMO","L","DESCRIPTION",V.DataTable.OPERATIONS(V.Local.sKey).DESCR!FIELDVALTRIM,"TYPE",V.Global.sType,"COST",V.DataTable.OPERATIONS(V.Local.sKey).COST!FIELDVALFLOAT,"CAT_CODE",V.Local.sTask,"UM",V.DataTable.OPERATIONS(V.Local.sKey).UM!FIELDVALTRIM,"COMMENTS",V.DataTable.OPERATIONS(V.Local.sKey).TEXT!FIELDVALTRIM,"OP_CODE",V.DataTable.OPERATIONS(V.Local.sKey).WC!FIELDVALTRIM,"SET_UP",V.DataTable.OPERATIONS(V.Local.sKey).SS!FIELDVALFLOAT,"QTY",V.DataTable.OPERATIONS(V.Local.sKey).SR!FIELDVALFLOAT,"COMMENTS",V.DataTable.OPERATIONS(V.Local.sKey).TEXT!FIELDVALTRIM,"Serie",v.Local.iSerie)
		
		v.Local.bInserted.Set(True)
		v.Global.bRouterChanged.Set(True)
		
	f.Intrinsic.Control.Next(v.Local.iCount)
	
	'No need to resequence if it is Manual Insert
	F.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,False)
		'Insert Below case we will ReseqStartFrom_Normal
		f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value)
			f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.Local.sTargetSeq)		
		'Insert Above case
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.If(v.Local.bAboveException.Not)
	
				F.Intrinsic.String.Build("RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
				f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
				F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
					f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
						f.Intrinsic.Control.CallSub(ReSeqNormals)						
					f.Intrinsic.Control.Else	
						f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
					f.Intrinsic.Control.EndIf					
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.CallSub(ReSeqNormals)
				F.Intrinsic.Control.EndIf
				f.Data.DataView.Close("CHILD","vAbove")		
			
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.CallSub(ReSeqNormals)
			f.Intrinsic.Control.EndIf

		f.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.EndIf
	
	'@holder1			
	f.Data.DataTable.AcceptChanges("CHILD")
	
	'If there is a row added, move the focus to that row
	f.Intrinsic.Control.If(v.Local.bInserted)
		Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
		gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)
	f.Intrinsic.Control.EndIf
	
	gui.Form.GGC_Bom.ResumeLayout		

	f.Intrinsic.Control.UnBlockEvents		
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GGC_OPCODE_RowClick.End

Program.Sub.GGC_WC_RowClick.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sLines.Declare
	v.Local.sSeq.Declare
	v.Local.sBSeq.Declare
	v.Local.iRow.Declare
	v.Local.iIncrease.Declare
	v.Local.iMulti.Declare
	v.Local.iCount.Declare
	v.Local.sKey.Declare
	v.Local.sTask.Declare
	V.Local.sParent.Declare
	v.Local.sTargetRow.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sUbound.Declare
	v.Local.iSeqSort.Declare
	v.Local.sRTR_Seq_ColIndex.Declare	
	v.Local.sFilter.Declare
	v.Local.sHold.Declare
	v.Local.bInserted.Declare
	v.Local.bAboveException.Declare	
	v.Local.iSerie.Declare
	
	'v.Local.sHold.Set("BookM")
	
	f.Intrinsic.Control.If(v.Global.iRights,=,0)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		
	
	'Check: must be right click, bom complete flag not completed, user right (normal,estimator,engineer),datatable Child exist
	f.Intrinsic.Control.If(v.Args.Button.Ucase,<>,"RIGHT",or,v.Global.bReadOnly,=,True,v.Global.iRights,<=,0,v.DataTable.CHILD.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate if Router header is created
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No router or parent part in focus.","Cannot insert sequence")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	

	f.Intrinsic.Control.BlockEvents
	
	gui.Form.GGC_WC.GetSelectedRows("GV_WCENTER",v.Local.sLines)
	f.Intrinsic.Control.If(v.Local.sLines.Trim,=,"")		
		f.Intrinsic.Control.UnBlockEvents				
		f.Intrinsic.Control.ExitSub			
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Split(v.Local.sLines,"*!*",v.Local.sLines)
	
	'Insert Manual can be done by only 1 record at a time
	f.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,True,and,v.Local.sLines.UBound,>=,1)
		f.Intrinsic.Control.CallSub(Msg2Lines,"Title","Manually Insert Instructions","MainLine","ONLY 1 sequence can be inserted at a time.","FirstLine","Type in the Sequence number at the Manual textbox.","SecondLine","At Work Center grid: Left click ONLY 1 row, then Right click to insert.")
		gui.Form.txtManualSeq.SetFocus
		f.Intrinsic.Control.UnBlockEvents				
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf	

	'If Insert Manual option is selected we don't need the user to select a row
	f.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,True)
		'Validate the sequence entered by user. If it does not exists in the current router, it is valid. Then check if is a NORMAL sequence
		f.Intrinsic.String.LPad(v.Screen.Form!txtManualSeq.Text.Trim,"0",6,v.Local.sTargetSeq)
		f.Intrinsic.Control.If(v.Local.sTargetSeq,=,"",or,v.Local.sTargetSeq,=,"000000",v.Local.sTargetSeq,>=,990000)
			f.Intrinsic.Control.CallSub(Msg2Lines,"Title","Manually Insert Instructions","MainLine","Requirement: 000000 < Labor sequence < 990000.","FirstLine","Please enter a valid Labor sequence at Manual textbox.","SecondLine","Valid sequence must be in range (0,990000).")			
			gui.Form.txtManualSeq.SetFocus
			f.Intrinsic.Control.UnBlockEvents				
			f.Intrinsic.Control.ExitSub	
		f.Intrinsic.Control.EndIf
		'Check if target sequence exists
		f.Intrinsic.String.Build("RTR_Seq = '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
		f.Data.DataView.Create("CHILD","vSeqExist",22,v.Local.sFilter,"")
		f.Intrinsic.Control.If(v.DataView.CHILD!vSeqExist.RowCount,>,0)
			f.Data.DataView.Close("CHILD","vSeqExist")
			f.Intrinsic.String.Build("Sequence {0} already exists in the current Router.",v.Local.sTargetSeq,v.Local.sHold)				
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox(v.Local.sHold,"Manually Insert Instructions")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			gui.Form.txtManualSeq.SetFocus
			f.Intrinsic.Control.UnBlockEvents				
			f.Intrinsic.Control.ExitSub	
		f.Intrinsic.Control.EndIf
		f.Data.DataView.Close("CHILD","vSeqExist")
		
	'Insert Manual option is not selected, we need user to select a row from Router grid
	f.Intrinsic.Control.Else
	
		'Get the selected Row from the Router grid
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sTargetRow)
	
		'User does not select a router row
		f.Intrinsic.Control.If(v.Local.sTargetRow.Trim,=,"")
			f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,1)
				f.Intrinsic.Control.CallSub(Msg3Lines,"Title","Above/Below Insert Instructions","MainLine","Requirements:","FirstLine","Select a Normal sequence from Router grid between (0,990000).","SecondLine","Select Above/Below radio button.","ThirdLine","At Work Center grid: Right click to insert.")	
				f.Intrinsic.Control.UnBlockEvents
				f.Intrinsic.Control.ExitSub	
				
			'This case CHILD rowcount = 1	
			f.Intrinsic.Control.Else
				v.Local.sTargetRow.Set(0)
				f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)
			f.Intrinsic.Control.EndIf
			
		'User currently select a router row, the row must be a normal sequence	
		f.Intrinsic.Control.Else	
			f.Intrinsic.String.Split(v.Local.sTargetRow,"*!*",v.Local.sTargetRow)
			v.Local.sUbound.Set(v.Local.sTargetRow.UBound)
			v.Local.sTargetRow.Set(v.Local.sTargetRow(v.Local.sUbound))
			v.Local.sTargetSeq.Set(v.DataTable.CHILD(V.Local.sTargetRow).RTR_SEQ!FieldValString)
			f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,=,"99")
				f.Intrinsic.Control.If(v.DataView.CHILD!vNormFind.Exists)
					f.Data.DataView.Close("CHILD","vNormFind")
				f.Intrinsic.Control.EndIf
				f.Data.DataView.Create("CHILD","vNormFind",22,"RTR_Seq > '000000' and RTR_Seq < '990000'","RTR_Seq")
				'If there is a normal sequence but user did not select, display message
				f.Intrinsic.Control.If(v.DataView.child!vNormFind.RowCount,>,0)
					f.Intrinsic.Control.CallSub(Msg3Lines,"Title","Above/Below Insert Instructions","MainLine","Requirements:","FirstLine","Select a Normal sequence from Router grid between (0,990000).","SecondLine","Select Above/Below radio button.","ThirdLine","At Work Center grid: Right click to insert.")	
					f.Intrinsic.Control.UnBlockEvents
					f.Intrinsic.Control.ExitSub	
				f.Intrinsic.Control.Else
					v.Local.sTargetRow.Set(0)
					f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)		
				f.Intrinsic.Control.EndIf					
			f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1,or,v.DataTable.CHILD.RowCount,=,2)
		v.Local.bAboveException.Set(True)
	f.Intrinsic.Control.EndIf	
	
	gui.Form.GGC_Bom.SuspendLayout
	f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)		
	f.Intrinsic.String.GSSPartString(v.screen.Form!txtFocusParent.text.Trim,v.screen.Form!txtFocusRev.text.Trim,v.Local.sParent)
	
	'now we have the target sequence, loop through the lines to add
	f.Intrinsic.Control.If(v.Screen.Form!optInsertAbove.Value,=,True)
		'Loop backward for inserting Above
		f.Intrinsic.Math.Sub(-2,v.Local.sLines.UBound,v.Local.iSeqSort)
	f.Intrinsic.Control.EndIf	
	
	'now we have the target sequence, loop through the lines to add
	f.Intrinsic.Control.For(v.Local.iCount,0,v.Local.sLines.UBound,1)
		f.Intrinsic.Math.Add(v.Local.iSeqSort,1,v.Local.iSeqSort)		
		v.Local.sKey.Set(v.Local.sLines(v.Local.iCount))
		
		'check if this is the TASK work center
		f.Intrinsic.Control.If(v.DataTable.WCENTER(V.Local.sKey).WC!FIELDVALTRIM,=,V.Global.sTask)
			V.Local.sTask.Set("T")
		F.Intrinsic.Control.Else
			V.Local.sTask.Set("L")
		f.Intrinsic.Control.EndIf			

		'Get next Serie
		f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
		f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)
	
		f.Data.DataTable.AddRow("CHILD","BPARENT",v.Local.sParent,"DESCR_BP",v.Screen.Form!txtFocusDescr.text.Trim,"RTR_SEQ",v.Local.sTargetSeq,"SeqSort",v.Local.iSeqSort,"PART",V.DataTable.WCENTER(V.Local.sKey).WC!FIELDVALTRIM,"LMO","L","DESCRIPTION",V.DataTable.WCENTER(V.Local.sKey).DESCRIPTION!FIELDVALTRIM,"TYPE",V.Global.sLaborType,"COST",V.DataTable.WCENTER(V.Local.sKey).COST!FIELDVALFLOAT,"CAT_CODE",v.Local.sTask,"UM","HR","Serie",v.Local.iSerie)
		
		v.Local.bInserted.Set(True)
		v.Global.bRouterChanged.Set(True)
		
	f.Intrinsic.Control.Next(v.Local.iCount)
	
	'No need to resequence if it is Manual Insert
	F.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,False)
		'Insert Below case we will ReseqStartFrom_Normal
		f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value)
			f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.Local.sTargetSeq)		
		'Insert Above case
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.If(v.Local.bAboveException.Not)
	
				F.Intrinsic.String.Build("RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
				f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
				F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
					f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
						f.Intrinsic.Control.CallSub(ReSeqNormals)						
					f.Intrinsic.Control.Else	
						f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
					f.Intrinsic.Control.EndIf					
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.CallSub(ReSeqNormals)
				F.Intrinsic.Control.EndIf
				f.Data.DataView.Close("CHILD","vAbove")		
			
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.CallSub(ReSeqNormals)
			f.Intrinsic.Control.EndIf

		f.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.EndIf

	'@holder1			
	f.Data.DataTable.AcceptChanges("CHILD")
	
	'If there is a row added, move the focus to that row
	f.Intrinsic.Control.If(v.Local.iSeqSort,<>,0)
		Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
		gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)
	f.Intrinsic.Control.EndIf	
	
	'If there is a row added, move the focus to that row
	f.Intrinsic.Control.If(v.Local.bInserted)
		Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
		gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)
	f.Intrinsic.Control.EndIf		
	
	gui.Form.GGC_Bom.ResumeLayout				
	
	f.Intrinsic.Control.UnBlockEvents
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GGC_WC_RowClick.End

Program.Sub.GGC_Outs_RowClick.Start
'Outside grid
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	'this inserts the clicked row from Outside Services to the next O sequence in the router
	v.Local.sParent.Declare
	v.Local.sSeq.Declare
	V.Local.sBSeq.Declare
	v.Local.iRow.Declare
	V.Local.sLines.Declare
	v.Local.sTargetRow.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sUbound.Declare
	v.Local.iSeqSort.Declare
	v.Local.sRTR_Seq_ColIndex.Declare
	v.Local.iCount.Declare
	v.Local.sKey.Declare
	v.Local.fSetup.Declare
	v.Local.fRuntime.Declare
	v.Local.sFilter.Declare
	v.Local.sHold.Declare
	v.Local.bInserted.Declare
	v.Local.bAboveException.Declare		
	v.Local.iSerie.Declare
	
	f.Intrinsic.Control.If(v.Global.iRights,=,0)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
		
	'Check: must be right click, bom complete flag not completed, user right (normal,estimator,engineer),datatable Child exist
	f.Intrinsic.Control.If(v.Args.Button.Ucase,<>,"RIGHT",or,v.Global.bReadOnly,=,True,v.Global.iRights,<=,0,v.DataTable.CHILD.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate if Router header is created
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No router or parent part in focus.","Cannot insert sequence")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	

	f.Intrinsic.Control.BlockEvents	
	
	gui.Form.GGC_Outs.GetSelectedRows("GV_OUTS",v.Local.sLines)
	f.Intrinsic.Control.If(v.Local.sLines.Trim,=,"")
		f.Intrinsic.Control.UnBlockEvents				
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Split(v.Local.sLines,"*!*",v.Local.sLines)
	
	'Insert Manual can be done by only 1 record at a time
	f.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,True,and,v.Local.sLines.UBound,>=,1)
		f.Intrinsic.Control.CallSub(Msg2Lines,"Title","Manually Insert Instructions","MainLine","ONLY 1 sequence can be inserted at a time.","FirstLine","Type in the Sequence number at the Manual textbox.","SecondLine","At Outside grid: Left click ONLY 1 row, then Right click to insert.")
		gui.Form.txtManualSeq.SetFocus
		f.Intrinsic.Control.UnBlockEvents				
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	
	'If Insert Manual option is selected we don't need the user to select a row
	f.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,True)
		'Validate the sequence entered by user. If it does not exists in the current router, it is valid. Then check if is a NORMAL sequence
		f.Intrinsic.String.LPad(v.Screen.Form!txtManualSeq.Text.Trim,"0",6,v.Local.sTargetSeq)
		f.Intrinsic.Control.If(v.Local.sTargetSeq,=,"",or,v.Local.sTargetSeq,=,"000000",v.Local.sTargetSeq,>=,990000)
			f.Intrinsic.Control.CallSub(Msg2Lines,"Title","Manually Insert Instructions","MainLine","Requirement: 000000 < Outside sequence < 990000.","FirstLine","Please enter a valid Outside sequence at Manual textbox.","SecondLine","Valid sequence must be in range (0,990000).")			
			gui.Form.txtManualSeq.SetFocus
			f.Intrinsic.Control.UnBlockEvents				
			f.Intrinsic.Control.ExitSub	
		f.Intrinsic.Control.EndIf
		'Check if target sequence exists
		f.Intrinsic.String.Build("RTR_Seq = '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
		f.Data.DataView.Create("CHILD","vSeqExist",22,v.Local.sFilter,"")
		f.Intrinsic.Control.If(v.DataView.CHILD!vSeqExist.RowCount,>,0)
			f.Data.DataView.Close("CHILD","vSeqExist")
			f.Intrinsic.String.Build("Sequence {0} already exists in the current Router.",v.Local.sTargetSeq,v.Local.sHold)				
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox(v.Local.sHold,"Manually Insert Instructions")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			gui.Form.txtManualSeq.SetFocus
			f.Intrinsic.Control.UnBlockEvents				
			f.Intrinsic.Control.ExitSub	
		f.Intrinsic.Control.EndIf
		f.Data.DataView.Close("CHILD","vSeqExist")
		
	'Insert Manual option is not selected, we need user to select a row from Router grid
	f.Intrinsic.Control.Else
	
		'Get the selected Row from the Router grid
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sTargetRow)	
		
		'User does not select a router row
		f.Intrinsic.Control.If(v.Local.sTargetRow.Trim,=,"")
			f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,1)
				f.Intrinsic.Control.CallSub(Msg3Lines,"Title","Above/Below Insert Instructions","MainLine","Requirements:","FirstLine","Select a Normal sequence from Router grid between (0,990000).","SecondLine","Select Above/Below radio button.","ThirdLine","At Outside grid: Right click to insert.")
				f.Intrinsic.Control.UnBlockEvents
				f.Intrinsic.Control.ExitSub	
				
			'This case CHILD rowcount = 1, meaning there is the header and no row for sequence yet	
			f.Intrinsic.Control.Else
				v.Local.sTargetRow.Set(0)
				f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)
			f.Intrinsic.Control.EndIf
			
		'User currently select a router row	, the row must be a normal sequence	
		f.Intrinsic.Control.Else	
			f.Intrinsic.String.Split(v.Local.sTargetRow,"*!*",v.Local.sTargetRow)
			v.Local.sUbound.Set(v.Local.sTargetRow.UBound)
			v.Local.sTargetRow.Set(v.Local.sTargetRow(v.Local.sUbound))
			v.Local.sTargetSeq.Set(v.DataTable.CHILD(V.Local.sTargetRow).RTR_SEQ!FieldValString)
			f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,=,"99")
				f.Intrinsic.Control.If(v.DataView.CHILD!vNormFind.Exists)
					f.Data.DataView.Close("CHILD","vNormFind")
				f.Intrinsic.Control.EndIf
				f.Data.DataView.Create("CHILD","vNormFind",22,"RTR_Seq > '000000' and RTR_Seq < '990000'","RTR_Seq")			
				'If there is a normal sequence but user did not select, display message
				f.Intrinsic.Control.If(v.DataView.child!vNormFind.RowCount,>,0)
					f.Intrinsic.Control.CallSub(Msg3Lines,"Title","Above/Below Insert Instructions","MainLine","Requirements:","FirstLine","Select a Normal sequence from Router grid between (0,990000).","SecondLine","Select Above/Below radio button.","ThirdLine","At Outside grid: Right click to insert.")
					f.Intrinsic.Control.UnBlockEvents
					f.Intrinsic.Control.ExitSub	
				f.Intrinsic.Control.Else
					v.Local.sTargetRow.Set(0)
					f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)		
				f.Intrinsic.Control.EndIf					
			f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1,or,v.DataTable.CHILD.RowCount,=,2)
		v.Local.bAboveException.Set(True)
	f.Intrinsic.Control.EndIf
		
	gui.Form.GGC_Bom.SuspendLayout
	f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)	
	f.Intrinsic.String.GSSPartString(v.screen.Form!txtFocusParent.text.Trim,v.Screen.Form!txtFocusRev.text.Trim,v.Local.sParent)

	'now we have the target sequence, loop through the lines to add
	f.Intrinsic.Control.If(v.Screen.Form!optInsertAbove.Value,=,True)
		'Loop backward for inserting Above
		f.Intrinsic.Math.Sub(-2,v.Local.sLines.UBound,v.Local.iSeqSort)
	f.Intrinsic.Control.EndIf

	'now we have the target sequence, loop through the lines to add
	f.Intrinsic.Control.For(v.Local.iCount,0,v.Local.sLines.UBound,1)
		
		f.Intrinsic.Math.Add(v.Local.iSeqSort,1,v.Local.iSeqSort)		
		v.Local.sKey.Set(v.Local.sLines(v.Local.iCount))		
		v.Local.fSetup.Set(V.DataTable.OUTS(V.Local.sKey).SETUP!FieldValString)
		V.Local.fRuntime.Set(V.DataTable.OUTS(V.Local.sKey).RunTime!FieldValString)
		
		'Get next Serie
		f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
		f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)			
		
		f.Data.DataTable.AddRow("CHILD","BPARENT",V.Local.sParent,"DESCR_BP",v.Screen.Form!txtFocusDescr.text.Trim,"RTR_SEQ",v.Local.sTargetSeq,"SeqSort",v.Local.iSeqSort,"LMO","O","PART",V.DataTable.OUTS(V.Local.sKey).CODE!FieldValTrim,"DESCRIPTION",V.DataTable.OUTS(V.Local.sKey).DESCRIPTION!FieldValTrim,"OP_CODE",V.DataTable.OUTS(V.Local.sKey).VENDOR!FieldValTrim,"COST",v.Local.fSetup,"CATEGORY","OUTSIDE","CAT_CODE","O","UM",V.DataTable.OUTS(V.Local.sKey).UM!FieldValTrim,"SET_UP",v.Local.fSetup,"QTY",v.Local.fRuntime,"TYPE",V.Global.sType,"COMMENTS",V.DataTable.OUTS(V.Local.sKey).TEXT!FieldValTrim,"Serie",v.Local.iSerie)
		
		v.Local.bInserted.Set(True)
		v.Global.bRouterChanged.Set(True)
	f.Intrinsic.Control.Next(v.Local.iCount)
	
	'No need to resequence if it is Manual Insert
	F.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,False)
		'Insert Below case we will ReseqStartFrom_Normal
		f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value)
			f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.Local.sTargetSeq)		
		'Insert Above case
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.If(v.Local.bAboveException.Not)
	
				F.Intrinsic.String.Build("RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
				f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
				F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
					f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
						f.Intrinsic.Control.CallSub(ReSeqNormals)						
					f.Intrinsic.Control.Else	
						f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
					f.Intrinsic.Control.EndIf					
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.CallSub(ReSeqNormals)
				F.Intrinsic.Control.EndIf
				f.Data.DataView.Close("CHILD","vAbove")		
			
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.CallSub(ReSeqNormals)
			f.Intrinsic.Control.EndIf

		f.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.EndIf	
	
	'@holder1			
	f.Data.DataTable.AcceptChanges("CHILD")
	
	'If there is a row added, move the focus to that row
	f.Intrinsic.Control.If(v.Local.bInserted)
		Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
		gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)
	f.Intrinsic.Control.EndIf			
	
	gui.Form.GGC_Bom.ResumeLayout	

	f.Intrinsic.Control.UnBlockEvents
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GGC_Outs_RowClick.End

Program.Sub.GGC_Mat_RowClick.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sLines.Declare
	v.Local.sSeq.Declare
	v.Local.iIncrease.Declare
	V.Local.iMulti.Declare
	v.Local.iCount.Declare
	v.Local.sKey.Declare
	v.Local.sMessage.Declare
	v.Local.sParent.Declare	
	v.Local.sTargetRow.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sUbound.Declare
	v.Local.iSeqSort.Declare
	v.Local.sRTR_Seq_ColIndex.Declare	
	v.Local.sSource_Code.Declare
	v.Local.sBlankSourceMSG.Declare
	v.Local.sFirstType.Declare
	v.Local.sCurrentType.Declare
	V.Local.bNotSameSourceType.Declare
	v.Local.fCost.Declare
	v.Local.fPurch_Factor.Declare
	v.Local.fPurch_Cost.Declare
	v.Local.fConsump_Cost.Declare
	v.Local.fConsump_Conv.Declare
	v.Local.fWeight.Declare	
	v.Local.sSource.Declare	
	v.Local.sFilter.Declare
	v.Local.sHold.Declare
	v.Local.bInserted.Declare
	v.Local.bAboveException.Declare	
	v.Local.sCategoryCode.Declare
	v.Local.sCategoryLabel.Declare
	v.Local.iSerie.Declare
	v.Local.sSortCode.Declare
	
	v.Local.sCategoryLabel.Set(v.Screen.Form!ddlSourceCategory.Text)
	f.Intrinsic.Control.If(v.Local.sCategoryLabel.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please select Category.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Data.Dictionary.ReturnKeyFromValue("CATEGORY",v.Local.sCategoryLabel,v.Local.sCategoryCode)
	f.Intrinsic.Control.If(v.Local.sCategoryCode.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Error in Category Code.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		
		
	f.Intrinsic.Control.If(v.Global.iRights,=,0)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		
	
	'Check: must be right click, bom complete flag not completed, user right (normal,estimator,engineer),datatable Child exist
	f.Intrinsic.Control.If(v.Args.Button.Ucase,<>,"RIGHT",or,v.Global.bReadOnly,=,True,v.Global.iRights,<=,0,v.DataTable.CHILD.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	'Validate if Router header is created
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No router or parent part in focus.","Cannot insert sequence")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		
	
	'BlockEvents to prevent double click error causing Async. Remember to unclock when exitsub!!!
	f.Intrinsic.Control.BlockEvents
	f.Intrinsic.String.GSSPartString(v.screen.Form!txtFocusParent.text.Trim,v.Screen.Form!txtFocusRev.text.Trim,v.Local.sParent)
	gui.Form.GGC_Mat.GetSelectedRows("GV_MATERIAL",v.Local.sLines)
	f.Intrinsic.Control.If(v.Local.sLines.Trim,=,"")	
		f.Intrinsic.Control.UnBlockEvents		
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Split(v.Local.sLines,"*!*",v.Local.sLines)
	
	'Insert Manual can be done by only 1 record at a time
	f.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,True,and,v.Local.sLines.UBound,>=,1)
		f.Intrinsic.Control.CallSub(Msg2Lines,"Title","Manually Insert Instructions","MainLine","ONLY 1 sequence can be inserted at a time.","FirstLine","Type in the Sequence number at the Manual textbox.","SecondLine","At Material grid: Left click ONLY 1 row, then Right click to insert.")
		gui.Form.txtManualSeq.SetFocus
		f.Intrinsic.Control.UnBlockEvents				
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf	
	
	'If Insert Manual option is selected we don't need the user to select a row
	f.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,True)
		'Validate the sequence entered by user. If it does not exists in the current router, it is valid. 
		f.Intrinsic.String.LPad(v.Screen.Form!txtManualSeq.Text.Trim,"0",6,v.Local.sTargetSeq)
		f.Intrinsic.Control.If(v.Local.sTargetSeq,=,"",or,v.Local.sTargetSeq,=,"000000",v.Local.sTargetSeq,>,999999)
			f.Intrinsic.Control.CallSub(Msg3Lines,"Title","Manually Insert Instructions","MainLine","Please enter a valid Material sequence at Manual textbox.","FirstLine","Select the right Material Source Type to insert.","SecondLine","NON-MANUFACTURE Part seq must be in range (0,990000).","ThirdLine","MANUFACTURE Part seq must be in range [990000,999999]")				
			gui.Form.txtManualSeq.SetFocus
			f.Intrinsic.Control.UnBlockEvents				
			f.Intrinsic.Control.ExitSub	
		f.Intrinsic.Control.EndIf
		'Check if target sequence exists
		f.Intrinsic.String.Build("RTR_Seq = '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
		f.Data.DataView.Create("CHILD","vSeqExist",22,v.Local.sFilter,"")
		f.Intrinsic.Control.If(v.DataView.CHILD!vSeqExist.RowCount,>,0)
			f.Data.DataView.Close("CHILD","vSeqExist")
			f.Intrinsic.String.Build("Sequence {0} already exists in the current Router.",v.Local.sTargetSeq,v.Local.sHold)				
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox(v.Local.sHold,"Manually Insert Instructions")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			gui.Form.txtManualSeq.SetFocus
			f.Intrinsic.Control.UnBlockEvents				
			f.Intrinsic.Control.ExitSub				
		f.Intrinsic.Control.EndIf
		f.Data.DataView.Close("CHILD","vSeqExist")
		
		V.Local.sLines.Set(V.Local.sLines(0))
		v.Local.sSource_Code.Set(v.DataTable.MATERIAL(V.Local.sLines).SOURCE_CODE!FieldValTrim)
		f.Intrinsic.Control.If(v.Local.sSource_Code,=,"M",or,v.Local.sSource_Code,=,"F")
			f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,<>,"99")
				f.Intrinsic.Control.CallSub(Msg3Lines,"Title","Manually Insert Instructions","MainLine","Please enter a valid Material sequence at Manual textbox.","FirstLine","Select the right Material Source Type to insert.","SecondLine","NON-MANUFACTURE Part seq must be in range (0,990000).","ThirdLine","MANUFACTURE Part seq must be in range [990000,999999]")	
				gui.Form.txtManualSeq.SetFocus
				f.Intrinsic.Control.UnBlockEvents				
				f.Intrinsic.Control.ExitSub					
			f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.Else
				f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,=,"99")
				f.Intrinsic.Control.CallSub(Msg3Lines,"Title","Manually Insert Instructions","MainLine","Please enter a valid Material sequence at Manual textbox.","FirstLine","Select the right Material Source Type to insert.","SecondLine","NON-MANUFACTURE Part seq must be in range (0,990000).","ThirdLine","MANUFACTURE Part seq must be in range [990000,999999]")	
				gui.Form.txtManualSeq.SetFocus
				f.Intrinsic.Control.UnBlockEvents				
				f.Intrinsic.Control.ExitSub					
			f.Intrinsic.Control.EndIf		
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.Control.If(v.DataTable.MATERIAL(V.Local.sLines).Part!FieldValTrim,=,v.Local.sParent.Trim)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("The material is the same as the Router header.","Attention")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.UnBlockEvents
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		
	'Insert Manual option is not selected, we need user to select a row from Router grid
	f.Intrinsic.Control.Else
	
		'Get the selected Row from the Router grid
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sTargetRow)		
		
		f.Data.DataTable.DeleteRow("MsgItemsCheck")
		f.Data.DataTable.AcceptChanges("MsgItemsCheck")
		
		'Check if the Source Code is not blank and of the same type of material	
		f.Intrinsic.Control.For(v.Local.iCount,0,v.Local.sLines.UBound,1)
			v.Local.sKey.Set(v.Local.sLines(v.Local.iCount))
			v.Local.sSource_Code.Set(V.DataTable.MATERIAL(v.local.sKey).SOURCE_CODE!FIELDVALTRIM)
			v.Local.sSource.Set("")
			
			f.Intrinsic.Control.If(v.DataTable.MATERIAL(v.Local.sKey).Part!FieldValTrim,=,v.Local.sParent.Trim)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("The material is the same as the Router header.","Attention")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.UnBlockEvents
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf		
			
			f.Intrinsic.Control.If(v.Local.sSource_Code,=,"")
				f.Data.DataTable.AddRow("MsgItemsCheck","Item",V.DataTable.MATERIAL(v.local.sKey).Part!FIELDVALTRIM)
			f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.SelectCase(v.Local.sSource_Code)
				f.Intrinsic.Control.CaseAny("M","F")
					f.Intrinsic.Control.If(v.Local.iCount,=,0)
						v.Local.sFirstType.Set("MANUF")
						V.Local.sCurrentType.Set("MANUF")
					f.Intrinsic.Control.Else
						V.Local.sCurrentType.Set("MANUF")
					f.Intrinsic.Control.EndIf
				F.Intrinsic.Control.CaseElse
					F.Intrinsic.Control.If(V.Local.iCount,=,0)
						V.Local.sFirstType.Set("NON-MANUF")
						V.Local.sCurrentType.Set("NON-MANUF")
					F.Intrinsic.Control.Else
						V.Local.sCurrentType.Set("NON-MANUF")
					F.Intrinsic.Control.EndIf				
			f.Intrinsic.Control.EndSelect
			
			F.Intrinsic.Control.If(V.Local.sCurrentType,<>,V.Local.sFirstType)
				v.Local.bNotSameSourceType.Set(True)
			F.Intrinsic.Control.EndIf
							
		f.Intrinsic.Control.Next(v.Local.iCount)
		
		'Display msg if there is a part with blank source code
		f.Intrinsic.Control.If(v.DataTable.MsgItemsCheck.RowCount,>,0)	
			f.Intrinsic.Control.CallSub(MsgUnlimittedList,"Title","Blank Source Code","MainLine","The following Part(s) has blank Source Code:")
			f.Intrinsic.Control.UnBlockEvents
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		
		'Display msg if the materials selected are not the same type
		f.Intrinsic.Control.If(v.Local.bNotSameSourceType)
			f.Intrinsic.Control.CallSub(Msg2Lines,"Title","Invalid Material Selection","MainLine","The Materials  are not in the same Source Code type.","FirstLine","Please select the same type Materials","SecondLine","Either MANUFACTURE or NON-MANUFACTURE.")
			f.Intrinsic.Control.UnBlockEvents
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf		
		
		'User does not select a router row
		f.Intrinsic.Control.If(v.Local.sTargetRow.Trim,=,"")
			f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,1)
				f.Data.DataTable.DeleteRow("MsgItemsCheck")
				f.Data.DataTable.AcceptChanges("MsgItemsCheck")
				f.Data.DataTable.AddRow("MsgItemsCheck","Item","Select a sequence from Router grid. NORMAL or 99XXXX")
				f.Data.DataTable.AddRow("MsgItemsCheck","Item","Select Above/Below radio button.")
				f.Data.DataTable.AddRow("MsgItemsCheck","Item","At Material grid: Right click to insert.")
				f.Data.DataTable.AddRow("MsgItemsCheck","Item","Materials type must be the same type as the Router seq selected.")
				
				f.Intrinsic.Control.CallSub(MsgUnlimittedList,"Title","Above/Below Material Insert Instructions","MainLine","You did not selecte a Router seq.")		
				f.Intrinsic.Control.UnBlockEvents
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf		
			
			'This case CHILD Rowcount = 1, meaning there is the header and no row for sequence yet
			f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1)
				F.Intrinsic.Control.If(V.Local.sFirstType,=,"NON-MANUF")
					v.Local.sTargetRow.Set(0)
					f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)
				F.Intrinsic.Control.Else
					v.Local.sTargetRow.Set(0)
					V.Local.sTargetSeq.Set("990000")				
				F.Intrinsic.Control.EndIf				
			f.Intrinsic.Control.EndIf
			
		'User currently select a router row	
		f.Intrinsic.Control.Else
			f.Intrinsic.String.Split(v.Local.sTargetRow,"*!*",v.Local.sTargetRow)
			v.Local.sUbound.Set(v.Local.sTargetRow.UBound)
			v.Local.sTargetRow.Set(v.Local.sTargetRow(v.Local.sUbound))
			v.Local.sTargetSeq.Set(v.DataTable.CHILD(V.Local.sTargetRow).RTR_SEQ!FieldValString)
			
			'Normal Seq is selected and inserted part is Manufacture part
			f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,<>,"99",and,v.Local.sFirstType,=,"MANUF")
				F.Data.DataView.Create("CHILD","v99",22,"RTR_SEQ >= '990000'","")
				f.Intrinsic.Control.If(v.DataView.CHILD!v99.RowCount,>,0)
				
					f.Data.DataTable.DeleteRow("MsgItemsCheck")
					f.Data.DataTable.AcceptChanges("MsgItemsCheck")
					f.Data.DataTable.AddRow("MsgItemsCheck","Item","Select a sequence from Router grid. NORMAL or 99XXXX")
					f.Data.DataTable.AddRow("MsgItemsCheck","Item","Select Above/Below radio button.")
					f.Data.DataTable.AddRow("MsgItemsCheck","Item","At Material grid: Right click to insert.")
					f.Data.DataTable.AddRow("MsgItemsCheck","Item","Materials type must be the same type as the Router seq selected.")
					
					f.Intrinsic.Control.CallSub(MsgUnlimittedList,"Title","Above/Below Material Insert Instructions","MainLine","Router seq and Material type mismatched.")						
					
					f.Data.DataView.Close("CHILD","v99")
					f.Intrinsic.Control.UnBlockEvents
					f.Intrinsic.Control.ExitSub	
				f.Intrinsic.Control.Else
					v.Local.sTargetRow.Set(v.DataTable.Child.RowCount--)
					V.Local.sTargetSeq.Set("990000")					
				f.Intrinsic.Control.EndIf				
				f.Data.DataView.Close("CHILD","v99")					
			f.Intrinsic.Control.EndIf	
			
			'99XXXX seq is selected
			f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,=,"99",and,v.Local.sFirstType,=,"NON-MANUF")
				F.Data.DataView.Create("CHILD","vNormal",22,"RTR_SEQ < '990000' and RTR_Seq <> '000000'" ,"")
				f.Intrinsic.Control.If(v.DataView.CHILD!vNormal.RowCount,>,0)

					f.Data.DataTable.DeleteRow("MsgItemsCheck")
					f.Data.DataTable.AcceptChanges("MsgItemsCheck")
					f.Data.DataTable.AddRow("MsgItemsCheck","Item","Select a sequence from Router grid. NORMAL or 99XXXX")
					f.Data.DataTable.AddRow("MsgItemsCheck","Item","Select Above/Below radio button.")
					f.Data.DataTable.AddRow("MsgItemsCheck","Item","At Material grid: Right click to insert.")
					f.Data.DataTable.AddRow("MsgItemsCheck","Item","Materials type must be the same type as the Router seq selected.")
					
					f.Intrinsic.Control.CallSub(MsgUnlimittedList,"Title","Above/Below Material Insert Instructions","MainLine","Router seq and Material type mismatched.")	

					f.Data.DataView.Close("CHILD","vNormal")
					f.Intrinsic.Control.UnBlockEvents
					f.Intrinsic.Control.ExitSub	
				f.Intrinsic.Control.Else
					v.Local.sTargetRow.Set(0)
					f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)				
				f.Intrinsic.Control.EndIf				
				f.Data.DataView.Close("CHILD","vNormal")					
			f.Intrinsic.Control.EndIf	
		
		f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1,or,v.DataTable.CHILD.RowCount,=,2)
		v.Local.bAboveException.Set(True)
	f.Intrinsic.Control.EndIf			
		
	gui.Form.GGC_Bom.SuspendLayout
	f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)
	
	'now we have the target sequence, loop through the lines to add
	f.Intrinsic.Control.If(v.Screen.Form!optInsertAbove.Value,=,True)
		'Loop backward for inserting Above
		f.Intrinsic.Math.Sub(-2,v.Local.sLines.UBound,v.Local.iSeqSort)
	f.Intrinsic.Control.EndIf	
	
	'Get next Serie
	f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
	f.Intrinsic.Control.For(v.Local.iCount,0,v.Local.sLines.UBound,1)		
		f.Intrinsic.Math.Add(v.Local.iSeqSort,1,v.Local.iSeqSort)
		
		v.Local.sKey.Set(v.Local.sLines(v.Local.iCount))
		v.Local.fCost.Set(V.DataTable.MATERIAL(v.local.sKey).COST!FIELDVALString)
		v.Local.fPurch_Factor.Set(V.DataTable.MATERIAL(v.local.sKey).PURCHASE_FACTOR!FIELDVALString)
		v.Local.fPurch_Cost.Set(V.DataTable.MATERIAL(v.local.sKey).PURCH_COST!FIELDVALString)
		v.Local.fConsump_Cost.Set(V.DataTable.MATERIAL(V.Local.sKey).Consump_Cost!FieldValString)
		v.Local.fConsump_Conv.Set(V.DataTable.MATERIAL(V.Local.sKey).Consump_Conv!FieldValString)
		v.Local.fWeight.Set(V.DataTable.MATERIAL(V.Local.sKey).Weight!FieldValString)
		v.Local.sSource_Code.Set(V.DataTable.MATERIAL(v.local.sKey).SOURCE_CODE!FIELDVALTRIM)			
		v.Local.sSource.Set(v.Dictionary.SOURCE![V.Local.sSource_Code])
		f.Intrinsic.Control.If(v.Global.bDoNotCopySortCode)
			v.Local.sSortCode.Set("")
		f.Intrinsic.Control.Else
			v.Local.sSortCode.Set(V.DataTable.MATERIAL(v.local.sKey).Sort_Code!FIELDVALTRIM)
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)
		
		'Shape 'sort
		'add the row we clicked from material to the working grid		
		F.Data.DataTable.AddRow("CHILD","BPARENT",v.Local.sParent,"DESCR_BP",v.Screen.Form!txtFocusDescr.text.Trim,"RTR_SEQ",v.Local.sTargetSeq,"SeqSort",v.Local.iSeqSort,"PART",V.DataTable.MATERIAL(v.local.sKey).PART!FIELDVALTRIM,"DESCRIPTION",V.DataTable.MATERIAL(v.local.sKey).DESCRIPTION!FIELDVALTRIM,"DESCRIPTION_2",V.DataTable.MATERIAL(v.local.sKey).DESCRIPTION_2!FIELDVALString,"DESCRIPTION_3",V.DataTable.MATERIAL(v.local.sKey).DESCRIPTION_3!FIELDVALTRIM,"LMO","M","CATEGORY",v.Local.sCategoryLabel,"CAT_CODE",v.Local.sCategoryCode,"SOURCE_CODE",v.Local.sSource_Code,"SOURCE",V.Local.sSource,"UM",V.DataTable.MATERIAL(v.local.sKey).UM!FIELDVALTRIM,"COST",v.Local.fCost,"PURCHASE_FACTOR",V.Local.fPurch_Factor,"PURCH_COST",V.Local.fPurch_Cost,"Issue_UM",V.DataTable.MATERIAL(V.Local.sKey).Issue_UM!FieldValString,"Consump_Conv",v.Local.fConsump_Conv,"Consump_Cost",v.Local.fConsump_Cost,"Weight",v.Local.fWeight,"DISPLAY_PART",V.DataTable.MATERIAL(v.local.sKey).DISPLAY_PART!FIELDVALTRIM,"Serie",v.Local.iSerie,"Shape",V.DataTable.MATERIAL(v.local.sKey).Prop_code!FIELDVALTRIM,"Lead",V.DataTable.MATERIAL(v.local.sKey).LeadHours!FIELDVALTRIM,"PL",V.DataTable.MATERIAL(v.local.sKey).PL!FIELDVALTRIM,"Sort_Code",v.Local.sSortCode,"MQD",v.Dictionary.dictMQD![V.DataTable.MATERIAL(v.local.sKey).PART!FIELDVALTRIM])
		
		f.Intrinsic.Control.If(v.Global.bBindCutList)
			f.Intrinsic.Control.CallSub(Bind_AddedMaterial_Cutlist,"BParent",v.Local.sParent,"Part",V.DataTable.MATERIAL(v.local.sKey).PART!FIELDVALSTRING,"Serie",V.Local.iSerie)
		f.Intrinsic.Control.EndIf
		
		v.Local.bInserted.Set(True)
		v.Global.bRouterChanged.Set(True)	
		
	f.Intrinsic.Control.Next(v.Local.iCount)
	
	f.Data.DataTable.AcceptChanges("CHILD")	
	
	f.Intrinsic.Control.If(v.Local.sFirstType,=,"NON-MANUF")

		'No need to resequence if it is Manual Insert
		F.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,False)
			'Insert Below case we will ReseqStartFrom_Normal
			f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value)
				f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.Local.sTargetSeq)		
			'Insert Above case
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.If(v.Local.bAboveException.Not)		
					F.Intrinsic.String.Build("RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
					f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
					F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
						f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
							f.Intrinsic.Control.CallSub(ReSeqNormals)						
						f.Intrinsic.Control.Else	
							f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
						f.Intrinsic.Control.EndIf					
					f.Intrinsic.Control.Else
						f.Intrinsic.Control.CallSub(ReSeqNormals)
					F.Intrinsic.Control.EndIf
					f.Data.DataView.Close("CHILD","vAbove")		
				
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.CallSub(ReSeqNormals)
				f.Intrinsic.Control.EndIf
	
			f.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.Else
		'No need to resequence if it is Manual Insert
		F.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,False)
			'Insert Below case we will ReSeqStartFrom_99s
			f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value)
				f.Intrinsic.Control.CallSub(ReSeqStartFrom_99s,"sFromSeq",v.Local.sTargetSeq)		
			'Insert Above case
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.If(v.Local.bAboveException.Not)		
					F.Intrinsic.String.Build("RTR_Seq >= '990000' and  RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
					f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
					F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
						f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
							f.Intrinsic.Control.CallSub(Reseq99s)						
						f.Intrinsic.Control.Else	
							f.Intrinsic.Control.CallSub(ReSeqStartFrom_99s,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
						f.Intrinsic.Control.EndIf					
					f.Intrinsic.Control.Else
						f.Intrinsic.Control.CallSub(Reseq99s)
					F.Intrinsic.Control.EndIf
					f.Data.DataView.Close("CHILD","vAbove")		
				
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.CallSub(Reseq99s)
				f.Intrinsic.Control.EndIf
	
			f.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
		
	'@holder1
	f.Data.DataTable.AcceptChanges("CHILD")	
	
	'If there is a row added, move the focus to that row
	f.Intrinsic.Control.If(v.Local.bInserted)
		Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
		gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)
	f.Intrinsic.Control.EndIf
	
	gui.Form.GGC_Bom.ResumeLayout		
	
	f.Data.DataView.SetFilter("CHILD","V_CHILD","RTR_SEQ <> '000000' AND Part <> '~~~@!@~~~@!@'")
'	F.Intrinsic.Control.If(V.Caller.GSSVersion,>=,"2019.1")	
'		f.Data.DataView.SetFilter("CHILD","V_CHILD","RTR_SEQ <> '000000'")
'		gui.Form.GGC_Bom.MainView("GV_Child")
'	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.UnBlockEvents	
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GGC_Mat_RowClick.End

Program.Sub.cmdSaveRouterOnly_Click.Start
'For button Save Router Only
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sPart.Declare
	v.Local.sFlag.Declare
	v.Local.iCount.Declare	
	v.Local.sHold.Declare
	v.Local.bExist.Declare
	
	'Prevent double cycle
	f.Intrinsic.Control.IF(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveSaveRTR)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveSaveRTR.Set(True)	
	
	F.Intrinsic.Control.If(v.Global.iRights,<=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("User does not has permission to Save.","Rights 0")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.cmdCommit.Enabled(False)
		v.Global.bActiveSaveRTR.Set(False)
		f.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Nothing to Save","Error")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		v.Global.bActiveSaveRTR.Set(False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.CallSub(Delete_Duplicate_000000_RtrSeq)
	
	'get rid of any zero quantity records.
	f.Intrinsic.Control.For(v.Local.iCount,v.DataTable.BUILDQTY.RowCount--,0,-1)
		f.Intrinsic.Control.If(v.DataTable.BUILDQTY(v.Local.iCount).QUANTITY!FIELDVALLONG,=,0)
			F.Data.DataTable.DeleteRow("BUILDQTY",V.Local.iCount)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.iCount)
	f.Data.DataTable.AcceptChanges("BUILDQTY")
	
	gui.Form.lblResult.Visible(True)
	
	f.Intrinsic.Control.CallSub(Update_Header_To_Child_Bom)

	f.Data.DataView.Create("CHILD","V_MFG",22,"RTR_SEQ > 989999","")
	'checking to see if a MFG subcomponent was added to this router.  If so, we're committing this to a bom instead.
	F.Intrinsic.Control.If(V.DataView.CHILD!V_MFG.RowCount,>,0)	
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.String.GSSPartString(V.Screen.Form!txtFocusParent.TEXT,V.Screen.Form!txtFocusRev.TEXT,V.Local.sPart)
		f.Intrinsic.String.Build("Commit manufacture Parts (99XXXX seqs) to Bom Parent {0}?",v.Local.sPart.Trim,v.Local.sHold)
		F.Intrinsic.UI.Msgbox(v.Local.sHold,"Attention",4,v.Local.sFlag)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		
		'Say Yes
		f.Intrinsic.Control.If(v.Local.sFlag,=,6)
			'Save Routern and Commit to Bom			
			f.Intrinsic.Control.CallSub(Commit_MainGrid_To_Bom)
			
		'Say No	will Save Router Only
		f.Intrinsic.Control.Else
		
			F.Intrinsic.String.GSSPartString(V.Screen.Form!txtFocusParent.TEXT,V.Screen.Form!txtFocusRev.TEXT,V.Local.sPart)		
			'Save router to GSS
			f.Intrinsic.Control.CallSub(SaveCoreRouter_from_SaveRouterOnly,"PART",v.Local.sPart,"BOM",False)		
			
		f.Intrinsic.Control.EndIf
		
	'You don't have manufacture parts, so Save Router Only	
	f.Intrinsic.Control.Else
		F.Intrinsic.String.GSSPartString(V.Screen.Form!txtFocusParent.TEXT,V.Screen.Form!txtFocusRev.TEXT,V.Local.sPart)		
		'Save router to GSS
		f.Intrinsic.Control.CallSub(SaveCoreRouter_from_SaveRouterOnly,"PART",v.Local.sPart,"BOM",False)		

	F.Intrinsic.Control.EndIf
	
	f.Data.DataView.Close("CHILD","V_MFG")	
	
	F.Intrinsic.Variable.ArgExists("sRouterUpload",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Intrinsic.Control.If(v.Args.sRouterUpload,=,"Failed")
			gui.Form.lblResult.Visible(False)
			v.Global.bActiveSaveRTR.Set(False)	
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.EndIf
	
	v.Global.bRouterChanged.Set(False)
	v.Global.bQtySaved.Set(True)
	
	gui.Form.lblResult.Visible(False)
	v.Global.bActiveSaveRTR.Set(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdSaveRouterOnly_Click.End

Program.Sub.SaveCoreRouter_from_SaveRouterOnly.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iCount.Declare
	v.Local.iLine.Declare
	v.Local.sMapLab.Declare
	v.Local.sMapMat.Declare
	v.Local.sMapOutside.Declare
	V.Local.sMapCmt.Declare
	V.Local.sMapTask.Declare
	v.Local.sSql.Declare
	v.Local.sPart.Declare
	v.Local.bExists.Declare
	v.Local.sRet.Declare
	v.Local.bBom.Declare
	v.Local.iRet.Declare
	v.Local.iBaseRow.Declare(Long,0)
	v.Local.sHold.Declare
	v.Local.bHeaderOnly.Declare	
	v.Local.fLead.Declare
	v.Local.sSimilar.Declare
	v.Local.fCommission.Declare
	v.Local.fScrap.Declare	
	v.Local.sPartID.Declare
	v.Local.sDesc2.Declare
	v.Local.sDesc3.Declare
	v.Local.sDescription.Declare
	v.Local.sParentDescription.Declare
	v.Local.sParentDesc2.Declare
	v.Local.sParentDesc3.Declare
	
	f.Intrinsic.Variable.ArgExists("REV",V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists)
		f.Intrinsic.String.GSSPartString(v.Args.PART,V.Args.REV,v.Local.sPart)
	F.Intrinsic.Control.Else
		V.Local.sPart.Set(V.Args.PART)
	F.Intrinsic.Control.EndIf
	
	v.Local.bBom.Set(v.Args.BOM)	
	'if the "copy" arg exists, we're not going to any existing records
	F.Intrinsic.Variable.ArgExists("COPY",V.Local.bExists)

	F.Data.DataTable.Acceptchanges("CHILD")

	'Check Header Only: In case only Router header, add a fake sequence for callwraper to save router
	f.Intrinsic.Control.CallSub(Add_Fake_Router_Line,"sPart",v.Local.sPart,"sTable","Child")
	v.Local.bHeaderOnly.Set(v.Args.bHeaderOnly)		

	'MAP FOR LABOR RECORDS
	f.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}*!*{25}","RouterNum","RouterDesc","Seq","LineType","WC","PartStepDesc","SetupQty","RuntimeMatlQty","CustID","OperationCodeVend","RateUC","UM","ExtraDesc1","ExtraDesc2","Freq","Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","SortCode","SignOffGroupUser","SignOffType",V.Local.sMapLab)
	'MAP FOR MATERIAL
	F.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}*!*{25}*!*{26}","RouterNum","RouterDesc","Seq","LineType","PartNum","PartStepDesc","SetupQty","RuntimeMatlQty","CustID","OperationCodeVend","RateUC","UM","ExtraDesc1","ExtraDesc2","Freq","Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","SortCode","LeadTime","MinFlag","MinOutside",V.Local.sMapMat)
	'Map for OUTSIDE	
	F.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}*!*{25}*!*{26}","RouterNum","RouterDesc","Seq","LineType","PartNum","PartStepDesc","SetupQty","RuntimeMatlQty","CustID","OperationCodeVend","RateUC","UM","ExtraDesc1","ExtraDesc2","Freq","Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","SortCode","LeadTime","MinFlag","MinOutside",V.Local.sMapOutside)	
	'MAP FOR COMMENT LINES
	f.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}","RouterNum","RouterDesc","Seq","LineType","WC","PartStepDesc","SetupQty","RuntimeMatlQty","CustID","OperationCodeVend","RateUC","UM","ExtraDesc1","ExtraDesc2","Freq", "Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","MainCommentFlag","SortCode",V.Local.sMapCmt)
	'MAP FOR TASK LINES
	f.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}*!*{25}*!*{26}","RouterNum","RouterDesc","Seq","LineType","WC","PartStepDesc","SetupQty","RuntimeMatlQty","CustID", "OperationCodeVend","RateUC","UM","ExtraDesc1", "ExtraDesc2","Freq","Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","MainCommentFlag","SignOffGroupUser","SignOffType","SortCode",V.Local.sMapTask)
	
	'gui.Form.frameMiddle.Visible(False)
	
	'Using the long value of the router sequence because the filter was not accepting 2 string values for the same column ( > 'x' and < 'y')
	F.Data.DataView.Create("CHILD","V_UPDATE",22,"","RTR_SEQ ASC")
	
	'F.Data.DataView.SetValue("CHILD","V_UPDATE",0,"RTR_SEQ","000001")	
	
	f.Intrinsic.String.RTrim(v.Screen.Form!txtDescr2.Text,v.Local.sParentDesc2)
	f.Intrinsic.String.RTrim(v.Screen.Form!txtDescr3.text,v.Local.sParentDesc3)
	f.Intrinsic.String.RTrim(v.Screen.Form!txtFocusDescr.text,v.Local.sParentDescription)
	
	'adding records using different maps based on LMO C or T
	f.Intrinsic.Control.For(v.Local.iCount,0,v.DataView.CHILD!V_UPDATE.RowCount--,1)
		F.Intrinsic.Control.If(V.DataView.CHILD!V_UPDATE(V.Local.iCount).RTR_SEQ!FIELDVALLONG,>,0,AND,V.DataView.CHILD!V_UPDATE(V.Local.iCount).RTR_SEQ!FIELDVALLONG,<,990000)
			F.Intrinsic.Control.If(V.DataView.CHILD!V_UPDATE(V.Local.iCount).CATEGORY!FIELDVALTRIM,<>,"EXCLUDE")
				v.Local.fLead.Set(v.DataView.CHILD!V_UPDATE(v.Local.iCount).Lead!FIELDVALString)
				f.Intrinsic.String.RTrim(v.DataView.CHILD!V_UPDATE(v.Local.iCount).DESCRIPTION_2!FIELDVALstring,v.Local.sDesc2)
				f.Intrinsic.String.RTrim(v.DataView.CHILD!V_UPDATE(v.Local.iCount).DESCRIPTION_3!FIELDVALstring,v.Local.sDesc3)
				f.Intrinsic.String.RTrim(v.DataView.CHILD!V_UPDATE(v.Local.iCount).DESCRIPTION!FIELDVALstring,v.Local.sDescription)
				f.Intrinsic.Control.SelectCase(v.DataView.CHILD!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM)
					'labor lines
					f.Intrinsic.Control.Case("L")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapLab,v.DataView.CHILD!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sParentDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,v.Screen.Form!txtRtrCust.text,v.DataView.CHILD!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.CHILD!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.CHILD!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","",v.DataView.CHILD!V_UPDATE(v.Local.iCount).WC_Factor!FIELDVALTRIM,"",v.Local.sParentDescription.Left30,v.Local.sParentDesc2.Left71,v.Local.sParentDesc3.Left71,V.Screen.Form!txtPL.text,v.DataView.CHILD!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).SIGNOFF_GRPUSR!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).SIGNOFF_TYPE!FIELDVALTRIM)
					'material lines
					f.Intrinsic.Control.Case("M")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapMat,v.DataView.CHILD!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sParentDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,v.Screen.Form!txtRtrCust.text,v.DataView.CHILD!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.CHILD!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.CHILD!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","","","",v.Local.sParentDescription.Left30,v.Local.sParentDesc2.Left71,v.Local.sParentDesc3.Left71,V.Screen.Form!txtPL.text,v.DataView.CHILD!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM,v.local.fLead,v.DataView.CHILD!V_UPDATE(v.Local.iCount).MinFlag!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).Amt_Minimum!FIELDVALTRIM)
					'material lines
					f.Intrinsic.Control.Case("O")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapOutside,v.DataView.CHILD!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sParentDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,v.Screen.Form!txtRtrCust.text,v.DataView.CHILD!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.CHILD!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.CHILD!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","","","",v.Local.sParentDescription.Left30,v.Local.sParentDesc2.Left71,v.Local.sParentDesc3.Left71,V.Screen.Form!txtPL.text,v.DataView.CHILD!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM,v.local.fLead,v.DataView.CHILD!V_UPDATE(v.Local.iCount).MinFlag!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).Amt_Minimum!FIELDVALTRIM)
					'comment lines
					f.Intrinsic.Control.Case("C")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapCmt,v.DataView.CHILD!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sParentDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,v.Screen.Form!txtRtrCust.text,v.DataView.CHILD!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.CHILD!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.CHILD!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","","","",v.Local.sParentDescription.Left30,v.Local.sParentDesc2.Left71,v.Local.sParentDesc3.Left71,V.Screen.Form!txtPL.text,"Y",v.DataView.CHILD!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM)
					'task lines
					F.Intrinsic.Control.Case("T")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapTask,v.DataView.CHILD!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sParentDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,"L",v.DataView.CHILD!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.CHILD!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,v.Screen.Form!txtRtrCust.text,v.DataView.CHILD!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.CHILD!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.CHILD!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","","","",v.Local.sParentDescription.Left30,v.Local.sParentDesc2.Left71,v.Local.sParentDesc3.Left71,V.Screen.Form!txtPL.text,"T",v.DataView.CHILD!V_UPDATE(v.Local.iCount).SIGNOFF_GRPUSR!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).SIGNOFF_TYPE!FIELDVALTRIM,v.DataView.CHILD!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM)
				
				f.Intrinsic.Control.EndSelect
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.iCount)
	
	F.Data.DataView.Close("CHILD","V_UPDATE")
	
	f.Intrinsic.Control.CallSub(Backup_Router)
	
	'add in the quantities
	f.Intrinsic.Control.CallSub(updateBuildQuantity)
	
	'delete the old router before we upload the new one		
	f.Intrinsic.Control.CallSub(6021Sync,"sRouter",v.Local.sPart)
	
	'In case only Router header.
	f.Intrinsic.Control.If(v.Local.bHeaderOnly)
		F.Intrinsic.Control.CallSub(Delete_Fake_Line,"sPart",v.Local.sPart,"sTable","Child")
	f.Intrinsic.Control.EndIf		
	
	'Return: IsForcedToStopped, IsStillBusyAtTimeOut, ErrorAtCheck_Queue, ErrorAt6021, IsGoodToGo,IsLockedByCore
	f.Intrinsic.Control.If(v.Args.s6021Status,<>,"IsGoodToGo")		
	
		f.Intrinsic.Control.If(v.Args.s6021Status,<>,"NoRecordFound")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Router Upload is unsuccessful. You can verify from core Router or your version in backup database.","Router Upload Fail")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("No Router Record founds","Router Upload Fail")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)			
		f.Intrinsic.Control.EndIf

		f.Intrinsic.Variable.AddRV("sRouterUpload","Failed")
		
		F.Data.DataTable.DeleteRow("6021")
		f.Data.DataTable.AcceptChanges("6021")		
		
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'once this upload completes, we need to add in the "line comments" via savetoDB and the "complete flag" via udpate query
	
	'there is a possibility that the user can edit the router without having a BOM populated, so we're going to check the BOM_MSTR for being a PARENT.  If it is, set bBom to true
	v.Local.sHold.Set(V.DataTable.CHILD(v.Local.iBaseRow).BPARENT!FIELDVALTRIM)
	f.Intrinsic.String.Build("select PARENT from V_BOM_MSTR where PARENT = '{0}'",v.Local.sHold.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet.Length,>,0)
		v.Local.bBom.Set(True)
	f.Intrinsic.Control.EndIf
	
	'there is also a possibility that the BOM hasn't been saved to GSS yet, in this case args.bom would have already set bBOM to true
	f.Intrinsic.Control.If(v.Local.bBom)
		v.Local.sHold.Set(V.DataTable.CHILD(v.Local.iBaseRow).BPARENT!FIELDVALTRIM)
		f.Intrinsic.String.Build("UPDATE ROUTER_LINE SET BUILT_FROM_BOM = 'Y' WHERE ROUTER = '{0}' AND LMO = 'M'",v.Local.sHold.PSQLFriendly,V.Local.sSql)
		F.ODBC.Connection!conx.execute(v.Local.sSql)
	f.Intrinsic.Control.EndIf
	
	'Save Extra header as 6021 does not update successfully
	v.Local.fCommission.Set(v.Screen.Form!txtComm.Text.Trim)
	v.Local.fScrap.Set(v.Screen.Form!txtScrap.Text.Trim)
	v.Local.sNo_Reprice.Declare
	f.Intrinsic.Math.Div(v.Local.fScrap,100,v.Local.fScrap)
	f.Intrinsic.Control.If(v.Screen.Form!chkOmitFromRTRReprice.Value,=,1)
		v.Local.sNo_Reprice.Set("Y")
	f.Intrinsic.Control.Else
		v.Local.sNo_Reprice.Set("N")
	f.Intrinsic.Control.EndIf	
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtSimilar.Text.Trim,v.Screen.Form!txtSimilarRev.Text.Trim,v.Local.sSimilar)
	v.Local.sPartID.Set(v.Screen.Form!txtPartID.Text.Trim)
	v.Local.sPartID.Set(v.Local.sPartID.left20)
	f.Intrinsic.String.Build("UPDATE ROUTER_HEADER SET UM_Inventory = '{0}',Prod_Line = '{2}',Similar = '{3}',Commission = '{4}',Scrap = '{5}',No_Reprice = '{6}',Part_Customer = '{7}' where Router = '{1}' and Router_Type = 'H'",v.Screen.Form!txtUM.Text.Trim,v.Local.sPart.PSQLFriendly,v.Screen.Form!txtPL.Text.Trim,v.Local.sSimilar.PSQLFriendly,v.Local.fCommission,v.Local.fScrap,v.Local.sNo_Reprice,v.Local.sPartID.PSQLFriendly,V.Local.sSql)
	F.ODBC.Connection!conx.execute(v.Local.sSql)

	'Update Extra description	
	f.Intrinsic.String.RTrim(v.Screen.Form!txtRTRExtraDescr.Text,v.Local.sHold)
	f.Intrinsic.String.Build("Select Text from Inv_Extra_Text where Part = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		f.Intrinsic.String.Build("Insert into INV_EXTRA_TEXT (Part,Text) values ('{0}','{1}')",v.Local.sPart.PSQLFriendly,v.Local.sHold.PSQLFriendly,V.Local.sSql)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("UPDATE INV_EXTRA_TEXT SET TEXT = '{1}' Where Part = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sHold.PSQLFriendly,V.Local.sSql)
	f.Intrinsic.Control.EndIf	
	F.ODBC.Connection!conx.execute(v.Local.sSql)	
	
	
	'create a filter then datatable for the comments
	f.Data.DataView.Create("CHILD","V_COMMENTS",22,"TRIM(COMMENTS) > ''","RTR_SEQ ASC")
	F.Data.DataView.ToDataTable("CHILD","V_COMMENTS","TEMP_COMMENTS",True)
	f.Data.DataView.Close("CHILD","V_COMMENTS")
	
	'tochange 2
	'save the comments
	f.Data.DataTable.SaveToDB("TEMP_COMMENTS","conx","RTR_SEQ_COMMENTS","BPARENT*!*RTR_SEQ",128,"BPARENT@!@RTR_NUMBER*!*RTR_SEQ@!@RTR_SEQ*!*COMMENTS@!@TEXT")
	F.Data.DataTable.Close("TEMP_COMMENTS")	
		
	'set the router complete flag 
	f.Intrinsic.Control.If(v.Screen.Form!chkRtrComp.checkedasboolean,=,True)
		v.Local.sHold.Set(1)
	f.Intrinsic.Control.Else
		v.Local.sHold.Set(0)
	f.Intrinsic.Control.EndIf

	f.Intrinsic.String.Build("select COUNT(rtr_num) from v_router_supp_hdr where rtr_num = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.iLine)
	f.Intrinsic.Control.If(v.Local.iLine,>,0)
		f.Intrinsic.String.Build("update router_supp_hdr set complete = {1} where rtr_num = '{0}' AND Type = 'H'",v.Local.sPart.PSQLFriendly,v.Local.sHold,v.Local.sSql)
		f.ODBC.Connection!conx.execute(v.Local.sSql)
	f.Intrinsic.Control.EndIf

	F.Intrinsic.Control.CallSub(optBomView_Click)
	f.Intrinsic.Variable.AddRV("sRouterUpload","Successful")

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.SaveCoreRouter_from_SaveRouterOnly.End

Program.Sub.ipmReceived.Start
'get back later
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sPart.Declare
	v.Local.sSql.Declare
	v.Local.sRtrSeq.Declare
	v.Local.sBomSeq.Declare
	v.Local.sType.Declare
	v.Local.sRow.Declare
	v.Local.iCount.Declare
	v.Local.sRet.Declare
	v.Local.sParsed.Declare
	v.Local.iFrequency.Declare
	v.Local.sBParent.Declare
	v.Local.sPartF.Declare
	v.Local.sRev.Declare
	v.Local.iSerie.Declare
	v.Local.sHold.Declare
	
	'incoming part number from the PNG
	v.Local.sPart.Set(v.Args.Message.Trim)
	f.Intrinsic.String.Mid(v.Local.sPart,18,3,v.Local.sRev)
	
	f.Intrinsic.Control.If(v.Local.sPart,<>,"BOMCOMPARE")
		'get additional information from inventoryh
		f.Intrinsic.String.Build("select distinct im.part, im.description, i2.description_2, i2.description_3, im.product_line, im.um_inventory, im.um_purchasing, i2.code_source, im.factor_conversion, im.code_sort from v_inventory_mstr im left join v_inventory_mst2 i2 on im.part = i2.part and im.location = i2.location where im.part = '{0}' and im.Location = '{1}'",v.Local.sPart.PSQLFriendly,v.Screen.NonInv!ddlNewPartLoc.Text.Trim,v.Local.sSql)
		f.Data.DataTable.CreateFromSQL("TEMP_PNG","conx",V.Local.sSql)
	
		'determine what we were doing before returning from the PNG
		F.Intrinsic.String.Split(v.Global.sPart,"*!*",v.Local.sParsed)
		'reset the global variable
		v.Global.sPart.Set("")
		v.Local.sType.Set(v.Local.sParsed(0))
		v.Local.sBomSeq.Set(v.Local.sParsed(1))
		v.Local.sRtrSeq.Set(v.Local.sParsed(2))
		
		'insert / new
		f.Intrinsic.Control.SelectCase(v.Local.sType)
			f.Intrinsic.Control.Case("NEW")
				gui.Form.txtFocusParent.Text(v.Local.sPart.left17)
				gui.Form.txtFocusRev.Text(v.Local.sRev)
				gui.Form.txtFocusDescr.Text(v.DataTable.TEMP_PNG(0).DESCRIPTION!FIELDVALTRIM)
				gui.Form.txtDescr2.Text(V.DataTable.TEMP_PNG(0).DESCRIPTION_2!FIELDVALTRIM)
				gui.Form.txtDescr3.Text(v.DataTable.TEMP_PNG(0).DESCRIPTION_3!FIELDVALTRIM)
				gui.Form.txtUM.Text(V.DataTable.TEMP_PNG(0).UM_INVENTORY!FIELDVALTRIM)
				gui.Form.txtPL.Text(V.DataTable.TEMP_PNG(0).PRODUCT_LINE!FIELDVALTRIM)
				F.Intrinsic.Control.If(V.DataTable.CHILD.RowCount,<,1)
					'As 1st row seq 000000 no need to generate Serie here, Serie will be default to 0
					F.Data.DataTable.AddRow("CHILD","BPARENT",V.Local.sPart,"DESCR_BP",v.DataTable.TEMP_PNG(0).DESCRIPTION!FIELDVALTRIM,"RTR_SEQ","000000", "BOM_SEQ","0000", "PART",V.Local.sPart,"DESCRIPTION",v.DataTable.TEMP_PNG(0).DESCRIPTION!FIELDVALTRIM,"DESCRIPTION_2",V.DataTable.TEMP_PNG(0).DESCRIPTION_2!FIELDVALTRIM, "DESCRIPTION_3",v.DataTable.TEMP_PNG(0).DESCRIPTION_3!FIELDVALTRIM,"PL",V.DataTable.TEMP_PNG(0).PRODUCT_LINE!FIELDVALTRIM,"UM",V.DataTable.TEMP_PNG(0).UM_INVENTORY!FIELDVALTRIM,"LMO","M","TIER","0","CTIER","0","SOURCE_CODE",V.DataTable.TEMP_PNG(0).CODE_SOURCE!FIELDVALTRIM,"CAT_CODE","N")
					v.Global.bRouterChanged.Set(True)
				F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.Case("INSERT")
				'add the new part to the grid

				'Get next Serie
				f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
				f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)	
				
				f.Intrinsic.String.RPad(V.DataTable.TEMP_PNG(0).PART!FIELDVALTRIM," ",20,v.Local.sHold)
				f.Data.DataTable.AddRow("CHILD","BPARENT",v.DataTable.CHILD(0).BPARENT!FIELDVALSTRING,"DESCR_BP",v.DataTable.CHILD(0).DESCR_BP!FIELDVALSTRING,"RTR_SEQ",V.Local.sRtrSeq,"BOM_SEQ",V.Local.sBomSeq,"PART",v.Local.sHold,"DESCRIPTION",V.DataTable.TEMP_PNG(0).DESCRIPTION!FIELDVALTRIM,"DESCRIPTION_2",V.DataTable.TEMP_PNG(0).DESCRIPTION_2!FIELDVALTRIM,"DESCRIPTION_3",v.DataTable.TEMP_PNG(0).DESCRIPTION_3!FIELDVALTRIM,"PL",V.DataTable.TEMP_PNG(0).PRODUCT_LINE!FIELDVALTRIM,"UM",V.DataTable.TEMP_PNG(0).UM_INVENTORY!FIELDVALTRIM,"LMO","M","SOURCE_CODE",V.DataTable.TEMP_PNG(0).CODE_SOURCE!FIELDVALTRIM,"CAT_CODE","N","Serie",v.Local.iSerie)				
				
				f.Intrinsic.Control.If(v.Global.bBindCutList)
					f.Intrinsic.Control.CallSub(Bind_AddedMaterial_Cutlist,"BParent",v.DataTable.CHILD(0).BPARENT!FIELDVALSTRING,"Part",v.Local.sHold,"Serie",V.Local.iSerie)
				f.Intrinsic.Control.EndIf
				
				v.Global.bRouterChanged.Set(True)
				'refresh categories and source codes
				f.Data.DataTable.FillFromDictionary("CHILD","SOURCE","SOURCE_CODE","SOURCE")
				F.Data.DataTable.FillFromDictionary("CHILD","CATEGORY","CAT_CODE","CATEGORY")				
			
			f.Intrinsic.Control.Case("BOMCOPY")
				F.Intrinsic.Control.BlockEvents
				GUI.POPBOM.GGC_BOMDTL.GetSelectedRows("gvParents",V.Local.sRow)
				f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
					f.Intrinsic.UI.Msgbox("No row selected in Bom Detail grid.","Attention")
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.Else	
					f.Intrinsic.String.Split(v.Local.sRow,"*!*",v.Local.sRow)
					f.Data.DataTable.SetValue("PARENTS",v.Local.sRow(0),"NEWPARENT",V.Local.sPart.LEFT17,"REV",v.Local.sRev,"DESCRIPTION",v.DataTable.TEMP_PNG(0).DESCRIPTION!FIELDVALTRIM,"INVPART",V.Local.sPart)
				f.Intrinsic.Control.EndIf				
				F.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.Control.EndSelect
		F.Data.DataTable.Close("TEMP_PNG")		
	f.Intrinsic.Control.EndIf
		
	'refresh the child views to make sure they are there
	f.Intrinsic.Control.If(v.DataView.Child!V_CHILD.Exists,=,False)
		f.Data.DataView.Create("Child","V_Child")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.SetFilter("Child","V_Child","RTR_SEq <> '000000' AND Part <> '~~~@!@~~~@!@'")
	f.Data.DataView.SetSort("Child","V_Child","RTR_Seq")
	gui.Form.GGC_Bom.MainView("GV_CHILD")
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ipmReceived.End

Program.Sub.cmdRouterCostBuildUp_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.iCount.Declare
	v.Local.sPart.Declare
	v.Local.sRev.Declare
	v.Local.sFile.Declare
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	v.Local.sHold.Declare
	
	'Prevent double cycle
	f.Intrinsic.Control.IF(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		
	
	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveRouterCostBuildUp,=,True,or,v.Global.bActiveBomCostBuildUp,=,True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Screen.BOM_DETAIL.Visible)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please close the Cost screen to rebuild cost.")	
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)		
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		
	
	v.Global.bActiveRouterCostBuildUp.Set(True)	
	
	'check to see that we've saved the quantities that we're going to quote.
	f.Intrinsic.UI.InvokeWaitDialog("Building cost...")
	f.Intrinsic.Control.If(v.Global.bQtySaved)
		
		'Check Quantities grid
		f.Intrinsic.Control.If(v.DataTable.BUILDQTY.RowCount,>,0)
		
			'Check if Router has record
			f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,1)
				'setting the global variable for later when the quoted quantities are added to the datatable, we know where to get the Part# from.
				v.Global.sBomOrRouterToBuildCost.Set("Rtr")
				V.Local.sPart.Set(v.Screen.Form!txtFocusParent.text)
				v.Local.sRev.Set(v.Screen.Form!txtFocusRev.text)
				f.Intrinsic.String.GSSPartString(v.Local.sPart.trim,v.Local.sRev.Trim,v.Local.sPart)
				v.Global.sRouterCost.Set(v.Local.sPart)
				'check to see that this router has been saved to GSS
				f.Intrinsic.String.Build("select top 1 router from v_router_line where router = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
				f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
				
				F.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
					f.Intrinsic.UI.CloseWaitDialog
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
					f.Intrinsic.UI.Msgbox("Router has no line in GSS. Please add lines and save to GSS.","Router Cost Buildup")
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
					v.Global.bActiveRouterCostBuildUp.Set(False)
					f.Intrinsic.Control.ExitSub
				f.Intrinsic.Control.EndIf
				
				f.Intrinsic.Control.If(v.DataTable.BUILDQTY.RowCount,>,0)
					f.Intrinsic.Control.For(v.Local.iCount,0,v.DataTable.BUILDQTY.RowCount--,1)
						f.Data.DataTable.AddRow("1500","ROUTER",V.Local.sPart,"QUANTITY",V.DataTable.BUILDQTY(V.Local.iCount).QUANTITY!FIELDVALFLOAT)
					f.Intrinsic.Control.Next(v.Local.iCount)
					
					F.Intrinsic.Control.CallSub(1500sync)
					
					'get the output file from the router biuld up and put it in a datatable(s)
					f.Intrinsic.String.Build("{0}\{1}{2}PRICING.OUT",v.Caller.FilesDir,v.Caller.User.Trim,v.Caller.Terminal.Trim,v.Local.sFile)
					F.Intrinsic.File.File2String(V.Local.sFile,V.Local.sPart)
					
					f.Data.DataTable.CreateFromString("ROUTER",V.Local.sPart,"TYPE*!*ROUTER*!*QTY*!*DIR_COST*!*COST*!*MATERIAL*!*OUTSIDE*!*LABOR*!*LABOR_HOURS*!*OVERHEAD*!*TIME_QTY*!*GP%-1*!*PRICE-1*!*GP%-2*!*PRICE-2*!*GP%-3*!*PRICE-3*!*GP%-4*!*PRICE-4*!*SELL3","STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING","*!*",V.Ambient.NewLine,True)
					
					'set form labels and buttons for router
					
					Gui.BOM_DETAIL..Caption("ROUTER COST")
					Gui.BOM_DETAIL.lblCost.Caption("Cost Breakdown by Element and Quantity")
					Gui.BOM_DETAIL.cmdRefreshBuild.Enabled(False)
					Gui.BOM_DETAIL.cmdPrintBomCost.Visible(False)
					Gui.BOM_DETAIL.cmdPrintRouterCost.Visible(True)
					'build the data tables needed for the form
					f.Intrinsic.Control.CallSub(BuildBomCostTables,"CALLER","RTR")
					'pull the data in to the form
					f.Intrinsic.Control.CallSub(RouterCostBuildup)
					
					gui.BOM_DETAIL.lblCostIsBuiltFrom.Caption("ROUTER COST")
					
					f.Intrinsic.UI.CloseWaitDialog	
					v.Global.bActiveRouterCostBuildUp.Set(False)
					
					gui.BOM_DETAIL..Visible(True)
					gui.BOM_DETAIL..AlwaysOnTop(True)
					gui.BOM_DETAIL..AlwaysOnTop(False)							
			
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
					f.Intrinsic.UI.Msgbox("Enter Quantities to Cost.","No Quantities")
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.EndIf
				
			'Router does not have any record	
			f.Intrinsic.Control.Else
			
				f.Intrinsic.UI.CloseWaitDialog
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("No Router Header or No Router Line found on the Router side. Please load a valid Router on the Router side or Save the Router with Lines before building cost.","Router Cost Buildup")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				v.Global.bActiveRouterCostBuildUp.Set(False)
				f.Intrinsic.Control.ExitSub					
			
			f.Intrinsic.Control.EndIf			
	
		
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("No quantities entered for cost buildup.","Enter Quantities")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.CallSub(CheckQuantity)
		'Endif of Checking Quantities grid	
		f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.Else
		f.Intrinsic.UI.CloseWaitDialog
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Quantities not set for quoting. If you already enter quantities in the grid, please click save the Router to GSS in order to apply quantities.","No Quantities")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.CallSub(CheckQuantity)
		v.Global.bActiveRouterCostBuildUp.Set(False)
		f.Intrinsic.Control.ExitSub
		
	'Endif of checking v.Global.bQtySaved	
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdRouterCostBuildUp_Click.End

Program.Sub.cmdBomCostBuildUp_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.iCount.Declare
	v.Local.sPart.Declare
	v.Local.sRev.Declare
	v.Local.sFile.Declare
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	v.Local.sHold.Declare
	
	'Prevent double cycle
	f.Intrinsic.Control.IF(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveRouterCostBuildUp,=,True,or,v.Global.bActiveBomCostBuildUp,=,True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Screen.BOM_DETAIL.Visible)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please close the Cost screen to rebuild cost.")	
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)			
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		
	
	v.Global.bActiveBomCostBuildUp.Set(True)	
	
	'check to see that we've saved the quantities that we're going to quote.
	f.Intrinsic.UI.InvokeWaitDialog("Building cost...")
	f.Intrinsic.Control.If(v.Global.bQtySaved)
		
		'Check Quantities grid
		f.Intrinsic.Control.If(v.DataTable.BUILDQTY.RowCount,>,0)

			'Check if Bom has header and has lines
			f.Intrinsic.Control.If(v.DataTable.BOM.RowCount,>,1)
				'validate that the BOM is in GSS
				v.Local.sHold.Set(v.DataTable.BOM(0).BPARENT!FIELDVALTRIM)
				f.Intrinsic.String.Build("select top 1 PARENT from v_bom_mstr where PARENT = '{0}' and Sequence_Bom = '0000'",v.Local.sHold.PSQLFriendly,V.Local.sSql)
				f.ODBC.Connection!conx.executeandreturn(V.Local.sSql,V.Local.sRet)
				'if it is NOT in GSS, do we want to save it now?
				f.Intrinsic.Control.If(v.Local.sRet.TRIM,<>,v.DataTable.BOM(0).BPARENT!FIELDVALTRIM)
					f.Intrinsic.UI.CloseWaitDialog
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
					f.Intrinsic.UI.Msgbox("Write BOM to GSS first?","BOM Not Saved!",4,V.Local.sRet)
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
					F.Intrinsic.Control.If(V.Local.sRet,=,V.Ambient.MsgBoxYes)
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
						f.Intrinsic.UI.Msgbox("Please click Save Bom to save to GSS.")	
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)						
						v.Global.bActiveBomCostBuildUp.Set(False)
						f.Intrinsic.Control.ExitSub						
					F.Intrinsic.Control.Else
						v.Global.bActiveBomCostBuildUp.Set(False)
						f.Intrinsic.Control.ExitSub
					F.Intrinsic.Control.EndIf
				f.Intrinsic.Control.EndIf
				
				'setting the global variable for later when the quoted quantities are added to the datatable, we know where to get the Part# from.
				v.Global.sBomOrRouterToBuildCost.Set("Bom")
				'run the cost buildup on the core side to populate the BI Table.
				f.Intrinsic.Control.CallSub(BomCostBuildUp_CoreSide)
				'initialize the form
				Gui.BOM_DETAIL..Caption("BOM COST BUILDUP")
				Gui.BOM_DETAIL.lblCost.Caption("Cost Breakdown by Element")
				Gui.BOM_DETAIL.cmdRefreshBuild.Enabled(True)
				Gui.BOM_DETAIL.cmdPrintBomCost.Visible(True)
				Gui.BOM_DETAIL.cmdPrintRouterCost.Visible(False)
				'build the data tables needed for the form
				
				f.Intrinsic.Control.CallSub(BuildBomCostTables,"CALLER","BOM")
				'pull the data in to the form
				
				f.Intrinsic.Control.CallSub(BomCostBuildup)
				f.Intrinsic.UI.CloseWaitDialog	
				v.Global.bActiveBomCostBuildUp.Set(False)					
				
				'show the cost buildup screen
				Gui.BOM_DETAIL..Caption("BOM COST")
				gui.BOM_DETAIL.lblCostIsBuiltFrom.Caption("BOM COST")
				gui.BOM_DETAIL..Visible(True)
				gui.BOM_DETAIL..AlwaysOnTop(True)
				gui.BOM_DETAIL..AlwaysOnTop(False)
			
			'Bom does not has header or lines
			f.Intrinsic.Control.Else
				f.Intrinsic.UI.CloseWaitDialog
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("No Bom Header or Bom Node found on the Bom side. Please load a valid Bom on the Bom side or Save the Bom with Nodes before building cost.","Bom Cost Buildup")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				v.Global.bActiveBomCostBuildUp.Set(False)
				f.Intrinsic.Control.ExitSub				
			
			f.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("No quantities entered for cost buildup.","Enter Quantities")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.CallSub(CheckQuantity)
		'Endif of Checking Quantities grid	
		f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.Else
		f.Intrinsic.UI.CloseWaitDialog
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Quantities not set for quoting. If you already enter quantities in the grid, please click save the Router to GSS in order to apply quantities.","No Quantities")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.CallSub(CheckQuantity)
		v.Global.bActiveBomCostBuildUp.Set(False)
		f.Intrinsic.Control.ExitSub
		
	'Endif of checking v.Global.bQtySaved	
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdBomCostBuildUp_Click.End

Program.Sub.CheckQuantity.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sPart.Declare	

	f.Intrinsic.Control.If(v.Screen.Form!txtFocusParent.text.Trim,<>,"")
		f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.text.Trim,v.Screen.Form!txtFocusRev.text.Trim,v.Local.sPart)
	f.Intrinsic.Control.ElseIf(v.Screen.Form!txtParent.text.Trim,<>,"")
		f.Intrinsic.String.GSSPartString(v.Screen.Form!txtParent.text.Trim,v.Screen.Form!txtParentRev.text.Trim,v.Local.sPart)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.BUILDQTY.RowCount,<,1)
		f.Data.DataTable.AddRow("BUILDQTY","Part",V.Local.sPart,"QUANTITY",0)
	f.Intrinsic.Control.Else
		f.Data.DataTable.SetValue("BUILDQTY",-1,"PART",V.Local.sPart)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.CheckQuantity.End

Program.Sub.BomCostBuildup_CoreSide.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sParent.Declare
	V.Local.sStatus.Declare
	v.Local.sSQL.Declare
	v.Local.iRet.Declare
	v.Local.bGoodTogo.Declare
	
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtParent.text,v.Screen.Form!txtParentRev.text,v.Local.sParent)

	'hook 15080 15090
	'see below for explanation of programs and flags and what the result is.
	F.Global.Callwrapper.New("BOM","Manufacturing.BOM.CostBuildup")
	F.Global.Callwrapper.SetProperty("BOM","Program","      ")
	F.Global.Callwrapper.SetProperty("BOM","Flags","2")
	F.Global.Callwrapper.SetProperty("BOM","Parent",v.Local.sParent.Trim)
	F.Global.CallWrapper.Run("BOM")
	
	F.Intrinsic.String.Build("SELECT Count(*) FROM V_BI_BOM_BUILDUP_E where TRMNL = '{0}' and RPTID = '004203'",V.Caller.Terminal,V.Local.sSql)	
	f.Intrinsic.Control.DoUntil(v.Local.bGoodTogo)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.iRet)
		f.Intrinsic.Control.If(v.Local.iRet,>,0)
			v.Local.bGoodTogo.Set(True)	
			f.Intrinsic.Control.ExitDo
		f.Intrinsic.Control.EndIf
		F.Intrinsic.UI.SleepMS(100)
	f.Intrinsic.Control.Loop
	F.Global.CallWrapper.GetProperty("BOM","Status",V.Local.sStatus)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.BomCostBuildup_CoreSide.End

Program.Sub.cmdRefreshBuild_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'temporarily hide the form to repopulate the data
	gui.BOM_DETAIL..Visible(False)
	
	'the current data so we can pull it in again from the BI table
	f.Data.DataTable.DeleteRow("BOMMARKUP")
	F.Data.DataTable.DeleteRow("BOMDETAIL")
	F.Data.DataTable.DeleteRow("BOMPRICE")
	F.Data.DataTable.AcceptChanges("BOMMARKUP")
	F.Data.DataTable.AcceptChanges("BOMDETAIL")
	F.Data.DataTable.AcceptChanges("BOMPRICE")
	
	f.Intrinsic.Control.CallSub(BomCostBuildup)
	
	gui.BOM_DETAIL..Visible(True)
	gui.BOM_DETAIL..AlwaysOnTop(True)
	gui.BOM_DETAIL..AlwaysOnTop(False)	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdRefreshBuild_Click.End

Program.Sub.cmdPrintBomCost_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sRptID.Declare(String,"004203")
	v.Local.sCompany.Declare
	v.Local.sProgram.Declare(String,"BMR060E")
	v.Local.sParamNames.Declare
	v.Local.sParamValues.Declare
	
	'Terminal, ReportId, Program, COMPANY_NAME
	f.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}","Terminal","ReportId","Program","COMPANY_NAME",V.Local.sParamNames)
	F.Global.General.ReadCompanyName(V.Caller.CompanyCode,V.Local.sCompany)
	f.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}",V.Caller.Terminal,V.Local.sRptID,V.Local.sProgram,V.Local.sCompany,V.Local.sParamValues)
	
	F.Intrinsic.String.Split(V.Local.sParamNames,"*!*",V.Local.sParamNames)
	F.Intrinsic.String.Split(V.Local.sParamValues,"*!*",V.Local.sParamValues)
	
	F.Global.BI.PrintReport(V.Local.sRptID,0,V.Local.sParamNames,V.Local.sParamValues,False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdPrintBomCost_Click.End

Program.Sub.cmdPrintRouterCost_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sScript.Declare
	v.Local.iPIDReturn.Declare
	v.Local.bEx.Declare
	v.Local.sParam.Declare
	
	f.Intrinsic.String.Build("{0}\GCG_4986_6082_RtrC.g2u",v.Caller.GasDir,v.Local.sScript)
	f.Intrinsic.File.Exists(v.Local.sScript,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx.Not)
		f.Intrinsic.String.Build("File {0} does not exist.",v.Local.sScript,v.Local.sScript)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox(v.Local.sScript,"Invalid Call")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picLabel.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.Child.RowCount,>,0)
		f.Intrinsic.String.Build("{0}",v.Global.sRouterCost,v.Local.sParam)
	f.Intrinsic.Control.EndIf
	
	function.Global.General.CallAsyncGAS(v.Local.sScript,v.Local.sParam,v.Local.iPIDReturn)			

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdPrintRouterCost_Click.End

'End Bom Cost build up and Save Quantity
Program.Sub.BOM_DETAIL_UnLoad.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSQL.Declare
	
	'closing out of the cost build up screen
	gui.BOM_DETAIL..Visible(False)
	'close unneeded data tables
	f.Intrinsic.Control.If(v.DataTable.BOMDETAIL.Exists)
		f.Data.DataTable.close("BOMDETAIL")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.BOMMARKUP.Exists)
		f.Data.DataTable.close("BOMMARKUP")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.BOMPRICE.Exists)
		f.Data.DataTable.close("BOMPRICE")
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(v.DataView.BUILDQTY!V_QUOTEQTY.Exists)
		f.Data.DataView.Close("BUILDQTY","V_QUOTEQTY")
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.DataView.1500!1500View.Exists)
		f.Data.DataView.Close("1500","1500View")
	F.Intrinsic.Control.EndIf
	
	'As Cost Build Up core side is called Sync but actually run Async, we need to delete table, so the next time run, a query will check if the table has record as to move forward
	F.Intrinsic.String.Build("Delete FROM V_BI_BOM_BUILDUP_E where TRMNL = '{0}' and RPTID = '004203'",V.Caller.Terminal,V.Local.sSql)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.BOM_DETAIL_UnLoad.End

Program.Sub.cmdBrwCustomer_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	V.Local.sRet2.Declare
	v.Local.sSql.Declare
	v.Local.iCount.Declare
	v.Local.sContact.Declare
	v.Local.sDate.Declare
	V.Local.sDueDate.Declare
	v.Local.sCustomer.Declare
	
	'common browswer for customer/prospect
	f.Intrinsic.UI.CommonBrowser(225,"",v.Local.sRet)
	
	'was a customer selected
	f.Intrinsic.Control.If(V.Local.sRet,<>,v.Ambient.Cancel)
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		gui.Form.txtCustNo.Text(v.Local.sRet(0))
		gui.Form.txtCustName.Text(v.Local.sRet(3))
		'populate customer id and name above, then start filling in the datatables for ORDUPL and ORDUPLExtra
		f.Intrinsic.Control.If(v.Screen.Form!txtQuote.text,>,"0")
			f.Intrinsic.String.Format(v.Ambient.Date,"YYYYMMDD",V.Local.sDate)
			f.Intrinsic.Date.DateAdd("D",30,v.Ambient.Date,v.Local.sDueDate)
			f.Intrinsic.String.Format(v.Local.sDueDate,"YYYYMMDD",V.Local.sDueDate)
			v.Local.sCustomer.Set(v.Local.sRet(0))
			f.Data.DataTable.AddRow("ORDUPL","TRANSACTION","Q","CustomerNo",v.Local.sCustomer,"OrderNumber",v.Screen.Form!txtQuote.text,"CustomerPO",v.Screen.Form!txtCustomerPO.text,"OrderDueDate",v.Local.sDueDate,"OrderDate",v.Local.sDate,"ShipToName",v.Local.sRet(3),"ShipToAddress1",v.Local.sRet(4),"ShipToCity",v.Local.sRet(5),"ShipToState",v.Local.sRet(6),"ShipToZip",v.Local.sRet(7),"OverrideAutoNumbering","1")
		f.Intrinsic.Control.EndIf
	
		'get the salesperson assigned to this customer from the customer mater table:  if there is one, populate the form
		v.Local.sCustomer.Set(v.Local.sRet(0))
		f.Intrinsic.String.Build("SELECT S.ID, S.NAME FROM V_CUSTOMER_MASTER C LEFT JOIN V_SALESPERSONS S ON C.SALESPERSON = S.ID WHERE C.CUSTOMER = '{0}'",v.Local.sCustomer.PSQLFriendly,v.Local.sSql)
		f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet2)
		f.Intrinsic.Control.If(v.Local.sRet2.IsNullOrWhiteSpace,=,False)
			f.Intrinsic.String.Replace(v.Local.sRet2,"*!*"," | ",v.Local.sRet2)
			gui.Form.ddlSalesRep.Text(v.Local.sRet2)
		f.Intrinsic.Control.EndIf
		
		gui.Form.ddlContact.ClearItems
		v.Local.sCustomer.Set(v.Local.sRet(0))
		f.Intrinsic.String.Build("select name, phone1, email1 from v_contact where cust_6 = '{0}' and type = 'C'",v.Local.sCustomer.PSQLFriendly,V.Local.sSql)
		F.ODBC.Connection!conx.openlocalrecordsetrw("contact",v.Local.sSql)
		f.Intrinsic.Control.If(v.ODBC.conx!contact.EOF,=,False)
			f.ODBC.conx!contact.MoveFirst
			f.Intrinsic.Control.DoUntil(v.ODBC.conx!contact.EOF,=,True)
				f.Intrinsic.Math.Add(v.Local.iCount,1,v.Local.iCount)
				f.Intrinsic.String.Build("{0} | {1} | {2}",v.ODBC.conx!contact.FieldValTrim!NAME,v.ODBC.conx!contact.FieldValTrim!PHONE1,v.ODBC.conx!contact.FieldValTrim!email1,v.Local.sContact)
				gui.Form.ddlContact.AddItem(v.Local.sContact,v.Local.iCount)
				f.ODBC.conx!contact.MoveNext
			f.Intrinsic.Control.Loop
			f.ODBC.conx!contact.Close
		f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdBrwCustomer_Click.End

'Quote section
Program.Sub.cmdQuoteAddLine_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sHold.Declare
	v.Local.iLine.Declare
	v.Local.sRet.Declare
	v.Local.sPart.Declare
	v.Local.sSQL.Declare
	v.Local.sLine.Declare		
	v.Local.bNonInv.Declare
	v.Local.sPart17.Declare
	v.Local.sRev.Declare
	v.Local.sDesc.Declare
	v.Local.sUM.Declare
	v.Local.sPL.Declare
	v.Local.sDate.Declare
	v.Local.sDueDate.Declare	
	v.Local.sqty.Declare
	v.Local.sPrice.Declare
	v.Local.sExtended.Declare
	v.Local.fQty.Declare
	v.Local.fPrice.Declare
	v.Local.sColIndex.Declare
	v.Local.sHold1.Declare
	v.Local.sHold2.Declare
	v.Local.fCost.Declare
	v.Local.sCost.Declare
	
	'Get the max line number
	f.Data.DataTable.Compute("ORDUPLLines","MAX(LineNumber)","",v.Local.sHold)
	f.Intrinsic.Control.If(v.Local.sHold.Trim,<>,"")
		f.Intrinsic.Math.Add(v.Local.sHold,1,v.Local.iLine)
	f.Intrinsic.Control.Else
		v.Local.iLine.Set(1)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.LPad(v.Local.iLine,"0",3,v.Local.sLine)	

	'Inventory
	F.Intrinsic.Control.If(v.Screen.Form!optAddNonInvQuote.Value,=,True)
		gui.Form..Enabled(False)
		f.Intrinsic.Control.If(v.Global.bFirstLoadQuickNonInv)
			gui.QuickNonInv..Position(2000,2000)
			v.Global.bFirstLoadQuickNonInv.Set(False)
		f.Intrinsic.Control.EndIf		
		f.Intrinsic.Control.CallSub(ClearQuickNonInv)
		gui.QuickNonInv..Visible(True)
		gui.QuickNonInv.txtQPart17.SetFocus
		gui.QuickNonInv..WaitForDismiss
		f.Intrinsic.Control.If(v.Args.sOK,=,"N")
			gui.Form..Enabled(True)
			gui.Form..AlwaysOnTop(True)
			gui.Form..AlwaysOnTop(False)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.Else
			v.Local.sHold1.Set(v.Screen.QuickNonInv!txtQPart17.Text.Trim)
			v.Local.sHold2.Set(v.Screen.QuickNonInv!txtQRev.Text.Trim)
			f.Intrinsic.String.GSSPartString(v.Local.sHold1.UCase,v.Local.sHold2.UCase,v.Local.sRet)
			v.Local.sDesc.Set(v.Screen.QuickNonInv!txtQDescription.Text.Trim)
			v.Local.bNonInv.Set(True)
			gui.Form..Enabled(True)
			gui.Form..AlwaysOnTop(True)
			gui.Form..AlwaysOnTop(False)			
		f.Intrinsic.Control.EndIf			
	
	F.Intrinsic.Control.ElseIf(V.Screen.Form!optAddInvQuote.Value,=,True)
		F.Intrinsic.Control.If(V.Global.bLongPart)
			f.Intrinsic.UI.Browser("Select Inventory Part","conx","select Left(i1.Part,17) as Part,substring(i1.Part,18,3) as Rev,i1.Description, i1.UM_Inventory as UM,i1.Product_Line,Case when i1.Flag_Inactive = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Inactive,x.Display_Part,x.Display_Rev  from INVENTORY_MSTR i1 left join Inv_Lxr x on i1.Part = x.GSS_PART  order by Part","Part*!*Rev*!*Description*!*UM*!*PL*!*Inactive*!*Long Part*!*Rev Long Part","500*!*200*!*700*!*300*!*300*!*200*!*500*!*200","15000","10000",v.Local.sRet)
		F.Intrinsic.Control.Else
			f.Intrinsic.UI.Browser("Select Inventory Part","conx","select Left(i1.Part,17) as Part,substring(i1.Part,18,3) as Rev, i1.Description, i1.UM_Inventory as UM,i1.Product_Line,Case when i1.Flag_Inactive = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Inactive  from INVENTORY_MSTR i1  order by Part","Part*!*Rev*!*Description*!*UM*!*PL*!*Inactive","500*!*200*!*700*!*300*!*300*!*200","15000","10000",v.Local.sRet)
		f.Intrinsic.Control.EndIf

	'Router
	F.Intrinsic.Control.ElseIf(v.Screen.Form!optAddRtrQuote.Value,=,True)
	
	F.Intrinsic.Control.If(V.Global.bLongPart)
			f.Intrinsic.UI.Browser("Select Router","conx","select Left(h.Router,17) as Router,Substring(h.Router,18,3) as Rev,rtrim(h.DESCRIPTION_ROUTER) as Description,h.UM_INVENTORY as UM_Inventory ,h.PROD_LINE as Product_Line,s.Inactive,s.Complete, x.DISPLAY_PART,x.DISPLAY_REV  from v_router_header h left join v_router_desc d on h.Router = d.Router and h.Router_Suffix = d.Router_Suffix left join v_ROUTER_SUPP_HDR s on h.Router = s.Rtr_Num and h.Router_Suffix = s.Suffix  left join Inv_lxr x on h.Router = x.GSS_Part order by h.Router","Router*!*Rev*!*Description*!*UM*!*PL*!*Inactive*!*Compl.*!*Long Part*!*Rev Long Part","500*!*200*!*700*!*200*!*200*!*300*!*300*!*500*!*200","15000","10000",v.Local.sRet)
		F.Intrinsic.Control.Else
			f.Intrinsic.UI.Browser("Select Router","conx","select Left(h.Router,17) as Router,Substring(h.Router,18,3) as Rev,rtrim(h.DESCRIPTION_ROUTER) as Description,h.UM_INVENTORY as UM_Inventory ,h.PROD_LINE as Product_Line,s.Inactive,s.Complete  from v_router_header h left join v_router_desc d on h.Router = d.Router and h.Router_Suffix = d.Router_Suffix left join v_ROUTER_SUPP_HDR s on h.Router = s.Rtr_Num and h.Router_Suffix = s.Suffix order by h.Router","Router*!*Rev*!*Description*!*UM*!*PL*!*Inactive*!*Compl.","500*!*200*!*700*!*200*!*200*!*300*!*400","15000","10000",v.Local.sRet)
		F.Intrinsic.Control.EndIf	
		
	'Bom
	F.Intrinsic.Control.ElseIf(v.Screen.Form!optAddBomQuote.Value,=,True)
		f.Intrinsic.Control.If(v.Global.bLongPart)
			f.Intrinsic.UI.Browser("Select Bill of Material","conx","SELECT Left(A.PARENT,17) as Part,Substring(A.PARENT,18,3) as Rev, B.Description,A.UM_Inventory as UM,'' as PL,A.Inactive,Case When a.Bom_Complete = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Complete, x.DISPLAY_PART,x.DISPLAY_REV FROM  V_BOM_ENG B LEFT JOIN V_BOM_MSTR A ON B.PART = A.PARENT Left Join INV_LXR x ON x.GSS_PART = b.Part WHERE b.Location = '' and B.IS_PARENT = 'Y' AND A.SEQUENCE_BOM = '0000'","Parent*!*Rev*!*Description*!*UM*!*PL*!*Inactive*!*Compl.*!*Long Part*!*Rev Long Part","500*!*200*!*700*!*200*!*100*!*200*!*200*!*500*!*200","15000","10000",v.Local.sRet)
		f.Intrinsic.Control.Else
			f.Intrinsic.UI.Browser("Select Bill of Material","conx","SELECT Left(A.PARENT,17) as Part,Substring(A.PARENT,18,3) as Rev, B.Description,A.UM_Inventory as UM,'' as PL,A.Inactive,Case When a.Bom_Complete = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Complete FROM  V_BOM_ENG B LEFT JOIN V_BOM_MSTR A ON B.PART = A.PARENT WHERE b.Location = '' and B.IS_PARENT = 'Y' AND A.SEQUENCE_BOM = '0000'","Parent*!*Rev*!*Description*!*UM*!*PL*!*Inactive*!*Compl.","500*!*200*!*700*!*200*!*100*!*200*!*200","15000","10000",v.Local.sRet)
		f.Intrinsic.Control.EndIf		
	
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.ExitSub
		
	F.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(v.Local.bNonInv)	
		v.Local.sPart.Set(v.Local.sRet)
		v.Local.sPart17.Set(v.Local.sRet.Left17)
		f.Intrinsic.String.Mid(v.Local.sRet,18,3,v.Local.sRev)
	f.Intrinsic.Control.Else	
		f.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)		
			f.Intrinsic.String.GSSPartString(v.Local.sRet(0),v.Local.sRet(1),v.Local.sPart)
			v.Local.sPart17.Set(v.Local.sRet(0))
			v.Local.sRev.Set(v.Local.sRet(1))
			v.Local.sDesc.Set(v.Local.sRet(2))
			v.Local.sHold.Set(v.Local.sRet(3))
			v.Local.sUM.Set(v.Local.sHold.left2)
			v.Local.sPL.Set(v.Local.sRet(4))
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	'Date
	f.Intrinsic.String.Format(v.Ambient.Date,"YYYYMMDD",V.Local.sDate)
	f.Intrinsic.Date.DateAdd("D",30,V.Ambient.Date,v.Local.sDueDate)
	F.Intrinsic.String.Format(V.Local.sDueDate,"YYYYMMDD",V.Local.sDueDate)	
	'Number
	'Qty
	v.Local.sqty.Set("1")
	v.Local.fQty.Set(v.Local.sqty)
	v.Local.sPrice.Set("1")
	v.Local.fPrice.Set(v.Local.sPrice)
	v.Local.sExtended.Set("1")
	
	f.Intrinsic.String.Format(v.Local.sqty,"000000000.0000",v.Local.sQty)
	f.Intrinsic.String.Replace(v.Local.sQty,".","",v.Local.sQty)
	'Price
	f.Intrinsic.String.Format(v.Local.sPrice,"0000000000.000000",v.Local.sPrice)
	f.Intrinsic.String.Replace(v.Local.sPrice,".","",v.Local.sPrice)
	'Extended
	F.Intrinsic.String.Format(v.Local.sExtended,"0000000000.000000",V.Local.sExtended)
	F.Intrinsic.String.Replace(V.Local.sExtended,".","",V.Local.sExtended)	
	
	
	f.Intrinsic.String.GSSPartString(v.Local.sPart17,v.Local.sRev,v.Local.sPart)
	f.Intrinsic.String.Build("Select Top 1 Cost from Inventory_Cost where Part = '{0}'",v.Local.sPart,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	v.Local.fCost.Set(v.Local.sRet)		
	F.Intrinsic.String.Format(v.Local.fCost,"0000000000.000000",V.Local.sCost)
	F.Intrinsic.String.Replace(V.Local.sCost,".","",V.Local.sCost)	
	
	f.Data.DataTable.AddRow("ORDUPLLines","LineNumber",v.Local.sLine,"Filler1",0,"QTY",v.Local.fQty,"QtyOrdered",v.Local.sQty,"Price",v.Local.fPrice,"QuotedPrice",v.Local.sPrice,"OverridePrice",v.Local.sPrice,"Extension",v.Local.sExtended,"UM",v.local.sUM.left2, "PartNumber",v.Local.sPart17, "PartRev",v.Local.sRev, "PartDesc",v.Local.sDesc,"PL",v.Local.sPL, "LineOrderDate",v.Local.sDate, "LinePromiseDate",v.Local.sDueDate,"CurrFlag","Y","RouterValFlag","N","Cost",v.Local.sCost,"CostDisplay",v.Local.fCost)
	
	Gui.Form.GGC_Quote.GetColumnIndexByName("GV_QLINES","PartDesc",v.Local.sColIndex)
	gui.Form.GGC_Quote.FocusCell("GV_QLINES",v.DataTable.ORDUPLLINES.RowCount--,v.Local.sColIndex)	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.cmdQuoteAddLine_Click.End

Program.Sub.DeleteAllLines.Start
'For Context Menu Quote
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	f.Intrinsic.Control.If(v.DataTable.ORDUPLLines.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	F.Data.DataTable.DeleteRow("ORDUPLLines")
	F.Data.DataTable.AcceptChanges("ORDUPLLines")

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.DeleteAllLines.End

Program.Sub.DeleteSelectedLines.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sRows.Declare
	v.Local.iRow.Declare
	v.Local.iCount.Declare
	
	f.Intrinsic.Control.If(v.DataTable.ORDUPLLines.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.If(v.DataTable.ORDUPLLines.RowCount,=,0)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	gui.Form.GGC_Quote.GetSelectedRows("GV_QLINES",V.Local.sRows)
	f.Intrinsic.Control.If(v.Local.sRows.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please select a row.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf

	f.Intrinsic.String.Split(v.Local.sRows,"*!*",v.Local.sRows)
	
	f.Intrinsic.Control.For(v.Local.iCount,v.Local.sRows.UBound,0,-1)
		v.Local.iRow.Set(v.Local.sRows(v.Local.iCount))
		f.Data.DataTable.DeleteRow("ORDUPLLines",V.Local.iRow)
	f.Intrinsic.Control.Next(v.Local.iCount)
	
	F.Data.DataTable.AcceptChanges("ORDUPLLines")

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.DeleteSelectedLines.End

Program.Sub.DeleteQuoteLine.Start
'For Context Menu Quote
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRow.Declare
	
	'check in case nothing has been loaded and user right click and select Quote Line
	f.Intrinsic.Control.If(v.DataTable.ORDUPLLINES.Exists,=,False)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Table ORDUPLLINES is not created.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.If(v.DataTable.ORDUPLLINES.RowCount,=,0)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	gui.Form.GGC_Quote.GetSelectedRows("GV_QLINES",V.Local.sRow)
	f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Please select a row to delete","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	F.Data.DataTable.DeleteRow("ORDUPLLines",V.Local.sRow)	
	F.Data.DataTable.AcceptChanges("ORDUPLLines")

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.DeleteQuoteLine.End

Program.Sub.ddlContact_LostFocus.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sContact.Declare	
	
	'getting the contact info from the screen and populating the quote B record with contact info
	'ContactName|ContactPhone|ContactEmail
	v.Local.sContact.Set(v.Screen.Form!ddlContact.text)
	f.Intrinsic.String.Split(v.Local.sContact,"|",v.Local.sContact)
	f.Intrinsic.Control.If(v.DataTable.ORDUPL.RowCount,>,0)
		f.Data.DataTable.SetValue("ORDUPL",0,"ContactName",v.Local.sContact(0).trim)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.If(v.DataTable.ORDUPLExtra.RowCount,>,0)
		f.Data.DataTable.SetValue("ORDUPLExtra",0,"ContactEmail",v.Local.sContact(2),"ContactPhone",v.Local.sContact(1))
	f.Intrinsic.Control.Else
		f.Data.DataTable.AddRow("ORDUPLExtra","ContactEmail",v.Local.sContact(2),"ContactPhone",v.Local.sContact(1))
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ddlContact_LostFocus.End

Program.Sub.ddlSalesRep_LostFocus.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRep.Declare
	
	'adding the sales rep code to the quote datatables
	v.Local.sRep.Set(v.Screen.Form!ddlSalesRep.text)
	f.Intrinsic.String.Split(v.Local.sRep,"|",v.Local.sRep)
	f.Intrinsic.Control.If(v.DataTable.ORDUPL.RowCount,>,0)
		f.Data.DataTable.SetValue("ORDUPL",0,"Salesman",v.Local.sRep(0).Trim)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ddlSalesRep_LostFocus.End

Program.Sub.CostMenu_Conversion.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sPart.Declare
	v.Local.sRow.Declare
	v.Local.sHold.Declare
	
	'Check if CHILD table exist beforehand
	f.Intrinsic.Control.If(v.DataTable.CHILD.Exists)
		'Check if CHILD table has at least 2 records in which record 1 is for parent
		f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,0)
			'Check if user select the grid
			gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",V.Local.sRow)
			f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("Please select a row in Router grid")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf

			'set screen values
			f.Intrinsic.Control.BlockEvents
			v.Local.sPart.Set(v.DataTable.CHILD(v.Local.sRow).PART!FIELDVALSTRING)
			gui.Conversion.txtPartRev.Text(v.DataTable.CHILD(v.Local.sRow).PART!FIELDVALTRIM)
			gui.Conversion.txtDescr.Text(v.DataTable.CHILD(v.Local.sRow).DESCRIPTION!FIELDVALTRIM)
			
			f.Intrinsic.String.Format(v.DataTable.CHILD(v.Local.sRow).COST!FIELDVALSTRING,"###,###,##0.000000",v.Local.sHold)
			gui.Conversion.txtRtrInv.Text(v.Local.sHold)
			f.Intrinsic.String.Format(v.DataTable.CHILD(v.Local.sRow).PURCH_COST!FIELDVALSTRING,"###,###,##0.000000",v.Local.sHold)
			gui.Conversion.txtRtrPur.Text(v.Local.sHold)
			f.Intrinsic.String.Format(v.Dictionary.INVCOST![v.Local.sPart.Trim],"###,###,##0.000000",v.Local.sHold)
			gui.Conversion.txtInvInv.Text(v.Local.sHold)
			f.Intrinsic.String.Format(V.Dictionary.PURCOST![v.Local.sPart.Trim],"###,###,##0.000000",v.Local.sHold)
			gui.Conversion.txtInvPur.Text(v.Local.sHold)		
			
			v.Local.sHold.Set(v.Dictionary.PURCONVERSION![v.Local.sPart.Trim])
			gui.Conversion.txtFactor.Text(v.Local.sHold)
			f.Intrinsic.Control.UnBlockEvents
			GUI.Conversion..Visible(True)	

		f.Intrinsic.Control.Else
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("CHILD table does not have row.","Attention")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("CHILD table is not created.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.CostMenu_Conversion.End

Program.Sub.CostMenu_UpdateLineCost.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.fPurCost.Declare
	v.Local.sRow.Declare
	v.Local.fPurchFactor.Declare
	v.Local.sPart.Declare
	
	'Check if CHILD table exist beforehand
	f.Intrinsic.Control.If(v.DataTable.CHILD.Exists)
		'Check if CHILD table has at least 2 records in which record 1 is for parent
		f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,0)
			'Check if user select the grid
			gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",V.Local.sRow)
			f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("Please select a row in Router grid")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
			'Check Purchase factor
			v.Local.fPurchFactor.Set(v.DataTable.CHILD(v.Local.sRow).PURCHASE_FACTOR!FIELDVAL)
			v.Local.sPart.Set(V.DataTable.CHILD(V.local.sRow).PART!FIELDVALSTRING)
			f.Intrinsic.Control.If(v.Local.fPurchFactor,>,0)				
				f.Intrinsic.Math.Mult(V.DICTIONARY.INVCOST![v.Local.sPart.Trim],v.Local.fPurchFactor,v.Local.fPurCost)
			f.Intrinsic.Control.Else
				v.Local.fPurCost.Set(V.DICTIONARY.INVCOST![v.Local.sPart.Trim])
			F.Intrinsic.Control.EndIf
			f.Data.DataTable.SetValue("CHILD",v.Local.sRow,"COST",V.DICTIONARY.INVCOST![v.Local.sPart.Trim],"PURCH_COST",V.Local.fPurCost)				
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("CHILD table does not have row.","Attention")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("CHILD table is not created.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.CostMenu_UpdateLineCost.End

Program.Sub.CostMenu_UpdateALLMaterialCost.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.fPurCost.Declare
	V.Local.iCount.Declare	
	v.Local.sPart.Declare
	
	'Create views based on what tables have data. (BOM)
	f.Intrinsic.Control.If(v.DataTable.BOM.RowCount,>,0,AND,V.DataTable.CHILD.RowCount,>,0)
		'the BOM datatable is all material so we can just fill from dictionary for both cost and conversion factor, then calc the purchase cost.
		f.Data.DataTable.FillFromDictionary("BOM","INVCOST","PartTrim2","COST")
		F.Data.DataTable.FillFromDictionary("BOM","PURCONVERSION","PartTrim2","PURCHASE_FACTOR")
	f.Intrinsic.Control.EndIf	
	
	'CHILD
	f.Intrinsic.Control.If(V.DataTable.CHILD.RowCount,>,0)
		F.Data.DataView.Create("CHILD","V_COSTUPDATE",22,"LMO = 'M' AND (SOURCE_CODE = 'P' OR SOURCE_CODE = 'J') and RTR_SEQ <> '000000' and RTR_SEQ < '990000'","")
		F.Intrinsic.Control.For(v.Local.iCount,0,v.DataView.CHILD!V_COSTUPDATE.RowCount--,1)
			v.Local.sPart.Set(V.DataView.CHILD!V_COSTUPDATE(V.Local.iCount).PART!FIELDVALSTRING)
			F.Intrinsic.Control.If(V.DataView.CHILD!V_COSTUPDATE(V.Local.iCount).PURCHASE_FACTOR!FIELDVAL,>,0)
				'if we have a purchase conversion factor, we need to calculate the purch cost versus the inventory cost
				F.Intrinsic.Math.Mult(V.DICTIONARY.INVCOST![v.local.sPart.Trim],V.DICTIONARY.PURCONVERSION![v.local.sPart.Trim],V.Local.fPurCost)
				f.Data.DataView.SetValue("CHILD","V_COSTUPDATE",V.Local.iCount,"COST",V.DICTIONARY.INVCOST![v.local.sPart.Trim],"PURCHASE_FACTOR",V.DICTIONARY.PURCONVERSION![v.local.sPart.Trim],"PURCH_COST",V.Local.fPurCost)
			F.Intrinsic.Control.Else
				'no conversion factor
				f.Data.DataView.SetValue("CHILD","V_COSTUPDATE",V.Local.iCount,"COST",V.DICTIONARY.INVCOST![v.local.sPart.Trim],"PURCH_COST",V.DICTIONARY.INVCOST![v.local.sPart.Trim])
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Next(V.Local.iCount)
		F.Data.DataView.Close("CHILD","V_COSTUPDATE")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.UI.Msgbox("Complete","Cost Update")
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.CostMenu_UpdateALLMaterialCost.End

Program.Sub.validate_UnitOfMeasure.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	v.Local.bRet.Declare	
	
	F.Intrinsic.Variable.ArgExists("SELECT",V.Local.bRet)
	F.Intrinsic.Control.If(V.Local.bRet)
		'calling form the main grid UM field
		V.Local.sSql.Set("SELECT CODE, DESCR from V_UM_CODES")
		f.Intrinsic.UI.Browser("UNIT OF MEASURE","conx",v.Local.sSql,"CODE*!*DESCRIPTION","60*!*300",V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			f.Intrinsic.Variable.AddRV("NEWUM",V.Local.sRet(0).TRIM)
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.CallSub(validate_UnitOfMeasure,"SELECT","")
			f.Intrinsic.Variable.AddRV("NEWUM",v.Args.NEWUM)
		F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.Else
		'calling from the new part InsNonInv form
		f.Intrinsic.String.Build("select CODE from V_UM_CODES where CODE = '{0}'",v.Args.UM.UCase,V.Local.sSql)
		f.ODBC.Connection!conx.executeandreturn(V.Local.sSql,V.Local.sRet)
		f.Intrinsic.Control.If(v.Local.sRet,<>,v.Args.UM.Trim)
			V.Local.sSql.Set("SELECT CODE, DESCR from V_UM_CODES")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Select a Unit of Measure code from the list","Invalid Unit of Measure")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.UI.Browser("UNIT OF MEASURE","conx",v.Local.sSql,"CODE*!*DESCRIPTION","60*!*300",V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
				f.Intrinsic.String.IsInString(v.Local.sRet,"!*!",True,v.Local.bRet)
				f.Intrinsic.Control.If(v.Local.bRet)
					f.Intrinsic.String.Replace(v.Local.sRet,"!*!","",v.Local.sRet)
				f.Intrinsic.Control.EndIf
				f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
				f.Intrinsic.Variable.AddRV("NEWUM",V.Local.sRet(0).TRIM)
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.CallSub(validate_UnitOfMeasure,"UM",V.Args.UM.UCase)
				f.Intrinsic.Variable.AddRV("NEWUM",v.Args.NEWUM)
			F.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.validate_UnitOfMeasure.End

'PNG
Program.Sub.CustomPart.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.bExist.Declare
	
	'open a connection to get part gen fragments for the main group
	f.Intrinsic.String.Build("select distinct DESCR1, PROD_GROUP AS PREFIX from V_PART_GEN_FRAGMENT where PROD_GROUP > '' AND CAT_CD = '{0}'","01",v.Local.sSql)	
	f.Intrinsic.Control.If(v.DataTable.PNGGROUPS.Exists)
		f.Data.DataTable.Close("PNGGROUPS")
	f.Intrinsic.Control.EndIf
	F.Data.DataTable.CreateFromSQL("PNGGROUPS","conx",V.Local.sSql,True)
	
	GUI.PNG_Frags.ddlPrefix.AddItems("DATATABLE","PNGGROUPS","PREFIX","DESCR1")
	f.Data.Dictionary.Exists("PNG",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.Dictionary.Close("PNG")
	f.Intrinsic.Control.EndIf
	f.Data.Dictionary.CreateFromDatatable("PNG","PNGGROUPS","PREFIX","DESCR1")
	
	GUI.PNG_Frags.txtType.Text(v.Args.TYPE)
	GUI.PNG_Frags.txtBSEQ.Text(V.Args.BSEQ)
	GUI.PNG_Frags.txtRSEQ.Text(V.Args.RSEQ)
	
	GUI.PNG_Frags..Visible(True)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.CustomPart.End

Program.Sub.txtPL_LostFocus_PNG_Form.Start
f.Intrinsic.Control.Try
F.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	V.Local.sPL.Declare		
	
	v.Local.sPL.Set(v.Screen.PNG_Frags!txtPL.Text.Trim)
	v.Local.sPL.Set(v.Local.sPL.UCase)
	gui.PNG_Frags.txtPL.Text(v.Local.sPL)	
	
	'build a statement to validate the product line
	f.Intrinsic.Control.If(v.Caller.GSSVersion,<,"2019.1")
		F.Intrinsic.String.Build("SELECT PRODUCT_LINE FROM V_PRODUCT_LINE WHERE rtrim(PRODUCT_LINE) = '{0}'",v.Local.sPL.PSQLFriendly,V.Local.sSql)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("SELECT PROD_LINE FROM V_PL_MASTER WHERE rtrim(PROD_LINE) = '{0}'",v.Local.sPL.PSQLFriendly,V.Local.sSql)
	f.Intrinsic.Control.EndIf	
	
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
	v.Local.sRet.Set(v.Local.sRet.Trim)
	f.Intrinsic.Control.If(v.Local.sRet,=,"",or,v.Local.sRet.UCase,<>,v.Local.sPL)
		f.Intrinsic.UI.CommonBrowser(130,"",v.Local.sRet)
		f.Intrinsic.Control.If(v.Local.sRet,<>,v.Ambient.cancel)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			gui.PNG_Frags.txtPL.Text(v.Local.sRet(0).Trim)
		F.Intrinsic.Control.Else
			gui.PNG_Frags.txtPL.Text("")
			gui.PNG_Frags.txtPL.SetFocus
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtPL_LostFocus_PNG_Form.End

Program.Sub.txtIUofM_LostFocus_PNG_Form.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sUM.Declare
	v.Local.sRet.Declare
	v.Local.sSQL.Declare	
		
	v.Local.sUM.Set(V.Screen.PNG_Frags!txtIUofM.TEXT.Trim)
	v.Local.sUM.Set(v.Local.sUM.UCase)
	gui.PNG_Frags.txtIUofM.Text(v.local.sUM.left2)
	
	'Validate UM
	f.Intrinsic.String.Build("select CODE from V_UM_CODES where CODE = '{0}'",v.Local.sUM.PSQLFriendly,V.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(V.Local.sSql,V.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"",or,v.Local.sRet.UCase,<>,v.Local.sUM)
		f.Intrinsic.UI.Browser("UNIT OF MEASURE","conx","SELECT CODE, DESCR from V_UM_CODES","CODE*!*DESCRIPTION","60*!*300",V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			gui.PNG_Frags.txtIUofM.text(V.Local.sRet(0).Trim)
		f.Intrinsic.Control.Else
			gui.PNG_Frags.txtIUofM.text("")
			gui.PNG_Frags.txtIUofM.SetFocus
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtIUofM_LostFocus_PNG_Form.End

Program.Sub.txtPUofM_LostFocus_PNG_Form.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sUM.Declare
	v.Local.sRet.Declare
	v.Local.sSQL.Declare		
	
	v.Local.sUM.Set(V.Screen.PNG_Frags!txtPUofM.TEXT.Trim)
	v.Local.sUM.Set(v.Local.sUM.UCase)
	gui.PNG_Frags.txtPUofM.Text(v.local.sUM.left2)
	
	'Validate UM
	f.Intrinsic.String.Build("select CODE from V_UM_CODES where CODE = '{0}'",v.Local.sUM.PSQLFriendly,V.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(V.Local.sSql,V.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"",or,v.Local.sRet.UCase,<>,v.Local.sUM)
		f.Intrinsic.UI.Browser("UNIT OF MEASURE","conx","SELECT CODE, DESCR from V_UM_CODES","CODE*!*DESCRIPTION","60*!*300",V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			gui.PNG_Frags.txtPUofM.text(V.Local.sRet(0).Trim)
		f.Intrinsic.Control.Else
			gui.PNG_Frags.txtPUofM.text("")
			gui.PNG_Frags.txtPUofM.SetFocus
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtPUofM_LostFocus_PNG_Form.End

Program.Sub.txtJUofM_LostFocus_PNG_Form.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sUM.Declare
	v.Local.sRet.Declare
	v.Local.sSQL.Declare	
		
	v.Local.sUM.Set(V.Screen.PNG_Frags!txtJUofM.TEXT.Trim)
	v.Local.sUM.Set(v.Local.sUM.UCase)
	gui.PNG_Frags.txtJUofM.Text(v.local.sUM.left2)
	
	'Validate UM
	f.Intrinsic.String.Build("select CODE from V_UM_CODES where CODE = '{0}'",v.Local.sUM.PSQLFriendly,V.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(V.Local.sSql,V.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"",or,v.Local.sRet.UCase,<>,v.Local.sUM)
		f.Intrinsic.UI.Browser("UNIT OF MEASURE","conx","SELECT CODE, DESCR from V_UM_CODES","CODE*!*DESCRIPTION","60*!*300",V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			gui.PNG_Frags.txtJUofM.text(V.Local.sRet(0).Trim)
		f.Intrinsic.Control.Else
			gui.PNG_Frags.txtJUofM.text("")
			gui.PNG_Frags.txtJUofM.SetFocus
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtJUofM_LostFocus_PNG_Form.End

Program.Sub.cmdPNGCancel_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bExists.Declare
	
	'check to see what dictionaries were created prior to canceling out of the screen. If they exist, close them
	F.Data.Dictionary.Exists("PNGGROUPS",V.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists)
		f.Data.Dictionary.Close("PNGGROUPS")
		gui.PNG_Frags.ddlPrefix.ClearItems
	f.Intrinsic.Control.EndIf
	
	f.Data.Dictionary.Exists("FRAG_1",V.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists)
		f.Data.Dictionary.Close("FRAG_1")
		gui.PNG_Frags.ddlCategory1.ClearItems
	f.Intrinsic.Control.EndIf
	
	gui.PNG_Frags..Visible(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdPNGCancel_Click.End

Program.Sub.ddlPrefix_Change.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	V.Local.bExists.Declare
	V.Local.sKey.Declare
	
	f.Data.Dictionary.Exists("PNG",v.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists)
		f.Data.Dictionary.ReturnKeyFromValue("PNG",v.Args.selecteditem,False,v.Local.sKey)
	f.Intrinsic.Control.EndIf	
	
	v.Local.sKey.Set(v.Local.sKey.Trim)
	'Table FRAG_1
	f.Intrinsic.String.Build("select distinct DESCR1, PART_FRAGMENT AS FRAG from V_PART_GEN_FRAGMENT where PROD_GROUP = '{0}' AND CAT_CD = '02'",V.Local.sKey.PSQLFriendly,v.Local.sSql)
	f.Intrinsic.Control.If(v.DataTable.FRAG_1.Exists)
		F.Data.DataTable.Close("FRAG_1")
	f.Intrinsic.Control.EndIf	
	F.Data.Datatable.CreateFromSQL("FRAG_1","conx",v.Local.sSql,True)
	
	gui.PNG_Frags.ddlCategory1.ClearItems
	GUI.PNG_Frags.ddlCategory1.AddItems("DATATABLE","FRAG_1","FRAG","DESCR1")
	
	'Dictionary PNG_FRAG1
	F.Data.Dictionary.Exists("PNG_FRAG1",V.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists)
		f.Data.Dictionary.Close("PNG_FRAG1")	
	f.Intrinsic.Control.EndIf	
	F.Data.Dictionary.CreateFromDatatable("PNG_FRAG1","FRAG_1","FRAG","DESCR1")
	
	F.Intrinsic.String.Build("SELECT SOURCE, PROD_LN, INV_UM, PUR_UM, ISS_UM FROM V_PART_GEN_FRAGMENT WHERE PART_FRAGMENT = '{0}' AND CAT_CD = '01'",V.Local.sKey.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.ExecuteAndReturn(V.Local.sSql,V.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
		gui.PNG_Frags.txtSource.text(v.Local.sRet(0).Trim)
		gui.PNG_Frags.txtPL.Text(v.Local.sRet(1).trim)
		gui.PNG_Frags.txtIUofM.Text(v.Local.sRet(2).trim)
		gui.PNG_Frags.txtPUofM.Text(v.Local.sRet(3).trim)
		gui.PNG_Frags.txtIUofM.Text(v.Local.sRet(4).trim)	
	f.Intrinsic.Control.EndIf	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ddlPrefix_Change.End

Program.Sub.ddlCategory1_Change.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sKey.Declare
	v.Local.sRet.Declare
	V.Local.sKey2.Declare
	v.Local.bExists.Declare
	'=========================================================move units of measure to first DDL.  When DDL 1 = 100, select units of measure from second DDL.

	f.Data.Dictionary.Exists("PNG",v.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists)
		f.Data.Dictionary.ReturnKeyFromValue("PNG",v.Screen.PNG_Frags!ddlPrefix.text,v.Local.sKey)
	f.Intrinsic.Control.EndIf		
	
	f.Data.Dictionary.Exists("PNG_FRAG1",v.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists)
		F.Data.Dictionary.ReturnKeyFromValue("PNG_FRAG1",v.Args.selecteditem,False,v.Local.sKey2)
	f.Intrinsic.Control.EndIf
	
	v.Local.sKey.Set(v.Local.sKey.Trim)
	v.Local.sKey2.Set(v.Local.sKey2.Trim)
	f.Intrinsic.String.Build("select DESCR1, PROD_LN, INV_UM, PUR_UM, ISS_UM, SOURCE from V_PART_GEN_FRAGMENT where PROD_GROUP = '{0}' AND PART_FRAGMENT = '{1}'",v.Local.sKey.PSQLFriendly,v.Local.sKey2.PSQLFriendly,V.Local.sSql)
	F.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)

		f.Intrinsic.Control.If(v.Local.sRet(0).Trim,<>,"")
			gui.PNG_Frags.txtSource.text(v.Local.sRet(0).Trim)	
		f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.If(v.Local.sRet(1).Trim,<>,"")
			gui.PNG_Frags.txtPL.Text(v.Local.sRet(1).trim)	
		f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.If(v.Local.sRet(2).Trim,<>,"")
			gui.PNG_Frags.txtIUofM.Text(v.Local.sRet(2).trim)	
		f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.If(v.Local.sRet(3).Trim,<>,"")
			gui.PNG_Frags.txtPUofM.Text(v.Local.sRet(3).trim)	
		f.Intrinsic.Control.EndIf		
		f.Intrinsic.Control.If(v.Local.sRet(4).Trim,<>,"")
			gui.PNG_Frags.txtIUofM.Text(v.Local.sRet(4).trim)	
		f.Intrinsic.Control.EndIf	
		
	f.Intrinsic.Control.EndIf	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ddlCategory1_Change.End

Program.Sub.cmdPNGSave_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	v.Local.iRet.Declare
	v.Local.sPart.Declare
	v.Local.sBSEQ.Declare
	v.Local.sRSEQ.Declare
	V.Local.sType.Declare
	v.Local.sHold.Declare
	v.Local.sddlPrefixText.Declare
	v.Local.bExists.Declare
	v.Local.iSerie.Declare
	
	'=======================================================================================================================================================================================================

	v.Local.sddlPrefixText.Set(V.Screen.PNG_Frags!ddlPrefix.TEXT)
	f.Intrinsic.String.Build("select Top 1 SEQ_START from v_part_gen_options where type_cd = 'O' AND PROD_GROUP = '{0}'",v.Local.sddlPrefixText.PSQLFriendly,V.Local.sSql)
	F.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		f.Intrinsic.String.LPad(v.Local.sRet,"0",5,v.Local.sRet)
		gui.PNG_Frags.txtAutoNum.Text(v.Local.sRet)
		f.Intrinsic.Math.Add(v.Local.sRet,1,v.Local.iRet)
		f.Intrinsic.String.Build("Update part_gen_options set SEQ_START = {0} WHERE TYPE_CD = 'O' AND PROD_GROUP = '{1}'",V.Local.iRet,v.Local.sddlPrefixText.PSQLFriendly,V.Local.sSql)
		F.ODBC.Connection!conx.Execute(v.Local.sSql)
	
		'build the part#
		v.Local.sddlPrefixText.Set(v.Local.sddlPrefixText.Trim)
		f.Intrinsic.String.Build("{0}-{1}",v.Local.sddlPrefixText,v.Screen.PNG_Frags!txtAutoNum.text.trim,v.Local.sPart)
		f.Intrinsic.String.RPad(v.Local.sPart," ",20,v.Local.sPart)
		
		v.Local.sType.Set(v.Screen.PNG_Frags!txtType.text)
		
		f.Intrinsic.Control.SelectCase(v.Local.sType)
			f.Intrinsic.Control.Case("INSERT")
				v.Local.sRSEQ.Set(v.Screen.PNG_Frags!txtRSEQ.text)
				F.Intrinsic.Math.Add(V.Local.sRSEQ,V.Global.iRSeq,V.Local.sRSEQ)
				F.Intrinsic.String.LPad(V.Local.sRSEQ,"0",6,V.Local.sRSEQ)
				v.Local.sBSEQ.Set(v.Screen.PNG_Frags!txtBSEQ.text)
				F.Intrinsic.Math.Add(V.Local.sBSEQ,V.Global.iBSeq,V.Local.sBSEQ)
				
				'Get next Serie
				f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
				f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)				
				
				F.Data.DataTable.AddRow("CHILD","BPARENT",v.DataTable.CHILD(0).BPARENT!FIELDVALString,"DESCR_BP",V.DataTable.CHILD(0).DESCR_BP!FIELDVALSTRING,"RTR_SEQ",V.Local.sRSEQ,"PART",V.Local.sPart,"DESCRIPTION",V.Screen.PNG_Frags!txtDesc.text,"DESCRIPTION_2",v.Screen.PNG_Frags!txtDesc2.text,"DESCRIPTION_3",v.Screen.PNG_Frags!txtDesc3.text,"LMO","M","UM",V.Screen.PNG_Frags!txtIUofM.TEXT,"TIER","0","CTIER","0","Serie",v.Local.iSerie)
				
				f.Intrinsic.Control.If(v.Global.bBindCutList)
					f.Intrinsic.Control.CallSub(Bind_AddedMaterial_Cutlist,"BParent",v.DataTable.CHILD(0).BPARENT!FIELDVALString,"Part",v.Local.sPart,"Serie",V.Local.iSerie)
				f.Intrinsic.Control.EndIf
				
			F.Intrinsic.Control.Case("NEW")
				'NEEDSATTENTION - ADD REV TO PNG FRAGS
				'populate the data in to the main screen
				f.Intrinsic.Control.BlockEvents
				gui.Form.txtFocusParent.Text(v.Local.sPart.Trim)
				gui.Form.txtFocusDescr.Text(v.Screen.PNG_Frags!txtDesc.text)
				gui.Form.txtDescr2.Text(v.Screen.PNG_Frags!txtDesc2.text)
				gui.Form.txtDescr3.Text(v.Screen.PNG_Frags!txtDesc3.text)
				gui.Form.txtUM.Text(V.Screen.PNG_Frags!txtIUofM.TEXT)
				gui.Form.txtPL.Text(V.Screen.PNG_Frags!txtPL.TEXT)
				f.Intrinsic.Control.UnBlockEvents
				v.Local.sRSEQ.Set("000000")
				v.Local.sBSEQ.Set("0000")
				'Seq 000000 as first seq, serie will be added by default as 0
				F.Data.DataTable.AddRow("CHILD","BPARENT",V.Local.sPart,"DESCR_BP",v.Screen.Form!txtFocusDescr.text,"RTR_SEQ",V.Local.sRSEQ,"PART",V.Local.sPart,"DESCRIPTION",V.Screen.Form!txtFocusDescr.text,"DESCRIPTION_2",v.Screen.PNG_Frags!txtDesc2.text,"DESCRIPTION_3",v.Screen.PNG_Frags!txtDesc3.text,"LMO","M","UM",V.Screen.PNG_Frags!txtIUofM.TEXT,"TIER","0","CTIER","0")
		F.Intrinsic.Control.EndSelect
		
		
		'reset the form data
		gui.PNG_Frags..ClearGroup(1)
		
		gui.Form.GGC_Bom.MainView("GV_CHILD")
		
		gui.Form.txtPL.SetFocus
		
		gui.PNG_Frags..Visible(false)
	
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No record found in part_gen_options","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		
	f.Intrinsic.Control.EndIf
	
	'clear dictionaries and ddl's from the form
	f.Data.Dictionary.Exists("PNGGROUPS",v.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists)
		f.Data.Dictionary.Close("PNGGROUPS")
	f.Intrinsic.Control.EndIf
	f.Data.Dictionary.Exists("FRAG_1",v.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists)
		f.Data.Dictionary.Close("FRAG_1")
	f.Intrinsic.Control.EndIf	
	
	gui.PNG_Frags.ddlPrefix.ClearItems
	gui.PNG_Frags.ddlCategory1.ClearItems
	gui.PNG_Frags..Visible(false)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdPNGSave_Click.End

'End PNG

'AltBom Detail in parent child grid
Program.Sub.txtPart_LostFocus1.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)	
	
	f.Intrinsic.Control.If(v.Screen.POPBOM!txtPart.Text.Trim,=,"")
		f.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.CallSub(cmdRefreshBomDTL_Click)
	f.Intrinsic.Control.UnBlockEvents
		
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtPart_LostFocus1.End

Program.Sub.cmdBrwDTLBom_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sParent.Declare
	
	'common browser for bom - Part Rev Description
	f.Intrinsic.Control.If(v.Global.bLongPart)
		f.Intrinsic.UI.Browser("Select Bill of Material","conx","SELECT Left(A.PARENT,17) as Part,Substring(A.PARENT,18,3) as Rev, B.Description,A.UM_Inventory as UM,A.Inactive,Case When a.Bom_Complete = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Complete, x.DISPLAY_PART,x.DISPLAY_REV FROM  V_BOM_ENG B LEFT JOIN V_BOM_MSTR A ON B.PART = A.PARENT Left Join INV_LXR x ON x.GSS_PART = b.Part WHERE b.Location = '' and B.IS_PARENT = 'Y' AND A.SEQUENCE_BOM = '0000'","Parent*!*Rev*!*Description*!*UM*!*Inactive*!*Compl.*!*Long Part*!*Rev Long Part","500*!*200*!*700*!*200*!*200*!*200*!*500*!*200","15000","10000",v.Local.sRet)
	f.Intrinsic.Control.Else
		f.Intrinsic.UI.Browser("Select Bill of Material","conx","SELECT Left(A.PARENT,17) as Part,Substring(A.PARENT,18,3) as Rev, B.Description,A.UM_Inventory as UM,A.Inactive,Case When a.Bom_Complete = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Complete FROM  V_BOM_ENG B LEFT JOIN V_BOM_MSTR A ON B.PART = A.PARENT WHERE b.Location = '' and B.IS_PARENT = 'Y' AND A.SEQUENCE_BOM = '0000'","Parent*!*Rev*!*Description*!*UM*!*Inactive*!*Compl.","500*!*200*!*700*!*200*!*200*!*200","15000","10000",v.Local.sRet)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		f.Intrinsic.String.GSSPartString(v.Local.sRet(0),v.Local.sRet(1),v.Local.sParent)
		gui.POPBOM.txtPart.Text(v.Local.sParent)
		f.Intrinsic.Control.CallSub(loadIndentedBOM,"PARENT",V.Local.sRet(0),"REV",V.Local.sRet(1))
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.Catch
	    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
	f.Intrinsic.Control.EndTry
Program.Sub.cmdBrwDTLBom_Click.End

Program.Sub.cmdRefreshBomDTL_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sPart.Declare
	v.Local.sRev.Declare
	
	v.Local.sPart.Set(v.Screen.POPBOM!txtPart.Text.Trim)
	f.Intrinsic.String.Mid(v.Local.sPart,18,3,v.Local.sRev)
	f.Intrinsic.Control.CallSub(loadIndentedBOM,"PARENT",v.Local.sPart.lef17,"REV",v.Local.sRev)	
		
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdRefreshBomDTL_Click.End

Program.Sub.loadIndentedBOM.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.iQuery.Declare
	V.Local.sSql.Declare
	v.Local.iCount.Declare
	V.Local.sOldParent.Declare
	v.Local.sParentFilter.Declare
	V.Local.sParent.Declare
	v.Local.sFilter.Declare
	v.Local.sChild.Declare
	v.Local.sParentTable.Declare
	v.Local.sChildTable.Declare
	v.Local.sPartList.Declare
	v.Local.sRet.Declare	
	V.Local.sMsg.Declare
	
	'Validate Bom
	f.Intrinsic.String.GSSPartString(v.Args.parent,v.Args.rev,v.Local.sParent)	
	f.Intrinsic.String.Build("Select Parent from Bom_MSTR where Parent = '{0}'",v.Local.sParent.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Invalid Bom.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf

	'Check if the Bom has a child is also a parent which causes infinite loop
	f.Intrinsic.String.Build(" = '{0}'",v.Local.sParent.PSQLFriendly,v.Local.sFilter)
	f.Intrinsic.Control.CallSub(Check_Child_Is_Parent,"sFilter",v.Local.sFilter)
	f.Intrinsic.Control.If(v.Args.iChildIsParent,>,1)
		f.Intrinsic.String.Build("Bom '{0}' has child the same as parent. Please contact GSS to fix at database level.",v.Local.sParent,v.Local.sMsg)
		f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Fatal Issue")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	''F.Intrinsic.UI.InvokeWaitDialog("Retrieving BOM....")
	GUI.POPBOM.GGC_BOMDTL.Visible(False)
	gui.POPBOM..Enabled(False)
	
	'clean up views and tables before we start
	f.Intrinsic.Control.If(v.DataTable.LEVEL.Exists)
		F.Data.DataTable.Close("LEVEL")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.TABLELIST.Exists)
		F.Data.DataTable.Close("TABLELIST")
	f.Intrinsic.Control.EndIf
		
	'Build first level
	f.ODBC.Connection!conx.Execute(v.Global.sDeleteExplodeStageSQL)
	f.Intrinsic.String.Build("Insert Into GCG_4986_Stge (UserID,TRMNL,OldParent,Part,Tier,CTier,CH_Index) values ('{0}','{1}','{2}','{2}','',0,'')",v.Caller.User,v.Caller.Terminal,v.Local.sParent.PSQLFriendly,v.Local.sSQL)	
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)	
	f.Intrinsic.String.Build(" = '{0}'",v.Local.sParent.PSQLFriendly,v.Local.sFilter)
	f.Intrinsic.Control.CallSub(Get_Bom_Mstr,"sTargetTable","TPBom","sFilter",v.Local.sFilter)	
	f.Data.DataTable.AddColumn("TPBom","Extended","float",0)
	'Set Tier,CTIER,CH_Index
	F.Data.DataTable.SetValue("TPBom",-1,"TIER",0)
	F.Data.DataTable.SetSeries("TPBom","CTIER",0,1)
	F.Data.DataTable.RemoveColumn("TPBom","CH_INDEX")
	F.Data.DataTable.AddExpressionColumn("TPBom","CH_INDEX","STRING","IIF(TIER < '1', CTIER, TIER + '.' + CTIER)")	
	'remove the parent item so we don't join it's children in again
	f.Data.DataTable.DeleteRow("TPBom",0)
	f.Data.DataView.Create("TPBom","v_TPBom")
	f.Data.DataView.ToDataTable("TPBom","v_TPBom","LEVEL",True)
	'F.Data.DataTable.Merge("TPBom","LEVEL",False,2)
	f.Data.DataTable.RemoveColumn("TPBom","OLDPARENT")
	F.Data.DataTable.AddExpressionColumn("TPBom","OLDPARENT","STRING","BPARENT")
	
	V.Local.iQuery.Set(0)
	v.Local.sChildTable.Set("LEVEL")
	
	v.Local.sParentTable.Set("LEVEL")
	v.Local.sParent.Set("LEVEL")
	'Create TableList
	F.Data.DataTable.CreateFromString("TABLELIST","LEVEL","TABLE","STRING","","",True)	
	
	'set the value of PAR_INDEX so we can use it as a key field instead of the formula field CH_INDEX
	F.Data.DataTable.SetValue("LEVEL",-1,"PAR_INDEX","")	
	F.Intrinsic.Control.For(V.Local.iCount,0,V.DataTable.LEVEL.RowCount--,1)
		F.Data.DataTable.SetValue("LEVEL",V.Local.iCount,"PAR_INDEX",V.DataTable.LEVEL(V.Local.iCount).CH_INDEX!FIELDVALSTRING)
	F.Intrinsic.Control.Next(V.Local.iCount)
	f.Intrinsic.Control.CallSub(buildIndentedView,"TABLE",v.Local.sChildTable,"VIEW",V.Local.iQuery)
	
	GUI.POPBOM.GGC_BOMDTL.MainView(V.Args.GRIDVIEW)
	
	f.Intrinsic.Control.If(v.DataTable.TPBom.RowCount,>,0)
		
		F.Intrinsic.Control.DoUntil(V.DataTable.TPBom.RowCount,<,1)

			'Prepare parent part list for the next level
			f.Data.DataView.Create("TPBom","v_Lev")
			f.Data.DataView.ToString("TPBom","v_Lev","PART","","*!*",V.Local.sPartList)
			f.Intrinsic.String.Replace(v.Local.sPartList,"'","''",v.Local.sPartList)
			f.Intrinsic.String.Replace(v.Local.sPartList,"*!*","','",v.Local.sPartList)
			
			'Check if the Bom has a grand children is also a children which causes infinite loop
			f.Intrinsic.String.Build(" IN ('{0}')",v.Local.sPartList,v.Local.sFilter)		
			f.Intrinsic.Control.CallSub(Check_GrandChildren_Is_Children,"sFilter",v.Local.sFilter)
			f.Intrinsic.Control.If(v.Args.bChildrenAreParent)
				f.Intrinsic.String.Replace(v.Args.sChildrenAreParentList,"#$#",", ",v.Local.sMsg)
				GUI.POPBOM.GGC_BOMDTL.Visible(True)
				gui.POPBOM..Enabled(True)				
				f.Intrinsic.String.Build("One of these parts has children as the parent. Please contact GSS to fix at database level:{0}{1}",v.Ambient.NewLine,v.Local.sMsg,v.Local.sMsg)
				f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Fatal Issue")
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf	
		
			'Save parent list of the level
			f.ODBC.Connection!conx.Execute(v.Global.sDeleteExplodeStageSQL)
			f.Data.DataTable.AddColumn("TPBom","UserID","String",v.Caller.User)
			f.Data.DataTable.AddColumn("TPBom","Trmnl","String",v.Caller.Terminal)
			f.Data.DataTable.SaveToDB("TPBom","conx","GCG_4986_Stge","",128,"UserID@!@UserID*!*Trmnl@!@Trmnl*!*OLDPARENT@!@OLDPARENT*!*Part@!@Part*!*TIER@!@TIER*!*CTIER@!@CTIER*!*CH_Index@!@CH_Index")
			f.Data.DataTable.Close("TPBom")	
			
			f.Intrinsic.String.Build(" IN ('{0}')",v.Local.sPartList,v.Local.sFilter)
			f.Intrinsic.Control.CallSub(Get_Bom_Mstr,"sTargetTable","TEMP_RETURN","sFilter",v.Local.sFilter)
			f.Data.DataTable.AddColumn("Temp_Return","Extended","float",0)
			
			F.Intrinsic.Control.If(V.DataTable.TEMP_RETURN.RowCount,>,0)
				'create a vew of the returned data so we can sort and filter
				F.Data.DataView.Create("TEMP_RETURN","V_RETURN",22)			
				'create a filter of just the parent items
				F.Data.DataView.Create("TEMP_RETURN","V_PARENTS",22,"BOM_SEQ = '0000'","CTIER")				
				'for each parent item in view, filter our v_return and then set the tier and ctier values for that set of parts
				F.Intrinsic.Control.For(V.Local.iCount,0,V.DataView.TEMP_RETURN!V_PARENTS.RowCount--,1)
					V.Local.sParent.Set(v.DataView.TEMP_RETURN!V_PARENTS(V.Local.iCount).BPARENT!FIELDVAL)
					v.Local.sOldParent.Set(v.DataView.TEMP_RETURN!V_PARENTS(V.Local.iCount).OLDPARENT!FIELDVAL)
					'To avoid part number is dublicated, we enforce by adding the condition CH_Index in the filter
					F.Intrinsic.String.Build("OLDPARENT = '{0}' AND BPARENT = '{1}' and CH_Index = '{2}'",V.Local.sOldParent,V.Local.sParent,v.DataView.TEMP_RETURN!V_PARENTS(V.Local.iCount).CH_Index!FIELDVAL,V.Local.sParentFilter)
					f.Data.DataView.SetFilter("TEMP_RETURN","V_RETURN",V.Local.sParentFilter)
					F.Data.DataView.SetValue("TEMP_RETURN","V_RETURN",-1,"TIER",V.DataView.TEMP_RETURN!V_PARENTS(V.Local.iCount).CH_INDEX!FIELDVALSTRING)
					F.Data.DataView.SetSeries("TEMP_RETURN","V_RETURN","CTIER",0,1)	
				F.Intrinsic.Control.Next(V.Local.iCount)
				v.Local.sParent.Set("LEVEL")
				
				'the parent rows out of temp_return so their children don't get brought in a second time.
				F.Intrinsic.Control.For(V.Local.iCount,V.DataView.TEMP_RETURN!V_PARENTS.RowCount--,0,-1)
					F.Data.DataTable.DeleteRow("TEMP_RETURN",V.DataView.TEMP_RETURN!V_PARENTS(V.Local.iCount).DATATABLEINDEX)
				F.Intrinsic.Control.Next(V.Local.iCount)
				
				F.Data.DataTable.AcceptChanges("TEMP_RETURN")
				F.Data.DataTable.RemoveColumn("TEMP_RETURN","OLDPARENT")
				
				'creat the datatable for this level of the bom
				f.Intrinsic.Math.Add(v.Local.iQuery,1,v.Local.iQuery)
				f.Intrinsic.String.Build("{0}${1}_{2}",v.Local.sParentTable,"LEVEL",v.Local.iQuery,v.Local.sChildTable)
				'F.Data.DataTable.Clone(V.Local.sParentTable,V.Local.sChildTable,True)
				f.Data.DataTable.AddRow("TABLELIST","TABLE",V.Local.sChildTable)

				F.Data.DataTable.RemoveColumn("TEMP_RETURN","CH_INDEX")				
				f.Data.DataView.Create("TEMP_RETURN","v_Temp_Return")
				
				'sChildTable
				f.Data.DataView.ToDataTable("TEMP_RETURN","v_Temp_Return",v.Local.sChildTable,True)				
				F.Data.DataTable.AddExpressionColumn(V.Local.sChildTable,"CH_INDEX","STRING","IIF(TIER < '1', CTIER, TIER + '.' + CTIER)")					
				'set the value of PAR_INDEX so we can use it as a key field instead of the formula field CH_INDEX
				F.Intrinsic.Control.For(V.Local.iCount,0,V.DataTable.[V.Local.sChildTable].RowCount--,1)
					F.Data.DataTable.SetValue(V.Local.sChildTable,V.Local.iCount,"PAR_INDEX",V.DataTable.[V.Local.sChildTable](V.Local.iCount).CH_INDEX!FIELDVALSTRING)
				F.Intrinsic.Control.Next(V.Local.iCount)
				'go build the view for this table
				f.Intrinsic.Control.CallSub(buildIndentedView,"TABLE",v.Local.sChildTable,"VIEW",V.Local.iQuery,"PARENT",V.Local.sParent)				
				'create the relationship			
				f.Data.DataTable.AddRelation(v.Local.sParentTable,"PAR_INDEX",V.Local.sChildTable,"TIER",V.Local.sChildTable)
				'the parent tablename becomes the current childtable name for the next level of parts.
				V.Local.sParentTable.Set(V.Local.sChildTable)
					
				'Prepare for the next round
				'added: for temp_return, CH_Index must be reindexed before adding to Bom				
				F.Data.DataTable.AddExpressionColumn("TEMP_RETURN","CH_INDEX","STRING","IIF(TIER < '1', CTIER, TIER + '.' + CTIER)")			
				f.Data.DataView.ToDataTable("TEMP_RETURN","v_Temp_Return","TPBom",True)
				F.Data.DataTable.AddExpressionColumn("TPBom","OLDPARENT","STRING","BPARENT")
				f.Data.DataTable.Close("TEMP_RETURN")
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.ExitDo		
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Loop	
	F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.If(V.DataTable.TEMP_RETURN.Exists,=,True)
		f.Data.DataTable.Close("TEMP_RETURN")
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.DataTable.TPBom.Exists,=,True)
		f.Data.DataTable.Close("TPBom")
	F.Intrinsic.Control.EndIf	
	
	GUI.POPBOM.GGC_BOMDTL.ContextMenuAttach("altbom")
	GUI.POPBOM.GGC_BOMDTL.Visible(True)
	
	gui.POPBOM..Enabled(True)
	gui.POPBOM.cmdRefreshBomDTL.SetFocus()

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.loadIndentedBOM.End

Program.Sub.swap_parent.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sPart.Declare
	v.Local.sRev.Declare
	v.Local.sRow.Declare
	
	f.Intrinsic.Control.If(v.DataTable.LEVEL.Exists,=,False)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please select a Bom.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	gui.POPBOM.GGC_BOMDTL.GetSelectedRows("GV_0",v.Local.sRow)
	f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please select a row as first level of the Bom","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Split(v.Local.sRow,"*!*",v.Local.sRow)
	v.Local.sRow.Set(v.Local.sRow(0))
	v.Local.sPart.Set(v.DataTable.LEVEL(V.Local.sRow).PART!FIELDVALSTRING)
	gui.POPBOM.txtPart.Text(v.Local.sPart)
	f.Intrinsic.String.Mid(v.Local.sPart,18,3,v.Local.sRev)
	f.Intrinsic.Control.CallSub(loadIndentedBOM,"PARENT",v.Local.sPart.LEFT17,"REV",v.Local.sRev)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.swap_parent.End

Program.Sub.insert_alt_bom.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bRet.Declare
	v.Local.sMessage.Declare
	v.Local.sPart.Declare
	v.Local.iRet.Declare
	v.Local.sLines.Declare
	v.Local.iCount.Declare
	v.Local.iKey.Declare
	v.Local.sGrid.Declare
	v.Local.iSerie.Declare
	v.Local.sParent.Declare
	v.Local.sTargetSeq.Declare
	v.Local.iSeqSort.Declare
	v.Local.sSourceCode.Declare
	v.Local.bNormal.Declare
	v.Local.b99.Declare
	v.Local.sRTR_Seq_ColIndex.Declare
	v.Local.bInserted.Declare
	
	'Gui.POPBOM.GGC_BOMDTL.GetFocusedGridview(v.Local.sGrid)
	f.Intrinsic.Control.If(v.DataTable.LEVEL.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	Gui.POPBOM.GGC_BOMDTL.GetSelectedRows("GV_0",V.Local.sLines)
	f.Intrinsic.Control.If(v.Local.sLines.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'check to see if there is a router in view to add these materials to
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)	
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("There is no router in focus")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.GSSPartString(v.screen.Form!txtFocusParent.text.Trim,v.screen.Form!txtFocusRev.text.Trim,v.Local.sParent)
	f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
	f.Intrinsic.String.Split(v.Local.sLines,"*!*",v.Local.sLines)
	
	gui.Form.GGC_Bom.SuspendLayout
	f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)

	'multiple lines
	f.Intrinsic.String.Build("Insert all selected part(s) to the current parent {0}",v.Screen.Form!txtFocusParent.text.trim,v.Local.sMessage)
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.UI.Msgbox(v.Local.sMessage,"Add to Router",4,v.Local.iRet)
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	'Confirm Yes before inserting
	f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxYes)	
		f.Intrinsic.Control.For(v.Local.iCount,0,v.Local.sLines.UBound,1)
			v.Local.iKey.Set(v.Local.sLines(v.Local.iCount))
			v.Local.sPart.Set(v.DataTable.LEVEL(v.Local.ikey).PART!FIELDVALSTRING)
			f.Intrinsic.String.RPad(v.Local.sPart," ",20,v.Local.sPart)			
			v.Local.sSourceCode.Set(v.DataTable.LEVEL(v.Local.ikey).SOURCE_CODE!FIELDVALTrim)
			
			'Get Target Sequence
			f.Intrinsic.Control.If(v.Local.sSourceCode,=,"")
				v.Local.sSourceCode.Set("M")
			f.Intrinsic.Control.EndIf
			
			f.Data.DataView.Create("Child","vSeq")
			f.Intrinsic.Control.If(v.Local.sSourceCode,=,"M",or,v.Local.sSourceCode,=,"F")
				v.Local.b99.Set(True)
				f.Data.DataView.SetFilter("Child","vSeq","RTR_Seq >= '990000'")
				f.Data.DataView.SetSort("Child","vSeq","RTR_Seq desc")
				f.Intrinsic.Control.If(v.DataView.Child!vSeq.RowCount,>,0)
					v.Local.sTargetSeq.Set(v.DataView.Child!vSeq(0).RTR_Seq!FieldValString)		
				f.Intrinsic.Control.Else	
					v.Local.sTargetSeq.Set("990000")
				f.Intrinsic.Control.EndIf			
			f.Intrinsic.Control.Else	
				v.Local.bNormal.Set(True)
				f.Data.DataView.SetFilter("Child","vSeq","RTR_Seq > '000000' and RTR_Seq < '990000' and LMO = 'M'")
				f.Data.DataView.SetSort("Child","vSeq","RTR_Seq desc")
				f.Intrinsic.Control.If(v.DataView.Child!vSeq.RowCount,>,0)
					v.Local.sTargetSeq.Set(v.DataView.Child!vSeq(0).RTR_Seq!FieldValString)
				f.Intrinsic.Control.Else	
					f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)
				f.Intrinsic.Control.EndIf				
			
			f.Intrinsic.Control.EndIf
			f.Data.DataView.Close("Child","vSeq")
			
			f.Intrinsic.Math.Add(v.Local.iSeqSort,1,v.Local.iSeqSort)
			f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)
			
			'add the row to the current router in focus
			f.Data.DataTable.AddRow("CHILD","BPARENT",v.Local.sParent,"DESCR_BP",v.Screen.Form!txtFocusDescr.text.Trim,"RTR_SEQ",V.Local.sTargetSeq,"PART",v.Local.sPart,"DESCRIPTION",v.DataTable.LEVEL(v.Local.ikey).DESCRIPTION!FIELDVALTrim,"LMO","M","CATEGORY","NORMAL","SOURCE_CODE",v.Local.sSourceCode,"UM",v.DataTable.LEVEL(v.Local.ikey).UM!FIELDVALTrim,"COST",v.DataTable.LEVEL(v.Local.ikey).COST!FIELDVALString,"SOURCE","","Serie",v.Local.iSerie,"SeqSort",v.Local.iSeqSort,"Lead",v.Dictionary.LEADHOURS![v.Local.sPart.Trim])			
			
			v.Local.bInserted.Set(True)
			
			f.Intrinsic.Control.If(v.Global.bBindCutList)
				f.Intrinsic.Control.CallSub(Bind_AddedMaterial_Cutlist,"BParent",v.Local.sParent,"Part",v.Local.sPart,"Serie",V.Local.iSerie)	
			f.Intrinsic.Control.EndIf			
			
		F.Intrinsic.Control.Next(V.Local.iCount)

		F.Data.DataTable.FillFromDictionary("CHILD","SOURCE","SOURCE_CODE","SOURCE")
		F.Data.DataTable.FillFromDictionary("CHILD","CATEGORY","CAT_CODE","CATEGORY")
		
		f.Intrinsic.Control.If(v.Local.bNormal)
			f.Intrinsic.Control.CallSub(ReSeqNormals)		
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.Control.If(v.Local.b99)
			f.Intrinsic.Control.CallSub(ReSeq99s)
		f.Intrinsic.Control.EndIf
		
		'@holder1			
		f.Data.DataTable.AcceptChanges("CHILD")	
		
		gui.Form.GGC_Bom.ResumeLayout
		
		'If there is a row added, move the focus to that row
		f.Intrinsic.Control.If(v.Local.bInserted)
			Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
			gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)
		f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.EndIf


f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.insert_alt_bom.End

'End AltBom Detail in parent child grid
Program.Sub.GGC_BOMDTL_CellValueChanged.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sPart.Declare
	
	F.Intrinsic.Control.SelectCase(V.ARGS.COLUMN)
		F.Intrinsic.Control.CASEANY("NEWPARENT","REV")
			F.Intrinsic.String.GSSPartString(V.DataTable.PARENTS(V.Args.RowIndex).NEWPARENT!FIELDVALTRIM,V.DataTable.PARENTS(V.Args.RowIndex).REV!FIELDVALTRIM,V.Local.sPart)
			f.Data.DataTable.SetValue("PARENTS",V.Args.RowIndex,"INVPART",V.Local.sPart)
	F.Intrinsic.Control.EndSelect

f.Intrinsic.Control.Catch
f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GGC_BOMDTL_CellValueChanged.End

Program.Sub.GGC_Quantity_KeyPressEnter.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
v.Local.sError.Declare
v.Local.iRow.Declare

'limit the row count to 10 because that's all we can save for a router.GGC_PRICES_RowCellClick
f.Intrinsic.Control.If(v.DataTable.BUILDQTY(v.Args.rowindex).QUANTITY!FIELDVALLONG,>,0)
	f.Intrinsic.Control.If(v.DataTable.BUILDQTY.RowCount,<,10)
		f.Data.DataTable.AddRow("BUILDQTY","QUANTITY","0")
		f.Intrinsic.Math.Add(v.Args.rowindex,1,v.Local.iRow)	
		gui.Form.GGC_Quantity.FocusCell("GV_QTY",V.Local.iRow,V.Args.COLUMNINDEX)
	f.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

f.Intrinsic.Control.ExitSub

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GGC_Quantity_KeyPressEnter.End

Program.Sub.cmdSaveQuantitiesToQuote_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iCount.Declare
	v.Local.sPart.Declare
	V.Local.sRev.Declare
	v.Local.sPartRev.Declare
	v.Local.sDesc.Declare
	v.Local.iLine.Declare
	v.Local.sLine.Declare
	v.Local.sPrice.Declare
	v.Local.sQty.Declare
	v.Local.sDate.Declare
	v.Local.sDueDate.Declare
	v.Local.sTable.Declare
	V.Local.fQty.Declare
	v.Local.fPrice.Declare
	v.Local.fExtended.Declare
	v.Local.sExtended.Declare
	V.Local.sUm.Declare
	v.Local.sPL.Declare
	v.Local.sLastPart.Declare
	V.Local.fFiller.Declare(Float,0)
	v.Local.bAdded.Declare
	v.Local.sSamePartInGrid.Declare
	v.Local.sFilter.Declare
	v.Local.sHold.Declare
	v.Local.sPartTrim.Declare
	v.Local.iSuffix.Declare
	v.Local.iSuffix.Set(-1)
	v.Local.iHold.Declare
	v.Local.fCost.Declare
	v.Local.sCost.Declare
	
	'check for the view
	f.Intrinsic.Control.If(v.DataView.BUILDQTY!V_QUOTEQTY.Exists)
		F.Data.DataView.Close("BUILDQTY","V_QUOTEQTY")
	f.Intrinsic.Control.EndIf
	
	'get the quantities and prices that they wish to quote.
	f.Data.DataView.Create("BUILDQTY","V_QUOTEQTY",22,"PRICE > 0","")

	f.Intrinsic.Control.If(v.DataView.BomPrice!vPriceSelected.Exists)
		F.Data.DataView.Close("BomPrice","vPriceSelected")
	f.Intrinsic.Control.EndIf
	
	'get the quantities and prices that they wish to quote.
	f.Data.DataView.Create("BomPrice","vPriceSelected",22,"S1 = 1 or S2 = 1 or S3 = 1 or S4 = 1 or S5 = 1","")
	
	'are we dealing with a bom or a router
	f.Intrinsic.Control.If(v.Global.sBomOrRouterToBuildCost,=,"Bom")
		f.Intrinsic.String.GSSPartString(v.Screen.Form!txtParent.text,v.Screen.Form!txtParentRev.text,v.Local.sPartRev)
		v.Local.sPart.Set(v.Screen.Form!txtParent.text)
		v.Local.sRev.Set(v.Screen.Form!txtParentRev.text)
		v.Local.sDesc.Set(v.Screen.Form!txtParentDescr.text)
		v.Local.sUM.Set(v.DataTable.BOM(0).UM!FIELDVALSTRING)
		v.Local.sTable.Set("BOM")
	f.Intrinsic.Control.Else
		f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.text,v.Screen.Form!txtFocusRev.text,v.Local.sPartRev)
		v.Local.sPart.Set(v.Screen.Form!txtFocusParent.text)
		v.Local.sRev.Set(v.Screen.Form!txtFocusRev.text)
		v.Local.sDesc.Set(v.Screen.Form!txtFocusDescr.text)
		v.Local.sUM.Set(v.Screen.Form!txtUM.text)
		V.Local.sTable.Set("CHILD")
	f.Intrinsic.Control.EndIf
	v.Local.sPartTrim.Set(v.Local.sPart.Trim)
	
	f.Intrinsic.Control.If(v.DataTable.[v.Local.sTable].RowCount,>,0)
		f.Intrinsic.Control.If(v.DataTable.[v.Local.sTable](0).PL!FieldValTrim,<>,"")
			v.Local.sPL.Set(v.DataTable.[v.Local.sTable](0).PL!FieldValTrim)
		f.Intrinsic.Control.Else
			v.Local.sPL.Set(v.Screen.Form!txtPL.Text.Trim)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		v.Local.sPL.Set(v.Screen.Form!txtPL.Text.Trim)
	f.Intrinsic.Control.EndIf		
	
	'if there are existing quote lines, we need to get the part number from the last line so we can compare the new lines we're adding.
	v.Local.iCount.Set(v.DataTable.ORDUPLLines.RowCount--)
	f.Intrinsic.Control.If(v.Local.iCount,>,-1)
		f.Intrinsic.String.GSSPartString(v.DataTable.ORDUPLLines(v.Local.iCount).PARTNUMBER!FIELDVALTRIM,v.DataTable.ORDUPLLines(v.Local.iCount).PARTREV!FIELDVALTRIM,V.Local.sLastPart)
	f.Intrinsic.Control.EndIf
	
	'starting adding lines to the ORDUPLLines table
	F.Intrinsic.Control.If(V.DataView.BomPrice!vPriceSelected.RowCount,>,0)
		f.Intrinsic.String.Format(v.Ambient.Date,"YYYYMMDD",V.Local.sDate)
		f.Intrinsic.Date.DateAdd("D",30,V.Ambient.Date,v.Local.sDueDate)
		F.Intrinsic.String.Format(V.Local.sDueDate,"YYYYMMDD",V.Local.sDueDate)
		f.Intrinsic.Control.For(v.Local.iCount,0,v.DataView.BomPrice!vPriceSelected.RowCount--,1)
		
			f.Intrinsic.String.Build("Trim(PartNumber) = '{0}'",v.Local.sPartTrim.PSQLFriendly,v.Local.sFilter)
			f.Data.DataView.Create("ORDUPLLines","vSamePart",22,v.Local.sFilter,"LineNumber desc,Filler1 desc")
			f.Intrinsic.Control.If(v.DataView.OrdUplLines!vSamePart.RowCount,>,0)
				v.Local.iHold.Set(v.DataView.OrdUplLines!vSamePart(0).Filler1!FieldValTrim)
				f.Intrinsic.Control.If(v.Local.iHold,<=,8)
					v.Local.iLine.Set(v.DataView.OrdUplLines!vSamePart(0).LineNumber!FieldValTrim)
					f.Intrinsic.Math.Add(v.Local.iHold,1,v.Local.iSuffix)
				f.Intrinsic.Control.Else
					f.Data.DataTable.Compute("ORDUPLLines","MAX(LineNumber)","",v.Local.iLine)
					f.Intrinsic.Math.Add(v.Local.iLine,1,v.Local.iLine)
					v.Local.iSuffix.Set(0)
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.Else
				f.Data.DataTable.Compute("ORDUPLLines","MAX(LineNumber)","",v.Local.sHold)
				v.Local.iLine.Set(v.Local.sHold)
				f.Intrinsic.Math.Add(v.Local.iLine,1,v.Local.iLine)
				v.Local.iSuffix.Set(0)			
			f.Intrinsic.Control.EndIf
			f.Data.DataView.Close("ORDUPLLines","vSamePart")
			f.Intrinsic.String.LPad(v.Local.iLine,"0",3,v.Local.sLine)
			v.Local.fFiller.Set(v.Local.iSuffix)
		
			f.Intrinsic.Control.If(v.DataView.BomPrice!vPriceSelected(v.Local.iCount).S1!FieldValString,=,"True")
				v.Local.sPrice.Set(v.DataView.BomPrice!vPriceSelected(v.Local.iCount).Price_1!FIELDVALFLOAT)					
			f.Intrinsic.Control.ElseIf(v.DataView.BomPrice!vPriceSelected(v.Local.iCount).S2!FieldValString,=,"True")
				v.Local.sPrice.Set(v.DataView.BomPrice!vPriceSelected(v.Local.iCount).Price_2!FIELDVALFLOAT)			
			f.Intrinsic.Control.ElseIf(v.DataView.BomPrice!vPriceSelected(v.Local.iCount).S3!FieldValString,=,"True")
				v.Local.sPrice.Set(v.DataView.BomPrice!vPriceSelected(v.Local.iCount).Price_3!FIELDVALFLOAT)
			f.Intrinsic.Control.ElseIf(v.DataView.BomPrice!vPriceSelected(v.Local.iCount).S4!FieldValString,=,"True")
				v.Local.sPrice.Set(v.DataView.BomPrice!vPriceSelected(v.Local.iCount).Price_4!FIELDVALFLOAT)
			f.Intrinsic.Control.ElseIf(v.DataView.BomPrice!vPriceSelected(v.Local.iCount).S5!FieldValString,=,"True")
				v.Local.sPrice.Set(v.DataView.BomPrice!vPriceSelected(v.Local.iCount).Price_5!FIELDVALFLOAT)	
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("Invalid Selection.","Attention")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)				
				f.Intrinsic.Control.ExitFor(v.Local.iCount)
			f.Intrinsic.Control.EndIf
			
			v.Local.fCost.Set(v.DataView.BomPrice!vPriceSelected(v.Local.iCount).Unit_Cost!FIELDVALFLOAT)
			F.Intrinsic.String.Format(v.Local.fCost,"0000000000.000000",V.Local.sCost)
			F.Intrinsic.String.Replace(V.Local.sCost,".","",V.Local.sCost)	
			
			v.Local.sQty.Set(v.DataView.BomPrice!vPriceSelected(v.Local.iCount).QUANTITY!FIELDVALFLOAT)			
			
			f.Intrinsic.String.Format(v.Local.sQty,"000000000.0000",v.Local.sQty)
			v.Local.fQty.Set(v.Local.sQty)
			f.Intrinsic.String.Replace(v.Local.sQty,".","",v.Local.sQty)
			'BN, May 5 2022, round 2 decimal for displaying correctly in Quote Line screen		
			f.Intrinsic.String.Format(v.Local.sPrice,"0000000000.00",v.Local.sPrice)
			'BN, May 5 2022, continue to format for Web Importer
			f.Intrinsic.String.Format(v.Local.sPrice,"0000000000.000000",v.Local.sPrice)
			v.Local.fPrice.Set(v.Local.sPrice)
			f.Intrinsic.String.Replace(v.Local.sPrice,".","",v.Local.sPrice)
			f.Intrinsic.Math.Mult(v.Local.fQty,v.Local.fPrice,v.Local.fExtended)
			F.Intrinsic.String.Format(V.Local.fExtended,"0000000000.000000",V.Local.sExtended)
			F.Intrinsic.String.Replace(V.Local.sExtended,".","",V.Local.sExtended)
			
			f.Data.DataTable.AddRow("ORDUPLLines","LineNumber",v.Local.sLine,"Filler1",v.Local.fFiller,"QtyOrdered",v.Local.sQty,"PartNumber",v.Local.sPart, "PartRev",v.Local.sRev, "QuotedPrice",v.Local.sPrice, "OverridePrice",v.Local.sPrice, "PartDesc",v.Local.sDesc,"PL",v.Local.sPL,"Extension",v.Local.sExtended, "LineOrderDate",v.Local.sDate, "LinePromiseDate",v.Local.sDueDate,"CurrFlag","Y","RouterValFlag","N","QTY",V.Local.fQty,"PRICE",V.Local.fPrice,"UM",v.local.sUM.left2,"Cost",v.Local.sCost,"CostDisplay",v.Local.fCost)
			v.Local.bAdded.Set(True)
		f.Intrinsic.Control.Next(v.Local.iCount)
		f.Intrinsic.Control.If(v.DataTable.ORDUPLExtra.RowCount,<,1)
			F.Data.DataTable.AddRow("ORDUPLExtra","TextPosition","H","ApplyTextToQuote","Y")
		F.Intrinsic.Control.Else
			f.Data.DataTable.SetValue("ORDUPLExtra",0,"TextPosition","H","ApplyTextToQuote","Y")
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.CallSub(BOM_DETAIL_UnLoad)
	f.Intrinsic.Control.If(v.Local.bAdded)
		f.Intrinsic.Control.CallSub(optQuoteHdr_Click)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdSaveQuantitiesToQuote_Click.End

Program.Sub.GGC_PRICES_RowCellClick.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iCount.Declare
	V.Local.bColumn.Declare(Boolean,False)	
	
	f.Intrinsic.Control.If(v.DataTable.BomPrice.Exists,=,False)
		f.Intrinsic.UI.Msgbox("BomPrice does not exist")
		f.Intrinsic.Control.exisub
	f.Intrinsic.Control.EndIf
	'=================  add a right mouse button option here to select all lines
	f.Intrinsic.Control.If(v.Args.BUTTON.UCase,=,"RIGHT")
		F.Intrinsic.Control.For(V.Local.iCount,0,V.DataTable.BOMPRICE.RowCount--,1)
			f.Intrinsic.Control.CallSub(bom_save_prices,"COLUMN",v.Args.COLUMN,"ROWINDEX",V.Local.iCount)
		F.Intrinsic.Control.Next(V.Local.iCount)
	F.Intrinsic.Control.Else
		F.Intrinsic.Control.CallSub(bom_save_prices,"COLUMN",V.Args.COLUMN,"ROWINDEX",V.Args.RowIndex)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GGC_PRICES_RowCellClick.End

Program.Sub.cmdQHFComments_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sQuote.Declare
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	
	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveComments)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveComments.Set(True)	

	f.Intrinsic.String.LPad(v.Screen.Form!txtQuote.Text.Trim,"0",7,v.Local.sQuote)
	f.Intrinsic.String.Build("Select Quote_NO from v_Quote_Header where Quote_No = '{0}'",v.Local.sQuote,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Quote must be saved to GSS before adding Comments.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		v.Global.bActiveComments.Set(False)	
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'this is to add the quote header or footer comments
	f.Intrinsic.Control.If(v.DataTable.ORDUPL.RowCount,>,0)
		F.Global.Callwrapper.New("QCOMMENTS","Sales.Quoting.EditQuoteComments")
		
		F.Global.Callwrapper.SetProperty("QCOMMENTS","QuoteNumber",v.Local.sQuote)
		F.Global.Callwrapper.SetProperty("QCOMMENTS","CustomerNumber",V.Screen.Form!txtCustNo.TEXT)
		F.Global.Callwrapper.SetProperty("QCOMMENTS","CustomerName",V.Screen.Form!txtCustName.TEXT)
		F.Global.CallWrapper.Run("QCOMMENTS")
		V.Local.sStatus.Declare(String)
		F.Global.CallWrapper.GetProperty("QCOMMENTS","Status",V.Local.sStatus)
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("There is no quote number to add comments to.","Missing Quote")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.EndIf
	
	v.Global.bActiveComments.Set(False)	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdQHFComments_Click.End

Program.Sub.GGC_BOMDTL_RowCellClick.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
v.Local.sError.Declare

v.Local.iX.Declare
v.Local.iY.Declare
v.Local.sPart.Declare
v.Local.sLines.Declare

'which button was clicked?
f.Intrinsic.Control.If(v.Args.button,=,"Right",AND,V.Args.COLUMN,=,"PART")
	'check user rights
	f.Intrinsic.Control.If(V.Global.iRights,>,0)
		'check bom complete flag
		f.Intrinsic.Control.If(v.Global.bReadOnly,=,False)
			V.Global.sPart.Set(v.Args.CELLVALUE)
			f.Intrinsic.API.GetMousePosition(v.Local.iX,v.Local.iY)
			f.Intrinsic.Math.Add(v.Local.iY,15,v.Local.iY)
			gui.Form..ContextMenuShow("altbom",v.Local.iX,v.Local.iY)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.ExitSub

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GGC_BOMDTL_RowCellClick.End

Program.Sub.cmdClosePop_Click.Start
f.Intrinsic.Control.CallSub(popbom_unload)
Program.Sub.cmdClosePop_Click.End

Program.Sub.POPBOM_UnLoad.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.iCount.Declare
	V.Local.sTable.Declare
	v.Local.sRet.Declare
	
	'just close this form.
	Gui.POPBOM..AlwaysOnTop(False)
	gui.POPBOM..Visible(False)
	
	F.Intrinsic.Control.If(V.DataTable.TABLELIST.Exists)
		f.Intrinsic.Control.If(v.DataTable.PARENTS.Exists)
			gui.POPBOM.GGC_BOMDTL.ClearRows("gvParents")
		f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.For(v.Local.iCount,v.DataTable.TABLELIST.RowCount--,0,-1)
			V.Local.sTable.Set(v.DataTable.TABLELIST(V.Local.iCount).TABLE!FIELDVALTRIM)
			F.Intrinsic.Control.If(V.DataTable.[V.Local.sTable].Exists)
				f.Data.DataTable.Close(V.Local.sTable)
			F.Intrinsic.Control.EndIf
		f.Intrinsic.Control.Next(v.Local.iCount)
		F.Data.DataTable.Close("TABLELIST")
		gui.POPBOM.GGC_BOMDTL.ClearRows("GV_0")
		gui.POPBOM.GGC_BOMDTL.MainView("GV_0")
	F.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.POPBOM_UnLoad.End

Program.Sub.updateBuildQuantity.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iField.Declare
	v.Local.iCount.Declare
	v.Local.sField.Declare
	
	'updating the build quantities for the router upload
	f.Intrinsic.Control.If(v.DataTable.BUILDQTY.RowCount,>,0)
		f.Intrinsic.Control.For(v.Local.iCount,0,v.DataTable.BUILDQTY.RowCount--,1)
			f.Intrinsic.Math.Add(v.Local.iCount,1,v.Local.iField)
			f.Intrinsic.String.Build("Qty{0}",v.Local.iField,v.Local.sField)
			f.Intrinsic.Control.If(v.DataTable.6021.RowCount,>,0)
				f.Data.DataTable.SetValue("6021",-1,v.Local.sField,v.DataTable.BUILDQTY(v.Local.iCount).QUANTITY!FIELDVALSTRING)
			F.Intrinsic.Control.EndIf
		f.Intrinsic.Control.Next(v.Local.iCount)
		'F.Data.DataTable.DeleteRow("BUILDQTY")
		'F.Data.DataTable.AcceptChanges("BUILDQTY")
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.updateBuildQuantity.End

Program.Sub.buildIndentedView.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sError.Declare
	v.Local.sDataView.Declare
	v.Local.sGridView.Declare
	V.Local.bRet.Declare
	v.Local.sTable.Declare
	v.Local.iCnt.Declare
	v.Local.sCols.Declare
	
	v.Local.sTable.Set(v.Args.Table)
	
	f.Intrinsic.String.Build("V_{0}",V.Args.VIEW,V.Local.sDataView)
	F.Intrinsic.String.Build("GV_{0}",V.Args.VIEW,V.Local.sGridView)	
	
	'create a dataview and gridview for LEVEL datatable.
	f.Data.DataView.Create(V.Args.TABLE,V.Local.sDataView,22)
	F.Intrinsic.Variable.ArgExists("Parent",V.Local.bRet)
	F.Intrinsic.Control.If(V.Local.bRet)
		gui.POPBOM.GGC_BOMDTL.AddGridviewFromDataview(V.Local.sGridView,V.Args.PARENT,V.Local.sDataView)
	F.Intrinsic.Control.Else
		gui.POPBOM.GGC_BOMDTL.AddGridviewFromDataview(V.Local.sGridView,V.Args.TABLE,V.Local.sDataView)
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Split(v.DataTable.[v.Local.sTable].FieldNames,"*!*",v.Local.sCols)
	f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.scols.UBound,1)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(v.Local.sGridView,v.Local.sCols(v.Local.iCnt),"MinWidth","50")
		f.Intrinsic.Control.If(v.Local.iCnt,>,5)
			gui.POPBOM.GGC_BOMDTL.SetColumnProperty(v.Local.sGridView,v.Local.sCols(v.Local.iCnt),"Visible",False)
		f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.Next(v.Local.iCnt)	
	
	f.Intrinsic.Control.If(v.Local.bRet,=,False)	
		
		'visible
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"BPARENT","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCR_BP","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"BOM_SEQ","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"RTR_SEQ","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"COST","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"UM","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PL","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"TAG","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"CAT_CODE","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"SOURCE_CODE","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"TIER","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"CTIER","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PAR_INDEX","Visible",False)
		'gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"CH_INDEX","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"EXTENDED","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"FREQUENCY","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"SET_UP","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PURCHASE_FACTOR","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PURCH_COST","Visible",False)
	
		'visible index';
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PART","VisibleIndex",1)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION","VisibleIndex",2)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_2","VisibleIndex",3)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_3","VisibleIndex",4)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"QTY","VisibleIndex",5)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"COMPLETE","VisibleIndex",6)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"CH_INDEX","VisibleIndex",0)
		'header
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PART","HeaderFontBold",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION","HeaderFontBold",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_2","HeaderFontBold",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_3","HeaderFontBold",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"QTY","HeaderFontBold",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"COMPLETE","HeaderFontBold",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"CH_INDEX","HeaderFontBold",True)
		'Header H Alignment
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"QTY","HeaderHAlignment","far")
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"Complete","HeaderHAlignment","Center")
		
		'header back color
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PART","HeaderBackColor","LEMONCHIFFON")
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION","HeaderBackColor","LEMONCHIFFON")
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_2","HeaderBackColor","LEMONCHIFFON")
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_3","HeaderBackColor","LEMONCHIFFON")
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"QTY","HeaderBackColor","LEMONCHIFFON")
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"COMPLETE","HeaderBackColor","LEMONCHIFFON")
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"CH_INDEX","HeaderBackColor","LEMONCHIFFON")
	
		'read only
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PART","ReadOnly",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION","ReadOnly",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_2","ReadOnly",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_3","ReadOnly",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"QTY","ReadOnly",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"COMPLETE","ReadOnly",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"CH_INDEX","ReadOnly",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PART","AllowEdit",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION","AllowEdit",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_2","AllowEdit",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_3","AllowEdit",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"QTY","AllowEdit",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"COMPLETE","AllowEdit",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"CH_INDEX","AllowEdit",False)
		
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(v.Local.sGridView,"CH_INDEX","Caption","BOM Level")
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(v.Local.sGridView,"DESCRIPTION","Caption","Description")
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(v.Local.sGridView,"DESCRIPTION_2","Caption","Description 2")
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(v.Local.sGridView,"DESCRIPTION_3","Caption","Description 3")
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(v.Local.sGridView,"Qty","Caption","Qty")
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(v.Local.sGridView,"Complete","Caption","Complete")
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(v.Local.sGridView,"Qty","DisplayCustomNumeric","#,###,###,###.0000")
	
	f.Intrinsic.Control.Else
		'visible index
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PART","VisibleIndex",1)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION","VisibleIndex",2)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_2","VisibleIndex",3)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_3","VisibleIndex",4)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"QTY","VisibleIndex",5)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"COMPLETE","VisibleIndex",6)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"CH_INDEX","VisibleIndex",0)
		'no captions for child tables
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PART","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_2","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_3","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"QTY","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"COMPLETE","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"BPARENT","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCR_BP","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"BOM_SEQ","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"RTR_SEQ","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"COST","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"UM","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PL","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"CAT_CODE","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"SOURCE_CODE","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"TIER","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"CTIER","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PAR_INDEX","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"CH_INDEX","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"EXTENDED","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"SET_UP","ShowCaption",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"FREQUENCY","ShowCaption",False)
		'hide columns
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"BPARENT","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCR_BP","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"BOM_SEQ","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"RTR_SEQ","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"COST","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"UM","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PL","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"CAT_CODE","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"SOURCE_CODE","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"TIER","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"CTIER","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PAR_INDEX","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"FREQUENCY","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"SET_UP","Visible",False)
		'gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"CH_INDEX","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"EXTENDED","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PURCHASE_FACTOR","Visible",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PURCH_COST","Visible",False)
		
		'read only
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PART","ReadOnly",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION","ReadOnly",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_2","ReadOnly",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_3","ReadOnly",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"QTY","ReadOnly",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"COMPLETE","ReadOnly",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"CH_INDEX","ReadOnly",True)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"PART","AllowEdit",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION","AllowEdit",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_2","AllowEdit",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"DESCRIPTION_3","AllowEdit",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"QTY","AllowEdit",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"COMPLETE","AllowEdit",False)
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(V.Local.sGridView,"CH_INDEX","AllowEdit",False)
		
		gui.POPBOM.GGC_BOMDTL.SetColumnProperty(v.Local.sGridView,"Qty","DisplayCustomNumeric","#,###,###,###.0000")
		'no header row
		gui.POPBOM.GGC_BOMDTL.SetGridviewProperty(v.Local.sGridView,"ColumnPanelRowHeight","1")	
	
	f.Intrinsic.Control.EndIf
	
	'multi select
	gui.POPBOM.GGC_BOMDTL.SetGridviewProperty(V.Local.sGridView,"MultiSelect","True")
	
	f.Intrinsic.Variable.AddRV("GRIDVIEW",V.Local.sGridView)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.buildIndentedView.End

Program.Sub.BomCostBuildup.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)	
	v.Local.sSql.Declare
	V.Local.sReturn.Declare
	v.Local.fLaborHours.Declare
	v.Local.fLabCost.Declare
	v.Local.fMatCost.Declare
	v.Local.fOutsCost.Declare
	v.Local.fFrtCost.Declare
	v.Local.fOtherCost.Declare
	v.Local.fOhdCost.Declare
	v.Local.fTotalCost.Declare
	V.Local.iCount.Declare
	v.Local.sPart.Declare
	v.Local.sParent.Declare
	
	
	'get flooom costs to make 1 and populate BOMDETAIL datatable.
	F.Intrinsic.String.Build("SELECT * FROM V_BI_BOM_BUILDUP_E where TRMNL = '{0}' and RPTID = '004203' AND REC_TYPE = 'S'",V.Caller.Terminal,V.Local.sSql)
	f.ODBC.Connection!conx.openlocalrecordsetRO("FLOOM",V.Local.sSql)
	F.Intrinsic.Control.If(V.ODBC.conx!FLOOM.EOF,=,False)
		F.ODBC.conx!FLOOM.MoveFirst
		f.Intrinsic.Control.DoUntil(v.ODBC.conx!FLOOM.EOF,=,True)
			f.Data.DataTable.AddRow("BOMDETAIL","TYPE",V.ODBC.conx!FLOOM.FieldValTrim!S_TYPE_1,"TOTAL COST",V.ODBC.conx!FLOOM.FieldValFloat!S_MATERIAL_1,"SETUP COST",V.ODBC.conx!FLOOM.FieldValFloat!S_MATERIAL_2,"UNIT COST",V.ODBC.conx!FLOOM.FieldValFloat!S_MATERIAL_3)
			F.Data.DataTable.AddRow("BOMDETAIL","TYPE",V.ODBC.conx!FLOOM.FieldValTrim!S_TYPE_2,"TOTAL COST",V.ODBC.conx!FLOOM.FieldValFloat!S_LABOR_1,"SETUP COST",V.ODBC.conx!FLOOM.FieldValFloat!S_LABOR_2,"UNIT COST",V.ODBC.conx!FLOOM.FieldValFloat!S_LABOR_3)
			F.Data.DataTable.AddRow("BOMDETAIL","TYPE",V.ODBC.conx!FLOOM.FieldValTrim!S_TYPE_3,"TOTAL COST",V.ODBC.conx!FLOOM.FieldValFloat!S_OVERHEAD_1,"SETUP COST",V.ODBC.conx!FLOOM.FieldValFloat!S_OVERHEAD_2,"UNIT COST",V.ODBC.conx!FLOOM.FieldValFloat!S_OVERHEAD_3)
			F.Data.DataTable.AddRow("BOMDETAIL","TYPE",V.ODBC.conx!FLOOM.FieldValTrim!S_TYPE_4,"TOTAL COST",V.ODBC.conx!FLOOM.FieldValFloat!S_OUTSIDE_1,"SETUP COST",V.ODBC.conx!FLOOM.FieldValFloat!S_OUTSIDE_2,"UNIT COST",V.ODBC.conx!FLOOM.FieldValFloat!S_OUTSIDE_3)
			F.Data.DataTable.AddRow("BOMDETAIL","TYPE",V.ODBC.conx!FLOOM.FieldValTrim!S_TYPE_5,"TOTAL COST",V.ODBC.conx!FLOOM.FieldValFloat!S_FREIGHT_1,"SETUP COST",V.ODBC.conx!FLOOM.FieldValFloat!S_FREIGHT_2,"UNIT COST",V.ODBC.conx!FLOOM.FieldValFloat!S_FREIGHT_3)
			F.Data.DataTable.AddRow("BOMDETAIL","TYPE",V.ODBC.conx!FLOOM.FieldValTrim!S_TYPE_6,"TOTAL COST",V.ODBC.conx!FLOOM.FieldValFloat!S_OTHER_1,"SETUP COST",V.ODBC.conx!FLOOM.FieldValFloat!S_OTHER_2,"UNIT COST",V.ODBC.conx!FLOOM.FieldValFloat!S_OTHER_3)
			F.ODBC.conx!FLOOM.MoveNext
		f.Intrinsic.Control.Loop
	F.Intrinsic.Control.EndIf
	f.ODBC.conx!FLOOM.Close
	
	'get markups used for pricing
	f.Intrinsic.String.Replace(v.Local.sSql,"'S'","'T'",V.Local.sSql)
	F.ODBC.Connection!conx.openlocalrecordsetRO("MARK",V.Local.sSql)
	F.Intrinsic.Control.If(V.ODBC.conx!MARK.EOF,=,False)
		f.ODBC.conx!MARK.MoveFirst
		f.Intrinsic.Control.DoUntil(v.ODBC.conx!MARK.EOF,=,True)
			f.Data.DataTable.AddRow("BOMMARKUP","TYPE","LABOR","COST",V.ODBC.conx!MARK.FieldValFloat!EST_LABOR_1,"MARKUP1",V.ODBC.conx!MARK.FieldValFloat!EST_LABOR_2,"MARKUP2",V.ODBC.conx!MARK.FieldValFloat!EST_LABOR_3,"MARKUP3",V.ODBC.conx!MARK.FieldValFloat!EST_LABOR_4,"MARKUP4",V.ODBC.conx!MARK.FieldValFloat!EST_LABOR_5,"MARKUP5",V.ODBC.conx!MARK.FieldValFloat!EST_LABOR_6)
			F.Data.DataTable.AddRow("BOMMARKUP","TYPE","MATERIAL","COST",V.ODBC.conx!MARK.FieldValFloat!EST_MATERIAL_1,"MARKUP1",V.ODBC.conx!MARK.FieldValFloat!EST_MATERIAL_2,"MARKUP2",V.ODBC.conx!MARK.FieldValFloat!EST_MATERIAL_3,"MARKUP3",V.ODBC.conx!MARK.FieldValFloat!EST_MATERIAL_4,"MARKUP4",V.ODBC.conx!MARK.FieldValFloat!EST_MATERIAL_5,"MARKUP5",V.ODBC.conx!MARK.FieldValFloat!EST_MATERIAL_6)
			F.Data.DataTable.AddRow("BOMMARKUP","TYPE","OUTSIDE","COST",V.ODBC.conx!MARK.FieldValFloat!EST_OUTSIDE_1,"MARKUP1",V.ODBC.conx!MARK.FieldValFloat!EST_OUTSIDE_2,"MARKUP2",V.ODBC.conx!MARK.FieldValFloat!EST_OUTSIDE_3,"MARKUP3",V.ODBC.conx!MARK.FieldValFloat!EST_OUTSIDE_4,"MARKUP4",V.ODBC.conx!MARK.FieldValFloat!EST_OUTSIDE_5,"MARKUP5",V.ODBC.conx!MARK.FieldValFloat!EST_OUTSIDE_6)
			F.ODBC.conx!MARK.MoveNext
		f.Intrinsic.Control.Loop
	F.Intrinsic.Control.EndIf
	F.ODBC.conx!MARK.Close
	
	'get the total cost so we can calculate the unit cost per quantity
	'get pricing per quantity
	f.Intrinsic.String.Replace(v.Local.sSql,"'T'","'U' AND PARENT_QTY_1 > '0' ORDER BY SEQUENCE ASC",V.Local.sSql)
	F.ODBC.Connection!conx.openlocalrecordsetRO("PRICE",V.Local.sSql)
	F.Intrinsic.Control.If(V.ODBC.conx!PRICE.EOF,=,False)
		f.ODBC.conx!PRICE.MoveFirst
		f.Intrinsic.Control.DoUntil(v.ODBC.conx!PRICE.EOF,=,True)
			f.Data.DataTable.AddRow("BOMPRICE","QUANTITY",V.ODBC.conx!PRICE.FieldValFloat!PARENT_QTY_1,"UNIT_COST",V.ODBC.conx!PRICE.FieldValFloat!PARENT_QTY_2,"PRICE_1",V.ODBC.conx!PRICE.FieldValFloat!PARENT_QTY_3,"PRICE_2",V.ODBC.conx!PRICE.FieldValFloat!PARENT_QTY_4,"PRICE_3",V.ODBC.conx!PRICE.FieldValFloat!PARENT_QTY_5,"PRICE_4",V.ODBC.conx!PRICE.FieldValFloat!PARENT_QTY_6,"PRICE_5",V.ODBC.conx!PRICE.FieldValFloat!PARENT_QTY_7)
			f.ODBC.conx!PRICE.MoveNext
		f.Intrinsic.Control.Loop
	F.Intrinsic.Control.EndIf
	f.ODBC.conx!PRICE.Close
	
	
	GUI.BOM_DETAIL.GGC_DETAIL.AddSummaryItem("GV_DETAIL","TOTAL COST","T_TOTAL","SUM","","","C2")
	GUI.BOM_DETAIL.GGC_DETAIL.AddSummaryItem("GV_DETAIL","SETUP COST","T_SETUP","SUM","","","C2")
	GUI.BOM_DETAIL.GGC_DETAIL.AddSummaryItem("GV_DETAIL","UNIT COST","T_UNIT","SUM","","","C2")
	
	'now that we have the values from cost build up, we're just going to make sure that we have quantities in the BUILDQTY table.  If we don't, that means they just loaded a BOM and did cost buildup.
	f.Intrinsic.Control.If(v.DataTable.BUILDQTY.RowCount,<,1)
		f.Intrinsic.Control.For(v.Local.iCount,0,v.DataTable.BOMPRICE.RowCount--,1)
			f.Data.DataTable.AddRow("BUILDQTY","PART",V.Local.sParent,"QUANTITY",V.DataTable.BOMPRICE(V.Local.iCount).QUANTITY!FIELDVALFLOAT)
		f.Intrinsic.Control.Next(v.Local.iCount)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.BomCostBuildup.End

Program.Sub.cmdCharges_Click.Start
f.Intrinsic.Control.try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sError.Declare
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	V.Local.sFilter.Declare
	V.Local.iCount.Declare
	v.Local.fCost.Declare
	v.Local.sPart.Declare
	
	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveCharges)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveCharges.Set(True)
	
	'build our query
	v.Local.sSql.Set("select CAST('ADDL CHARGE' AS CHAR(20)) AS PART, CAST(0 AS BIT) AS SELECTED, TEXT, CAST(1 AS NUMERIC(4,2)) AS QUANTITY, CAST(0 AS NUMERIC(4,2)) AS PRICE from V_QTE_PRC_MSG")
	'create the datatable to use for the grid
	f.Intrinsic.Control.If(v.DataTable.ADDITIONAL.Exists)
		f.Data.DataTable.Close("ADDITIONAL")
	f.Intrinsic.Control.EndIf
	F.Data.DataTable.CreateFromSQL("ADDITIONAL","conx",V.Local.sSql,True)
	F.Data.DataView.Create("ADDITIONAL","V_ADDITIONAL",22)
	gui.Additional.GGC_Additional.DataSource("ADDITIONAL")
	gui.Additional.GGC_Additional.AddGridviewFromDataview("GV_ADDITIONAL","ADDITIONAL","V_ADDITIONAL")
	
	'GRID FORMATTING
	'visible
	gui.Additional.GGC_Additional.SetColumnProperty("GV_ADDITIONAL","PART","Visible",False)
	'header font
	gui.Additional.GGC_Additional.SetColumnProperty("GV_ADDITIONAL","SELECTED","HeaderFontBold",True)
	gui.Additional.GGC_Additional.SetColumnProperty("GV_ADDITIONAL","TEXT","HeaderFontBold",True)
	gui.Additional.GGC_Additional.SetColumnProperty("GV_ADDITIONAL","QUANTITY","HeaderFontBold",True)
	gui.Additional.GGC_Additional.SetColumnProperty("GV_ADDITIONAL","PRICE","HeaderFontBold",True)
	'edit/read only
	gui.Additional.GGC_Additional.SetColumnProperty("GV_ADDITIONAL","SELECTED","AllowEdit",True)
	gui.Additional.GGC_Additional.SetColumnProperty("GV_ADDITIONAL","TEXT","AllowEdit",False)
	gui.Additional.GGC_Additional.SetColumnProperty("GV_ADDITIONAL","QUANTITY","AllowEdit",True)
	gui.Additional.GGC_Additional.SetColumnProperty("GV_ADDITIONAL","PRICE","AllowEdit",True)
	gui.Additional.GGC_Additional.SetColumnProperty("GV_ADDITIONAL","SELECTED","ReadOnly",False)
	gui.Additional.GGC_Additional.SetColumnProperty("GV_ADDITIONAL","TEXT","ReadOnly",True)
	gui.Additional.GGC_Additional.SetColumnProperty("GV_ADDITIONAL","QUANTITY","ReadOnly",False)
	gui.Additional.GGC_Additional.SetColumnProperty("GV_ADDITIONAL","PRICE","ReadOnly",False)
	'column width
	gui.Additional.GGC_Additional.SetColumnProperty("GV_ADDITIONAL","SELECTED","MinWidth",65)
	gui.Additional.GGC_Additional.SetColumnProperty("GV_ADDITIONAL","TEXT","MinWidth",200)
	gui.Additional.GGC_Additional.SetColumnProperty("GV_ADDITIONAL","QUANTITY","MinWidth",40)
	gui.Additional.GGC_Additional.SetColumnProperty("GV_ADDITIONAL","PRICE","MinWidth",40)
	
	'get additional charges from the BOM (tagged as exclude items if the option is set)
	'check options for tooling
	f.Intrinsic.String.Build("select long_val, char_val from GCG_4986_OPTIONS where ID = '{0}'","3",v.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet.IsNullOrWhiteSpace,=,False)
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		'the long val will be 1 or 0.  1 means they use the embedded tooling so we have to extract it from the BOM table
		f.Intrinsic.Control.If(v.Local.sRet(0),=,"1")
			v.Local.sPart.Set(V.Local.sRet(1))
			f.Intrinsic.String.Build("PART = '{0}' AND CAT_CODE = 'X'",v.Local.sPart.PSQLFriendly,V.Local.sFilter)
			F.Data.DataView.Create("BOM","V_TOOLS",22,V.Local.sFilter,"")
			F.Intrinsic.Control.If(V.DataView.BOM!V_TOOLS.RowCount,>,0)
				f.Intrinsic.Control.For(v.Local.iCount,0,v.DataView.BOM!V_TOOLS.RowCount--,1)
					f.Intrinsic.Math.Add(v.Local.fCost,v.DataView.BOM!V_TOOLS(v.Local.iCount).COST!FIELDVALFLOAT,V.Local.fCost)
				f.Intrinsic.Control.Next(v.Local.iCount)
				F.Intrinsic.String.Format(V.Local.fCost,"####.00",V.Local.sFilter)
				F.Data.DataTable.AddRow("ADDITIONAL","SELECTED",True,"PART","ADDL CHARGE","TEXT",v.Local.sPart,"QUANTITY",1.00,"PRICE",V.Local.sFilter)
			F.Intrinsic.Control.EndIf
			f.Data.DataView.Close("BOM","V_TOOLS")
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf	
	
	GUI.Additional..Visible(True)
	v.Global.bActiveCharges.Set(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdCharges_Click.End

Program.Sub.Additional_UnLoad.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
v.Local.sError.Declare

gui.Additional..Visible(False)
f.Data.DataTable.Close("ADDITIONAL")

f.Intrinsic.Control.ExitSub

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Additional_UnLoad.End

Program.Sub.cmdAdditionalOK_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sError.Declare
	v.Local.iCount.Declare
	v.Local.sQty.Declare
	v.Local.sPrice.Declare
	v.Local.sDate.Declare
	v.Local.sDueDate.Declare
	v.Local.bRet.Declare
	v.Local.sDollars.Declare
	v.Local.sCents.Declare
	v.Local.fPrice.Declare
	v.Local.fQty.Declare
	v.Local.sExtended.Declare
	v.Local.sHold.Declare
	v.Local.iLine.Declare
	v.Local.sLine.Declare
		
	'lets check to make sure we have quote lines already.  We are adding "additional charges" so the quote lines should come first.
	f.Intrinsic.Control.If(v.DataTable.ORDUPLLines.RowCount,>,0)
	
		'Get the max line number
		f.Data.DataTable.Compute("ORDUPLLines","MAX(LineNumber)","",v.Local.sHold)
		f.Intrinsic.Control.If(v.Local.sHold.Trim,<>,"")
			f.Intrinsic.Math.Add(v.Local.sHold,1,v.Local.iLine)
		f.Intrinsic.Control.Else
			v.Local.iLine.Set(1)
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.String.LPad(v.Local.iLine,"0",3,v.Local.sLine)
	
		'set the line item dates
		f.Intrinsic.String.Format(v.Ambient.Date,"YYYYMMDD",V.Local.sDate)
		f.Intrinsic.Date.DateAdd("D",30,V.Ambient.Date,v.Local.sDueDate)
		F.Intrinsic.String.Format(V.Local.sDueDate,"YYYYMMDD",V.Local.sDueDate)
		'filter on selected records and add them to the ORDUPLLINES datatable
		F.Data.DataView.SetFilter("ADDITIONAL","V_ADDITIONAL","[SELECTED] = True")
		f.Intrinsic.Control.For(v.Local.iCount,0,v.DataView.ADDITIONAL!V_ADDITIONAL.RowCount--,1)
		
			v.Local.fQty.Set(v.DataView.ADDITIONAL!V_ADDITIONAL(v.Local.iCount).QUANTITY!FIELDVALString)
			'Qty
			f.Intrinsic.String.Format(v.Local.fQty,"000000000.0000",v.Local.sQty)
			f.Intrinsic.String.Replace(v.Local.sQty,".","",v.Local.sQty)
			'Price
			V.Local.fPrice.Set(v.DataView.ADDITIONAL!V_ADDITIONAL(v.Local.iCount).PRICE!FIELDVALFLOAT)
			f.Intrinsic.String.Format(v.Local.fPrice,"0000000000.000000",v.Local.sPrice)
			f.Intrinsic.String.Replace(v.Local.sPrice,".","",v.Local.sPrice)
			'Extended		
			F.Intrinsic.Math.Mult(V.Local.fQty,V.Local.fPrice,V.Local.sExtended)
			F.Intrinsic.String.Format(v.Local.sExtended,"0000000000.000000",V.Local.sExtended)
			F.Intrinsic.String.Replace(V.Local.sExtended,".","",V.Local.sExtended)		
	
			f.Data.DataTable.AddRow("ORDUPLLines","LineNumber",v.Local.sLine,"QtyOrdered",v.Local.sQty,"UM","EA","PartNumber","ADDL CHARGE","QuotedPrice",v.Local.sPrice,"PartDesc",v.DataView.ADDITIONAL!V_ADDITIONAL(v.Local.iCount).TEXT!FIELDVALTRIM,"LineOrderDate",v.Local.sDate,"LinePromiseDate",v.Local.sDueDate,"CurrFlag","Y","RouterValFlag","N","QTY",V.Local.fQty,"PRICE",V.Local.fPrice,"OverridePrice",V.Local.sPrice,"Extension",v.Local.sExtended)
		f.Intrinsic.Control.Next(v.Local.iCount)
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("There are no quote lines added yet","Missing Data")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.EndIf
	
	'close the form and the datatable (views and gridviews close when the table does)
	gui.Additional..Visible(False)
	F.Data.Datatable.Close("ADDITIONAL")

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdAdditionalOK_Click.End

Program.Sub.GGC_Additional_RowCellClick.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
v.Local.sError.Declare



f.Intrinsic.Control.ExitSub

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GGC_Additional_RowCellClick.End

Program.Sub.eliteMfg.Start
Program.Sub.eliteMfg.End

Program.Sub.CalcPPH.Start
f.intrinsic.control.try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.serror.Declare
	v.Local.fExtended.Declare
	v.Local.fRate.Declare
	v.Local.fTemp.Declare
	
	'Calculating the runtimes back to the standard used in the system (Parts Per Hour)
	'PPH = Parts Per Hour (1 to 1, cost * QTY)
	'HPP = Hours Per Part (1 / QTY = PPH)
	'MPP - Minutes Per Part (60 / QTY = PPH)
	'SPP = Seconds Per Part (60/QTY)*60 = PPH
	'PPM = Parts Per Minute (60 * QTY) = PPH)
	'HPH = Hundreds Per Hour (QTY * 100 = PPH)
	'ARGS PASSED - ROW, COLUMN, VALUE (value = qty entered)
	
	'setup
	'args.type is the rate type selectd in the gridview.  Based on that type we convert the Qty and rate type to reflect the Global rate being used (parts per hour)
	'args.setup is calculated if we have a setup time and a frequency.  That result is then added to the cost of the part.
	
	f.Intrinsic.Control.SelectCase(V.Args.TYPE)
		F.Intrinsic.Control.Case("PPH")
			f.Data.DataTable.SetValue("CHILD",v.Args.ROW,"TYPE","PPH")
		F.Intrinsic.Control.Case("HPP")
			F.Intrinsic.Math.Div(1,V.DataTable.CHILD(V.Args.ROW).QTY!FIELDVALFLOAT,V.Local.fRate)
			f.Data.DataTable.SetValue("CHILD",v.Args.ROW,"TYPE","PPH","QTY",V.Local.fRate)
		F.Intrinsic.Control.Case("MPP")
			f.Intrinsic.Math.Div(60,V.DataTable.CHILD(V.Args.ROW).QTY!FIELDVALFLOAT,V.Local.fRate)
			f.Data.DataTable.SetValue("CHILD",v.Args.ROW,"TYPE","PPH","QTY",V.Local.fRate)		
		F.Intrinsic.Control.Case("SPP")
			f.Intrinsic.Math.Div(60,V.DataTable.CHILD(V.Args.ROW).QTY!FIELDVALFLOAT,v.Local.fTemp)
			f.Intrinsic.Math.Mult(v.Local.fTemp,60,v.Local.fRate)
			f.Data.DataTable.SetValue("CHILD",v.Args.ROW,"TYPE","PPH","QTY",V.Local.fRate)
		F.Intrinsic.Control.Case("PPM")
			f.Intrinsic.Math.Mult(60,V.DataTable.CHILD(V.Args.ROW).QTY!FIELDVALFLOAT,v.Local.fRate)
			f.Data.DataTable.SetValue("CHILD",v.Args.ROW,"TYPE","PPH","QTY",V.Local.fRate)
		F.Intrinsic.Control.Case("HPH")
			f.Intrinsic.Math.Mult(100,V.DataTable.CHILD(V.Args.ROW).QTY!FIELDVALFLOAT,v.Local.fRate)
			f.Data.DataTable.SetValue("CHILD",v.Args.ROW,"TYPE","PPH","QTY",V.Local.fRate)
	f.Intrinsic.Control.EndSelect

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.CalcPPH.End

Program.Sub.CalcHPP.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.local.serror.declare
	v.Local.fExtended.Declare
	v.Local.fRate.Declare
	v.Local.fTemp.Declare
	'Calculating the runtimes back to the standard used in the system (Hours Per Part)
	'PPH = Parts Per Hour (1 / Qty = HPP)
	'HPP = Hours Per Part (1 * QTY = HPP)
	'MPP - Minutes Per Part 1/(60/QTY = HPP)
	'SPP = Seconds Per Part 1/ ((60 / QTY) * 60) = HPP
	'PPM = Parts Per Minute 1/(QTY * 60 = HPP)
	'HPH = Hundreds Per Hour 1/(QTY * 100 = HPP)
	'ARGS PASSED - ROW, COLUMN, VALUE (value = qty entered)
	
	'args.type is the rate type selectd in the gridview.  Based on that type we convert the Qty and rate type to reflect the Global rate being used (hours per part)
	'args.setup is calculated if we have a setup time and a frequency.  That result is then added to the cost of the part.
	f.Intrinsic.Control.SelectCase(v.Args.type)
		f.Intrinsic.Control.Case("PPH")
			F.Intrinsic.Math.Div(1,V.DataTable.CHILD(V.Args.ROW).QTY!FIELDVALFLOAT,V.Local.fRate)
			f.Data.DataTable.SetValue("CHILD",v.Args.ROW,"TYPE","HPP","QTY",V.Local.fRate)
		F.Intrinsic.Control.Case("HPP")
			F.Intrinsic.Math.Mult(1,V.DataTable.CHILD(V.Args.ROW).QTY!FIELDVALFLOAT,V.Local.fRate)
			f.Data.DataTable.SetValue("CHILD",v.Args.ROW,"TYPE","HPP","QTY",V.Local.fRate)
		F.Intrinsic.Control.Case("MPP")
			F.Intrinsic.Math.Div(60,V.DataTable.CHILD(V.Args.ROW).QTY!FIELDVALFLOAT,V.Local.fTemp)
			F.Intrinsic.Math.Div(1,V.Local.fTemp,V.Local.fRate)
			f.Data.DataTable.SetValue("CHILD",v.Args.ROW,"TYPE","HPP","QTY",V.Local.fRate)
		F.Intrinsic.Control.Case("SPP")
			F.Intrinsic.Math.Div(60,V.DataTable.CHILD(V.Args.ROW).QTY!FIELDVALFLOAT,V.Local.fTemp)
			F.Intrinsic.Math.Mult(V.Local.fTemp,60,V.Local.fTemp)
			F.Intrinsic.Math.Div(1,V.Local.fTemp,V.Local.fRate)
			f.Data.DataTable.SetValue("CHILD",v.Args.ROW,"TYPE","HPP","QTY",V.Local.fRate)
		F.Intrinsic.Control.Case("PPM")
			f.Intrinsic.Math.Mult(60,V.DataTable.CHILD(V.Args.ROW).QTY!FIELDVALFLOAT,V.Local.fTemp)
			f.Intrinsic.Math.Div(1,v.Local.fTemp,v.Local.fRate)
			f.Data.DataTable.SetValue("CHILD",v.Args.ROW,"TYPE","HPP","QTY",V.Local.fRate)
		F.Intrinsic.Control.Case("HPH")
			f.Intrinsic.Math.Mult(100,V.DataTable.CHILD(V.Args.ROW).QTY!FIELDVALFLOAT,V.Local.fTemp)
			f.Intrinsic.Math.Div(1,v.Local.fTemp,v.Local.fRate)
			f.Data.DataTable.SetValue("CHILD",v.Args.ROW,"TYPE","HPP","QTY",V.Local.fRate)
	f.Intrinsic.Control.EndSelect

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.CalcHPP.End

Program.Sub.GGC_Bom_CellValueChanged.Start
'#Getback#
f.intrinsic.control.try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.fCost.Declare
	v.Local.iSerie.Declare
	v.Local.sValue.Declare	
	v.Local.iFlag.Declare
	v.Local.sSQL.Declare
	v.Local.bAuth.Declare
	v.Local.sFilter.Declare
	v.Local.sRet.Declare
	v.Local.sHold.Declare
	v.Local.bNumeric.Declare
	v.Local.sDay.Declare
	v.Local.sdate.Declare
	v.Local.bDate.Declare
	v.Local.sPart.Declare
	v.Local.iInner.Declare	
	
	f.Intrinsic.Control.SelectCase(v.Args.Column.UCase)
		f.Intrinsic.Control.Case("DESCRIPTION")
			''''''''''''''''''''''''''''''''''''
			'When update Router Line description, check Inventory Master, Router Header and Bom Eng and ask user to update also Description of these table, just to make date consistent
			'sValue is rtrim of the cell, and sValue must be less than 30 chars
			''''''''''''''''''''''''''''''''''''
			f.Intrinsic.String.RTrim(v.DataTable.Child(v.Args.RowIndex).DESCRIPTION!FieldValString,v.Local.sValue)
			f.Intrinsic.Control.If(v.Local.sValue.Length,>,30)
				f.Data.DataTable.SetValue("Child",v.Args.rowindex,"DESCRIPTION","")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("Maxi length is only 30 chars for this field.","Invalid Input")	
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			F.Intrinsic.Control.Else
				f.Data.DataTable.SetValue("Child",v.Args.rowindex,"DESCRIPTION",V.Local.sValue)
				f.Intrinsic.Control.If(v.DataTable.Child(v.Args.RowIndex).LMO!FieldValTrim,=,"M")				
					
					'Ask to update Inventory MSTR Description
					v.Local.sPart.Set(v.DataTable.Child(v.Args.RowIndex).Part!FieldValString)
					f.Intrinsic.String.Build("Select Part from Inventory_MSTR where Part = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSQL)
					f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
					f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)				
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
						f.Intrinsic.String.Build("Also update Inventory Description for part {0}?",v.Local.sPart.Trim,v.Local.sHold)
						f.Intrinsic.UI.Msgbox(v.Local.sHold,"Update Inventory Description",4,v.Local.iFlag)
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
						f.Intrinsic.Control.If(v.Local.iFlag,=,v.Ambient.MsgBoxYes)
							
							'Check user security to access Inventory Part Edit
							Function.Global.Security.CheckUserAccessIPM(310,1,v.Local.bAuth)
							f.Intrinsic.Control.If(v.Local.bAuth.Not)
								f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
								f.Intrinsic.UI.Msgbox("User does not have permission to Inventory > File > Inventory Parts > Open.","Menu Item Not Assigned")
								f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
							f.Intrinsic.Control.Else
							
								f.Intrinsic.String.Build("UPDATE INVENTORY_MSTR Set Description = '{0}' WHERE PART = '{1}' ",v.Local.sValue.PSQLFriendly,v.Local.sPart.PSQLFriendly,v.Local.sSQL)
								f.ODBC.Connection!conx.Execute(v.Local.sSQL)
								v.Local.sPart.Set(v.Local.sPart.Trim)
								f.Intrinsic.String.Build("Trim(Part) = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sFilter)
								F.Data.Datatable.Select("Material",v.Local.sFilter,v.Local.sRet)
								f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
									F.Intrinsic.String.Split(V.Local.sRet,"*!*",v.Local.sRet)
									f.Intrinsic.Control.For(v.Local.iInner,0,v.Local.sRet.UBound,1)
										F.Data.DataTable.SetValue("Material",v.Local.sRet(v.Local.iInner),"DESCRIPTION",v.Local.sValue)
									f.Intrinsic.Control.Next(v.Local.iInner)									
								f.Intrinsic.Control.EndIf
							
							f.Intrinsic.Control.EndIf						
	
						f.Intrinsic.Control.EndIf
					
					f.Intrinsic.Control.EndIf
					
					'Ask to update Router Master Description
					v.Local.sPart.Set(v.DataTable.Child(v.Args.RowIndex).Part!FieldValString)
					f.Intrinsic.String.Build("Select Router from Router_Header where Router = '{0}' and Router_Type = 'H'",v.Local.sPart.PSQLFriendly,v.Local.sSQL)
					f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
					f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
						
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
						f.Intrinsic.String.Build("Also update Router Header Description for part {0}?",v.Local.sPart.Trim,v.Local.sHold)
						f.Intrinsic.UI.Msgbox(v.Local.sHold,"Update Router Header Description",4,v.Local.iFlag)
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
						f.Intrinsic.Control.If(v.Local.iFlag,=,v.Ambient.MsgBoxYes)		
							f.Intrinsic.String.Build("UPDATE Router_Header Set Description_Router = '{0}' WHERE Router = '{1}' and Router_Type = 'H' ",v.Local.sValue.PSQLFriendly,v.Local.sPart.PSQLFriendly,v.Local.sSQL)
							f.ODBC.Connection!conx.Execute(v.Local.sSQL)
						f.Intrinsic.Control.EndIf			
					
					f.Intrinsic.Control.EndIf
					
					'Ask to update Bom_Eng Description
					f.Intrinsic.String.Build("Select Part from Bom_Eng where Part = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSQL)
					f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
					f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
						
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
						f.Intrinsic.String.Build("Also update Bom Header Description for part {0}?",v.Local.sPart.Trim,v.Local.sHold)
						f.Intrinsic.UI.Msgbox(v.Local.sHold,"Update Bom Header Description",4,v.Local.iFlag)
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
						f.Intrinsic.Control.If(v.Local.iFlag,=,v.Ambient.MsgBoxYes)		
							f.Intrinsic.String.Build("UPDATE Bom_Eng Set Description = '{0}' WHERE Part = '{1}'",v.Local.sValue.PSQLFriendly,v.Local.sPart.PSQLFriendly,v.Local.sSQL)
							f.ODBC.Connection!conx.Execute(v.Local.sSQL)
						f.Intrinsic.Control.EndIf			
					
					f.Intrinsic.Control.EndIf				
									
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf		
			f.Intrinsic.Control.ExitSub		
			
		F.Intrinsic.Control.CaseAny("DESCRIPTION_2","DESCRIPTION_3")
			'Exit sub when it is other than Material sequences
			f.Intrinsic.Control.If(v.DataTable.Child(v.Args.RowIndex).LMO!FieldValTrim,<>,"M")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("Description 2 and 3 are modifiable for Material sequences ONLY.","Invalid Input")	
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Data.DataTable.SetValue("Child",v.Args.rowindex,v.Args.Column,"")
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
			''''''''''''''''''''''''''''''''''''
			'When update Router Line description_2 OR 3, check Inventory Master MST2, Router_Desc ask user to update also Description of these table, just to make date consistent
			'sValue is rtrim of the cell, and sValue must be less than 30 chars
			''''''''''''''''''''''''''''''''''''
			f.Intrinsic.String.RTrim(v.DataTable.Child(v.Args.RowIndex).[v.Args.Column]!FieldValString,v.Local.sValue)
			f.Intrinsic.Control.If(v.Local.sValue.Length,>,30)
				f.Data.DataTable.SetValue("Child",v.Args.rowindex,v.Args.Column,"")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("Maxi length is only 30 chars for this field.","Invalid Input")	
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			F.Intrinsic.Control.Else
				f.Data.DataTable.SetValue("Child",v.Args.rowindex,v.Args.Column,V.Local.sValue)	
				
				'Ask to update Inventory MSTR Description
				v.Local.sPart.Set(v.DataTable.Child(v.Args.RowIndex).Part!FieldValString)
				f.Intrinsic.String.Build("Select Part from Inventory_MSTR where Part = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSQL)
				f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
				f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)				
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
					f.Intrinsic.String.Build("Also update Inventory {0} for part {1}?",v.Args.Column.UCase,v.Local.sPart.Trim,v.Local.sHold)
					f.Intrinsic.UI.Msgbox(v.Local.sHold,"Update Inventory Description",4,v.Local.iFlag)
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
					f.Intrinsic.Control.If(v.Local.iFlag,=,v.Ambient.MsgBoxYes)
						
						'Check user security to access Inventory Part Edit
						Function.Global.Security.CheckUserAccessIPM(310,1,v.Local.bAuth)
						f.Intrinsic.Control.If(v.Local.bAuth.Not)
							f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
							f.Intrinsic.UI.Msgbox("User does not have permission to Inventory > File > Inventory Parts > Open.","Menu Item Not Assigned")
							f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
						f.Intrinsic.Control.Else
						
							f.Intrinsic.String.Build("UPDATE INVENTORY_MST2 Set {0} = '{1}' WHERE PART = '{2}' ",v.Args.Column,v.Local.sValue.PSQLFriendly,v.Local.sPart.PSQLFriendly,v.Local.sSQL)
							f.ODBC.Connection!conx.Execute(v.Local.sSQL)
							f.Intrinsic.String.Build("Trim(Part) = '{0}'",v.DataTable.Child(v.Args.RowIndex).Part!FieldVAlTrim,v.Local.sFilter)
							F.Data.Datatable.Select("Material",v.Local.sFilter,v.Local.sRet)
					
							f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
								F.Intrinsic.String.Split(V.Local.sRet,"*!*",v.Local.sRet)
								f.Intrinsic.Control.For(v.Local.iInner,0,v.Local.sRet.UBound,1)
									F.Data.DataTable.SetValue("Material",v.Local.sRet(v.Local.iInner),v.Args.Column,v.Local.sValue)
								f.Intrinsic.Control.Next(v.Local.iInner)									
							f.Intrinsic.Control.EndIf							
						
						f.Intrinsic.Control.EndIf						

					f.Intrinsic.Control.EndIf
				
				f.Intrinsic.Control.EndIf
				
				'Ask to update Router Master Description
				v.Local.sPart.Set(v.DataTable.Child(v.Args.RowIndex).Part!FieldValString)
				f.Intrinsic.String.Build("Select Router from Router_Header where Router = '{0}' and Router_Type = 'H'",v.Local.sPart.PSQLFriendly,v.Local.sSQL)
				f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
				f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
					
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
					f.Intrinsic.String.Build("Also update Router Header {0} for part {1}?",v.Args.Column.UCase,v.Local.sPart.Trim,v.Local.sHold)
					f.Intrinsic.UI.Msgbox(v.Local.sHold,"Update Router Header Description",4,v.Local.iFlag)
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
					f.Intrinsic.Control.If(v.Local.iFlag,=,v.Ambient.MsgBoxYes)	
						f.Intrinsic.Control.If(v.Args.Column.UCase,=,"DESCRIPTION_2")
							V.Local.sHold.Set("DESC_Router_2")
						f.Intrinsic.Control.Else
							V.Local.sHold.Set("DESC_Router_3")
						f.Intrinsic.Control.EndIf
						f.Intrinsic.String.Build("UPDATE Router_Desc Set {0} = '{1}' WHERE Router = '{2}' and Router_Type = 'I' ",v.Local.sHold,v.Local.sValue.PSQLFriendly,v.Local.sPart.PSQLFriendly,v.Local.sSQL)
						f.ODBC.Connection!conx.Execute(v.Local.sSQL)
					f.Intrinsic.Control.EndIf			
				
				f.Intrinsic.Control.EndIf									

			f.Intrinsic.Control.EndIf	
			
			f.Intrinsic.Control.ExitSub		
			
	
	f.Intrinsic.Control.EndSelect
	
	'New version will auto calculate Extended
	'if a value was changed in "set_up", "frequency","quantity", or "cost", we're going to recalculate the row based on the LMO row type.
	'Right now we must put the AcceptChanges inside each construct, because if we put it outside, the subgrid will be collasped when changing a value of the subgrid.
	'But we need to accept changes any way because in 2019.1, the grid will not change other expression value if we dont apply changes.
	
	F.Intrinsic.Control.CallSub(GGC_Bom_KeyPress,"COLUMNNAME","TYPE","ROWINDEX",V.Args.RowIndex)
	
	f.Intrinsic.Control.SelectCase(v.Args.Column.UCase)
		f.Intrinsic.Control.CaseAny("QTY")			
			f.Intrinsic.Control.If(v.DataTable.Child(v.Args.RowIndex).LMO!FieldValTrim,=,"L")
			
				f.Intrinsic.Control.If(v.DataTable.Child(v.Args.RowIndex).Qty!FieldValFloat,<>,0)

					'Converting HPP PPH
					'check the global option for what we are setting rates to for BOM Upload and standard calculations.
					F.Intrinsic.Control.SelectCase(V.Global.sHppPph)
						f.Intrinsic.Control.Case(1)
							f.Intrinsic.Control.CallSub(CalcPPH,"ROW",V.Args.RowIndex,"COLUMN",V.Args.COLUMN,"TYPE",V.DataTable.CHILD(V.Args.RowIndex).TYPE!FIELDVALTRIM)
						f.Intrinsic.Control.Case(2)
							f.Intrinsic.Control.CallSub(CalcHPP,"ROW",V.Args.RowIndex,"COLUMN",V.Args.COLUMN,"TYPE",V.DataTable.CHILD(V.Args.RowIndex).TYPE!FIELDVALTRIM)
					f.Intrinsic.Control.EndSelect	
					
				f.Intrinsic.Control.EndIf			
		
			f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.EndSelect
	

	F.Intrinsic.Control.If(V.Args.Column.UCase,=,"PURCH_COST")
	
		f.Intrinsic.Control.If(V.DataTable.CHILD(V.Args.RowIndex).LMO!FIELDVALString,=,"M")
			F.Intrinsic.Control.If(V.DataTable.CHILD(V.Args.RowIndex).PURCH_COST!FIELDVALFLOAT,>,0,AND,V.DataTable.CHILD(V.Args.RowIndex).PURCHASE_FACTOR!FIELDVALFLOAT,>,0)
				F.Intrinsic.Math.Div(V.DataTable.CHILD(V.Args.RowIndex).PURCH_COST!FIELDVALFLOAT,V.DataTable.CHILD(V.Args.RowIndex).PURCHASE_FACTOR!FIELDVALFLOAT,V.Local.fCost)
				F.Intrinsic.String.Format(V.Local.fCost,"#.0000",V.Local.fCost)
				f.Data.DataTable.SetValue("CHILD",v.Args.RowIndex,"COST",V.Local.fCost)
			F.Intrinsic.Control.EndIf		
		f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.EndIf	

	F.Intrinsic.Control.If(V.Args.Column.UCase,=,"TAG")
		f.Intrinsic.String.RTrim(v.DataTable.Child(v.Args.RowIndex).[v.Args.Column]!FieldValString,v.Local.sValue)
		f.Intrinsic.Control.If(v.Local.sValue.Length,>,6)
			f.Data.DataTable.SetValue("Child",v.Args.rowindex,v.Args.Column,"")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Maxi length is only 6 chars for this field.","Invalid Input")	
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		F.Intrinsic.Control.Else
			f.Data.DataTable.SetValue("Child",v.Args.rowindex,v.Args.Column,V.Local.sValue)	
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.ExitSub	
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Args.Column.UCase,=,"BM_SERIAL_START",OR,V.Args.Column.UCase,=,"BM_SERIAL_STOP")
		f.Intrinsic.String.RTrim(v.DataTable.Child(v.Args.RowIndex).[v.Args.Column]!FieldValString,v.Local.sValue)
		f.Intrinsic.Control.If(v.Local.sValue.Length,>,15)
			f.Data.DataTable.SetValue("Child",v.Args.rowindex,v.Args.Column,"")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Maxi length is only 15 chars for this field.","Invalid Input")	
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		F.Intrinsic.Control.Else
			f.Data.DataTable.SetValue("Child",v.Args.rowindex,v.Args.Column,V.Local.sValue)	
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.ExitSub	
	F.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.If(V.Args.Column.UCase,=,"DRAWING")
		f.Intrinsic.String.RTrim(v.DataTable.Child(v.Args.RowIndex).[v.Args.Column]!FieldValString,v.Local.sValue)
		f.Intrinsic.Control.If(v.Local.sValue.Length,>,20)
			f.Data.DataTable.SetValue("Child",v.Args.rowindex,v.Args.Column,"")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Maxi length is only 20 chars for this field.","Invalid Input")	
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		F.Intrinsic.Control.Else
			f.Data.DataTable.SetValue("Child",v.Args.rowindex,v.Args.Column,V.Local.sValue)	
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.ExitSub	
	F.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.If(V.Args.Column.UCase,=,"DRAWING_SIZE")
		f.Intrinsic.String.RTrim(v.DataTable.Child(v.Args.RowIndex).[v.Args.Column]!FieldValString,v.Local.sValue)
		f.Intrinsic.Control.If(v.Local.sValue.Length,>,1)
			f.Data.DataTable.SetValue("Child",v.Args.rowindex,v.Args.Column,"")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Maxi length is only 1 char for this field.","Invalid Input")	
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		F.Intrinsic.Control.Else
			f.Data.DataTable.SetValue("Child",v.Args.rowindex,v.Args.Column,V.Local.sValue)	
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.ExitSub	
	F.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.If(V.Args.Column.UCase,=,"DATE_START",OR,V.Args.Column.UCase,=,"DATE_STOP")
		f.Intrinsic.String.RTrim(v.DataTable.Child(v.Args.RowIndex).[v.Args.Column]!FieldValString,v.Local.sValue)
		'Check Size
		f.Intrinsic.Control.If(v.Local.sValue.Length,<>,6)
			f.Data.DataTable.SetValue("Child",v.Args.rowindex,v.Args.Column,"000000")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Invalid date. Format must be MMDDYY","Invalid Input")	
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			F.Intrinsic.Control.ExitSub	
		F.Intrinsic.Control.Endif
		
		'Check numeric
		f.Intrinsic.Math.IsNumeric(v.Local.sValue,v.Local.bNumeric)
		f.Intrinsic.Control.If(v.Local.bNumeric.Not)
			f.Data.DataTable.SetValue("Child",v.Args.rowindex,v.Args.Column,"000000")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Invalid date. Format must be MMDDYY","Invalid Input")	
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			F.Intrinsic.Control.ExitSub	
		F.Intrinsic.Control.Endif		
		
		'Check date
		f.Intrinsic.String.Mid(v.Local.sValue,3,2,v.Local.sDay)
		f.Intrinsic.String.Build("{0}/{1}/{2}",v.Local.sValue.left2,v.Local.sDay,v.Local.sValue.Right2,v.Local.sdate)
		f.Intrinsic.Date.IsDate(v.Local.sdate,v.Local.bDate)
		f.Intrinsic.UI.Msgbox(v.Local.sdate)
		f.Intrinsic.Control.If(v.Local.bDate)
			f.Data.DataTable.SetValue("Child",v.Args.rowindex,v.Args.Column,V.Local.sValue)	
		f.Intrinsic.Control.Else
			f.Data.DataTable.SetValue("Child",v.Args.rowindex,v.Args.Column,"000000")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Invalid date. Format must be MMDDYY","Invalid Input")	
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			F.Intrinsic.Control.ExitSub				
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.ExitSub	
	F.Intrinsic.Control.EndIf	

	f.Intrinsic.Control.CallSub(Calculate_ChildRow_Extended,"Row",v.Args.RowIndex)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GGC_Bom_CellValueChanged.End

Program.Sub.deduplicate.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
v.local.serror.declare
v.Local.iCount.Declare
v.Local.iC.Declare
V.Local.sLastParent.Declare
V.Local.sTier.Declare
V.Local.sFilter.Declare

'sometimes we end up with duplicate copies of a mfg sub-component or sub-assembly in the BOM.  It has to be removed from the BOM table before we try and upload it. Otherwise we end up with errors during upload.

'create a view of all parents
F.Data.DataView.Create("BOM","V_DUPLICATES",22,"CTIER = '0'","BPARENT ASC, TIER DESC")

'loop through this view and for each parent
f.Intrinsic.Control.For(v.Local.iCount,V.DataView.BOM!V_DUPLICATES.RowCount--,0,-1)
	F.Intrinsic.Control.If(V.DataView.BOM!V_DUPLICATES(V.Local.iCount).BPARENT!FIELDVALTRIM,=,V.Local.sLastParent.Trim)
		'a duplicate parent was found, create a view of all records related to that parent and them from BOM (these are all duplicate records)
		f.Intrinsic.String.Build("TIER = '{0}'",V.DataView.BOM!V_DUPLICATES(V.Local.iCount).TIER!FIELDVALTRIM,V.Local.sFilter)
		F.Data.DataView.Create("BOM","V_DUPLICATE",22,V.Local.sFilter,"CTIER ASC")
		F.Intrinsic.Control.For(V.Local.iC,V.DataView.BOM!V_DUPLICATE.RowCount--,0,-1)
			F.Data.DataTable.DeleteRow("BOM",V.DataView.BOM!V_DUPLICATE(V.Local.iC).DATATABLEINDEX)
		F.Intrinsic.Control.Next(V.Local.iC)
		F.Data.DataView.Close("BOM","V_DUPLICATE")
	f.Intrinsic.Control.Else
		v.Local.sLastParent.Set(V.DataView.BOM!V_DUPLICATES(V.Local.iCount).BPARENT!FIELDVALTRIM)
	F.Intrinsic.Control.EndIf
	'set variable equal to bparent for this row to check against BPARENT for next row.
		
f.Intrinsic.Control.Next(v.Local.iCount)

F.Data.DataView.Close("BOM","V_DUPLICATES")

f.Intrinsic.Control.ExitSub

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.deduplicate.End

Program.Sub.RouterCostBuildup.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.local.serror.declare
	V.Local.iCount.Declare
	V.Local.fLabor.Declare
	v.Local.fOuts.Declare
	v.Local.fMat.Declare
	v.Local.fTotal1.Declare
	V.Local.fTotal2.Declare
	v.Local.fTotal3.Declare
	v.Local.fTotal4.Declare
	v.Local.fDifference.Declare
	v.Local.fMargin.Declare
	
	
	'f.Intrinsic.UI.ChangeWaitStatus("Calculating prices and margins......")
	
	'create the views for totals and markups
	F.Data.DataView.Create("ROUTER","V_RCOST",22,"TYPE = 'L'","")
	F.Data.DataView.Create("ROUTER","V_RTOTAL",22,"TYPE = 'T'","")
	F.Data.DataView.Create("ROUTER","V_RMARKUP",22,"TYPE = 'M'","")
	
	F.Intrinsic.Control.If(V.Datatable.ROUTER.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No record found","Attention")	
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	
	
	'copy in the data from v_MARKUP1 field at a time so it's all in the right spot
	f.Data.DataTable.AddRow("BOMMARKUP","TYPE","LABOR","COST",1.00,"MARKUP1",V.DataView.ROUTER!V_RMARKUP(0).ROUTER!FIELDVALFLOAT,"MARKUP2",V.DataView.ROUTER!V_RMARKUP(0).QTY!FIELDVALFLOAT,"MARKUP3",V.DataView.ROUTER!V_RMARKUP(0).DIR_COST!FIELDVALFLOAT,"MARKUP4",V.DataView.ROUTER!V_RMARKUP(0).COST!FIELDVALFLOAT)
	F.Data.DataTable.AddRow("BOMMARKUP","TYPE","MATERIAL","COST",1.00,"MARKUP1",V.DataView.ROUTER!V_RMARKUP(0).MATERIAL!FIELDVALFLOAT,"MARKUP2",V.DataView.ROUTER!V_RMARKUP(0).OUTSIDE!FIELDVALFLOAT,"MARKUP3",V.DataView.ROUTER!V_RMARKUP(0).LABOR!FIELDVALFLOAT,"MARKUP4",V.DataView.ROUTER!V_RMARKUP(0).LABOR_HOURS!FIELDVALFLOAT)
	f.Data.DataTable.AddRow("BOMMARKUP","TYPE","OUTSIDE","COST",1.00,"MARKUP1",V.DataView.ROUTER!V_RMARKUP(0).OVERHEAD!FIELDVALFLOAT,"MARKUP2",V.DataView.ROUTER!V_RMARKUP(0).TIME_QTY!FIELDVALFLOAT,"MARKUP3",V.DataView.ROUTER!V_RMARKUP(0).GP%-1!FIELDVALFLOAT,"MARKUP4",V.DataView.ROUTER!V_RMARKUP(0).PRICE-1!FIELDVALFLOAT)	
	
	F.Intrinsic.Control.For(V.Local.iCount,0,V.DataView.ROUTER!V_RTOTAL.RowCount--,1)
		'getting price for MARKUP1 - the process is the same for each block getting the next sell price for this quantity - then loop to the next quantity.
		'sum labor and overhead, mult by labor markup
		f.Intrinsic.Math.Add(v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).LABOR!FIELDVALFLOAT,v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).OVERHEAD!FIELDVALFLOAT,V.Local.fLabor)
		F.Intrinsic.Math.Mult(V.Local.fLabor,V.DataTable.BOMMARKUP(0).MARKUP1!FIELDVALFLOAT,V.Local.fLabor)
		'multiply material by material markup
		F.Intrinsic.Math.Mult(v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).MATERIAL!FIELDVALFLOAT,V.DataTable.BOMMARKUP(1).MARKUP1!FIELDVALFLOAT,V.Local.fMat)
		'multiply outside by outside markup
		F.Intrinsic.Math.Mult(v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).OUTSIDE!FIELDVALFLOAT,V.DataTable.BOMMARKUP(2).MARKUP1!FIELDVALFLOAT,V.Local.fOuts)
		'add all 3 together
		f.Intrinsic.Math.Add(v.Local.fLabor,v.Local.fMat,v.Local.fOuts,v.Local.fTotal1)
	
		
		'getting price for MARKUP2
		f.Intrinsic.Math.Add(v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).LABOR!FIELDVALFLOAT,v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).OVERHEAD!FIELDVALFLOAT,V.Local.fLabor)
		F.Intrinsic.Math.Mult(V.Local.fLabor,V.DataTable.BOMMARKUP(0).MARKUP2!FIELDVALFLOAT,V.Local.fLabor)
		F.Intrinsic.Math.Mult(v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).MATERIAL!FIELDVALFLOAT,V.DataTable.BOMMARKUP(1).MARKUP2!FIELDVALFLOAT,V.Local.fMat)
		F.Intrinsic.Math.Mult(v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).OUTSIDE!FIELDVALFLOAT,V.DataTable.BOMMARKUP(2).MARKUP2!FIELDVALFLOAT,V.Local.fOuts)
		f.Intrinsic.Math.Add(v.Local.fLabor,v.Local.fMat,v.Local.fOuts,v.Local.fTotal2)
	
		
		'filling in price and GPM% for MARKUP3
		f.Intrinsic.Math.Add(v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).LABOR!FIELDVALFLOAT,v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).OVERHEAD!FIELDVALFLOAT,V.Local.fLabor)
		F.Intrinsic.Math.Mult(V.Local.fLabor,V.DataTable.BOMMARKUP(0).MARKUP3!FIELDVALFLOAT,V.Local.fLabor)
		F.Intrinsic.Math.Mult(v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).MATERIAL!FIELDVALFLOAT,V.DataTable.BOMMARKUP(1).MARKUP3!FIELDVALFLOAT,V.Local.fMat)
		F.Intrinsic.Math.Mult(v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).OUTSIDE!FIELDVALFLOAT,V.DataTable.BOMMARKUP(2).MARKUP3!FIELDVALFLOAT,V.Local.fOuts)
		f.Intrinsic.Math.Add(v.Local.fLabor,v.Local.fMat,v.Local.fOuts,v.Local.fTotal3)
	
		
		'filling in price and GPM% for MARKUP4
		f.Intrinsic.Math.Add(v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).LABOR!FIELDVALFLOAT,v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).OVERHEAD!FIELDVALFLOAT,V.Local.fLabor)
		F.Intrinsic.Math.Mult(V.Local.fLabor,V.DataTable.BOMMARKUP(0).MARKUP4!FIELDVALFLOAT,V.Local.fLabor)
		F.Intrinsic.Math.Mult(v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).MATERIAL!FIELDVALFLOAT,V.DataTable.BOMMARKUP(1).MARKUP4!FIELDVALFLOAT,V.Local.fMat)
		F.Intrinsic.Math.Mult(v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).OUTSIDE!FIELDVALFLOAT,V.DataTable.BOMMARKUP(2).MARKUP4!FIELDVALFLOAT,V.Local.fOuts)
		f.Intrinsic.Math.Add(v.Local.fLabor,v.Local.fMat,v.Local.fOuts,v.Local.fTotal4)
		
		'add to the datatable
		f.Data.DataTable.AddRow("BOMPRICE","QUANTITY",V.DataView.ROUTER!V_RTOTAL(V.Local.iCount).QTY!FIELDVALFLOAT,"UNIT_COST",V.DataView.ROUTER!V_RTOTAL(V.Local.iCount).COST!FIELDVALFLOAT,"PRICE_1",V.Local.fTotal1,"PRICE_2",V.Local.fTotal2,"PRICE_3",V.Local.fTotal3,"PRICE_4",V.Local.fTotal4)
		
		f.Data.DataTable.AddRow("BOMDETAIL","TYPE",v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).TYPE!FIELDVALSTRING,"ROUTER",v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).ROUTER!FIELDVALSTRING,"QTY",v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).QTY!FIELDVALFLOAT,"DIR_COST",v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).DIR_COST!FIELDVALFLOAT,"COST",v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).COST!FIELDVALFLOAT,"MATERIAL",v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).MATERIAL!FIELDVALFLOAT,"OUTSIDE",v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).OUTSIDE!FIELDVALFLOAT,"LABOR",v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).LABOR!FIELDVALFLOAT,"LABOR_HOURS",v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).LABOR_HOURS!FIELDVALFLOAT,"OVERHEAD",v.DataView.ROUTER!V_RTOTAL(v.Local.iCount).OVERHEAD!FIELDVALFLOAT)
	
	F.Intrinsic.Control.Next(V.Local.iCount)
	
	F.Data.DataTable.Close("ROUTER")
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.RouterCostBuildup.End

Program.Sub.txtParentDescr_Change.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sFilter.Declare
	v.Local.sPart.Declare
	
	f.Intrinsic.Control.if(v.DataTable.BOM.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'if the user changes the description of the BOM parent at the top of the TreeView.
	f.Intrinsic.Control.If(v.DataTable.BOM.RowCount,>,0)
		f.Intrinsic.String.GSSPartString(v.Screen.Form!txtParent.text,v.Screen.Form!txtParentRev.text,v.Local.sPart)
		f.Intrinsic.String.Build("BPARENT = '{0}'",V.Local.sPart.PSQLFriendly,v.Local.sFilter)
		F.Data.DataView.Create("BOM","TOP_LEVEL",22,v.Local.sFilter,"")
		F.Data.DataView.SetValue("BOM","TOP_LEVEL",-1,"DESCR_BP",v.Local.sPart)
		F.Data.DataView.Close("BOM","TOP_LEVEL")
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtParentDescr_Change.End

Program.Sub.bom_save_prices.Start
'From GGC_PRICES_RowCellClick
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sPrice.Declare
	V.Local.sQuantity.Declare
	V.Local.sFilter.Declare
	v.Local.sRet.Declare
	v.Local.bSelectFlag.Declare
	V.Local.bColumn.Declare(Boolean,False)
	
	
	'controlling the boolean fields in the grid determines which quantities/prices will be included in the quote
	f.Intrinsic.Control.SelectCase(v.Args.column)
		f.Intrinsic.Control.Case("S1")
			v.Local.sPrice.Set(v.DataTable.BOMPRICE(v.Args.RowIndex).PRICE_1!FIELDVALFLOAT)
			v.Local.sQuantity.Set(v.DataTable.BOMPRICE(v.Args.RowIndex).QUANTITY!FIELDVALFLOAT)
			v.Local.bSelectFlag.Set(V.DataTable.BOMPRICE(V.Args.RowIndex).S1!FIELDVAL)
			f.Data.DataTable.SetValue("BOMPRICE",v.Args.RowIndex,"S1",v.local.bSelectFlag.Not)
			'make sure none of the other prices in this row are selected
			F.Intrinsic.Control.If(V.DataTable.BOMPRICE(V.Args.RowIndex).S1!FIELDVAL,=,True)
				f.Data.DataTable.SetValue("BOMPRICE",v.Args.RowIndex,"S2",False,"S3",False,"S4",False,"S5",False)
			f.Intrinsic.Control.EndIf
			v.Local.bColumn.Set(True)	
			
		F.Intrinsic.Control.Case("S2")
			v.Local.sPrice.Set(v.DataTable.BOMPRICE(v.Args.RowIndex).PRICE_2!FIELDVALFLOAT)
			v.Local.sQuantity.Set(v.DataTable.BOMPRICE(v.Args.RowIndex).QUANTITY!FIELDVALFLOAT)
			v.Local.bSelectFlag.Set(V.DataTable.BOMPRICE(V.Args.RowIndex).S2!FIELDVAL)
			f.Data.DataTable.SetValue("BOMPRICE",v.Args.RowIndex,"S2",v.Local.bSelectFlag.Not)
			'make sure none of the other prices in this row are selected
			f.Intrinsic.Control.If(v.DataTable.BOMPRICE(V.Args.RowIndex).S2!FIELDVAL,=,True)
				f.Data.DataTable.SetValue("BOMPRICE",v.Args.RowIndex,"S1",False,"S3",False,"S4",False,"S5",False)
			f.Intrinsic.Control.EndIf
			v.Local.bColumn.Set(True)
			'f.Data.DataTable.SetValue("BOMPRICE",V.Args.RowIndex,"S2",True)
		F.Intrinsic.Control.Case("S3")
			v.Local.sPrice.Set(v.DataTable.BOMPRICE(v.Args.RowIndex).PRICE_3!FIELDVALFLOAT)
			v.Local.sQuantity.Set(v.DataTable.BOMPRICE(v.Args.RowIndex).QUANTITY!FIELDVALFLOAT)
			v.Local.bSelectFlag.Set(V.DataTable.BOMPRICE(V.Args.RowIndex).S3!FIELDVAL)
			f.Data.DataTable.SetValue("BOMPRICE",v.Args.RowIndex,"S3",v.Local.bSelectFlag.Not)
			'make sure none of the other prices in this row are selected
			f.Intrinsic.Control.If(v.DataTable.BOMPRICE(V.Args.RowIndex).S3!FIELDVAL,=,True)
				f.Data.DataTable.SetValue("BOMPRICE",v.Args.RowIndex,"S1",False,"S2",False,"S4",False,"S5",False)
			f.Intrinsic.Control.EndIf
			v.Local.bColumn.Set(True)
			'f.Data.DataTable.SetValue("BOMPRICE",V.Args.RowIndex,"S3",True)
		F.Intrinsic.Control.Case("S4")
			v.Local.sPrice.Set(v.DataTable.BOMPRICE(v.Args.RowIndex).PRICE_4!FIELDVALFLOAT)
			v.Local.sQuantity.Set(v.DataTable.BOMPRICE(v.Args.RowIndex).QUANTITY!FIELDVALFLOAT)
			v.Local.bSelectFlag.Set(V.DataTable.BOMPRICE(V.Args.RowIndex).S4!FIELDVAL)
			f.Data.DataTable.SetValue("BOMPRICE",v.Args.RowIndex,"S4",v.Local.bSelectFlag.Not)
			'make sure none of the other prices in this row are selected
			f.Intrinsic.Control.If(v.DataTable.BOMPRICE(V.Args.RowIndex).S4!FIELDVAL,=,True)
				f.Data.DataTable.SetValue("BOMPRICE",v.Args.RowIndex,"S1",False,"S2",False,"S3",False,"S5",False)
			f.Intrinsic.Control.EndIf
			v.Local.bColumn.Set(True)
			'f.Data.DataTable.SetValue("BOMPRICE",V.Args.RowIndex,"S4",True)
		F.Intrinsic.Control.Case("S5")
			v.Local.sPrice.Set(v.DataTable.BOMPRICE(v.Args.RowIndex).PRICE_5!FIELDVALFLOAT)
			v.Local.sQuantity.Set(v.DataTable.BOMPRICE(v.Args.RowIndex).QUANTITY!FIELDVALFLOAT)
			v.Local.bSelectFlag.Set(V.DataTable.BOMPRICE(V.Args.RowIndex).S5!FIELDVAL)
			f.Data.DataTable.SetValue("BOMPRICE",v.Args.RowIndex,"S5",v.Local.bSelectFlag.Not)
			'make sure none of the other prices in this row are selected
			f.Intrinsic.Control.If(v.DataTable.BOMPRICE(V.Args.RowIndex).S5!FIELDVAL,=,True)
				f.Data.DataTable.SetValue("BOMPRICE",v.Args.RowIndex,"S1",False,"S2",False,"S3",False,"S4",False)
			f.Intrinsic.Control.EndIf
			v.Local.bColumn.Set(True)
	f.Intrinsic.Control.EndSelect
		
	F.Intrinsic.Control.If(V.DataTable.BUILDQTY.RowCount,>,0,AND,V.Local.bColumn,=,True)
		F.Intrinsic.String.Build("QUANTITY = '{0}'",V.Local.sQuantity,V.Local.sFilter)
		F.Data.DataView.SetFilter("BUILDQTY","V_BUILDQTY",V.Local.sFilter)
		f.Intrinsic.Control.If(v.DataView.BUILDQTY!V_BUILDQTY.RowCount,>,0)
			F.Data.DataView.SetValue("BUILDQTY","V_BUILDQTY",0,"PRICE",V.Local.sPrice)
		f.Intrinsic.Control.else
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox("Quantity mismatched. Please close this Cost screen, verify Quantities grid, Save Router and rebuild Cost","Attention")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.bom_save_prices.End

'------------------------Conversion Form-----------------------------------------------
Program.Sub.Conversion_UnLoad.Start
gui.Conversion..Visible(False)
Program.Sub.Conversion_UnLoad.End

Program.Sub.cmdSelectRouterCost_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.fHold.Declare

	'udpate the Router Cost on the conversion form
	f.Intrinsic.Control.If(v.DataTable.Child.RowCount,=,0)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.If(v.Global.iBomRow,>,v.DataTable.Child.RowCount--)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf

	v.Local.fHold.set(v.DataTable.CHILD(v.Global.iBomRow).PURCHASE_FACTOR!FIELDVALString)
	f.Intrinsic.Control.If(v.DataTable.CHILD(v.Global.iBomRow).LMO!FIELDVALTrim,=,"M")
		f.Intrinsic.Control.If(v.Local.fHold,>,0)
			f.Data.DataTable.SetValue("CHILD",V.Global.iBomRow,"COST",V.Screen.Conversion!txtRtrInv.Text,"PURCH_COST",V.Screen.Conversion!txtRtrPur.Text)						
		f.Intrinsic.Control.Else
			f.Data.DataTable.SetValue("CHILD",V.Global.iBomRow,"COST",V.Screen.Conversion!txtRtrInv.Text)		
		f.Intrinsic.Control.EndIf		
	F.Intrinsic.Control.EndIf
	
	f.Data.DataTable.Acceptchanges("Child")
	GUI.Conversion..Visible(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdSelectRouterCost_Click.End

Program.Sub.cmdSelectInventoryCost_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.fHold.Declare

	'udpate the Router Cost on the conversion form
	f.Intrinsic.Control.If(v.DataTable.Child.RowCount,=,0)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.If(v.Global.iBomRow,>,v.DataTable.Child.RowCount--)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	v.Local.fHold.set(v.DataTable.CHILD(v.Global.iBomRow).PURCHASE_FACTOR!FIELDVALString)
	f.Intrinsic.Control.If(v.DataTable.CHILD(v.Global.iBomRow).LMO!FIELDVALTrim,=,"M")
		f.Intrinsic.Control.If(v.Local.fHold,>,0)
			f.Data.DataTable.SetValue("CHILD",V.Global.iBomRow,"COST",V.Screen.Conversion!txtInvInv.Text,"PURCH_COST",V.Screen.Conversion!txtInvPur.Text)			
		f.Intrinsic.Control.Else
			f.Data.DataTable.SetValue("CHILD",V.Global.iBomRow,"COST",V.Screen.Conversion!txtInvInv.Text)
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf

	f.Data.DataTable.Acceptchanges("Child")
	GUI.Conversion..Visible(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdSelectInventoryCost_Click.End

Program.Sub.txtRtrPur_LostFocus.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.fInvCost.Declare
	v.Local.sInvCost.Declare
	v.Local.fHold.Declare
	
	'udpate the Router Cost on the conversion form
	f.Intrinsic.Control.If(v.DataTable.Child.RowCount,=,0)
		f.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.If(v.Global.iBomRow,>,v.DataTable.Child.RowCount--)
		f.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf


	v.Local.fHold.set(v.DataTable.CHILD(v.Global.iBomRow).PURCHASE_FACTOR!FIELDVALString)
	f.Intrinsic.Control.If(v.Local.fHold,>,0)

		v.Local.fHold.Set(V.Screen.Conversion!txtFactor.TEXT)
		f.Intrinsic.Control.If(v.Local.fHold,<>,0)
			F.Intrinsic.Math.Div(V.Screen.Conversion!txtRtrPur.TEXT,v.Local.fHold,V.Local.fInvCost)
			f.Intrinsic.String.Format(v.Local.fInvCost,"##.0000",v.Local.sInvCost)
			gui.Conversion.txtRtrInv.Text(v.Local.sInvCost)		
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Purchase Factor is 0.","Attention")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.EndIf
		
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Purchase Factor is 0.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtRtrPur_LostFocus.End

Program.Sub.GGC_Quote_CellValueChanged.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.LocaL.sUM.Declare
	V.Local.sPARTDESC.Declare
	v.Local.sQty.Declare
	v.Local.sPrice.Declare
	v.Local.sExtended.Declare	
	v.Local.sLine.Declare
	v.Local.sSuffix.Declare
	v.Local.bNumeric.Declare
	v.Local.sFilter.Declare
	v.Local.iLine.Declare
	v.Local.sRet.Declare
	
	
	f.Intrinsic.Control.SelectCase(v.Args.Column.UCase)
		f.Intrinsic.Control.Case("UM")
			v.Local.sUM.Set(v.DataTable.ORDUPLLINES(v.Args.RowIndex).UM!FieldValTrim)
			v.Local.sUM.Set(v.Local.sUM.left2)
			f.Intrinsic.Control.BlockEvents
			f.Data.DataTable.SetValue("ORDUPLLines",v.Args.RowIndex,"UM",v.Local.sUM.UCase)
			f.Intrinsic.Control.UnBlockEvents

		f.Intrinsic.Control.CaseAny("QTY","PRICE")	
			f.Intrinsic.String.Format(V.DataTable.ORDUPLLINES(V.Args.RowIndex).Qty!FieldValString,"000000000.0000",v.Local.sQty)
			f.Intrinsic.String.Replace(v.Local.sQty,".","",v.Local.sQty)
			'Price
			f.Intrinsic.String.Format(V.DataTable.ORDUPLLINES(V.Args.RowIndex).Price!FieldValString,"0000000000.000000",v.Local.sPrice)
			f.Intrinsic.String.Replace(v.Local.sPrice,".","",v.Local.sPrice)
			'Extended
			F.Intrinsic.String.Format(v.DataTable.ORDUPLLINES(V.Args.RowIndex).Extended!FieldValString,"0000000000.000000",V.Local.sExtended)
			F.Intrinsic.String.Replace(V.Local.sExtended,".","",V.Local.sExtended)	
			f.Intrinsic.Control.BlockEvents			
				f.Data.DataTable.SetValue("ORDUPLLines",v.Args.RowIndex,"QtyOrdered",v.Local.sQty,"QuotedPrice",v.Local.sPrice,"OverridePrice",v.Local.sPrice,"Extension",v.Local.sExtended)		
			f.Intrinsic.Control.UnBlockEvents
			f.Data.DataTable.AcceptChanges("ORDUPLLINES")
	
		F.Intrinsic.Control.Case("FILLER1")
			
			v.Local.sLine.Set(v.DataTable.ORDUPLLINES(V.Args.RowIndex).LineNumber!FieldValTrim)
			v.Local.sSuffix.Set(v.DataTable.ORDUPLLINES(V.Args.RowIndex).Filler1!FieldValTrim)
			f.Intrinsic.String.LPad(v.Local.sLine,"0",3,v.Local.sLine)
			f.Intrinsic.Math.IsNumeric(v.Local.sSuffix,v.Local.bNumeric)			
			'Suffix is not numeric
			f.Intrinsic.Control.If(v.Local.bNumeric.Not)	
			
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("Suffix must be numeric.","Attention")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)			
				f.Data.DataTable.SetValue("OrdUplLines",v.Args.RowIndex,"Filler1","")
			
			f.Intrinsic.Control.EndIf				
	
		F.Intrinsic.Control.Case("LINENUMBER")
			v.Local.sLine.Set(v.DataTable.ORDUPLLINES(V.Args.RowIndex).LineNumber!FieldValTrim)
			v.Local.sSuffix.Set(v.DataTable.ORDUPLLINES(V.Args.RowIndex).Filler1!FieldValTrim)
			f.Intrinsic.String.LPad(v.Local.sLine,"0",3,v.Local.sLine)
			f.Intrinsic.Math.IsNumeric(v.Local.sLine,v.Local.bNumeric)
			
			'LINENUMBER is not numeric
			f.Intrinsic.Control.If(v.Local.bNumeric.Not)	
			
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("Line must be numeric.","Attention")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)			
				f.Data.DataTable.SetValue("OrdUplLines",v.Args.RowIndex,"LineNumber","")
			
			f.Intrinsic.Control.EndIf							
			
	f.Intrinsic.Control.EndSelect
	
	f.Data.DataTable.AcceptChanges("ORDUPLLINES")
	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GGC_Quote_CellValueChanged.End

'-----------------End Conversion Form--------------------------------------------------
Program.Sub.optInsertAbove_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	
	gui.Form.optInsertAbove.Value(1)
	gui.Form.txtManualSeq.Enabled(False)
	gui.Form.txtManualSeq.BackColor(v.Color.LtGray)
	
	gui.NonInv.optNonInvInsertAbove.Value(1)
	gui.NonInv.txtNonInvManualSeq.Enabled(False)
	gui.NonInv.txtNonInvManualSeq.BackColor(v.Color.LtGray)	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.optInsertAbove_Click.End

Program.Sub.optInsertBelow_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	
	gui.Form.optInsertBelow.Value(1)	
	gui.Form.txtManualSeq.Enabled(False)
	gui.Form.txtManualSeq.BackColor(v.Color.LtGray)
	
	gui.NonInv.optNonInvInsertBelow.Value(1)
	gui.NonInv.txtNonInvManualSeq.Enabled(False)
	gui.NonInv.txtNonInvManualSeq.BackColor(v.Color.LtGray)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.optInsertBelow_Click.End

Program.Sub.optInsertManual_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	gui.Form.optInsertManual.Value(1)
	gui.Form.txtManualSeq.Enabled(True)
	gui.Form.txtManualSeq.BackColor(v.Color.White)
	gui.Form.txtManualSeq.SetFocus
	
	gui.NonInv.optNonInvInsertManual.Value(1)
	gui.NonInv.txtNonInvManualSeq.Enabled(True)
	gui.NonInv.txtNonInvManualSeq.BackColor(v.Color.White)
	gui.NonInv.txtNonInvManualSeq.SetFocus
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.optInsertManual_Click.End

Program.Sub.txtManualSeq_LostFocus.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSeq.Declare
	
	f.Intrinsic.Control.If(v.Screen.Form!txtManualSeq.Text.Trim,<>,"")
		f.Intrinsic.String.LPad(v.Screen.Form!txtManualSeq.Text.Trim,"0",6,v.Local.sSeq)
		gui.Form.txtManualSeq.Text(v.Local.sSeq)
		gui.NonInv.txtNonInvManualSeq.Text(v.Local.sSeq)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.UnBlockEvents
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtManualSeq_LostFocus.End

Program.Sub.picRtrDocs_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iLinkID.Declare
	v.Local.sLinkID.Declare
	V.Local.iPID.Declare
	v.Local.sPart.Declare
	v.Local.sMsg.Declare
	v.Local.iRet.Declare
	
	f.Intrinsic.Control.If(v.Screen.Form!txtFocusParent.Text.Trim,=,"")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	gui.Form.picRtrDocs.Enabled(False)
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.Text.Trim,v.Screen.Form!txtFocusRev.Text.Trim,v.Local.sPart)

	F.Global.DocumentControl.GetLinkID(v.Local.sPart,35,v.Local.iLinkID)
	f.Intrinsic.Control.If(v.Local.iLinkID,<>,-1)		
		f.Intrinsic.Control.CallSub(Set_Doc_ON,"sControl","picRTRDocs")	
		f.Intrinsic.String.LPad(v.Local.iLinkID,"0",9,v.Local.sLinkID)
		F.Global.DocumentControl.Invoke(v.Local.sPart,35,"Router Document Control",V.Local.iPID)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("Create Document Control for this Router {0}?",v.Local.sPart.Trim,v.Local.sMsg)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Document Control Not Found",4,v.Local.iRet)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxYes)			
			F.Global.DocumentControl.CreateReference(v.Local.sPart,35,v.Local.iLinkID)			
			f.Intrinsic.Control.CallSub(Set_Doc_ON,"sControl","picRTRDocs")	
			F.Global.DocumentControl.Invoke(v.Local.sPart,35,"Router Document Control",V.Local.iPID)						
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.CallSub(Set_Doc_OFF,"sControl","picRTRDocs")			
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	f.Intrinsic.UI.Sleep(2)
	gui.Form.picRtrDocs.Enabled(True)

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picRtrDocs_Click.End

Program.Sub.picBomDocs_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iLinkID.Declare
	v.Local.sLinkID.Declare
	V.Local.iPID.Declare
	v.Local.sPart.Declare
	v.Local.sMsg.Declare
	v.Local.iRet.Declare
	
	f.Intrinsic.Control.If(v.Screen.Form!txtParent.Text.Trim,=,"")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	gui.Form.picBomDocs.Enabled(False)
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtParent.Text.Trim,v.Screen.Form!txtParentRev.Text.Trim,v.Local.sPart)

	F.Global.DocumentControl.GetLinkID(v.Local.sPart,30,v.Local.iLinkID)
	f.Intrinsic.Control.If(v.Local.iLinkID,<>,-1)		
		f.Intrinsic.Control.CallSub(Set_Doc_ON,"sControl","picBomDocs")	
		f.Intrinsic.String.LPad(v.Local.iLinkID,"0",9,v.Local.sLinkID)
		F.Global.DocumentControl.Invoke(v.Local.sPart,30,"Part/Bom Document Control",V.Local.iPID)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("Create Document Control for this Bom {0}?",v.Local.sPart.Trim,v.Local.sMsg)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Document Control Not Found",4,v.Local.iRet)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxYes)			
			F.Global.DocumentControl.CreateReference(v.Local.sPart,30,v.Local.iLinkID)			
			f.Intrinsic.Control.CallSub(Set_Doc_ON,"sControl","picBomDocs")	
			F.Global.DocumentControl.Invoke(v.Local.sPart,30,"Part/Bom Document Control",V.Local.iPID)						
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.CallSub(Set_Doc_OFF,"sControl","picBomDocs")			
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.UI.Sleep(2)
	gui.Form.picBomDocs.Enabled(True)

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picBomDocs_Click.End

Program.Sub.Set_Doc_ON.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'Set logo
	f.Intrinsic.Control.If(v.Global.bDocsON)
		gui.Form.[v.Args.sControl].Picture(v.Global.sDocsON)
	f.Intrinsic.Control.Else
		gui.Form.[v.Args.sControl].BackColor(v.Color.Green)
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Set_Doc_ON.End

Program.Sub.Set_Doc_OFF.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'UnSet logo
	f.Intrinsic.Control.If(v.Global.bDocsOFF)
		gui.Form.[v.Args.sControl].Picture(v.Global.sDocsOFF)
	f.Intrinsic.Control.Else
		gui.Form.[v.Args.sControl].BackColor(v.Color.LtGray)
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Set_Doc_OFF.End

Program.Sub.Check_RTR_Doc.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iLinkID.Declare
	v.Local.sPart.Declare
	
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.Text.Trim,v.Screen.Form!txtFocusRev.Text.Trim,v.Local.sPart)

	F.Global.DocumentControl.GetLinkID(v.Local.sPart,35,v.Local.iLinkID)
	f.Intrinsic.Control.If(v.Local.iLinkID,<>,-1)		
		f.Intrinsic.Control.CallSub(Set_Doc_ON,"sControl","picRTRDocs")	
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Set_Doc_OFF,"sControl","picRTRDocs")	
	f.Intrinsic.Control.EndIf
Program.Sub.Check_RTR_Doc.End

Program.Sub.Check_Bom_Doc.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iLinkID.Declare
	v.Local.sPart.Declare
	
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtParent.Text.Trim,v.Screen.Form!txtParentRev.Text.Trim,v.Local.sPart)

	F.Global.DocumentControl.GetLinkID(v.Local.sPart,30,v.Local.iLinkID)
	f.Intrinsic.Control.If(v.Local.iLinkID,<>,-1)		
		f.Intrinsic.Control.CallSub(Set_Doc_ON,"sControl","picBomDocs")	
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(Set_Doc_OFF,"sControl","picBomDocs")	
	f.Intrinsic.Control.EndIf
Program.Sub.Check_Bom_Doc.End

Program.Sub.picLabel_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iX.Declare
	v.Local.iY.Declare
	v.Local.sItem.Declare
	
	f.Intrinsic.Control.If(v.Global.bQtyLabel.Not)
		v.Local.sItem.Set("         Qty")
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("{0}     Qty",v.ASCII.169,v.Local.sItem)
	f.Intrinsic.Control.EndIf
	Gui.Form..ContextMenuSetItemText("LAB","Qty",v.Local.sItem)
	
	f.Intrinsic.Control.If(v.Global.bPartLabel.Not)
		v.Local.sItem.Set("         Part")
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("{0}     Part",v.ASCII.169,v.Local.sItem)
	f.Intrinsic.Control.EndIf
	Gui.Form..ContextMenuSetItemText("LAB","Part",v.Local.sItem)

	f.Intrinsic.Control.If(v.Global.bDescrLabel.Not)
		v.Local.sItem.Set("         Description")
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("{0}     Description.",v.ASCII.169,v.Local.sItem)
	f.Intrinsic.Control.EndIf	
	Gui.Form..ContextMenuSetItemText("LAB","Descr",v.Local.sItem)
	
	f.Intrinsic.Control.If(v.Global.bUMLabel.Not)
		v.Local.sItem.Set("         UM")
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("{0}     UM",v.ASCII.169,v.Local.sItem)
	f.Intrinsic.Control.EndIf	
	Gui.Form..ContextMenuSetItemText("LAB","UM",v.Local.sItem)
	
	f.Intrinsic.Control.If(v.Global.bSourceLabel.Not)
		v.Local.sItem.Set("         Source")
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("{0}     Source",v.ASCII.169,v.Local.sItem)
	f.Intrinsic.Control.EndIf	
	Gui.Form..ContextMenuSetItemText("LAB","Source",v.Local.sItem)
	
	f.Intrinsic.Control.If(v.Global.bCategoryLabel.Not)
		v.Local.sItem.Set("         Category")
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("{0}     Category",v.ASCII.169,v.Local.sItem)
	f.Intrinsic.Control.EndIf	
	Gui.Form..ContextMenuSetItemText("LAB","Category",v.Local.sItem)
	
	f.Intrinsic.Control.If(v.Global.bCostLabel.Not)
		v.Local.sItem.Set("         Cost")
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("{0}     Cost",v.ASCII.169,v.Local.sItem)
	f.Intrinsic.Control.EndIf	
	Gui.Form..ContextMenuSetItemText("LAB","Cost",v.Local.sItem)
	
	f.Intrinsic.Control.If(v.Global.bPLLabel.Not)
		v.Local.sItem.Set("         PL")
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("{0}     PL",v.ASCII.169,v.Local.sItem)
	f.Intrinsic.Control.EndIf	
	Gui.Form..ContextMenuSetItemText("LAB","PL",v.Local.sItem)	
	
	f.Intrinsic.Control.If(v.Global.bLocLabel.Not)
		v.Local.sItem.Set("         Loc")
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("{0}     Loc",v.ASCII.169,v.Local.sItem)
	f.Intrinsic.Control.EndIf	
	Gui.Form..ContextMenuSetItemText("LAB","LOC",v.Local.sItem)		

	f.Intrinsic.API.GetMousePosition(v.Local.iX,v.Local.iY)
	f.Intrinsic.Math.Sub(v.Local.iX,100,v.Local.iX)
	f.Intrinsic.Math.Add(v.Local.iY,15,v.Local.iY)	
	gui.Form..ContextMenuShow("LAB",v.Local.iX,v.Local.iY)	

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picLabel_Click.End

Program.Sub.picFieldOrder_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	gui.FieldOrder..Visible(True)
	gui.FieldOrder..AlwaysOnTop(True)

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picFieldOrder_Click.End

Program.Sub.picDecimal_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iX.Declare
	v.Local.iY.Declare
	v.Local.sItem.Declare
	v.Local.sDisplay.Declare
	
	Gui.Form..ContextMenuSetItemText("DEC","0","        0")
	Gui.Form..ContextMenuSetItemText("DEC","1","        1")
	Gui.Form..ContextMenuSetItemText("DEC","2","        2")
	Gui.Form..ContextMenuSetItemText("DEC","3","        3")
	Gui.Form..ContextMenuSetItemText("DEC","4","        4")
	Gui.Form..ContextMenuSetItemText("DEC","5","        5")
	Gui.Form..ContextMenuSetItemText("DEC","6","        6")
	
	Gui.Form..ContextMenuSetItemText("DEC","00","        0")
	Gui.Form..ContextMenuSetItemText("DEC","10","        1")
	Gui.Form..ContextMenuSetItemText("DEC","20","        2")
	Gui.Form..ContextMenuSetItemText("DEC","30","        3")
	Gui.Form..ContextMenuSetItemText("DEC","40","        4")
	Gui.Form..ContextMenuSetItemText("DEC","50","        5")
	Gui.Form..ContextMenuSetItemText("DEC","60","        6")
	
	Gui.Form..ContextMenuSetItemText("DEC","000","        0")
	Gui.Form..ContextMenuSetItemText("DEC","100","        1")
	Gui.Form..ContextMenuSetItemText("DEC","200","        2")
	Gui.Form..ContextMenuSetItemText("DEC","300","        3")
	Gui.Form..ContextMenuSetItemText("DEC","400","        4")
	Gui.Form..ContextMenuSetItemText("DEC","500","        5")
	Gui.Form..ContextMenuSetItemText("DEC","600","        6")	
	
	f.Intrinsic.String.Build("{0}     {1}",v.ASCII.169,v.Global.sDecimalQty,v.Local.sDisplay)
	Gui.Form..ContextMenuSetItemText("DEC",v.Global.sDecimalQty,v.Local.sDisplay)
	
	f.Intrinsic.String.Build("{0}0",v.Global.sDecimalCost,v.Local.sItem)
	f.Intrinsic.String.Build("{0}     {1}",v.ASCII.169,v.Global.sDecimalCost,v.Local.sDisplay)
	Gui.Form..ContextMenuSetItemText("DEC",v.Local.sItem,v.Local.sDisplay)

	f.Intrinsic.String.Build("{0}00",v.Global.sDecimalWeight,v.Local.sItem)
	f.Intrinsic.String.Build("{0}     {1}",v.ASCII.169,v.Global.sDecimalWeight,v.Local.sDisplay)
	Gui.Form..ContextMenuSetItemText("DEC",v.Local.sItem,v.Local.sDisplay)

	f.Intrinsic.API.GetMousePosition(v.Local.iX,v.Local.iY)
	f.Intrinsic.Math.Sub(v.Local.iX,100,v.Local.iX)
	f.Intrinsic.Math.Add(v.Local.iY,15,v.Local.iY)	
	gui.Form..ContextMenuShow("DEC",v.Local.iX,v.Local.iY)	

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picDecimal_Click.End

Program.Sub.lblCoreBom_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	f.Global.General.CallWrapperAsync(50,"BM0020GI/O")
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.lblCoreBom_Click.End

Program.Sub.lblCoreRouter_Click.Start
Program.Sub.lblCoreRouter_Click.End

Program.Sub.picAltBom_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sTop.Declare
	v.Local.sLeft.Declare
	v.Local.sDif.Declare

	gui.POPBOM.cmdClosePop.Caption("Close")

	f.Intrinsic.Control.If(v.Global.bFirstLoadAltBom)
		f.Intrinsic.Control.If(v.Screen.Form!frameTreeBottom.Height,>,v.Screen.POPBOM.Height)
			f.Intrinsic.Math.Sub(v.Screen.Form!frameTreeBottom.Height,v.Screen.POPBOM.Height,v.Local.sDif)
			f.Intrinsic.Math.Add(v.Screen.Form!frameTreeBottom.Top,v.Local.sDif,v.Local.sTop)	
			f.Intrinsic.Math.Add(v.Local.sTop,480,v.Local.sTop)
		f.Intrinsic.Control.Else
			f.Intrinsic.Math.Add(v.Screen.Form!frameTree.Top,v.Screen.Form!frameTreeBottom.Top,v.Local.sTop)
			f.Intrinsic.Math.Add(v.Local.sTop,480,v.Local.sTop)			
		f.Intrinsic.Control.EndIf
		f.Intrinsic.Math.Sub(v.Screen.Form!frameHeader.Width,v.Screen.POPBOM.Width,v.Local.sLeft)
		
		Gui.PopBom..Position(v.Local.sLeft,v.Local.sTop)	
		v.Global.bFirstLoadAltBom.Set(False)	

	f.Intrinsic.Control.EndIf	
	
	
	gui.POPBOM..Visible(True)
	Gui.POPBOM..AlwaysOnTop(True)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picAltBom_Click.End

Program.Sub.Display3Equal.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iEqual.Declare
	v.Local.iTree.Declare
	v.Local.iHeight.Declare
	v.Local.iTreepos.Declare

	'Calculate section size
	f.Intrinsic.Math.IDiv(v.Screen.Form!frameHeader.Width,3,v.Local.iEqual)
	v.Local.iHeight.Set(v.Screen.Form!frameSource.Height)
	gui.Form.frameSource.Size(v.Local.iEqual,v.Local.iHeight)
	v.Local.iHeight.Set(v.Screen.Form!frameMiddle.Height)
	gui.Form.frameMiddle.Size(v.Local.iEqual,v.Local.iHeight)
	f.Intrinsic.Math.Sub(v.Screen.Form!frameHeader.Width,v.Local.iEqual,v.Local.iTree)
	f.Intrinsic.Math.Sub(v.Local.iTree,v.Local.iEqual,v.Local.iTree)
	v.Local.iHeight.Set(v.Screen.Form!frameTree.Height)
	gui.Form.frameTree.Size(v.Local.iTree,v.Local.iHeight)
	
	gui.Form.frameSource.Visible(True)
	gui.Form.frameMiddle.Visible(True)
	gui.Form.frameTree.Visible(True)
	gui.Form.frInsertType.Parent("frameSource")
	gui.Form.frInsertType.Position(105,885)	
	
	'Reposition
	gui.Form.frameMiddle.Position(v.Screen.Form!frameSource.Width,v.Global.iY)
	f.Intrinsic.Math.Add(v.Screen.Form!frameSource.Width,v.Screen.Form!frameMiddle.Width,v.Local.iTreePos)
	gui.Form.frameTree.Position(v.Local.iTreePos,v.Global.iY)

	'Turn pushpin left to Red
	f.Intrinsic.Control.CallSub(Set_PushPin_Red_Left,"sControl","picHideSource")	
	gui.Form.picReSize_Left1.Visible(True)
	gui.Form.picReSize_Right1.Visible(True)	
	
	'Make visible right section
	f.Intrinsic.Control.CallSub(Set_PushPin_Red_Right,"sControl","picHideTree")
	gui.Form.picReSize_Left2.Visible(True)
	gui.Form.picReSize_Right2.Visible(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Display3Equal.End

Program.Sub.picHideTree_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iWidth.Declare
	v.Local.iHeight.Declare
	v.Local.iNewMiddleWidth.Declare
	v.Local.iNewTreeWidth.Declare
	v.Local.inewPos.Declare
	
	gui.Form.picHideTree.Enabled(False)
	f.Intrinsic.Control.If(v.Global.bHideFrameTree)
		'This section make the frame Tree visible
		'Change button appearance
		f.Intrinsic.Control.CallSub(Set_PushPin_Red_Right,"sControl","picHideTree")			
		
		'Make visible
		gui.Form.frameTree.Visible(True)	
		'Calculate width and height
		
		f.Intrinsic.Control.If(v.Screen.Form!frameMiddle.Left,>=,v.Screen.Form!frameTree.left)
			f.Intrinsic.Math.IDiv(v.Screen.Form!frameMiddle.Width,2,v.Local.iNewMiddleWidth)
			f.Intrinsic.Math.Sub(v.Screen.Form!frameMiddle.Width,v.Local.iNewMiddleWidth,v.Local.iNewTreeWidth)
			v.Local.iHeight.Set(v.Screen.Form!frameMiddle.Height)
			'Frame Middle
			gui.Form.frameMiddle.Size(v.Local.iNewMiddleWidth,v.Local.iHeight)
			v.Local.iHeight.Set(v.Screen.Form!frameTree.Height)
			gui.Form.frameTree.Size(v.Local.iNewTreeWidth,v.Local.iHeight)
			'Position frame tree
			f.Intrinsic.Control.If(v.Screen.Form!frameSource.Visible,=,True)
				f.Intrinsic.Math.Add(v.Screen.Form!frameSource.Width,v.Local.iNewMiddleWidth,v.Local.inewPos)				
			f.Intrinsic.Control.Else
				v.Local.inewPos.Set(v.Local.iNewTreeWidth)
			f.Intrinsic.Control.EndIf
			gui.Form.frameTree.Position(v.Local.inewPos,v.Global.iY)
		f.Intrinsic.Control.Else
			'Width: frame Middle = frame Middle - frame Tree
			f.Intrinsic.Math.Sub(v.Screen.Form!frameMiddle.Width,v.Screen.Form!frameTree.Width,v.Local.iWidth)
			v.Local.iHeight.Set(v.Screen.Form!frameMiddle.Height)
			'Set size frame Middle
			gui.Form.frameMiddle.Size(v.Local.iWidth,v.Local.iHeight)
		
		f.Intrinsic.Control.EndIf
		'Visible plus and minus left
		gui.Form.picReSize_Left2.Visible(True)
		gui.Form.picReSize_Right2.Visible(True)
			
		'Toggle hide
		v.Global.bHideFrameTree.Set(False)
		
	f.Intrinsic.Control.Else
	
		'This section make the frame Tree Invisible
		'Change button appearance
		f.Intrinsic.Control.CallSub(Set_PushPin_Green_Right,"sControl","picHideTree")			
		
		'Make Invisible
		gui.Form.frameTree.Visible(False)
		'Calculate width and height
		'Width: frame Middle = frame Middle + frame Tree
		f.Intrinsic.Math.Add(v.Screen.Form!frameMiddle.Width,v.Screen.Form!frameTree.Width,v.Local.iWidth)
		'Height
		v.Local.iHeight.Set(v.Screen.Form!frameMiddle.Height)
		'Set size frame middle
		gui.Form.frameMiddle.Size(v.Local.iWidth,v.Local.iHeight)	
		'InVisible plus and minus left
		gui.Form.picReSize_Left2.Visible(False)
		gui.Form.picReSize_Right2.Visible(False)	

			'Untoggle hide
		v.Global.bHideFrameTree.Set(True)
	f.Intrinsic.Control.EndIf
	gui.Form.picHideTree.Enabled(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picHideTree_Click.End

Program.Sub.picHideSource_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iWidth.Declare
	v.Local.iHeight.Declare
	v.Local.iNewFrameSourceWidth.Declare
	v.Local.iNewFrameMiddleWidth.Declare
	v.local.sHold.Declare	

	gui.Form.picHideSource.Enabled(False)
	f.Intrinsic.Control.If(v.Global.bHideFrameSource)
		'This section make the frame Source visible
		'Make visible
		'Change button appearance
		f.Intrinsic.Control.CallSub(Set_PushPin_Red_Left,"sControl","picHideSource")		
		
		f.Intrinsic.Control.BlockEvents
		gui.Form.frameSource.Visible(True)
		gui.Form.frInsertType.Parent("frameSource")
		gui.Form.frInsertType.Position(105,885)
		f.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.String.LPad(v.Screen.Form!txtManualSeq.Text.Trim,"0",6,v.Local.sHold)
		gui.Form.txtManualSeq.Text(v.Local.sHold)		
		
		f.Intrinsic.Control.If(v.Screen.Form!frameTree.Visible,=,True)
			'Calculate width and height: frame Source + frame Middle  = frame header - frame tree
			f.Intrinsic.Math.Sub(v.Screen.Form!frameHeader.Width,v.Screen.Form!frameTree.Width,v.Local.iWidth)	
			f.Intrinsic.Control.If(v.Local.iWidth,<,v.Screen.Form!frameSource.Width)
				f.Intrinsic.Math.IDiv(v.Local.iWidth,2,v.Local.iNewFrameSourceWidth)
				f.Intrinsic.Math.Sub(v.Local.iWidth,v.Local.iNewFrameSourceWidth,v.Local.iNewFrameMiddleWidth)
				'Frame source
				v.Local.iHeight.Set(v.Screen.Form!frameSource.Height)
				gui.Form.frameSource.Size(v.Local.iNewFrameSourceWidth,v.Local.iHeight)
				v.Local.iHeight.Set(v.Screen.Form!frameMiddle.Height)
				gui.Form.frameMiddle.Size(v.Local.iNewFrameMiddleWidth,v.Local.iHeight)
				'Reposition frame middle
				gui.Form.frameMiddle.Position(v.Screen.form!frameSource.Width,v.Global.iY)	
			f.Intrinsic.Control.Else
				f.Intrinsic.Math.Sub(v.Local.iWidth,v.Screen.Form!frameSource.Width,v.Local.iWidth)
				v.Local.iHeight.Set(v.Screen.Form!frameMiddle.Height)
				'Set size for frame Middle
				gui.Form.frameMiddle.Size(v.Local.iWidth,v.Local.iHeight)
				'Reposition frame Middle (Router)
				gui.Form.frameMiddle.Position(v.Screen.Form!frameSource.Width, v.Global.iY)	
			f.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.Else
			f.Intrinsic.Math.Sub(v.Screen.Form!frameHeader.Width,v.Screen.Form!frameSource.Width,v.Local.iWidth)
			v.Local.iHeight.Set(v.Screen.Form!frameMiddle.Height)
			gui.Form.frameMiddle.Size(v.Local.iWidth,v.Local.iHeight)
			gui.Form.frameMiddle.Position(v.Screen.Form!frameSource.Width,v.Global.iY)
		
		f.Intrinsic.Control.EndIf		

		'Visible plus and minus left
		gui.Form.picReSize_Left1.Visible(True)
		gui.Form.picReSize_Right1.Visible(True)		

		'Toggle hide
		v.Global.bHideFrameSource.Set(False)
		
	f.Intrinsic.Control.Else
		'This section make the frame Source Invisible

		'Make Invisible
		'Change button appearance
		f.Intrinsic.Control.CallSub(Set_PushPin_Green_Left,"sControl","picHideSource")
	
		f.Intrinsic.Control.BlockEvents
		gui.Form.frInsertType.Parent("frameRtrHead")
		gui.Form.frInsertType.Position(8955,1425)
		gui.Form.frameSource.Visible(False)
		f.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.String.LPad(v.Screen.Form!txtManualSeq.Text.Trim,"0",6,v.Local.sHold)
		gui.Form.txtManualSeq.Text(v.Local.sHold)			
		'Reposition frame Middle (Router)
		gui.Form.frameMiddle.Position(0,v.Global.iY)	
		'Calculate width and height
		'Width: frame Middle width = frame header - frame tree
		f.Intrinsic.Math.Sub(v.Screen.Form!frameHeader.Width,v.Screen.Form!frameTree.Width,v.Local.iWidth)
		f.Intrinsic.Control.If(v.Screen.Form!frameTree.Visible,=,0)
			f.Intrinsic.Math.Add(v.Local.iWidth,v.Screen.Form!frameTree.Width,v.Local.iWidth)
		f.Intrinsic.Control.EndIf
		'Height
		v.Local.iHeight.Set(v.Screen.Form!frameMiddle.Height)
		'Set size for frame Middle
		gui.Form.frameMiddle.Size(v.Local.iWidth,v.Local.iHeight)	
		'InVisible plus and minus left
		gui.Form.picReSize_Left1.Visible(False)
		gui.Form.picReSize_Right1.Visible(False)	
	
			'Untoggle hide
		v.Global.bHideFrameSource.Set(True)	
	f.Intrinsic.Control.EndIf
	
	gui.Form.picHideSource.Enabled(True)
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picHideSource_Click.End

Program.Sub.Set_PushPin_Red_Right.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'Set Pushpin Red
	f.Intrinsic.Control.If(v.Global.bRedPushPin_Right)
		gui.Form.[v.Args.sControl].Picture(v.Global.sRedPushPin_Right)
	f.Intrinsic.Control.Else
		gui.Form.[v.Args.sControl].BackColor(v.Color.Red)
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Set_PushPin_Red_Right.End

Program.Sub.Set_PushPin_Green_Right.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'Set logo
	f.Intrinsic.Control.If(v.Global.bGreenPushPin_Right)
		gui.Form.[v.Args.sControl].Picture(v.Global.sGreenPushPin_Right)
	f.Intrinsic.Control.Else
		gui.Form.[v.Args.sControl].BackColor(v.Color.Green)
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Set_PushPin_Green_Right.End

Program.Sub.Set_PushPin_Red_Left.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'Set Pushpin Red
	f.Intrinsic.Control.If(v.Global.bRedPushPin_Left)
		gui.Form.[v.Args.sControl].Picture(v.Global.sRedPushPin_Left)
	f.Intrinsic.Control.Else
		gui.Form.[v.Args.sControl].BackColor(v.Color.Red)
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Set_PushPin_Red_Left.End

Program.Sub.Set_PushPin_Green_Left.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'Set logo
	f.Intrinsic.Control.If(v.Global.bGreenPushPin_Left)
		gui.Form.[v.Args.sControl].Picture(v.Global.sGreenPushPin_Left)
	f.Intrinsic.Control.Else
		gui.Form.[v.Args.sControl].BackColor(v.Color.Green)
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Set_PushPin_Green_Left.End

Program.Sub.picReSize_Left1_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iWidth.Declare
	v.Local.iHeight.Declare
	v.Local.iHold.Declare
	
	gui.Form.picReSize_Left1.Enabled(False)
	f.Intrinsic.Control.If(v.Screen.Form!frameSource.Width,<=,v.Global.iSourceLimitSize)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("You can make the frame Source invisible by clicking the pushpin button on the top left.","Too Small Size")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picReSize_Left1.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Math.Sub(v.Screen.Form!frameSource.Width,v.Global.iSizeIncrement,v.Local.iHold)
	f.Intrinsic.Control.If(v.Local.iHold,<,v.Global.iSourceLimitSize)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("You can make the frame Source invisible by clicking the pushpin button on the top left.","Too Small Size")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picReSize_Left1.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'Decrease frame Source
	f.Intrinsic.Math.Sub(v.Screen.Form!frameSource.Width,v.Global.iSizeIncrement,v.Local.iWidth)
	v.Local.iHeight.Set(v.Screen.Form!frameSource.Height)
	'Resize frame Source
	gui.Form.frameSource.Size(v.Local.iWidth,v.Local.iHeight)
	
	'Increase frame Middle
	f.Intrinsic.Math.Add(v.Screen.Form!frameMiddle.Width,v.Global.iSizeIncrement,v.Local.iWidth)
	v.Local.iHeight.Set(v.Screen.Form!frameMiddle.Height)
	gui.Form.frameMiddle.Size(v.Local.iWidth,v.Local.iHeight)	
	'Reposition frame Middle
	gui.Form.frameMiddle.Position(v.Screen.Form!frameSource.Width,v.Global.iY)
	gui.Form.picReSize_Left1.Enabled(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picReSize_Left1_Click.End

Program.Sub.picReSize_Right1_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iWidth.Declare
	v.Local.iHeight.Declare
	v.Local.iHold.Declare
	
	gui.Form.picReSize_Right1.Enabled(False)
	f.Intrinsic.Control.If(v.Screen.Form!frameMiddle.Width,<=,v.Global.iRouterLimitSize)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("You have reached the minimum size allowed for frame Router.","Too Small Size")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picReSize_Right1.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Math.Sub(v.Screen.Form!frameMiddle.Width,v.Global.iSizeIncrement,v.Local.iHold)
	f.Intrinsic.Control.If(v.Local.iHold,<,v.Global.iRouterLimitSize)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("You have reached the minimum size allowed for frame Router.","Too Small Size")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picReSize_Right1.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'Increase frame Source
	f.Intrinsic.Math.Add(v.Screen.Form!frameSource.Width,v.Global.iSizeIncrement,v.Local.iWidth)
	v.Local.iHeight.Set(v.Screen.Form!frameSource.Height)
	'Resize frame Source
	gui.Form.frameSource.Size(v.Local.iWidth,v.Local.iHeight)
	
	'Decrease frame Middle
	f.Intrinsic.Math.Sub(v.Screen.Form!frameMiddle.Width,v.Global.iSizeIncrement,v.Local.iWidth)
	v.Local.iHeight.Set(v.Screen.Form!frameMiddle.Height)
	gui.Form.frameMiddle.Size(v.Local.iWidth,v.Local.iHeight)	
	'Reposition frame Middle
	gui.Form.frameMiddle.Position(v.Screen.Form!frameSource.Width,v.Global.iY)
	gui.Form.picReSize_Right1.Enabled(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picReSize_Right1_Click.End

Program.Sub.picReSize_Left2_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iWidth.Declare
	v.Local.iHeight.Declare
	v.Local.iX.Declare
	v.Local.iHold.Declare
	
	gui.Form.picReSize_Left2.Enabled(False)
	f.Intrinsic.Control.If(v.Screen.Form!frameMiddle.Width,<=,v.Global.iRouterLimitSize)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("You have reached the minimum size allowed for frame Router.","Too Small Size")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picReSize_Left2.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Math.Sub(v.Screen.Form!frameMiddle.Width,v.Global.iSizeIncrement,v.Local.iHold)
	f.Intrinsic.Control.If(v.Local.iHold,<,v.Global.iRouterLimitSize)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("You have reached the minimum size allowed for frame Router.","Too Small Size")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picReSize_Left2.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'Increase frame Tree
	f.Intrinsic.Math.Add(v.Screen.Form!frameTree.Width,v.Global.iSizeIncrement,v.Local.iWidth)
	v.Local.iHeight.Set(v.Screen.Form!frameTree.Height)
	'Resize frame Tree
	gui.Form.frameTree.Size(v.Local.iWidth,v.Local.iHeight)
	
	'Decrease frame Middle
	f.Intrinsic.Math.Sub(v.Screen.Form!frameMiddle.Width,v.Global.iSizeIncrement,v.Local.iWidth)
	v.Local.iHeight.Set(v.Screen.Form!frameMiddle.Height)
	'Resize frame Middle
	gui.Form.frameMiddle.Size(v.Local.iWidth,v.Local.iHeight)	
	
	'Reposition frameTree
	f.Intrinsic.Math.Sub(v.Screen.Form!frameHeader.Width,v.Screen.Form!frameTree.Width,v.Local.iX)	
	gui.Form.frameTree.Position(v.Local.iX,v.Global.iY)
	gui.Form.picReSize_Left2.Enabled(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picReSize_Left2_Click.End

Program.Sub.picReSize_Right2_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iWidth.Declare
	v.Local.iHeight.Declare
	v.Local.iX.Declare
	v.Local.iHold.Declare
	
	gui.Form.picReSize_Right2.Enabled(False)
	f.Intrinsic.Control.If(v.Screen.Form!frameTree.Width,<=,v.Global.iBomLimitSize)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("You can make the frame Bom Tree invisible by clicking the pushpin button on the top right.","Too Small Size")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picReSize_Right2.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Math.Sub(v.Screen.Form!frameTree.Width,v.Global.iSizeIncrement,v.Local.iHold)
	f.Intrinsic.Control.If(v.Local.iHold,<,v.Global.iBomLimitSize)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("You can make the frame Bom Tree invisible by clicking the pushpin button on the top right.","Too Small Size")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picReSize_Right2.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'Decrease frame Tree
	f.Intrinsic.Math.Sub(v.Screen.Form!frameTree.Width,v.Global.iSizeIncrement,v.Local.iWidth)
	v.Local.iHeight.Set(v.Screen.Form!frameTree.Height)
	'Resize frame Tree
	gui.Form.frameTree.Size(v.Local.iWidth,v.Local.iHeight)
	
	'Increase frame Middle
	f.Intrinsic.Math.Add(v.Screen.Form!frameMiddle.Width,v.Global.iSizeIncrement,v.Local.iWidth)
	v.Local.iHeight.Set(v.Screen.Form!frameMiddle.Height)
	'Resize frame Middle
	gui.Form.frameMiddle.Size(v.Local.iWidth,v.Local.iHeight)	
	
	'Reposition frameTree
	f.Intrinsic.Math.Sub(v.Screen.Form!frameHeader.Width,v.Screen.Form!frameTree.Width,v.Local.iX)	
	gui.Form.frameTree.Position(v.Local.iX,v.Global.iY)
	gui.Form.picReSize_Right2.Enabled(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picReSize_Right2_Click.End

Program.Sub.picHideRtrHead_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iWidth.Declare
	v.Local.iHeight.Declare
	
	gui.Form.picHideRtrHead.Enabled(False)
	f.Intrinsic.Control.If(v.Global.bHideRouterHeader)
		'This section make the frame Router header/quote header visible
		'Toggle hide
		v.Global.bHideRouterHeader.Set(False)
		'Change button appearance
		f.Intrinsic.Control.CallSub(Set_PushPin_Orange_Left,"sControl","picHideRTRHead")
		'Make visible		
		f.Intrinsic.Control.If(v.Screen.Form!optRouterHdr.Value,=,True)
			gui.Form.frameRtrHead.Visible(True)	
			gui.Form.frameQuoteH.Visible(False)
		f.Intrinsic.Control.Else
			gui.Form.frameRtrHead.Visible(False)	
			gui.Form.frameQuoteH.Visible(True)
		f.Intrinsic.Control.EndIf
		'Calculate width and height
		f.Intrinsic.Math.Sub(v.Screen.Form!frameRouterGrid.Height,v.Screen.Form!frameRtrHead.Height,v.Local.iHeight)
		v.Local.iWidth.Set(v.Screen.Form!frameRouterGrid.Width)		
		gui.Form.frameRouterGrid.Size(v.Local.iWidth,v.Local.iHeight)		
		'Reposition frame Router grid/quote grid 
		gui.Form.frameRouterGrid.Position(90, 2580)
		
	f.Intrinsic.Control.Else
		'This section make Router header/quote header Invisible
		'Untoggle hide
		v.Global.bHideRouterHeader.Set(True)
		'Change button appearance
		f.Intrinsic.Control.CallSub(Set_PushPin_Blue_Left,"sControl","picHideRTRHead")
		'Make Invisible
		gui.Form.frameRtrHead.Visible(False)
		gui.Form.frameQuoteH.Visible(False)
		'Calculate width and height
		f.Intrinsic.Math.Add(v.Screen.Form!frameRtrHead.Height,v.Screen.Form!frameRouterGrid.Height,v.Local.iHeight)
		v.Local.iWidth.Set(v.Screen.Form!frameRouterGrid.Width)
		
		gui.Form.frameRouterGrid.Size(v.Local.iWidth,v.Local.iHeight)
		
		'Reposition frame Router grid/quote grid 
		gui.Form.frameRouterGrid.Position(90, 705)

	f.Intrinsic.Control.EndIf
	gui.Form.picHideRtrHead.Enabled(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picHideRtrHead_Click.End

Program.Sub.Set_PushPin_Orange_Left.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'Set Pushpin Red
	f.Intrinsic.Control.If(v.Global.bOrangePushPin_Left)
		gui.Form.[v.Args.sControl].Picture(v.Global.sOrangePushPin_Left)
	f.Intrinsic.Control.Else
		gui.Form.[v.Args.sControl].BackColor(v.Color.Orange)
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Set_PushPin_Orange_Left.End

Program.Sub.Set_PushPin_Blue_Left.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'Set logo
	f.Intrinsic.Control.If(v.Global.bBluePushPin_Left)
		gui.Form.[v.Args.sControl].Picture(v.Global.sBluePushPin_Left)
	f.Intrinsic.Control.Else
		gui.Form.[v.Args.sControl].BackColor(v.Color.Blue)
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Set_PushPin_Blue_Left.End

Program.Sub.picHideBomHead_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iWidth.Declare
	v.Local.iHeight.Declare
	
	gui.Form.picHideBomHead.Enabled(False)
	f.Intrinsic.Control.If(v.Global.bHideTreeTop)
		'This section make the frame Router header/quote header visible
		'Toggle hide
		v.Global.bHideTreeTop.Set(False)
		'Change button appearance
		f.Intrinsic.Control.CallSub(Set_PushPin_Orange_Right,"sControl","picHideBomHead")
		'Make visible		
		gui.Form.frameTreeTop.Visible(True)
		'Calculate width and height
		f.Intrinsic.Math.Sub(v.Screen.Form!frameTreeBottom.Height,v.Screen.Form!frameTreeTop.Height,v.Local.iHeight)
		v.Local.iWidth.Set(v.Screen.Form!frameTreeBottom.Width)		
		gui.Form.frameTreeBottom.Size(v.Local.iWidth,v.Local.iHeight)		
		'Reposition frame Router grid/quote grid 
		gui.Form.frameTreeBottom.Position(90, 2580)
		
	f.Intrinsic.Control.Else
		'This section make Router header/quote header Invisible
		'Untoggle hide
		v.Global.bHideTreeTop.Set(True)
		'Change button appearance
		f.Intrinsic.Control.CallSub(Set_PushPin_Blue_Right,"sControl","picHideBomHead")
		'Make Invisible
		gui.Form.frameTreeTop.Visible(False)
		'Calculate width and height
		f.Intrinsic.Math.Add(v.Screen.Form!frameTreeBottom.Height,v.Screen.Form!frameTreeTop.Height,v.Local.iHeight)
		v.Local.iWidth.Set(v.Screen.Form!frameTreeBottom.Width)
		
		gui.Form.frameTreeBottom.Size(v.Local.iWidth,v.Local.iHeight)
		
		'Reposition frame Router grid/quote grid 
		gui.Form.frameTreeBottom.Position(90, 705)

	f.Intrinsic.Control.EndIf
	gui.Form.picHideBomHead.Enabled(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picHideBomHead_Click.End

Program.Sub.Set_PushPin_Orange_Right.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'Set Pushpin Red
	f.Intrinsic.Control.If(v.Global.bOrangePushPin_Right)
		gui.Form.[v.Args.sControl].Picture(v.Global.sOrangePushPin_Right)
	f.Intrinsic.Control.Else
		gui.Form.[v.Args.sControl].BackColor(v.Color.Orange)
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Set_PushPin_Orange_Right.End

Program.Sub.Set_PushPin_Blue_Right.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'Set logo
	f.Intrinsic.Control.If(v.Global.bBluePushPin_Right)
		gui.Form.[v.Args.sControl].Picture(v.Global.sBluePushPin_Right)
	f.Intrinsic.Control.Else
		gui.Form.[v.Args.sControl].BackColor(v.Color.Blue)
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Set_PushPin_Blue_Right.End

Program.Sub.picClearAll_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)	
	v.Local.sSerialize.Declare
	
	f.Intrinsic.Control.If(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'disable the Form so it can't be double clicked
	'gui.Form..Enabled(False)	
	
	'1/CLEAR BACKEND/WORKING tables (CHILD,BOM => for Bom and Router, BUILDQTY => for  ,ORDUPL,ORDUPLExtra for Quote uploads)
	
	'For Cutlist
	f.Intrinsic.Control.If(v.Global.bBindCutList)
		gui.Form.GGC_Bom.Serialize("GV_Child",V.Local.sSerialize)
		f.Intrinsic.Control.CallSub(Recreate_Table_Grid_Child)
		gui.Form.GGC_Bom.Deserialize(V.Local.sSerialize)
		f.Intrinsic.Control.CallSub(Bind_CutList)
	f.Intrinsic.Control.Else
		F.Data.DataTable.DeleteRow("CHILD")
		F.Data.DataTable.AcceptChanges("CHILD")
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(v.DataTable.BOM.Exists)
		f.Data.DataTable.DeleteRow("BOM")
		F.Data.DataTable.AcceptChanges("BOM")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.BUILDQTY.Exists)
		f.Data.DataTable.DeleteRow("BUILDQTY")
		f.Data.DataTable.AcceptChanges("BUILDQTY")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.ORDUPL.Exists)
		f.Data.DataTable.DeleteRow("ORDUPL")
		f.Data.DataTable.AcceptChanges("ORDUPL")
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.ORDUPLExtra.Exists)
		f.Data.DataTable.DeleteRow("ORDUPLExtra")
		f.Data.DataTable.AcceptChanges("ORDUPLExtra")
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.ORDUPLLines.Exists)
		f.Data.DataTable.DeleteRow("ORDUPLLines")
		f.Data.DataTable.AcceptChanges("ORDUPLLines")
	f.Intrinsic.Control.EndIf
	
	V.Global.bRouterChanged.Set(False)
	
	'2/CLEAR TEXTBOXes FOR NEW INPUTS
	'Clear middle textboxes: Router + Rev parent boxes, Router Description + Description 2 + Description 3 box, Router UM box, Router PL box, Router Customer box,
	gui.Form..ClearGroup(1)
	gui.Form.txtRtrCust.Text("")
	gui.Form.txtRTRExtraDescr.Text("")
	gui.Form.chkOmitFromRTRReprice.Value(0)
	gui.Form.chkRtrComp.Value(0)
	'Clear middle textboxes: Quote number,Quote Customer number, Quote Cust Name, Sales Rep dropdown, Contact Dropdown
	gui.Form..ClearGroup(4)	
	'Clear right textboxes: Bom Parent, Bome Rev, Bom Description 
	gui.Form..ClearGroup(3)
	gui.Form.txtMemo1.Text("")
	gui.Form.txtMemo2.Text("")
	gui.Form.txtBomExtraDescr.Text("")
	gui.Form.ddlBomSource.ListIndex(0)
	gui.Form.chkBomComp.Value(0)
	
	'As ddlContact based on customer, so clear it
	gui.Form.ddlContact.ClearItems
	gui.Form.ddlContact.Text("")
	
	'3/CLEAR BOM TREEVIEW
	gui.Form.trvBom.ClearItems
	
	'Enable Router header textboxes (these are disabled at Router Browser return and Get Router sub)
	f.Intrinsic.Control.CallSub(Enable_Disable_Router_Bom_PartHead,"ActiveFlag","Enable")
	
	'4/RESET GLOBAL VARIABLES
	v.Global.iBomRow.Set(0)
	v.Global.bQtySaved.Set(False)
	
	'6/CLEAR USER LOCKS FOR THE BOM IN USE
	'Obsolete
	'f.Intrinsic.Control.CallSub(clearUserLocks)		
	
	gui.Form.trvBom.BackColor(v.Color.White)

	f.Intrinsic.Control.CallSub(Set_Doc_OFF,"sControl","picRTRDocs")
	f.Intrinsic.Control.CallSub(Set_Doc_OFF,"sControl","picBomDocs")
	
	gui.Form.txtFocusParent.SetFocus

	'gui.Form..Enabled(True)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picClearAll_Click.End

Program.Sub.GGC_Mat_RowCellClick.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iX.Declare
	v.Local.iY.Declare
	
	f.Intrinsic.Control.If(v.Args.Button.Ucase,=,"RIGHT")
		F.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	v.Global.iMaterialSourceRowClicked.Set(v.Args.RowIndex)
	F.Intrinsic.Control.If(V.Args.column.UCase,=,"PART")	
		f.Intrinsic.API.GetMousePosition(v.Local.iX,v.Local.iY)
		gui.Form..ContextMenuShow("MaterialSourceMenu",v.Local.iX,v.Local.iY)	
	F.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GGC_Mat_RowCellClick.End

Program.Sub.MaterialSourceMenu.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bAuth.Declare
	v.Local.sPart.Declare
	v.Local.sLoc.Declare	
	v.Local.iLinkID.Declare
	v.Local.sLinkID.Declare
	V.Local.iPID.Declare
	v.Local.sMsg.Declare
	v.Local.iRet.Declare
	v.Local.sDescr.Declare

	v.Local.sPart.Set(v.DataTable.Material(v.Global.iMaterialSourceRowClicked).Part!FieldValString)
	v.Local.sLoc.Set(v.DataTable.Material(v.Global.iMaterialSourceRowClicked).Location!FieldValString)
	v.Local.sDescr.Set(v.DataTable.Material(v.Global.iMaterialSourceRowClicked).Description!FieldValString)

	f.Intrinsic.Control.SelectCase(v.Args.ItemName)
		F.Intrinsic.Control.Case("BOOKMARK")
			f.Intrinsic.Control.CallSub("AddToBookMarks","sPart",v.Local.sPart,"sDescr",v.Local.sDescr)
			
		f.Intrinsic.Control.Case("VIEWPART")
			Function.Global.Security.CheckUserAccessIPM(312,0,v.Local.bAuth)
			f.Intrinsic.Control.If(v.Local.bAuth.Not)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("User does not have permission to Inventory > View > Inventory Parts.","Menu Item Not Assigned")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf		
			
			f.Data.DataTable.AddRow("3500","CompanyCode",v.Caller.CompanyCode,"Mode","V","PART",v.Local.sPart,"LOC",v.Local.sLoc)
			F.Intrinsic.Control.CallSub(3500Sync)		
		
		F.Intrinsic.Control.Case("EDITPART")
					Function.Global.Security.CheckUserAccessIPM(310,1,v.Local.bAuth)
				f.Intrinsic.Control.If(v.Local.bAuth.Not)
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
					f.Intrinsic.UI.Msgbox("User does not have permission to Inventory > File > Inventory Parts > Open.","Menu Item Not Assigned")
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
					f.Intrinsic.Control.ExitSub
				f.Intrinsic.Control.EndIf				
				f.Data.DataTable.AddRow("3500","CompanyCode",v.Caller.CompanyCode,"Mode","O","PART",v.Local.sPart,"LOC",v.Local.sLoc)
				F.Intrinsic.Control.CallSub(3500Sync)		
		
		F.Intrinsic.Control.Case("DOCUMENTCONTROL")
		
			F.Global.DocumentControl.GetLinkID(v.Local.sPart,30,v.Local.iLinkID)
			f.Intrinsic.Control.If(v.Local.iLinkID,<>,-1)		
				f.Intrinsic.String.LPad(v.Local.iLinkID,"0",9,v.Local.sLinkID)
				F.Global.DocumentControl.Invoke(v.Local.sPart,30,"Part/Bom Document Control",V.Local.iPID)
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("Create Document Control for this part {0}?",v.Local.sPart.Trim,v.Local.sMsg)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Document Control Not Found",4,v.Local.iRet)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxYes)			
					F.Global.DocumentControl.CreateReference(v.Local.sPart,30,v.Local.iLinkID)	
					F.Global.DocumentControl.Invoke(v.Local.sPart,30,"Part/Bom Document Control",V.Local.iPID)						
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.Case("SUPPLYANDDEMAND")	

			'Check if user has permission to access to menu item
			Function.Global.Security.CheckUserAccessIPM(321,0,v.Local.bAuth)
			f.Intrinsic.Control.If(v.Local.bAuth.Not)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("User does not have permission to Supply and Demand screen.","Menu Item Not Assigned")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
			
			f.Data.DataTable.AddRow("300010","Part",v.Local.sPart,"Loc",v.Local.sLoc)
			f.Intrinsic.Control.CallSub(300010Sync)			
	
	f.Intrinsic.Control.EndSelect	

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.MaterialSourceMenu.End

Program.Sub.picRtrMaster_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iX.Declare
	v.Local.iY.Declare	
	
	f.Intrinsic.API.GetMousePosition(v.Local.iX,v.Local.iY)
	gui.Form..ContextMenuShow("RouterMASTER",v.Local.iX,v.Local.iY)	

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picRtrMaster_Click.End

Program.Sub.picBomMaster_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iX.Declare
	v.Local.iY.Declare	
	
	f.Intrinsic.API.GetMousePosition(v.Local.iX,v.Local.iY)
	gui.Form..ContextMenuShow("BomMASTER",v.Local.iX,v.Local.iY)	

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picBomMaster_Click.End

Program.Sub.picInvMaster_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iX.Declare
	v.Local.iY.Declare	
	
	f.Intrinsic.API.GetMousePosition(v.Local.iX,v.Local.iY)
	gui.Form..ContextMenuShow("INVMASTER",v.Local.iX,v.Local.iY)	

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picInvMaster_Click.End

Program.Sub.INVMASTER.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bAuth.Declare
	v.Local.iSeq.Declare
	v.Local.iRet.Declare
	
	F.Intrinsic.Control.SelectCase(V.Args.ItemName)
		f.Intrinsic.Control.Case("OPEN")
			v.Local.iSeq.Set(1)				
		f.Intrinsic.Control.Case("NEW")
			v.Local.iSeq.Set(2)	
		f.Intrinsic.Control.Case("COPY")
			v.Local.iSeq.Set(3)	
		f.Intrinsic.Control.Case("DELETE")	
			v.Local.iSeq.Set(4)	
	F.Intrinsic.Control.EndSelect

	F.Global.Security.CheckUserAccessIPM(310,v.Local.iSeq,v.Local.bAuth)
	f.Intrinsic.Control.If(v.Local.bAuth.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("User does not have permission to this menu item.","Menu Item Not Assigned")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Global.General.LaunchMenuTask(310,v.Local.iSeq,v.Local.iRet)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.INVMASTER.End

Program.Sub.RouterMaster.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bAuth.Declare
	v.Local.iSeq.Declare
	v.Local.iRet.Declare
	
	F.Intrinsic.Control.SelectCase(V.Args.ItemName)
		f.Intrinsic.Control.Case("OPEN")
			v.Local.iSeq.Set(1)				
		f.Intrinsic.Control.Case("NEW")
			v.Local.iSeq.Set(2)	
		f.Intrinsic.Control.Case("COPY")
			v.Local.iSeq.Set(3)	
		f.Intrinsic.Control.Case("DELETE")	
			v.Local.iSeq.Set(4)	
	F.Intrinsic.Control.EndSelect

	F.Global.Security.CheckUserAccessIPM(482,v.Local.iSeq,v.Local.bAuth)
	f.Intrinsic.Control.If(v.Local.bAuth.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("User does not have permission to this menu item.","Menu Item Not Assigned")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Global.General.LaunchMenuTask(482,v.Local.iSeq,v.Local.iRet)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.RouterMaster.End

Program.Sub.BomMaster.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bAuth.Declare
	v.Local.iSeq.Declare
	v.Local.iRet.Declare
	
	F.Intrinsic.Control.SelectCase(V.Args.ItemName)
		f.Intrinsic.Control.Case("OPEN")
			v.Local.iSeq.Set(1)				
		f.Intrinsic.Control.Case("NEW")
			v.Local.iSeq.Set(2)	
		f.Intrinsic.Control.Case("COPY")
			v.Local.iSeq.Set(3)	
		f.Intrinsic.Control.Case("DELETE")	
			v.Local.iSeq.Set(4)	
	F.Intrinsic.Control.EndSelect

	F.Global.Security.CheckUserAccessIPM(467,v.Local.iSeq,v.Local.bAuth)
	f.Intrinsic.Control.If(v.Local.bAuth.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("User does not have permission to this menu item.","Menu Item Not Assigned")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Global.General.LaunchMenuTask(467,v.Local.iSeq,v.Local.iRet)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.BomMaster.End

Program.Sub.picQuickQuote_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iX.Declare
	v.Local.iY.Declare	
	
	f.Intrinsic.API.GetMousePosition(v.Local.iX,v.Local.iY)
	gui.Form..ContextMenuShow("QUICKQUOTE",v.Local.iX,v.Local.iY)	

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picQuickQuote_Click.End

Program.Sub.QUICKQUOTE.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bAuth.Declare
	v.Local.iSeq.Declare
	v.Local.iRet.Declare
	
	F.Intrinsic.Control.SelectCase(V.Args.ItemName)
		f.Intrinsic.Control.Case("OPEN")
			v.Local.iSeq.Set(1)				
		f.Intrinsic.Control.Case("NEW")
			v.Local.iSeq.Set(2)	
		f.Intrinsic.Control.Case("COPY")
			v.Local.iSeq.Set(3)	
		f.Intrinsic.Control.Case("DELETE")	
			v.Local.iSeq.Set(4)	
	F.Intrinsic.Control.EndSelect

	F.Global.Security.CheckUserAccessIPM(484,v.Local.iSeq,v.Local.bAuth)
	f.Intrinsic.Control.If(v.Local.bAuth.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("User does not have permission to this menu item.","Menu Item Not Assigned")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Global.General.LaunchMenuTask(484,v.Local.iSeq,v.Local.iRet)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.QUICKQUOTE.End

Program.Sub.Test_UnLoad.Start
gui.Log..Visible(False)
Program.Sub.Test_UnLoad.End

Program.Sub.picQuoteDocs_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iLinkID.Declare
	v.Local.sLinkID.Declare
	V.Local.iPID.Declare
	v.Local.sQuote.Declare
	v.Local.sMsg.Declare
	v.Local.iRet.Declare
	
	f.Intrinsic.Control.If(v.Screen.Form!txtQuote.Text.Trim,=,"")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	gui.Form.picQuoteDocs.Enabled(False)
	
	'Quote number
	f.Intrinsic.String.LPad(v.Screen.Form!txtQuote.Text.Trim,"0",7,v.Local.sQuote)

	F.Global.DocumentControl.GetLinkID(v.Local.sQuote,50,v.Local.iLinkID)
	f.Intrinsic.Control.If(v.Local.iLinkID,<>,-1)		
		f.Intrinsic.Control.CallSub(Set_Doc_ON,"sControl","picQuoteDocs")	
		f.Intrinsic.String.LPad(v.Local.iLinkID,"0",9,v.Local.sLinkID)
		F.Global.DocumentControl.Invoke(v.Local.sQuote,50,"Quote Document Control",V.Local.iPID)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("Create Document Control for this Quote {0}?",v.Local.sQuote.Trim,v.Local.sMsg)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Document Control Not Found",4,v.Local.iRet)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxYes)			
			F.Global.DocumentControl.CreateReference(v.Local.sQuote,50,v.Local.iLinkID)			
			f.Intrinsic.Control.CallSub(Set_Doc_ON,"sControl","picQuoteDocs")	
			F.Global.DocumentControl.Invoke(v.Local.sQuote,50,"Quote Document Control",V.Local.iPID)						
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.CallSub(Set_Doc_OFF,"sControl","picQuoteDocs")			
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	f.Intrinsic.UI.Sleep(2)
	gui.Form.picQuoteDocs.Enabled(True)

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picQuoteDocs_Click.End

Program.Sub.cmdClearQuote_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)	
	
	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveClearQuote)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveClearQuote.Set(True)
	
	f.Intrinsic.Control.CallSub(Clear_Quote)
	gui.Form.txtQuote.SetFocus
	v.Global.bActiveClearQuote.Set(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdClearQuote_Click.End

Program.Sub.Clear_Quote.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)	
	
	f.Intrinsic.Control.If(v.DataTable.ORDUPL.Exists)
		f.Data.DataTable.DeleteRow("ORDUPL")
		f.Data.DataTable.AcceptChanges("ORDUPL")
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.ORDUPLExtra.Exists)
		f.Data.DataTable.DeleteRow("ORDUPLExtra")
		f.Data.DataTable.AcceptChanges("ORDUPLExtra")
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.DataTable.ORDUPLLines.Exists)
		f.Data.DataTable.DeleteRow("ORDUPLLines")
		f.Data.DataTable.AcceptChanges("ORDUPLLines")
	f.Intrinsic.Control.EndIf

	'Clear middle textboxes: Quote number,Quote Customer number, Quote Cust Name, Sales Rep dropdown, Contact Dropdown
	gui.Form..ClearGroup(4)	

	f.Intrinsic.Control.CallSub(Set_Doc_OFF,"sControl","picQuoteDocs")
	gui.Form.txtQuote.Enabled(True)
	gui.Form.txtCustNo.Enabled(True)
	gui.Form.txtCustName.Enabled(True)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.Clear_Quote.End

Program.Sub.txtQuote_LostFocus.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sQuote.Declare
	
	f.Intrinsic.Control.If(v.Screen.Form!txtQuote.Text.Trim,<>,"")
		f.Intrinsic.String.LPad(v.Screen.Form!txtQuote.Text.Trim,"0",7,v.Local.sQuote)
		gui.Form.txtQuote.Text(v.Local.sQuote)		
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtQuote_LostFocus.End

Program.Sub.txtQtyDec_LostFocus.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iDec.Declare
	v.Local.sMaskQty.Declare
	
	'Mask for Decimal
	f.Intrinsic.Control.If(v.Screen.Form!txtQtyDec.Text.Trim,=,"")		
		gui.Form.txtQtyDec.Text("0")
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(v.Screen.Form!txtQtyDec.Text.Trim,=,"0")
		v.Local.sMaskQty.Set("###,###,###,##0")
	f.Intrinsic.Control.Else
		f.Intrinsic.Math.Add(16,v.Screen.Form!txtQtyDec.Text.Trim,v.Local.iDec)
		f.Intrinsic.String.RPad("###,###,###,##0.","0",v.Local.iDec,v.Local.sMaskQty)	
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtQtyDec_LostFocus.End

Program.Sub.Clear_Router_Side.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSerialize.Declare
	v.Local.bEx.Declare

	'disable the Form so it can't be double clicked
	'gui.Form..Enabled(False)	
	
	'1/CLEAR BACKEND/WORKING tables 
	'For Cutlist
	f.Intrinsic.Variable.ArgExists("bDeleteChild",v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		f.Intrinsic.Control.If(v.Global.bBindCutList)
			'Temp Serialize		
			gui.Form.GGC_Bom.Serialize("GV_Child",V.Local.sSerialize)
			f.Intrinsic.Control.CallSub(Recreate_Table_Grid_Child)
			gui.Form.GGC_Bom.Deserialize(V.Local.sSerialize)
		f.Intrinsic.Control.Else
			F.Data.DataTable.DeleteRow("CHILD")
			F.Data.DataTable.AcceptChanges("CHILD")
		f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.EndIf
	
	f.Data.DataTable.DeleteRow("BUILDQTY")
	f.Data.DataTable.AcceptChanges("BUILDQTY")
	
	V.Global.bRouterChanged.Set(False)
	
	'2/CLEAR TEXTBOXes FOR NEW INPUTS
	'Clear middle textboxes: Router + Rev parent boxes, Router Description + Description 2 + Description 3 box, Router UM box, Router PL box, Router Customer box,
	gui.Form..ClearGroup(1)	
	gui.Form.txtRtrCust.Text("")
	gui.Form.txtRTRExtraDescr.Text("")
	gui.Form.chkOmitFromRTRReprice.Value(0)
	gui.Form.chkRtrComp.Value(0)
	
	'4/RESET GLOBAL VARIABLES
	v.Global.iBomRow.Set(0)
	v.Global.bQtySaved.Set(False)	
	
	f.Intrinsic.Control.CallSub(Set_Doc_OFF,"sControl","picRTRDocs")
	
	'gui.Form..Enabled(True)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Clear_Router_Side.End

Program.Sub.Clear_Bom_Side.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)	
	'disable the Form so it can't be double clicked
	'gui.Form..Enabled(False)	
	
	'1/CLEAR BACKEND/WORKING tables (CHILD,BOM => for Bom and Router, BUILDQTY => for  ,ORDUPL,ORDUPLExtra for Quote uploads)
	f.Data.DataTable.DeleteRow("BOM")
	F.Data.DataTable.AcceptChanges("BOM")
		
	'2/CLEAR TEXTBOXes FOR NEW INPUTS
	'Clear right textboxes: Bom Parent, Bome Rev, Bom Description 
	
	gui.Form..ClearGroup(3)	
	gui.Form.txtMemo1.Text("")
	gui.Form.txtMemo2.Text("")
	gui.Form.txtBomExtraDescr.Text("")	
	gui.Form.ddlBomSource.ListIndex(0)
	gui.Form.chkBomComp.Value(0)

	'3/CLEAR BOM TREEVIEW
	gui.Form.trvBom.ClearItems	
	
	'6/CLEAR USER LOCKS FOR THE BOM IN USE
	'f.Intrinsic.Control.CallSub(clearUserLocks)	

	gui.Form.trvBom.BackColor(v.Color.White)
	
	'gui.Form..Enabled(True)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
	
Program.Sub.Clear_Bom_Side.End

Program.Sub.Clear_2_Sides.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)	
	'disable the Form so it can't be double clicked
	'gui.Form..Enabled(False)	
	v.Local.sSerialize.Declare
	v.Local.bEx.Declare
	
	'Router side
	'CLEAR BACKEND/WORKING tables 
	'For Cutlist
	f.Intrinsic.Variable.ArgExists("bDeleteChild",v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		f.Intrinsic.Control.If(v.Global.bBindCutList)
			'Temp Serialize		
			gui.Form.GGC_Bom.Serialize("GV_Child",V.Local.sSerialize)
			f.Intrinsic.Control.CallSub(Recreate_Table_Grid_Child)
			gui.Form.GGC_Bom.Deserialize(V.Local.sSerialize)
		f.Intrinsic.Control.Else
			F.Data.DataTable.DeleteRow("CHILD")
			F.Data.DataTable.AcceptChanges("CHILD")
		f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.EndIf
	
	f.Data.DataTable.DeleteRow("BUILDQTY")
	f.Data.DataTable.AcceptChanges("BUILDQTY")
	
	V.Global.bRouterChanged.Set(False)
	
	'CLEAR TEXTBOXes FOR NEW INPUTS
	'Clear middle textboxes: Router + Rev parent boxes, Router Description + Description 2 + Description 3 box, Router UM box, Router PL box, Router Customer box,
	gui.Form..ClearGroup(1)
	gui.Form.txtRtrCust.Text("")
	gui.Form.txtRTRExtraDescr.Text("")
	gui.Form.chkOmitFromRTRReprice.Value(0)
	gui.Form.chkRtrComp.Value(0)
	
	'4/RESET GLOBAL VARIABLES
	v.Global.iBomRow.Set(0)
	v.Global.bQtySaved.Set(False)	
	
	f.Intrinsic.Control.CallSub(Set_Doc_OFF,"sControl","picRTRDocs")	
	
	'BOM side
	f.Data.DataTable.DeleteRow("BOM")
	F.Data.DataTable.AcceptChanges("BOM")
		
	'CLEAR TEXTBOXes FOR NEW INPUTS
	'Clear right textboxes: Bom Parent, Bome Rev, Bom Description 
	gui.Form..ClearGroup(3)	
	gui.Form.txtMemo1.Text("")
	gui.Form.txtMemo2.Text("")
	gui.Form.txtBomExtraDescr.Text("")	
	gui.Form.ddlBomSource.ListIndex(0)
	gui.Form.chkBomComp.Value(0)

	'3/CLEAR BOM TREEVIEW
	gui.Form.trvBom.ClearItems	
	
	'6/CLEAR USER LOCKS FOR THE BOM IN USE
	'f.Intrinsic.Control.CallSub(clearUserLocks)	

	gui.Form.trvBom.BackColor(v.Color.White)
	
	'gui.Form..Enabled(True)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.Clear_2_Sides.End

Program.Sub.picNewQuote_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iOpt.Declare
	V.Local.iQuote.Declare
	v.Local.iLock.Declare
	v.Local.iRet.Declare
	v.Local.sQuote.Declare
	v.Local.sKey.Declare
	v.Local.sOption.Declare
	v.Local.sSql.Declare
		
	f.Intrinsic.Control.If(v.Screen.Form!txtQuote.text.Trim,=,"")
		'get the next quote number from OP_Header
		f.ODBC.Connection!conx.executeandreturn("select substring(pmaint_user1_title,11,7) from OPT_RES_COM2 where funct = 'RS' and type = 'QT'",v.Local.sOption)
		v.Local.iQuote.Set(v.Local.sOption)
		f.Intrinsic.Math.Add(v.Local.iQuote,1,v.Local.iRet)
		f.Intrinsic.String.LPad(v.Local.iRet,"0",7,v.Local.sQuote)
	
		f.Intrinsic.String.Build("update opt_res_com2 set pmaint_user1_title = replace(pmaint_user1_title,'{0}','{1}') where funct = 'RS' and type = 'QT'",v.Local.sOption.Trim,v.Local.sQuote.Trim,v.Local.sSql)
		f.ODBC.Connection!conx.execute(v.Local.sSql)
	
		'check to see if there is also a quote being built.
		'save the new quote number back to options
		f.Global.General.SaveOption(401312,0,0,"","","",0,v.Ambient.Date,V.Local.sQuote.Long)
		gui.Form.txtQuote.Text(v.Local.sQuote)
		gui.Form.txtQuote.Enabled(False)
		
		f.Intrinsic.Control.CallSub(cmdBrwCustomer_Click)
	
	f.Intrinsic.Control.Else
		'clicked on new quote and still had one in the screen
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.MsgBox("Save the current quote before starting a new one?","Save Quote?",4,v.Local.iRet)		
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.SelectCase(v.Local.iRet)
			'yes save the existing before starting a new one
			f.Intrinsic.Control.Case(6)
				f.Intrinsic.UI.InvokeWaitDialog("Saving quote...")
				f.Intrinsic.Control.CallSub(picSaveQuote_Click)
				f.Intrinsic.UI.CloseWaitDialog
				f.Intrinsic.Control.CallSub(Clear_Quote)
				f.Intrinsic.Control.CallSub(picNewQuote_Click)
			'no discard the current quote and start a new one	
			f.Intrinsic.Control.Case(7)
				f.Intrinsic.Control.CallSub(Clear_Quote)
				f.Intrinsic.Control.CallSub(picNewQuote_Click)
		f.Intrinsic.Control.EndSelect
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picNewQuote_Click.End

Program.Sub.picSaveQuote_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	v.Local.iCount.Declare
	v.Local.sMsg.Declare
	v.Local.sQuote.Declare
	v.Local.bFound.Declare
	v.Local.sFile.Declare
	v.Local.sLoc.Declare
	v.Local.iRet.Declare
	v.Local.sCurrentWebImp.Declare
	v.Local.iWait.Declare
	v.Local.bFreeToLaunch.Declare
	v.Local.sWebImporterLog.Declare
	v.Local.sName.Declare	
	v.Local.bEx.Declare
	V.Local.sSupervsrID.Declare
	v.Local.sUserID.Declare
	v.Local.sHold.Declare	
	V.Local.bUseOtherWatchdog.Declare
	v.Local.sColIndex.Declare
	v.Local.sFilter.Declare

	gui.Form.picSaveQuote.Enabled(False)
	F.Global.Security.GetUserID(v.Caller.User,v.Caller.CompanyCode,v.Local.sUserID)
	f.Global.Security.GetUsernameFromID(V.Local.sUserID,v.Local.sName)
	F.Intrinsic.String.Replace(V.Local.sName,"*!*"," ",V.Local.sName)
	F.Global.Security.GetUserID("SUPERVSR",v.Caller.CompanyCode,v.Local.sSupervsrID)
	
	'Read WatchDog Option
	F.Global.Registry.ReadValue(v.Local.sSupervsrID,V.Caller.CompanyCode,"CHKUSEOTHERWATCHDOG",4986,3001,0,"",V.local.sHold)
	f.Intrinsic.Control.If(v.Local.sHold,=,"True")
		v.Local.bUseOtherWatchdog.Set(True)
	f.Intrinsic.Control.EndIf	
		
	'if the company options are set for locations, and they're set for no blank locations, make sure that the line items are set to the location of the quote header
	f.Intrinsic.Control.If(v.Global.bLoc,=,True,AND,V.Global.bLocNoBlank,=,True)
		f.Intrinsic.Control.If(v.Screen.Form!ddlQuoteLoc.text,=,"")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Set the location on the quote header!","Locations Required")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			gui.Form.picSaveQuote.Enabled(True)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.Else
			v.Local.sLoc.Set(v.Screen.Form!ddlQuoteLoc.text)
			f.Intrinsic.Control.If(v.DataTable.ORDUPLLines.RowCount,>,0)
				f.Data.DataTable.SetValue("ORDUPLLines",-1,"PARTLOC",v.Local.sLoc.Trim)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf	

	'checking to make sure we have header info
	f.Intrinsic.Control.If(v.DataTable.ORDUPL.RowCount,=,0)
		'no quote header information
		f.Intrinsic.String.Build("There is no Quote header information to save.{0}Click New Quote",v.Ambient.NewLine,v.Local.sMsg)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Missing Data")		
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picSaveQuote.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'checking for line items
	f.Intrinsic.Control.If(v.DataTable.ORDUPLLines.RowCount,=,0)
		'no quote lines
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No lines have been added to the quote.","Missing Data")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picSaveQuote.Enabled(True)
		f.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf		
	
	'Check duplicate quote. If there is a current quote, we will delete before saving
	v.Local.sQuote.Set(v.Screen.Form!txtQuote.text.Trim)
	f.Intrinsic.String.Build("select QUOTE_NO from v_quote_header where Quote_No = '{0}'",v.Local.sQuote.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
	F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
		'Msg box asking if you want to overwrite the existing Quote
		f.Intrinsic.String.Build("Overwrite existing quote {0}?",v.Local.sQuote,v.Local.sMsg)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.MsgBox(v.Local.sMsg,"Save Quote",4,v.Local.iRet)	
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.If(v.Local.iRet,<>,v.Ambient.MsgBoxYes)
			gui.Form.picSaveQuote.Enabled(True)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.EndIf
	
	'Check if there are blank linenumber or blank suffix
	f.Data.DataTable.Select("OrdUplLines","Trim(LineNumber) = '' or Trim(Filler1) = ''",v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		
		gui.Form.picSaveQuote.Enabled(True)
		Gui.Form.GGC_Quote.GetColumnIndexByName("GV_QLines","LineNumber",v.Local.sColIndex)		
		gui.Form.GGC_Quote.FocusCell("GV_QLines",v.Local.sRet(0),v.Local.sColIndex)
		
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.MsgBox("One of the lines has blank Line number or blank Suffix","Invalid Line")	
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)			
		
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	
	'Check if there is duplicate line and suffix
	f.Intrinsic.String.Build("Delete from GCG_4986_LineSuff where UserID = '{0}' and Trmnl = '{1}'",v.Caller.User,v.Caller.Terminal,v.Local.sSql)
	f.ODBC.Connection!conx.Execute(v.Local.sSql)
	f.Data.DataTable.AddColumn("OrdUplLines","UserID","String",v.Caller.User)
	f.Data.DataTable.AddColumn("OrdUplLines","Trmnl","String",v.Caller.Terminal)
	f.Data.Datatable.SaveToDB("OrdUplLines","conx","GCG_4986_LineSuff","","128","LineNumber@!@LineNumber*!*Filler1@!@Suffix*!*UserID@!@UserID*!*Trmnl@!@Trmnl")
	f.Data.DataTable.RemoveColumn("OrdUplLines","UserID")
	f.Data.DataTable.RemoveColumn("OrdUplLines","Trmnl")
	f.Intrinsic.String.Build("Select LineNumber,Suffix from GCG_4986_LineSuff where UserID = '{0}' and Trmnl = '{1}' Group by LineNumber,Suffix Having count(*) > 1",v.Caller.User,v.Caller.Terminal,v.Local.sSql)
	f.Data.DataTable.CreateFromSQL("dtLineSuff","conx",v.Local.sSql,True)
	f.Intrinsic.Control.If(v.DataTable.dtLineSuff.RowCount,>,0)		
	
		f.Intrinsic.String.Build("Trim(LineNumber) = '{0}' and Trim(Filler1) = '{1}'",v.DataTable.dtLineSuff(0).LineNumber!FieldValTrim,v.DataTable.dtLineSuff(0).Suffix!FieldValTrim,v.Local.sFilter)
		f.Data.DataTable.Select("OrdUplLines",v.Local.sFilter,v.Local.sRet)
		gui.Form.picSaveQuote.Enabled(True)
		f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)			
			Gui.Form.GGC_Quote.GetColumnIndexByName("GV_QLines","LineNumber",v.Local.sColIndex)		
			gui.Form.GGC_Quote.FocusCell("GV_QLines",v.Local.sRet(0),v.Local.sColIndex)	
			
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.MsgBox("Line + Suffix is not unique.","Invalid Line")	
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)			
			f.Data.DataTable.Close("dtLineSuff")
			
		f.Intrinsic.Control.Else		
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.MsgBox("Line + Suffix is not unique.","Invalid Line")	
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)			
			f.Data.DataTable.Close("dtLineSuff")	
		
		f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.Close("dtLineSuff")
	
	
	f.Intrinsic.UI.InvokeWaitDialog("Saving quote. Please wait...")
	'Preparation
	f.Intrinsic.Control.If(v.Screen.Form!txtMaxiWait.Text.Trim,=,"")
		v.Local.iWait.Set(15)
	f.Intrinsic.Control.Else
		v.Local.iWait.Set(v.Screen.Form!txtMaxiWait.Text.Trim)
	f.Intrinsic.Control.EndIf	
	
	'Set Location
	F.Data.DataTable.SetValue("ORDUPL",0,"FromLocation",v.Screen.Form!ddlQuoteLoc.text,"CustomerPO",v.Screen.Form!txtCustomerPO.Text)
	
	'Check Extra table
	f.Intrinsic.Control.If(v.DataTable.ORDUPLExtra.RowCount,<,1)
		F.Data.DataTable.AddRow("ORDUPLExtra","TextPosition","H","ApplyTextToQuote","Y")
	F.Intrinsic.Control.Else
		f.Data.DataTable.SetValue("ORDUPLExtra",0,"TextPosition","H","ApplyTextToQuote","Y")
	f.Intrinsic.Control.EndIf
	
	gui.Form..Enabled(False)
	
	'********CHECK QUEUING************
	f.Intrinsic.Control.If(v.Local.bUseOtherWatchdog.Not)		
		
		f.Intrinsic.Control.CallSub(Check_Queue,"sQuoteNumber",v.Local.sQuote)
		
		'Check Result
		f.Intrinsic.Control.If(v.Args.sQuoteUploadQueueStatus,=,"IsForcedToStopped")			
			f.Intrinsic.UI.CloseWaitDialog
			F.Intrinsic.UI.Msgbox("Quote upload was stopped")
			gui.Form..Enabled(True)
			gui.Form.picSaveQuote.Enabled(True)			
			f.Intrinsic.Control.ExitSub					
			
		f.Intrinsic.Control.ElseIf(v.Args.sQuoteUploadQueueStatus,=,"ErrorAtCheck_Queue")
			'At check queue - already display msg at check queue
			f.Intrinsic.UI.CloseWaitDialog
			F.Intrinsic.UI.Msgbox("Quote upload is not successful.")
			gui.Form..Enabled(True)
			gui.Form.picSaveQuote.Enabled(True)			
			f.Intrinsic.Control.ExitSub				
		
		f.Intrinsic.Control.endif
		
	f.Intrinsic.Control.EndIf
	'*****************************************

	f.Intrinsic.Control.CallSub(Write_Log,"sCurrentWebImp","")
	f.Intrinsic.String.Build("Qte:{0} User:{1} {2} Trmnl:{3} at:{4}",v.Local.sQuote,v.Caller.User,v.Local.sName,v.Caller.Terminal,v.Ambient.Now,v.Local.sCurrentWebImp)
	f.Intrinsic.String.Build("Queued {0}",v.Local.sCurrentWebImp,v.Local.sHold)
	'Log Estimator: Preparation
	f.Intrinsic.Control.CallSub(Write_Log,"sCurrentWebImp",v.Local.sHold)	

	'Prepare
	f.Intrinsic.Control.CallSub(Delete_Existing_Quote_Core,"sQuote",v.Local.sQuote)
	f.Intrinsic.Control.If(v.Args.bDeleteQuoteSuccess,=,False)	
		f.Intrinsic.UI.CloseWaitDialog
		gui.Form..Enabled(True)
		gui.Form.picSaveQuote.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'These 3 columns have to be deleted from ORDUPLLines before the text file is generated
	f.Intrinsic.Control.If(v.DataView.ORDUPLLines!vTemp.Exists)
		f.Data.DataView.Close("ORDUPLLines","vTemp")	
	f.Intrinsic.Control.EndIf				
	f.Intrinsic.Control.If(v.DataTable.ORDUPLLines2.Exists)
		f.Data.DataTable.Close("ORDUPLLines2")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("ORDUPLLines","vTemp")
	f.Data.DataView.Todatatable("ORDUPLLines","vTemp","ORDUPLLines2",True)				
	f.Data.DataTable.RemoveColumn("ORDUPLLines","EXTENDED")
	F.Data.DataTable.RemoveColumn("ORDUPLLines","QTY")
	F.Data.DataTable.RemoveColumn("ORDUPLLines","PRICE")
	F.Data.DataTable.RemoveColumn("ORDUPLLines","CostDisplay")

	'*******CREATE QUOTE FILE *****
	f.Intrinsic.Control.CallSub(ORDUPLCreateFile,"sQuoteNumber",v.Local.sQuote)
	'******************************

	
	'Log Estimator: File created before upload
	f.Intrinsic.String.Build("Filed {0}",v.Local.sCurrentWebImp,v.Local.sHold)
	f.Intrinsic.Control.CallSub(Write_Log,"sCurrentWebImp",v.Local.sHold)		
	
	'********UPLOAD*******
	f.Intrinsic.Control.If(v.Local.bUseOtherWatchdog.Not)
		F.Global.General.CallWrapperSync(50,"ORDUPL")		
	
		'Deliberate the registry for other user to run the Web Importer	
		F.Global.Registry.AddValue("SUPERVSR",V.Caller.CompanyCode,"WEBIMPORTER",4986,"2001",False,"FREE",False,0,-1,v.Ambient.Date,12:00:00 AM)		
		'Log Estimator: Run Completed 
		f.Intrinsic.String.Build("Done {0}",v.Local.sCurrentWebImp,v.Local.sHold)
			
	f.Intrinsic.Control.Else
		'Log Estimator: Run Completed 
		f.Intrinsic.String.Build("WatchDog {0}",v.Local.sCurrentWebImp,v.Local.sHold)
	f.Intrinsic.Control.EndIf
	'*************************
	
	f.Intrinsic.Control.CallSub(Write_Log,"sCurrentWebImp",v.Local.sHold)
		
	'---------------------------------------------------
	'add the same 3 columns back in so we can use them again.
	f.Data.DataTable.AddColumn("ORDUPLLINES","QTY","FLOAT",0)
	F.Data.DataTable.AddColumn("ORDUPLLINES","PRICE","FLOAT",0)
	f.Data.DataTable.AddExpressionColumn("ORDUPLLINES","EXTENDED","FLOAT","QTY * PRICE")
	F.Data.DataTable.AddColumn("ORDUPLLINES","CostDisplay","FLOAT",0)
	
	f.Data.DataTable.DeleteRow("ORDUPLLines")
	f.Data.DataTable.AcceptChanges("ORDUPLLines")
	f.Data.DataTable.Merge("ORDUPLLines2","ORDUPLLines",False,2)
	'----------------------------------------------------			

	'CHECK RESULT --------------------------------------
	'loop for a limited number of times. Our quote should be found before this loop finishes the set number of tries
	f.Intrinsic.String.Build("select QUOTE_NO from v_quote_header where Quote_No = '{0}'",v.Local.sQuote.PSQLFriendly,v.Local.sSql)
	f.Intrinsic.Control.For(v.Local.iCount,1,v.Local.iWait,1)		
		f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
		f.Intrinsic.Control.If(v.Local.sRet,=,v.Local.sQuote)
			v.Local.bFound.Set(True)
			f.Intrinsic.Control.ExitFor(v.Local.iCount)
		f.Intrinsic.Control.EndIf
		f.Intrinsic.String.Build("Checking Quote time elapsed: {0}",v.Local.iCount,v.Local.sMsg)
		gui.Form..ShowAlert("CheckingQuote",v.Local.sQuote,v.Local.sMsg,v.Enum.Image!Open_Color)
		f.Intrinsic.UI.Sleep(1)
	f.Intrinsic.Control.Next(v.Local.iCount)

	f.Intrinsic.Control.If(v.Local.bFound,=,True)
		'open the quote	
		gui.Form..ShowAlert("OpenQuote","Opening Quote",v.Local.sQuote,v.Enum.Image!Open_Color)						
		f.Data.DataTable.AddRow("251000","QuoteNo",v.Local.sQuote,"Mode","O")
		F.Intrinsic.Control.CallSub(251000Async)	
	f.Intrinsic.Control.Else
		'Quote not found show log
		f.Intrinsic.UI.CloseWaitDialog
		f.Intrinsic.Control.CallSub(Display_Log)		
		gui.Form..ShowAlert("OpenQuote",v.Local.sQuote,"Cannot find order uploaded. Please verify the log.",v.Enum.Image!Open_Color)
		gui.Form..Enabled(True)
		gui.Form.picSaveQuote.Enabled(True)
		f.Intrinsic.Control.ExitSub		
	F.Intrinsic.Control.EndIf
	'---------------------------------------------------

	f.Intrinsic.UI.CloseWaitDialog
	gui.Form..Enabled(True)
	gui.Form.picSaveQuote.Enabled(True)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picSaveQuote_Click.End

Program.Sub.Check_Queue.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	v.Local.sCurrentQuoteUpload.Declare
	v.Local.sSupervsrID.Declare
	v.Local.iCnt.Declare
	v.Local.iWait.Declare
	v.Local.bFreeToLaunch.Declare
	v.Local.bGoodToGo.Declare
	v.Local.sCurrentQuoteUpload2.Declare
	v.Local.sSQL.Declare
	v.Local.sRet.Declare

	v.Global.bForcedToStop.Set(False)
	'Max: 3 minutes
	gui.FormQuoteUploadProgress.txtCurrentToken.Text("")
	gui.FormQuoteUploadProgress..Visible(True)
	v.Local.bGoodToGo.Set(False)
	
	f.Intrinsic.Control.DoUntil(v.Local.bGoodToGo)
	
		gui.FormQuoteUploadProgress.proBar1.Max(15000)
		f.Intrinsic.String.Build("{0}***{1}***{2}",v.Caller.User,v.Args.sQuoteNumber,v.Ambient.Now,v.Local.sCurrentQuoteUpload)
		'Try to update
		f.Intrinsic.String.Build("Update GS_REGISTRY set SVAL = '{0}' where  user_id = '{1}' and company = '{2}' and program = 'WEBIMPORTER' AND reg_id = '4986' AND SEQ = '2001' AND (rtrim(ltrim(Isnull(SVAL,'')))   = 'FREE'  OR rtrim(ltrim(Isnull(SVAL,'')))  = '')",v.Local.sCurrentQuoteUpload,v.Global.sSupervsrID,v.Caller.CompanyCode,v.Local.sSQL)
		F.ODBC.Connection!commonCC.OpenCommonConnection(300)
		f.ODBC.Connection!commonCC.Execute(v.Local.sSQL)
		f.ODBC.Connection!commonCC.Close
		
		'Read again to see if my token is there (if my previous update is success and my previous update is success only when the SVAL = '' or SVAL = 'FREE')
		F.Global.Registry.ReadValue(v.Global.sSupervsrID,V.Caller.CompanyCode,"WEBIMPORTER",4986,2001,5,"",V.local.sCurrentQuoteUpload2)	
		gui.FormQuoteUploadProgress.txtCurrentToken.Text(V.local.sCurrentQuoteUpload2)
		
		'IsGoodToGo
		f.Intrinsic.Control.If(v.Local.sCurrentQuoteUpload.Trim,=,v.Local.sCurrentQuoteUpload2.Trim)
			v.Local.bGoodToGo.Set(True)
			f.Intrinsic.Variable.AddRV("sQuoteUploadQueueStatus","IsGoodToGo")
			f.Intrinsic.Variable.AddRV("sTokenValue",v.Local.sCurrentQuoteUpload.Trim)
			gui.FormQuoteUploadProgress..Visible(False)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.Else
			f.Intrinsic.Math.Add(v.Local.iWait,100,v.Local.iWait)
			gui.FormQuoteUploadProgress.proBar1.Value(v.Local.iWait)
			f.Intrinsic.UI.SleepMS(100)
			'f.Intrinsic.UI.Msgbox("i sleep")
			f.Intrinsic.Control.If(v.Local.iWait,=,15000)
			
				'Check maybe this is the first time, the registry has not been initialized yet
				f.Intrinsic.String.Build("Select * from GS_Registry where Reg_ID = '4986' and Company = '{0}' and seq = '2001' and User_id = '{1}'",v.Caller.CompanyCode,v.Global.sSupervsrID,v.Local.sSQL)
				F.ODBC.Connection!commonCC.OpenCommonConnection(300)
				f.ODBC.Connection!commonCC.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
				f.ODBC.Connection!commonCC.Close	
				f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
					F.Global.Registry.AddValue("SUPERVSR",V.Caller.CompanyCode,"WEBIMPORTER",4986,"2001",False,v.Local.sCurrentQuoteUpload,False,0,-1,v.Ambient.Date,12:00:00 AM)
					v.Local.bGoodToGo.Set(True)
					f.Intrinsic.Variable.AddRV("sQuoteUploadQueueStatus","IsGoodToGo")
					f.Intrinsic.Variable.AddRV("sTokenValue",v.Local.sCurrentQuoteUpload.Trim)
					gui.FormQuoteUploadProgress..Visible(False)
					f.Intrinsic.Control.ExitSub
				f.Intrinsic.Control.EndIf
					
				v.Local.iWait.Set(0)
				gui.FormQuoteUploadProgress.proBar1.Value(1)
				
			f.Intrinsic.Control.EndIf			
		f.Intrinsic.Control.EndIf
		
		'IsForcedToStopped (Deactivated closed button, so now never go here)
		f.Intrinsic.Control.If(v.Global.bForcedToStop)
			f.Intrinsic.Variable.AddRV("sQuoteUploadQueueStatus","IsForcedToStopped")
			f.Intrinsic.Variable.AddRV("sTokenValue",v.Local.sCurrentQuoteUpload.Trim)
			
			f.Intrinsic.String.Build("Update GS_REGISTRY set SVAL = 'FREE' where  user_id = '{1}' and company = '{2}' and program = 'WEBIMPORTER' AND reg_id = '4986' AND SEQ = '2001' AND rtrim(ltrim(Isnull(SVAL,'')))   = '{0}'",v.Local.sCurrentQuoteUpload,v.Global.sSupervsrID,v.Caller.CompanyCode,v.Local.sSQL)
			F.ODBC.Connection!commonCC.OpenCommonConnection(300)
			f.ODBC.Connection!commonCC.Execute(v.Local.sSQL)
			f.ODBC.Connection!commonCC.Close			
			
			gui.FormQuoteUploadProgress..Visible(False)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf	
		
	f.Intrinsic.Control.Loop	
	
	gui.FormQuoteUploadProgress..Visible(False)
	
	f.Intrinsic.Variable.AddRV("sQuoteUploadQueueStatus","IsGoodToGo")
	f.Intrinsic.Variable.AddRV("sTokenValue",v.Local.sCurrentQuoteUpload.Trim)
	
	'Return variable 
	'sQuoteUploadQueueStatus:	
		'IsForcedToStopped	
		'IsStillBusyAtTimeOut
		'IsGoodToGo	
		
F.Intrinsic.Control.Catch
	f.Intrinsic.Variable.AddRV("sQuoteUploadQueueStatus","ErrorAtCheck_Queue")
	f.Intrinsic.Variable.AddRV("sTokenValue",v.Local.sCurrentQuoteUpload.Trim)

	F.Global.Registry.AddValue("SUPERVSR",V.Caller.CompanyCode,"WEBIMPORTER",4986,"2001",False,"FREE",False,0,-1,v.Ambient.Date,12:00:00 AM)
	
	gui.FormQuoteUploadProgress..Visible(False)
	f.Intrinsic.UI.Msgbox(v.Ambient.ErrorDescription,"Check_Queue")
F.Intrinsic.Control.EndTry
Program.Sub.Check_Queue.End

Program.Sub.picOpenQuote_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	v.Local.sQuote.Declare
	V.Local.sGSSPart.Declare
	v.Local.sPart.Declare
	v.Local.sRev.Declare
	v.Local.sDesc.Declare
	v.Local.sDate.Declare
	v.Local.iCnt.Declare
	v.Local.sQty.Declare
	v.Local.sPrice.Declare
	v.Local.sExtended.Declare
	v.Local.sWeight.Declare
	v.Local.sCost.Declare
	v.Local.sDateQuote.Declare
	v.Local.sDateItemProm.Declare
	v.Local.sDateDue.Declare
	v.Local.sCustName.Declare
	v.Local.sContactName.Declare
	v.Local.sCustomer.Declare
	v.Local.sSuffix.Declare
	v.Local.fCost.Declare

	gui.Form.picOpenQuote.Enabled(False)
	
	f.Intrinsic.Control.CallSub(Check_Work_Saved)
	f.Intrinsic.Control.If(v.Args.bStop)
		gui.Form.picOpenQuote.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'basis for the quote browser
	V.Local.sSql.Set("select CM.NAME_CUSTOMER AS NAME, QT.CUSTOMER, QT.QUOTE_NO,QT.Quote_Suffix as Suffix, QT.DATE_QUOTE AS QUOTED_DATE, QT.CUSTOMER_PO FROM V_QUOTE_HEADER QT LEFT JOIN V_CUSTOMER_MASTER CM ON QT.CUSTOMER = CM.CUSTOMER ORDER BY QUOTED_DATE")
	'open browser
	f.Intrinsic.UI.Browser("Select Quote","conx",v.Local.sSql,"Name*!*Customer*!*Quote*!*Suffix*!*Quote Date*!*Customer PO","300*!*100*!*100*!*100*!*100*!*200",V.Local.sRet)
	
	F.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
		'a quote was selected
		F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
		V.Local.sQuote.Set(v.Local.sRet(2))
		v.Local.sCustName.Set(v.Local.sRet(0))
		v.Local.sCustomer.Set(v.Local.sRet(1))
		v.Local.sSuffix.Set(v.Local.sRet(3))
		f.Intrinsic.Control.CallSub(Clear_Quote)
		
		'Load header
		f.Intrinsic.String.Build("select Top 1 h.CUSTOMER as CustomerNo,h.QUOTE_NO as OrderNumber,'0000000000' as Freight,h.Date_Due,'' as OrderDueDate,h.Date_Quote,'' as OrderDate ,h.User_1 as UserField1Head,h.USER_2 as UserField2Head,h.USER_3 as UserField3Head,h.USER_4 as UserField4Head,h.USER_5 as UserField5Head ,h.CUSTOMER_PO as CustomerPO,'S' as DataType,h.SHIP_VIA as ShipVia,h.Carrier_CD as Carrier,h.SALESPERSON  as SalesMan ,'1' as OverrideAutoNumbering,'000000000000000' as CashAccount,s.NAME_CUSTOMER_SHIP as ShipToName,s.ADDRESS_1_SHIP as ShipToAddress1,s.ADDRESS_2_SHIP as ShipToAddress2,s.ADDRESS_3_SHIP as ShipToAddress3,s.CITY_SHIP as ShipToCity,s.STATE_SHIP as ShipToState,s.CODE_ZIP_SHIP as ShipToZip,s.COUNTRY_SHIP as ShipToCountry,s.ATTENTION_SHIP as ShipToAttention,s.Ship_ID as ShipToID from v_Quote_Header h left join v_QUOTE_SHIP_TO s on h.Quote_No = s.Quote_No where h.quote_no = '{0}' and h.Quote_Suffix = '{1}'",v.Local.sQuote,v.Local.sSuffix,v.Local.sSql)
		f.Intrinsic.Control.If(v.DataTable.Head_Temp.Exists)
			f.Data.DataTable.Close("Head_Temp")
		f.Intrinsic.Control.EndIf
		f.Data.DataTable.CreateFromSQL("Head_Temp","conx",v.Local.sSql,True)
		'Format value!!!!
		f.Intrinsic.Control.If(v.DataTable.Head_Temp.RowCount,=,0)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("No Quote Header found.","Attention")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			gui.Form.picOpenQuote.Enabled(True)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		
		'Date_Due
		F.Intrinsic.String.Format(v.DataTable.Head_Temp(0).Date_Due!FieldValString,"YYYYMMDD",V.Local.sDateDue)
		F.Intrinsic.String.Format(v.DataTable.Head_Temp(0).Date_Quote!FieldValString,"YYYYMMDD",V.Local.sDateQuote)
		f.Data.DataTable.SetValue("Head_Temp",0,"OrderDueDate",v.Local.sDateDue,"OrderDate",v.Local.sDateQuote)
		f.Data.DataTable.AddColumn("Head_Temp","Transaction","String","Q")
		
		f.Data.DataTable.RemoveColumn("Head_Temp","Date_Due")
		f.Data.DataTable.RemoveColumn("Head_Temp","Date_Quote")		
		
		'Remove columns
		f.Data.DataTable.AcceptChanges("Head_Temp")		
		f.Data.DataTable.Merge("Head_Temp","ORDUPL",False,2)
		
		''ContactName|ContactPhone|ContactEmail
		f.Intrinsic.String.Build("Select Contact as ContactName,Contact_Phone as ContactPhone,Contact_Email as ContactEmail,Contact_Ext from V_Quote_Bill_To Where Quote_No = '{0}'",v.Local.sQuote,v.Local.sSql)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			v.Local.sContactName.Set(v.Local.sRet(0).Trim)
			'Set ContactName
			f.Intrinsic.Control.If(v.DataTable.ORDUPL.RowCount,>,0)
				f.Data.DataTable.SetValue("ORDUPL",0,"ContactName",v.Local.sRet(0).trim)
			f.Intrinsic.Control.EndIf
			'Set ContactPhone, ContactEmail
			f.Intrinsic.Control.If(v.DataTable.ORDUPLExtra.RowCount,>,0)
				f.Data.DataTable.SetValue("ORDUPLExtra",0,"ContactPhone",v.Local.sRet(1).Trim,"ContactEmail",v.Local.sRet(2).Trim)
			f.Intrinsic.Control.Else
			
				F.Data.DataTable.AddRow("ORDUPLExtra","TextPosition","H","ApplyTextToQuote","Y","ContactPhone",v.Local.sRet(1).Trim,"ContactEmail",v.Local.sRet(2).Trim)
				
			f.Intrinsic.Control.EndIf

		f.Intrinsic.Control.Else
		
			F.Data.DataTable.AddRow("ORDUPLExtra","TextPosition","H","ApplyTextToQuote","Y")
		
		f.Intrinsic.Control.EndIf
		
		'Set screen header
		f.Intrinsic.Control.BlockEvents
		gui.Form.txtQuote.Text(v.Local.sQuote)
		gui.Form.txtQuote.Enabled(False)
		gui.Form.txtCustNo.Text(v.Local.sCustomer)
		gui.Form.txtCustName.Text(v.Local.sCustName)
		gui.Form.ddlSalesRep.Text(v.DataTable.ORDUPL(0).SalesMan!FieldValString)
		gui.Form.ddlContact.Text(v.Local.sContactName)
		f.Intrinsic.Control.UnBlockEvents
			
		'Load Lines
		f.Intrinsic.String.Build("select LEFT(RECORD_NO,3) as LineNumber,substring(Record_No,4,1) as Filler1,QTY_QUOTED as Qty,'' as QtyOrdered,WEIGHT as WeightOrig,'' as Weight,Price as Price,'' as QuotedPrice,'' as OverridePrice,extension as Extended,'' as Extension ,Cost as CostDisplay,'' as Cost,Date_Quote,''  as LineOrderDate,DATE_ITEM_PROM,''  as LinePromiseDate ,UM_QUOTE as UM,Substring(PART,1,17) as PartNumber,Substring(PART,18,3) as  PartRev,Location as PartLoc,DESCRIPTION as PartDesc,Product_Line as PL,USER_1 as UserField1,USER_2 as UserField2,USER_3 as UserField3,USER_4 as UserField4,USER_5 as UserField5 from v_quote_lines where quote_no = '{0}' ",v.Local.sQuote,v.Local.sSql)
		f.Intrinsic.Control.If(v.DataTable.Line_Temp.Exists)
			f.Data.DataTable.Close("Line_Temp")
		f.Intrinsic.Control.EndIf
		f.Data.DataTable.CreateFromSQL("Line_Temp","conx",v.Local.sSql,True)
		'Format value
		F.Intrinsic.Control.For(V.Local.iCnt,0,v.DataTable.Line_Temp.RowCount--,1)
		
			f.Intrinsic.String.Format(v.DataTable.Line_Temp(v.Local.iCnt).Qty!FieldValString,"000000000.0000",v.Local.sQty)
			f.Intrinsic.String.Replace(v.Local.sQty,".","",v.Local.sQty)
			'Price
			f.Intrinsic.String.Format(v.DataTable.Line_Temp(v.Local.iCnt).Price!FieldValString,"0000000000.000000",v.Local.sPrice)
			f.Intrinsic.String.Replace(v.Local.sPrice,".","",v.Local.sPrice)
			'Extended
			F.Intrinsic.String.Format(v.DataTable.Line_Temp(v.Local.iCnt).Extended!FieldValString,"0000000000.000000",V.Local.sExtended)
			F.Intrinsic.String.Replace(V.Local.sExtended,".","",V.Local.sExtended)	
			'Weight
			F.Intrinsic.String.Format(v.DataTable.Line_Temp(v.Local.iCnt).WeightOrig!FieldValString,"0000000.000",V.Local.sWeight)
			F.Intrinsic.String.Replace(V.Local.sWeight,".","",V.Local.sWeight)				
			'Cost
			F.Intrinsic.String.Format(v.DataTable.Line_Temp(v.Local.iCnt).CostDisplay!FieldValString,"0000000000.000000",V.Local.sCost)
			F.Intrinsic.String.Replace(V.Local.sCost,".","",V.Local.sCost)				
	
			'Date-Quoted
			F.Intrinsic.String.Format(v.DataTable.Line_Temp(v.Local.iCnt).Date_Quote!FieldValString,"YYYYMMDD",V.Local.sDateQuote)
			F.Intrinsic.String.Format(v.DataTable.Line_Temp(v.Local.iCnt).DATE_ITEM_PROM!FieldValString,"YYYYMMDD",V.Local.sDateItemProm)
			
			f.Data.DataTable.SetValue("Line_Temp",v.Local.iCnt,"QtyOrdered",v.Local.sQty,"QuotedPrice",v.Local.sPrice,"OverridePrice",v.Local.sPrice,"Extension",v.Local.sExtended,"Weight",v.Local.sWeight,"Cost",v.Local.sCost,"LineOrderDate",v.Local.sDateQuote,"LinePromiseDate",v.Local.sDateItemProm)		
		
		F.Intrinsic.Control.Next(V.Local.iCnt)
		
		f.Data.DataTable.RemoveColumn("Line_Temp","WeightOrig")
		f.Data.DataTable.RemoveColumn("Line_Temp","Date_Quote")
		f.Data.DataTable.RemoveColumn("Line_Temp","DATE_ITEM_PROM")	
		
		'Remove columns
		f.Data.DataTable.AcceptChanges("Line_Temp")		
		f.Data.DataTable.Merge("Line_Temp","ORDUPLLINES",False,2)		
		
		f.Data.DataTable.AcceptChanges("ORDUPL")		
		f.Data.DataTable.AcceptChanges("ORDUPLLINES")
		
		'Check document Control
		
	F.Intrinsic.Control.EndIf
	
	gui.Form.picOpenQuote.Enabled(True)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picOpenQuote_Click.End

Program.Sub.Bind_UM_Dropdown_GV_QLines.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	f.Intrinsic.String.Build("select CODE from V_UM_CODES order by Code'",v.Local.sUM.PSQLFriendly,V.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(V.Local.sSql,V.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"",or,v.Local.sRet.UCase,<>,v.Local.sUM)
		f.Intrinsic.UI.Browser("UNIT OF MEASURE","conx","SELECT CODE, DESCR from V_UM_CODES","CODE*!*DESCRIPTION","60*!*300",V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			gui.Form.txtUM.text(V.Local.sRet(0).Trim)
		f.Intrinsic.Control.Else
			gui.Form.txtUM.text("")
			gui.Form.txtUM.SetFocus
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Bind_UM_Dropdown_GV_QLines.End

Program.Sub.Log_UnLoad.Start
gui.Log..Visible(False)
Program.Sub.Log_UnLoad.End

Program.Sub.cmdReadLog_Click.Start
Program.Sub.cmdReadLog_Click.End

Program.Sub.cmdParseLog_Click.Start
Program.Sub.cmdParseLog_Click.End

Program.Sub.txtMaxiWait_LostFocus.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	F.Intrinsic.Control.If(V.Screen.Form!txtMaxiWait.Text.Trim,=,"")
		gui.Form.txtMaxiWait.Text("15")
	F.Intrinsic.Control.EndIf	
	F.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtMaxiWait_LostFocus.End

Program.Sub.Delete_Existing_Quote_Core.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSQL.Declare

	'Delete current quote tables first
	f.Intrinsic.String.Build("Delete from QUOTE_HEADER where quote_no = '{0}'",v.Args.sQuote,v.Local.sSql)
	f.ODBC.Connection!conx.Execute(v.Local.sSql)
	f.Intrinsic.String.Build("Delete from QUOTE_BILL_TO where quote_no = '{0}'",v.Args.sQuote,v.Local.sSql)
	f.ODBC.Connection!conx.Execute(v.Local.sSql)
	f.Intrinsic.String.Build("Delete from QUOTE_SHIP_To where quote_no = '{0}'",v.Args.sQuote,v.Local.sSql)
	f.ODBC.Connection!conx.Execute(v.Local.sSql)
	f.Intrinsic.String.Build("Delete from QUOTE_HF_TEXT where quote_no = '{0}'",v.Args.sQuote,v.Local.sSql)
	f.ODBC.Connection!conx.Execute(v.Local.sSql)
	f.Intrinsic.String.Build("Delete from QUOTE_LINES where quote_no = '{0}'",v.Args.sQuote,v.Local.sSql)
	f.ODBC.Connection!conx.Execute(v.Local.sSql)
	f.Intrinsic.String.Build("Delete from QUOTE_LN_TEXT where quote_NUMBER = '{0}'",v.Args.sQuote,v.Local.sSql)
	f.ODBC.Connection!conx.Execute(v.Local.sSql)
	f.Intrinsic.String.Build("Delete from QUOTE_TAX where quote_no = '{0}'",v.Args.sQuote,v.Local.sSql)
	f.ODBC.Connection!conx.Execute(v.Local.sSql)
	f.Intrinsic.Variable.AddRV("bDeleteQuoteSuccess",True)
	
f.Intrinsic.Control.Catch
	'Actually when a user open a quote in core screen, the core does not block the quote
	F.Intrinsic.UI.Msgbox("Quote may be opened in Standard screen.","Unsuccessful Transaction")
    f.Intrinsic.Variable.AddRV("bDeleteQuoteSuccess",False)
f.Intrinsic.Control.EndTry
Program.Sub.Delete_Existing_Quote_Core.End

Program.Sub.Write_Log.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bEx.Declare
	v.Local.sRet.Declare
	
'	f.Intrinsic.File.Exists(v.Global.sEstimatorQuoteLog,v.Local.bEx)
'	f.Intrinsic.Control.If(v.Local.bEx)
'		f.Intrinsic.File.File2String(v.Global.sEstimatorQuoteLog,v.Local.sRet)		
'	f.Intrinsic.Control.EndIf	
'	f.Intrinsic.String.Build("{0}{1}{2}: {3}",v.Local.sRet,v.Ambient.NewLine,v.Ambient.Now,v.Args.sCurrentWebImp,v.Local.sRet)
'	f.Intrinsic.File.String2File(v.Global.sEstimatorQuoteLog,v.Local.sRet)	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Write_Log.End

Program.Sub.Display_Log.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bEx.Declare
	v.Local.sRet.Declare
	v.Local.iCnt.Declare
	v.Local.iExit.Declare
	v.Local.sContent.Declare

	v.Local.sRet.Set("Web Importer Err Log does not exist.")
	f.Intrinsic.File.Exists(v.Global.sWebImporterLog,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		f.Intrinsic.File.File2String(v.Global.sWebImporterLog,v.Local.sRet)	
		f.Intrinsic.String.Split(v.Local.sRet,v.Ambient.NewLine,v.Local.sRet)
		f.Intrinsic.Control.For(v.Local.iCnt,v.Local.sRet.UBound,0,-1)		
			f.Intrinsic.Control.If(v.Local.iExit,=,100)
				f.Intrinsic.Control.ExitFor(v.Local.iCnt)
			f.Intrinsic.Control.EndIf
			f.Intrinsic.String.Replace(v.Local.sRet(v.Local.iCnt),v.Global.sNull," ",v.Local.sRet(v.Local.iCnt))
			f.Intrinsic.String.Build("{0}{1}{2}",v.Local.sRet(v.Local.iCnt),v.Ambient.NewLine,v.Local.sContent,v.Local.sContent)			
			f.Intrinsic.Math.Add(v.Local.iExit,1,v.Local.iExit)
		f.Intrinsic.Control.Next(v.Local.iCnt)
		v.Local.sRet.Set(v.Local.sContent)
	f.Intrinsic.Control.EndIf
	gui.Log.txtLog.Text(v.Local.sRet)
	
	'v.Local.sRet.Set("Estimator Log does not exist.")
'	f.Intrinsic.File.Exists(v.Global.sEstimatorQuoteLog,v.Local.bEx)
'	f.Intrinsic.Control.If(v.Local.bEx)
'		f.Intrinsic.File.File2String(v.Global.sEstimatorQuoteLog,v.Local.sRet)		
'	f.Intrinsic.Control.EndIf		
	'gui.Log.txtEstimatorLog.Text(v.Local.sRet)	
	gui.Log..Caption("Log")
	
	gui.Log..Visible(True)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.Display_Log.End

Program.Sub.picLogIncrease_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iWidth.Declare
	v.Local.iHeight.Declare
	

	'Increase txtLog
	f.Intrinsic.Math.Add(v.Screen.Log!txtLog.Width,v.Global.iSizeIncrement,v.Local.iWidth)
	v.Local.iHeight.Set(v.Screen.Log!txtLog.Height)
	'Resize txtLog
	gui.Log.txtLog.Size(v.Local.iWidth,v.Local.iHeight)
	
	'Increase txtEstimatorLog
	f.Intrinsic.Math.Sub(v.Screen.Log!txtEstimatorLog.Width,v.Global.iSizeIncrement,v.Local.iWidth)
	v.Local.iHeight.Set(v.Screen.Log!txtEstimatorLog.Height)
	'Resize txtEstimatorLog
	gui.Log.txtEstimatorLog.Size(v.Local.iWidth,v.Local.iHeight)
	gui.Log.txtEstimatorLog.Position(v.Screen.Log!txtLog.Width,765)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picLogIncrease_Click.End

Program.Sub.picLogDecrease_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iWidth.Declare
	v.Local.iHeight.Declare	

	'Increase txtLog
	f.Intrinsic.Math.Sub(v.Screen.Log!txtLog.Width,v.Global.iSizeIncrement,v.Local.iWidth)
	v.Local.iHeight.Set(v.Screen.Log!txtLog.Height)
	'Resize txtLog
	gui.Log.txtLog.Size(v.Local.iWidth,v.Local.iHeight)
	
	'Increase txtEstimatorLog
	f.Intrinsic.Math.Add(v.Screen.Log!txtEstimatorLog.Width,v.Global.iSizeIncrement,v.Local.iWidth)
	v.Local.iHeight.Set(v.Screen.Log!txtEstimatorLog.Height)
	'Resize txtEstimatorLog
	gui.Log.txtEstimatorLog.Size(v.Local.iWidth,v.Local.iHeight)
	gui.Log.txtEstimatorLog.Position(v.Screen.Log!txtLog.Width,765)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picLogDecrease_Click.End

Program.Sub.cmdReadAllLog_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.bEx.Declare
	v.Local.sRet.Declare
	
	v.Local.sRet.Set("Web Importer Err Log does not exist.")
	f.Intrinsic.File.Exists(v.Global.sWebImporterLog,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx)
		f.Intrinsic.File.File2String(v.Global.sWebImporterLog,v.Local.sRet)	
		f.Intrinsic.String.Replace(v.Local.sRet,v.Global.sNull," ",v.Local.sRet)
	f.Intrinsic.Control.EndIf		
	gui.Log.txtLog.Text(v.Local.sRet)
	
	'v.Local.sRet.Set("Estimator Log does not exist.")
'	f.Intrinsic.File.Exists(v.Global.sEstimatorQuoteLog,v.Local.bEx)
'	f.Intrinsic.Control.If(v.Local.bEx)
'		f.Intrinsic.File.File2String(v.Global.sEstimatorQuoteLog,v.Local.sRet)		
'	f.Intrinsic.Control.EndIf		
	'gui.Log.txtEstimatorLog.Text(v.Local.sRet)	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdReadAllLog_Click.End

Program.Sub.DecimalRTR_UnLoad.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	
	gui.DecimalRTR..AlwaysOnTop(False)
	gui.DecimalRTR..Visible(False)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.DecimalRTR_UnLoad.End

Program.Sub.picRTRDecimal_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sTop.Declare
	
	gui.DecimalRTR..Visible(True)
	f.Intrinsic.Control.If(v.Global.bFirstDecimalLoad)
		f.Intrinsic.Math.Add(v.Screen.Form!frameMiddle.Top,v.Screen.Form!frameRouterGrid.Top,v.Local.sTop)
		f.Intrinsic.Math.Add(v.Local.sTop,800,v.Local.sTop)
		gui.DecimalRTR..Position(v.Screen.DecimalRTR.Left,v.Local.sTop)
		v.Global.bFirstDecimalLoad.Set(False)
	f.Intrinsic.Control.EndIf	
	gui.DecimalRTR..AlwaysOnTop(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picRTRDecimal_Click.End

Program.Sub.cmdResetRTRDecimal_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iCnt.Declare
	v.Local.sMask.Declare
	v.Local.sDec.Declare
	
	f.Intrinsic.UI.InvokeWaitDialog("Setting Default Decimal. Please wait...")
	f.Data.DataTable.DeleteRow("Decim")
	f.Data.DataTable.AcceptChanges("Decim")
	
	f.Intrinsic.Control.CallSub(Set_Default_RTRDecimal)	
	
	gui.Form.GGC_Bom.SuspendLayout
	'Decimal for cells
	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.Decim.RowCount--,1)
		f.Intrinsic.String.Build("{0} ###,###,###,##{1}{2}",v.DataTable.Decim(v.Local.iCnt).Sign!FieldValString,v.DataTable.Decim(v.Local.iCnt).LeadZero!FieldValString,v.DataTable.Decim(v.Local.iCnt).Dec!FieldValString,v.Local.sMask)
		gui.Form.GGC_Bom.SetColumnProperty("GV_CHILD",v.DataTable.Decim(v.Local.iCnt).Col!FieldValString,"DisplayCustomNumeric",v.Local.sMask)
	f.Intrinsic.Control.Next(v.Local.iCnt)	
	'Summary
	f.Intrinsic.Control.CallSub(Format_RTRSummary)	
	gui.Form.GGC_Bom.ResumeLayout

	f.Data.DataView.Create("Decim","vDecim")
	f.Data.DataView.ToString("Decim","vDecim",v.DataTable.Decim.FieldNames,"*!*","#$#",v.Local.sDec)
	f.Data.DataView.Close("Decim","vDecim")	

	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"RTRDECIMAL",4986,"4001",False,"RTRDECIMAL",False,0,-999.0,1/1/1980,12:00:00 AM,v.Local.sDec)
	f.Intrinsic.UI.CloseWaitDialog
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdResetRTRDecimal_Click.End

Program.Sub.picClockLog_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iCnt.Declare
	v.Local.sMask.Declare
	
	gui.Form.picClockLog.Enabled(False)
	f.Intrinsic.Control.CallSub(Display_Log)
	gui.Form.picClockLog.Enabled(True)	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picClockLog_Click.End

Program.Sub.RTRGridFormat_UnLoad.Start
gui.RTRGridFormat..AlwaysOnTop(False)
gui.RTRGridFormat..Visible(False)
Program.Sub.RTRGridFormat_UnLoad.End

Program.Sub.cmdResetRTRGridFormat_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	f.Intrinsic.UI.InvokeWaitDialog("Please Wait....")
	
	gui.RTRGridFormat.gsRTRGridFormat.SuspendLayout
	
	f.Data.DataTable.DeleteRow("RTRGRIDFORMAT")
	F.Data.DataTable.AcceptChanges("RTRGRIDFORMAT")
	f.Intrinsic.Control.CallSub(Set_Default_RTRGridFormat)
	
	F.Intrinsic.Control.CallSub(Set_CellFormat)	
	F.Intrinsic.Control.CallSub(Set_CellFormat)	
	
	gui.RTRGridFormat.gsRTRGridFormat.ResumeLayout
	
	
	gui.Form.GGC_Bom.SuspendLayout
	f.Intrinsic.Control.CallSub(Set_Bulk_ChildFormat)	
	gui.Form.GGC_Bom.ResumeLayout
	
	F.Intrinsic.Control.CallSub(Save_RTRGridFormat_To_Registry)
	
	f.Intrinsic.UI.CloseWaitDialog
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdResetRTRGridFormat_Click.End

Program.Sub.picRTRGridFormat_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sTop.Declare
	
	gui.RTRGridFormat..Visible(True)
	f.Intrinsic.Control.If(v.Global.bFirstRTRGridFormatLoad)
		f.Intrinsic.Math.Add(v.Screen.Form!frameMiddle.Top,v.Screen.Form!frameRouterGrid.Top,v.Local.sTop)
		f.Intrinsic.Math.Add(v.Local.sTop,800,v.Local.sTop)
		gui.RTRGridFormat..Position(v.Screen.RTRGridFormat.Left,v.Local.sTop)
		v.Global.bFirstRTRGridFormatLoad.Set(False)
	f.Intrinsic.Control.EndIf
	
	gui.RTRGridFormat..AlwaysOnTop(True)

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picRTRGridFormat_Click.End

Program.Sub.StdColor_UnLoad.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	gui.RTRGridFormat.gsRTRGridFormat.Enabled(True)
	gui.StdColor..AlwaysOnTop(False)
	gui.StdColor..Visible(False)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.StdColor_UnLoad.End

Program.Sub.gsColor_RowCellClick.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iCnt.Declare
	v.Local.sColIndex.Declare
	v.Local.sCol.Declare
	v.Local.sColor.Declare	
	v.Local.sColorProperty.Declare
	
	f.Intrinsic.Control.SelectCase(v.Args.Column.UCase)
		F.Intrinsic.Control.Case("SELECT")
			gui.StdColor..AlwaysOnTop(False)			
			GUI.StdColor..Visible(False)
			gui.RTRGridFormat.gsRTRGridFormat.SuspendLayout
			'Get Color name
			v.Local.sColor.Set(v.DataTable.StdColor(v.Args.RowIndex).Name!FieldValString)
			
			'Set color to the setting grid
			'Set Text
			f.Data.DataTable.SetValue("RTRGridFormat",v.Global.iSelectFormat,v.Global.sColumn,v.Local.sColor)
			
			'Format color to the color setting grid
			gui.RTRGridFormat.gsRTRGridFormat.GetColumnIndexByName("GV_RTRGridFormat",v.Global.sColumn,V.Local.sColIndex)			
			f.Intrinsic.String.Replace(v.Global.sColumn,"HEADER","",v.Local.sColorProperty)
			f.Intrinsic.String.Replace(V.Local.sColorProperty,"CELL","",v.Local.sColorProperty)
			gui.RTRGridFormat.gsRTRGridFormat.SetCellAppearance("GV_RTRGridFormat",v.Local.sColIndex,v.Global.iSelectFormat,v.Local.sColorProperty,v.local.sColor) 
			
			gui.RTRGridFormat.gsRTRGridFormat.GetColumnIndexByName("GV_RTRGridFormat","ORIGCAP",V.Local.sColIndex)	
			gui.RTRGridFormat.gsRTRGridFormat.SetCellAppearance("GV_RTRGridFormat",v.Local.sColIndex,v.Global.iSelectFormat,v.Local.sColorProperty,v.local.sColor)
			gui.RTRGridFormat.gsRTRGridFormat.GetColumnIndexByName("GV_RTRGridFormat","CAPTION",V.Local.sColIndex)
			gui.RTRGridFormat.gsRTRGridFormat.SetCellAppearance("GV_RTRGridFormat",v.Local.sColIndex,v.Global.iSelectFormat,v.Local.sColorProperty,v.local.sColor) 
			
			gui.RTRGridFormat.gsRTRGridFormat.ResumeLayout
			
			'Format the color to the Child grid
			v.Local.sCol.Set(v.DataTable.RTRGridFormat(v.Global.iSelectFormat).Col!FieldValSTring)
			gui.Form.GGC_Bom.SuspendLayout
			gui.Form.GGC_Bom.SetColumnProperty("GV_Child",v.Local.sCol,v.Global.sColumn,v.local.sColor)
			gui.Form.GGC_Bom.ResumeLayout
			
			gui.RTRGridFormat.gsRTRGridFormat.Enabled(True)
			gui.Form..AlwaysOnTop(True)
			gui.Form..AlwaysOnTop(False)
			gui.RTRGridFormat..AlwaysOnTop(True)
			gui.RTRGridFormat..AlwaysOnTop(False)
			F.Intrinsic.Control.CallSub(Save_RTRGridFormat_To_Registry)
			
	f.Intrinsic.Control.EndSelect
	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.gsColor_RowCellClick.End

Program.Sub.gsRTRGridFormat_RowCellClick.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iCnt.Declare
	V.Local.sCaption.Declare
	v.Local.sCol.Declare
	v.Local.sCellProperty.Declare
	v.Local.sOrigCap.Declare	
	v.Local.sCellFontName.Declare
	v.Local.bBool.Declare
	
	v.Global.iSelectFormat.Set(v.Args.RowIndex)
	v.Global.sColumn.Set(v.Args.Column.UCase)
	
	v.Local.sCol.Set(v.DataTable.RTRGridFormat(v.Args.RowIndex).Col!FieldValTrim)	
	
	f.Intrinsic.Control.SelectCase(v.Args.Column.UCase)
		F.Intrinsic.Control.CaseAny("HEADERBACKCOLOR","HEADERFORECOLOR")
			gui.RTRGridFormat.gsRTRGridFormat.Enabled(False)		
			GUI.StdColor..Visible(True)
			gui.StdColor..AlwaysOnTop(True)
	
		f.Intrinsic.Control.Case("CELLFONTNAME")			
			gui.RTRGridFormat.gsRTRGridFormat.Enabled(False)		
			f.Intrinsic.Control.If(v.Global.bStdFont_Load.Not)
				f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.StdFont.RowCount--,1)
					gui.StdFont.gsFont.SetRowAppearance("GV_Font",v.Local.iCnt,"FontName",v.DataTable.StdFont(v.Local.iCnt).Name!FieldValString) 
				f.Intrinsic.Control.Next(v.Local.iCnt)	
				v.Global.bStdFont_Load.Set(True)	
			f.Intrinsic.Control.EndIf			
			gui.StdFont..Visible(True)
			gui.StdFont..AlwaysOnTop(True)
			
		f.Intrinsic.Control.CaseAny("HEADERFONTITALIC","HEADERFONTUNDERLINE","HEADERFONTBOLD")
		
			gui.RTRGridFormat.gsRTRGridFormat.SuspendLayout
			
			v.Local.bBool.Set(v.DataTable.RTRGridFormat(v.Args.RowIndex).[v.Args.Column]!FieldValString)
			f.Intrinsic.Control.If(v.Local.bBool)
				v.Local.bBool.Set(False)	
			f.Intrinsic.Control.Else
				v.Local.bBool.Set(True)
			f.Intrinsic.Control.EndIf	
			f.Data.DataTable.SetValue("RTRGridFormat",v.Args.RowIndex,v.Args.Column,v.Local.bBool)
			
			f.Intrinsic.String.Replace(v.Args.Column.UCase,"HEADER","",v.Local.sCellProperty)	
			gui.RTRGridFormat.gsRTRGridFormat.GetColumnIndexByName("GV_RTRGridFormat","OrigCap",V.Local.sOrigCap)
			gui.RTRGridFormat.gsRTRGridFormat.SetCellAppearance("GV_RTRGridFormat",v.Local.sOrigCap,v.Args.RowIndex,v.Local.sCellProperty,v.Local.bBool)
			gui.RTRGridFormat.gsRTRGridFormat.GetColumnIndexByName("GV_RTRGridFormat","CAPTION",V.Local.sCAPTION)
			gui.RTRGridFormat.gsRTRGridFormat.SetCellAppearance("GV_RTRGridFormat",v.Local.sCAPTION,v.Args.RowIndex,v.Local.sCellProperty,v.Local.bBool)			
			gui.RTRGridFormat.gsRTRGridFormat.ResumeLayout			
			
			gui.Form.GGC_Bom.SuspendLayout
			gui.Form.GGC_Bom.SetColumnProperty("GV_Child",v.Local.sCol,v.Args.Column.UCase,v.Local.bBool)
			gui.Form.GGC_Bom.ResumeLayout
			F.Intrinsic.Control.CallSub(Save_RTRGridFormat_To_Registry)
			
		f.Intrinsic.Control.CaseAny("CELLFONTBOLD","CELLFONTITALIC","CELLFONTUNDERLINE","CELLFONTSTRIKEOUT","CELLTRIMMING")
			
			gui.RTRGridFormat.gsRTRGridFormat.SuspendLayout
			v.Local.bBool.Set(v.DataTable.RTRGridFormat(v.Args.RowIndex).[v.Args.Column]!FieldValString)
			f.Intrinsic.Control.If(v.Local.bBool)
				v.Local.bBool.Set(False)	
			f.Intrinsic.Control.Else
				v.Local.bBool.Set(True)
			f.Intrinsic.Control.EndIf	
			f.Data.DataTable.SetValue("RTRGridFormat",v.Args.RowIndex,v.Args.Column,v.Local.bBool)		
			
			f.Intrinsic.String.Replace(v.Args.Column.UCase,"CELL","",v.Local.sCellProperty)	
			gui.RTRGridFormat.gsRTRGridFormat.GetColumnIndexByName("GV_RTRGridFormat","CELLFONTNAME",V.Local.sCellFontName)			
			gui.RTRGridFormat.gsRTRGridFormat.SetCellAppearance("GV_RTRGridFormat",v.Local.sCellFontName,v.Args.RowIndex,v.Local.sCellProperty,v.Local.bBool)			
			gui.RTRGridFormat.gsRTRGridFormat.ResumeLayout	
			
			gui.Form.GGC_Bom.SuspendLayout
			gui.Form.GGC_Bom.SetColumnProperty("GV_Child",v.Local.sCol,v.Args.Column.UCase,v.Local.bBool)
			gui.Form.GGC_Bom.ResumeLayout	
			F.Intrinsic.Control.CallSub(Save_RTRGridFormat_To_Registry)
	
	f.Intrinsic.Control.EndSelect			
	
	f.Intrinsic.Control.EndSelect	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.gsRTRGridFormat_RowCellClick.End

Program.Sub.gsRTRGridFormat_CellValueChanged.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sCol.Declare
	v.Local.sValue.Declare	
	V.Local.sCaption.Declare
	v.Local.sOrigCap.Declare	
	v.Local.sCellFontName.Declare	
	
	v.Global.iSelectFormat.Set(v.Args.RowIndex)
	v.Global.sColumn.Set(v.Args.Column.UCase)
	v.Local.sCol.Set(v.DataTable.RTRGridFormat(v.Args.RowIndex).Col!FieldValTrim)
	
	v.Local.sValue.Set(v.DataTable.RTRGridFormat(v.Args.RowIndex).[v.Global.sColumn]!FieldValTrim)
	
	f.Intrinsic.Control.SelectCase(v.Args.Column.UCase)
		F.Intrinsic.Control.CaseAny("CAPTION","TOOLTIP")		
			gui.Form.GGC_Bom.SuspendLayout
			gui.Form.GGC_Bom.SetColumnProperty("GV_Child",v.Local.sCol,v.Args.Column.UCase,v.Local.sValue)	
			gui.Form.GGC_Bom.ResumeLayout		
			F.Intrinsic.Control.CallSub(Save_RTRGridFormat_To_Registry)	
			
	f.Intrinsic.Control.Case("HEADERFONTSIZE")
			gui.RTRGridFormat.gsRTRGridFormat.SuspendLayout
			gui.RTRGridFormat.gsRTRGridFormat.GetColumnIndexByName("GV_RTRGridFormat","OrigCap",V.Local.sOrigCap)
			gui.RTRGridFormat.gsRTRGridFormat.SetCellAppearance("GV_RTRGridFormat",v.Local.sOrigCap,v.Args.RowIndex,"FONTSIZE",v.Local.sValue)
			gui.RTRGridFormat.gsRTRGridFormat.GetColumnIndexByName("GV_RTRGridFormat","CAPTION",V.Local.sCAPTION)
			gui.RTRGridFormat.gsRTRGridFormat.SetCellAppearance("GV_RTRGridFormat",v.Local.sCAPTION,v.Args.RowIndex,"FONTSIZE",v.Local.sValue)			
			gui.RTRGridFormat.gsRTRGridFormat.ResumeLayout			
			
			gui.Form.GGC_Bom.SuspendLayout
			gui.Form.GGC_Bom.SetColumnProperty("GV_Child",v.Local.sCol,v.Args.Column.UCase,v.Local.sValue)
			gui.Form.GGC_Bom.ResumeLayout
			F.Intrinsic.Control.CallSub(Save_RTRGridFormat_To_Registry)			
			
	f.Intrinsic.Control.Case("CELLFONTSIZE")		
			gui.RTRGridFormat.gsRTRGridFormat.SuspendLayout
			gui.RTRGridFormat.gsRTRGridFormat.GetColumnIndexByName("GV_RTRGridFormat","CELLFONTNAME",V.Local.sCellFontName)			
			gui.RTRGridFormat.gsRTRGridFormat.SetCellAppearance("GV_RTRGridFormat",v.Local.sCellFontName,v.Args.RowIndex,"FONTSIZE",v.Local.sValue)			
			gui.RTRGridFormat.gsRTRGridFormat.ResumeLayout	
			
			gui.Form.GGC_Bom.SuspendLayout
			gui.Form.GGC_Bom.SetColumnProperty("GV_Child",v.Local.sCol,v.Args.Column.UCase,v.Local.sValue)
			gui.Form.GGC_Bom.ResumeLayout	
			F.Intrinsic.Control.CallSub(Save_RTRGridFormat_To_Registry)		
	f.Intrinsic.Control.EndSelect	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.gsRTRGridFormat_CellValueChanged.End

Program.Sub.StdFont_UnLoad.Start
gui.StdFont..AlwaysOnTop(False)
gui.StdFont..Visible(False)
gui.RTRGridFormat.gsRTRGridFormat.Enabled(True)
Program.Sub.StdFont_UnLoad.End

Program.Sub.gsFont_RowCellClick.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sColIndex.Declare
	v.Local.sCol.Declare
	v.Local.sFontName.Declare	
	
	f.Intrinsic.Control.SelectCase(v.Args.Column.UCase)
		F.Intrinsic.Control.Case("SELECT")	
			gui.StdFont..AlwaysOnTop(False)
			GUI.StdFont..Visible(False)
			v.Local.sFontName.Set(v.DataTable.StdFont(v.Args.RowIndex).Name!FieldValString)
			
			'Set to setting grid
			f.Data.DataTable.SetValue("RTRGridFormat",v.Global.iSelectFormat,"CellFontName",v.Local.sFontName)
			gui.RTRGridFormat.gsRTRGridFormat.GetColumnIndexByName("GV_RTRGridFormat","CellFontName",V.Local.sColIndex)
			gui.RTRGridFormat.gsRTRGridFormat.SetCellAppearance("GV_RTRGridFormat",v.Local.sColIndex,v.Global.iSelectFormat,"FontName",v.local.sFontName) 		

			'Set to child grid
			v.Local.sCol.Set(v.DataTable.RTRGridFormat(v.Global.iSelectFormat).Col!FieldValSTring)
			gui.Form.GGC_Bom.SuspendLayout
			gui.Form.GGC_Bom.SetColumnProperty("GV_Child",v.Local.sCol,"CellFontName",v.local.sFontName)
			gui.Form.GGC_Bom.ResumeLayout
			
			F.Intrinsic.Control.CallSub(Save_RTRGridFormat_To_Registry)
			gui.RTRGridFormat.gsRTRGridFormat.Enabled(True)
			gui.Form..AlwaysOnTop(True)
			gui.Form..AlwaysOnTop(False)
			gui.RTRGridFormat..AlwaysOnTop(True)
			gui.RTRGridFormat..AlwaysOnTop(False)	
			F.Intrinsic.Control.CallSub(Save_RTRGridFormat_To_Registry)
	f.Intrinsic.Control.EndSelect
	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.gsFont_RowCellClick.End

Program.Sub.Save_RTRGridFormat_To_Registry.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sFormat.Declare	
	
	f.Data.DataView.Create("RTRGridFormat","vFormat")
	f.Data.DataView.ToString("RTRGridFormat","vFormat",v.DataTable.RTRGridFormat.FieldNames,"*!*!~!","#$#~%",v.Local.sFormat)
	f.Data.DataView.Close("RTRGridFormat","vFormat")
	
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"RTRGRIDFORMAT",4986,"5001",False,"RTRGRIDFORMAT",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sFormat)		
	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.Save_RTRGridFormat_To_Registry.End

Program.Sub.gsDec_CellValueChanged.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sDec.Declare
	v.Local.iCnt.Declare
	v.Local.sMask.Declare
	v.Local.sType.Declare
	v.Local.sPrefix.Declare	
	
	gui.Form.GGC_Bom.SuspendLayout

	'Cell format
	f.Intrinsic.String.Build("{0} ###,###,###,##{1}{2}",v.DataTable.Decim(v.Args.RowIndex).Sign!FieldValString,v.DataTable.Decim(v.Args.RowIndex).LeadZero!FieldValString,v.DataTable.Decim(v.Args.RowIndex).Dec!FieldValString,v.Local.sMask)
	gui.Form.GGC_Bom.SetColumnProperty("GV_CHILD",v.DataTable.Decim(v.Args.RowIndex).Col!FieldValString,"DisplayCustomNumeric",v.Local.sMask)
	'Summary Format
	v.Local.sType.Set(v.DataTable.Decim(v.Args.RowIndex).Summary!FieldValString)
	f.Intrinsic.String.Build("{0}{1}",v.DataTable.Decim(v.Args.RowIndex).SummaryLabel!FieldValString,v.DataTable.Decim(v.Args.RowIndex).SummarySign!FieldValString,v.Local.sPrefix)	
	f.Intrinsic.String.Build("###,###,###,##{0}{1}",v.DataTable.Decim(v.Args.RowIndex).SummaryLeadZero!FieldValString,v.DataTable.Decim(v.Args.RowIndex).SummaryDec!FieldValString,v.Local.sMask)
	gui.Form.GGC_Bom.AddSummaryItem("GV_CHILD",v.DataTable.Decim(v.Args.RowIndex).Col!FieldValString,"Net",v.Local.sType,v.Local.sPrefix,"",v.Local.sMask)

	gui.Form.GGC_Bom.ResumeLayout

	f.Data.DataView.Create("Decim","vDecim")
	f.Data.DataView.ToString("Decim","vDecim",v.DataTable.Decim.FieldNames,"*!*","#$#",v.Local.sDec)
	f.Data.DataView.Close("Decim","vDecim")
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"RTRDECIMAL",4986,"4001",False,"RTRDECIMAL",False,0,-999.0,1/1/1980,12:00:00 AM,v.Local.sDec)	
			
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.gsDec_CellValueChanged.End

Program.Sub.ExportGrid.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sFileExport.Declare
	V.Local.bExcel.Declare
	V.Local.bFileLocked.Declare
	V.Local.sMsg.Declare

	F.Automation.MSExcel.CheckPresence(V.Local.bExcel)

	F.Intrinsic.Control.If(V.Local.bExcel)
		F.Intrinsic.String.Build("{0}\{1}_{2}.xlsx",V.Caller.LocalGssTempDir,v.Screen.Form!txtFocusParent.Text.Trim,v.Ambient.Now.FormatMMDDYYYYHhNnSs,V.Local.sFileExport)
		F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
		F.Intrinsic.Control.If(V.Local.bFileLocked)
			F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		F.Intrinsic.Control.Else
			Gui.Form.GGC_Bom.Export(V.Local.sFileExport,"xlsx")
			F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("{0}\{1}_{2}.csv",V.Caller.LocalGssTempDir,v.Screen.Form!txtFocusParent.Text.Trim,v.Ambient.Now.FormatMMDDYYYYHhNnSs,V.Local.sFileExport)
		F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
		F.Intrinsic.Control.If(V.Local.bFileLocked)
			F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		F.Intrinsic.Control.Else
			Gui.Form.GGC_Bom.Export(V.Local.sFileExport,"csv")
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
	F.Intrinsic.Control.EndIf		
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ExportGrid.End

Program.Sub.trvStyle_UnLoad.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	
	gui.trvStyle..AlwaysOnTop(False)
	f.Intrinsic.Control.CallSub(Delete_OnTop,"FM","TrvStyle")
	gui.trvStyle..Visible(False)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.trvStyle_UnLoad.End

Program.Sub.Process_StayOnTop.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	
	F.Intrinsic.Control.If(v.Screen.[v.Args.Fm]![v.Args.Chk].Value,=,1)
		Gui.[v.Args.Fm]..AlwaysOnTop(True)
		f.Intrinsic.Control.CallSub(Add_OnTop,"FM",v.Args.Fm.UCase)		
	f.Intrinsic.Control.Else
		Gui.[v.Args.Fm]..AlwaysOnTop(False)
		f.Intrinsic.Control.CallSub(Delete_OnTop,"FM",v.Args.Fm.UCase)		
	F.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Process_StayOnTop.End

Program.Sub.chktrvStyleStayOnTop_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	f.Intrinsic.Control.CallSub(Process_StayOnTop,"FM","TRVSTYLE","Chk","chkTrvStyleStayOnTop")
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.chktrvStyleStayOnTop_Click.End

Program.Sub.cmdResettrvStyle_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"TRVSTYLE",4986,7001,False,"BLACK*!*8.25*!*Tahoma",False,0,-1,v.Ambient.Date,12:00:00 AM)
	gui.Form.trvBom.ForeColor(v.Color.Black)
	gui.Form.trvBom.FontSize("8.25")	
	gui.Form.trvBom.FontName("Tahoma")
	
	gui.trvStyle.ddlFontName.Text("Tahoma")
	gui.trvStyle.ddlFontSize.Text("8.25")
	gui.trvStyle.ddlForeColor.Text("BLACK")
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdResettrvStyle_Click.End

Program.Sub.ddlForeColor_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sColor.Declare
	v.Local.sHold.Declare
	
	v.Local.sColor.Set(v.Screen.trvStyle!ddlForeColor.Text)
	gui.Form.trvBom.ForeColor(v.Color.[v.Local.sColor])
	F.Intrinsic.String.Build("{0}*!*{1}*!*{2}",V.Local.sColor,V.Screen.trvStyle!ddlFontSize.Text,V.Screen.trvStyle!ddlFontName.Text,v.Local.sHold)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"TRVSTYLE",4986,7001,False,v.Local.sHold,False,0,-1,v.Ambient.Date,12:00:00 AM)
	
	gui.Form.trvBom.FontName("Arial Black")
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ddlForeColor_Click.End

Program.Sub.ddlFontSize_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sHold.Declare
	
	gui.Form.trvBom.FontSize(v.Screen.trvStyle!ddlFontSize.Text)
	F.Intrinsic.String.Build("{0}*!*{1}*!*{2}",v.Screen.trvStyle!ddlForeColor.Text,V.Screen.trvStyle!ddlFontSize.Text,V.Screen.trvStyle!ddlFontName.Text,v.Local.sHold)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"TRVSTYLE",4986,7001,False,v.Local.sHold,False,0,-1,v.Ambient.Date,12:00:00 AM)	
	
	gui.Form.trvBom.FontName("Tahoma")
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ddlFontSize_Click.End

Program.Sub.ddlFontName_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sHold.Declare
	
	gui.Form.trvBom.FontName(v.Screen.trvStyle!ddlFontName.Text)
	F.Intrinsic.String.Build("{0}*!*{1}*!*{2}",v.Screen.trvStyle!ddlForeColor.Text,V.Screen.trvStyle!ddlFontSize.Text,V.Screen.trvStyle!ddlFontName.Text,v.Local.sHold)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"TRVSTYLE",4986,7001,False,v.Local.sHold,False,0,-1,v.Ambient.Date,12:00:00 AM)	
	
	gui.Form.trvBom.FontName("Tahoma")
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.ddlFontName_Click.End

Program.Sub.gsBookMarks_RowCellClick.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sColIndex.Declare
	V.Local.iX.Declare
	v.Local.iY.Declare
	v.Local.sSQL.Declare
	v.Local.sPart.Declare

	f.Intrinsic.Control.If(v.Args.Column.UCase,=,"DELETE")
		v.Local.sPart.Set(v.DataTable.BookMarks(v.Args.RowIndex).Part!FieldValString)
		F.Data.DataTable.DeleteRow("BookMarks",V.Args.RowIndex)
		f.Data.DataTable.AcceptChanges("BookMarks")
		f.Intrinsic.UI.InvokeWaitDialog("Deleting bookmark from database...")
		f.Intrinsic.String.Build("Delete from GCG_4986_Bookmarks where UserID = '{0}' and CCC =  '{1}' and Part = '{2}'",v.Caller.User,v.Caller.CompanyCode,v.Local.sPart,v.Local.sSQL)
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)
		f.Intrinsic.UI.CloseWaitDialog		
		Gui.Form.gsBookMarks.GetColumnIndexByName("Gv_BookMarks","Part",v.Local.sColIndex)
		f.Intrinsic.Control.If(v.DataTable.Bookmarks.RowCount,>,0)
			gui.Form.gsBookMarks.FocusCell("Gv_BookMarks",v.DataTable.Bookmarks.RowCount--,v.Local.sColIndex)
			Gui.BookM.gsBookM.GetColumnIndexByName("Gv_BookM","Part",v.Local.sColIndex)
			gui.BookM.gsBookM.FocusCell("Gv_BookM",v.DataTable.Bookmarks.RowCount--,v.Local.sColIndex)			
		f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.ElseIf(v.Args.Column.UCase,=,"PART")
		v.Global.sBookMarkIndex.Set(v.Args.RowIndex)
		Gui.BookM.gsBookM.GetColumnIndexByName("Gv_BookM","Part",v.Local.sColIndex)
		gui.BookM.gsBookM.FocusCell("Gv_BookM",v.Args.RowIndex,v.Local.sColIndex)		
		f.Intrinsic.API.GetMousePosition(v.Local.iX,v.Local.iY)
		f.Intrinsic.Math.Add(v.Local.iY,10,v.Local.iY)
		gui.Form..ContextMenuShow("BOOKMARKS",v.Local.iX,v.Local.iY)
	f.Intrinsic.Control.EndIf		
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.gsBookMarks_RowCellClick.End

Program.Sub.AddToBookMarks.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sPart.Declare
	v.Local.sFilter.Declare
	v.Local.sRet.Declare
	v.Local.sColIndex1.Declare
	v.Local.sColIndex2.Declare
	v.Local.sSQL.Declare
	v.Local.sDescr.Declare

	Gui.Form.gsBookMarks.GetColumnIndexByName("Gv_BookMarks","Part",v.Local.sColIndex1)
	Gui.BookM.gsBookM.GetColumnIndexByName("Gv_BookM","Part",v.Local.sColIndex2)

	f.Intrinsic.String.RPad(v.Args.sPart," ",20,v.Local.sPart)
	f.Intrinsic.String.Left(v.Args.sDescr,30,v.Local.sDescr)
	
	f.Intrinsic.String.Build("Part = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sFilter)
	f.Data.DataTable.Select("BookMarks",v.Local.sFilter,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,=,"***NORETURN***")
		F.Data.DataTable.AddRow("BookMarks","Part",v.Local.sPart,"Descr",v.Local.sDescr,"Delete","Delete")
		f.Intrinsic.String.Build("Insert into GCG_4986_Bookmarks (UserID,CCC,Part,Descr) values ('{0}','{1}','{2}','{3}')",v.Caller.User,v.Caller.CompanyCode,v.Local.sPart.PSQLFriendly,v.Local.sDescr.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)
		gui.Form.gsBookMarks.FocusCell("Gv_BookMarks",v.DataTable.Bookmarks.RowCount--,v.Local.sColIndex1)
		gui.BookM.gsBookM.FocusCell("Gv_BookM",v.DataTable.Bookmarks.RowCount--,v.Local.sColIndex2)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		v.Local.sRet.Set(v.Local.sRet(0))
		gui.Form.gsBookMarks.FocusCell("Gv_BookMarks",v.Local.sRet,v.Local.sColIndex1)	
		gui.BookM.gsBookM.FocusCell("Gv_BookM",v.Local.sRet,v.Local.sColIndex2)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	

Program.Sub.AddToBookMarks.End

Program.Sub.picRtrBookmarks_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sPart.Declare
	
	gui.Form.picRtrBookmarks.Enabled(False)	
	
	f.Intrinsic.Control.If(v.Screen.Form!txtFocusParent.Text.Trim,<>,"")
		f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.Text.Trim,v.Screen.Form!txtFocusRev.Text.Trim,v.Local.sPart)
		f.Intrinsic.Control.CallSub("AddToBookMarks","sPart",v.Local.sPart,"sDescr",v.Screen.Form!txtFocusDescr.Text.Trim)
	f.Intrinsic.Control.EndIf
	gui.Form.picRtrBookmarks.Enabled(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picRtrBookmarks_Click.End

Program.Sub.picBomBookmarks_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sPart.Declare
	v.Local.sRet.Declare
	v.Local.sColIndex1.Declare
	v.Local.sColIndex2.Declare
	
	gui.Form.picBomBookmarks.Enabled(False)
	
	f.Intrinsic.Control.If(v.Screen.Form!txtParent.Text.Trim,<>,"")
		f.Intrinsic.String.GSSPartString(v.Screen.Form!txtParent.Text.Trim,v.Screen.Form!txtParentRev.Text.Trim,v.Local.sPart)
		f.Intrinsic.Control.CallSub("AddToBookMarks","sPart",v.Local.sPart,"sDescr",v.Screen.Form!txtParentDescr.Text.Trim)
	f.Intrinsic.Control.EndIf	
	gui.Form.picBomBookmarks.Enabled(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picBomBookmarks_Click.End

Program.Sub.BookMarks.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sPart.Declare
	v.Local.sRev.Declare
	v.Local.bAuth.Declare
	v.Local.iLinkID.Declare
	v.Local.sLinkID.Declare
	V.Local.iPID.Declare
	v.Local.sMsg.Declare
	v.Local.iRet.Declare
	v.Local.sRet.Declare	
	v.Local.sTempChkBomOnly.Declare
	v.Local.sTempChkRouterOnly.Declare
	v.Local.sSQL.Declare
	v.Local.sHold1.Declare
	v.Local.sHold2.Declare
	V.Local.sFilter.Declare
	v.Local.sParent.Declare
	v.Local.sFlag.Declare
	v.Local.sColor.Declare
	v.Local.sKey.Declare	
	
	f.Intrinsic.Control.If(v.DataTable.BookMarks.RowCount,=,0,or,v.Global.sBookMarkIndex,=,"")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.If(v.Global.sBookMarkIndex,>,v.DataTable.BookMarks.RowCount--)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.If(V.Args.ItemName,=,"LOADBOMROUTER")
		f.Intrinsic.Control.CallSub(Check_Work_Saved)
		f.Intrinsic.Control.If(v.Args.bStop)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf	
		
	F.Intrinsic.Control.ElseIf(V.Args.ItemName,=,"LOADBOM")
		v.Local.sColor.Set(v.Screen.Form!trvBom.BackColor)
		f.Intrinsic.Control.If(v.Local.sColor,=,"10666132")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox("Unsaved work on Bom Tree. Proceed without saving?","Save Work Alert",4,v.Local.sFlag)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.If(v.Local.sFlag,<>,"6")
				F.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.ElseIf(V.Args.ItemName,=,"LOADROUTER")	
		f.Intrinsic.Control.If(v.Global.bRouterChanged)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox("Unsaved work on Main Grid. Proceed without saving?","Save Work Alert",4,v.Local.sFlag)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.If(v.Local.sFlag,<>,"6")
				F.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf	
		
	F.Intrinsic.Control.EndIf		
	
	v.Local.sPart.Set(v.DataTable.BookMarks(v.Global.sBookMarkIndex).Part!FieldValString)
	v.Local.sTempChkBomOnly.Set(v.Screen.Form!chkBomOnly.Value)
	v.Local.sTempChkRouterOnly.Set(v.Screen.Form!chkRouterOnly.Value)
	
	f.Intrinsic.Control.SelectCase(v.Args.ItemName)
		f.Intrinsic.Control.Case("LOADBOM")				
			gui.Form.chkBomOnly.Value(1)
			f.Intrinsic.String.Mid(v.Local.sPart,18,3,v.Local.sRev)
			f.Intrinsic.Control.BlockEvents
				gui.Form.txtParent.Text(v.Local.sPart.left17)
				gui.Form.txtParentRev.Text(v.Local.sRev)
			f.Intrinsic.Control.UnBlockEvents
			f.Intrinsic.Control.CallSub(cmdRefreshBomTreeLoad_Click)
			gui.Form.chkBomOnly.Value(v.Local.sTempChkBomOnly)
		F.Intrinsic.Control.Case("LOADROUTER")
			gui.Form.chkRouterOnly.Value(1)
			f.Intrinsic.String.Mid(v.Local.sPart,18,3,v.Local.sRev)
			f.Intrinsic.Control.BlockEvents
				gui.Form.txtFocusParent.Text(v.Local.sPart.left17)
				gui.Form.txtFocusRev.Text(v.Local.sRev)
			f.Intrinsic.Control.UnBlockEvents
			f.Intrinsic.Control.CallSub(txtFocusRev_LostFocus,"FROMLOADROUTER",True)
			gui.Form.chkRouterOnly.Value(v.Local.sTempChkRouterOnly)
		F.Intrinsic.Control.Case("LOADBOMROUTER")
			gui.Form.chkBomOnly.Value(0)
			gui.Form.chkRouterOnly.Value(0)
			f.Intrinsic.String.Mid(v.Local.sPart,18,3,v.Local.sRev)
			f.Intrinsic.Control.BlockEvents
				gui.Form.txtParent.Text(v.Local.sPart.left17)
				gui.Form.txtParentRev.Text(v.Local.sRev)
			f.Intrinsic.Control.UnBlockEvents
			f.Intrinsic.Control.CallSub(cmdRefreshBomTreeLoad_Click)
			gui.Form.chkBomOnly.Value(v.Local.sTempChkBomOnly)
			gui.Form.chkRouterOnly.Value(v.Local.sTempChkRouterOnly)
		f.Intrinsic.Control.Case("DOCUMENTCONTROLBOM")	
			F.Global.DocumentControl.GetLinkID(v.Local.sPart,30,v.Local.iLinkID)
			f.Intrinsic.Control.If(v.Local.iLinkID,<>,-1)		
				f.Intrinsic.String.LPad(v.Local.iLinkID,"0",9,v.Local.sLinkID)
				F.Global.DocumentControl.Invoke(v.Local.sPart,30,"Part/Bom Document Control",V.Local.iPID)
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("Create Document Control for this part {0}?",v.Local.sPart.Trim,v.Local.sMsg)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Document Control Not Found",4,v.Local.iRet)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxYes)			
					F.Global.DocumentControl.CreateReference(v.Local.sPart,30,v.Local.iLinkID)	
					F.Global.DocumentControl.Invoke(v.Local.sPart,30,"Part/Bom Document Control",V.Local.iPID)						
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf						
		
		f.Intrinsic.Control.Case("DOCUMENTCONTROLROUTER")

			F.Global.DocumentControl.GetLinkID(v.Local.sPart,35,v.Local.iLinkID)
			f.Intrinsic.Control.If(v.Local.iLinkID,<>,-1)		
				f.Intrinsic.String.LPad(v.Local.iLinkID,"0",9,v.Local.sLinkID)
				F.Global.DocumentControl.Invoke(v.Local.sPart,35,"Router Document Control",V.Local.iPID)
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("Create Document Control for this part {0}?",v.Local.sPart.Trim,v.Local.sMsg)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Document Control Not Found",4,v.Local.iRet)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxYes)			
					F.Global.DocumentControl.CreateReference(v.Local.sPart,35,v.Local.iLinkID)	
					F.Global.DocumentControl.Invoke(v.Local.sPart,35,"Router Document Control",V.Local.iPID)						
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
				
		f.Intrinsic.Control.Case("COPYPART")
			F.Intrinsic.UI.SetClipboardText(V.Local.sPart)
			
		f.Intrinsic.Control.Case("VIEWPART")
			Function.Global.Security.CheckUserAccessIPM(312,0,v.Local.bAuth)
			f.Intrinsic.Control.If(v.Local.bAuth.Not)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("User does not have permission to Inventory > View > Inventory Parts.","Menu Item Not Assigned")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf	

			F.Intrinsic.Control.CallSub(Get_Location_Input)
			f.Intrinsic.Control.If(v.Args.bCancel)
				f.Intrinsic.Control.ExitSub				
			f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.If(v.Args.bValid,=,False)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
			
			f.Data.DataTable.AddRow("3500","CompanyCode",v.Caller.CompanyCode,"Mode","V","PART",v.Local.sPart,"LOC",V.Args.sLoc)
			F.Intrinsic.Control.CallSub(3500Sync)	
		
		f.Intrinsic.Control.Case("EDITPART")
			Function.Global.Security.CheckUserAccessIPM(310,1,v.Local.bAuth)
			f.Intrinsic.Control.If(v.Local.bAuth.Not)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("User does not have permission to Inventory > File > Inventory Parts > Open.","Menu Item Not Assigned")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf	
		
			F.Intrinsic.Control.CallSub(Get_Location_Input)
			f.Intrinsic.Control.If(v.Args.bCancel)
				f.Intrinsic.Control.ExitSub				
			f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.If(v.Args.bValid,=,False)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf			
			
			f.Data.DataTable.AddRow("3500","CompanyCode",v.Caller.CompanyCode,"Mode","O","PART",v.Local.sPart,"LOC",v.Args.sLoc)
			F.Intrinsic.Control.CallSub(3500Sync)		
		
		f.Intrinsic.Control.Case("SUPPLYDEMAND")

			'Check if user has permission to access to menu item
			Function.Global.Security.CheckUserAccessIPM(321,0,v.Local.bAuth)
			f.Intrinsic.Control.If(v.Local.bAuth.Not)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("User does not have permission to Supply and Demand screen.","Menu Item Not Assigned")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf

			F.Intrinsic.Control.CallSub(Get_Location_Input)
			f.Intrinsic.Control.If(v.Args.bCancel)
				f.Intrinsic.Control.ExitSub				
			f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.If(v.Args.bValid,=,False)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
			
			f.Data.DataTable.AddRow("300010","Part",v.Local.sPart,"Loc",v.Args.sLoc)
			f.Intrinsic.Control.CallSub(300010Sync)	
			
		f.Intrinsic.Control.Case("DELETEALL")
			f.Data.DataTable.DeleteRow("BookMarks")
			f.Data.DataTable.AcceptChanges("BookMarks")
			f.Intrinsic.UI.InvokeWaitDialog("Deleting bookmarks from database...")
			f.Intrinsic.String.Build("Delete from GCG_4986_Bookmarks where UserID = '{0}' and CCC =  '{1}'",v.Caller.User,v.Caller.CompanyCode,v.Local.sSQL)
			f.ODBC.Connection!conx.Execute(v.Local.sSQL)
			f.Intrinsic.UI.CloseWaitDialog
		
		f.Intrinsic.Control.Case("ADDBOOKMARK")			
			f.Intrinsic.Control.If(v.Global.bFirstLoadQuickNonInv)
				gui.QuickNonInv..Position(2000,2000)
				v.Global.bFirstLoadQuickNonInv.Set(False)
			f.Intrinsic.Control.EndIf		
			f.Intrinsic.Control.CallSub(ClearQuickNonInv)
			gui.QuickNonInv..Visible(True)
			gui.QuickNonInv.txtQPart17.SetFocus
			gui.QuickNonInv..WaitForDismiss
			f.Intrinsic.Control.If(v.Args.sOK,=,"N")				
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.Else
				v.Local.sHold1.Set(v.Screen.QuickNonInv!txtQPart17.Text.Trim)
				v.Local.sHold2.Set(v.Screen.QuickNonInv!txtQRev.Text.Trim)
				f.Intrinsic.String.GSSPartString(v.Local.sHold1.UCase,v.Local.sHold2.UCase,v.Local.sPart)
				f.Intrinsic.Control.CallSub(AddToBookMarks,"sPart",v.Local.sPart,"sDescr",v.Screen.QuickNonInv!txtQDescription.Text.Trim)
			f.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.Case("DELETEBOOKMARK")
			F.Data.DataTable.DeleteRow("BookMarks",v.Global.sBookMarkIndex)
			f.Data.DataTable.AcceptChanges("BookMarks")	
			f.Intrinsic.UI.InvokeWaitDialog("Deleting bookmark from database...")
			f.Intrinsic.String.Build("Delete from GCG_4986_Bookmarks where UserID = '{0}' and CCC =  '{1}' and Part = '{2}'",v.Caller.User,v.Caller.CompanyCode,v.Local.sPart,v.Local.sSQL)
			f.ODBC.Connection!conx.Execute(v.Local.sSQL)
			f.Intrinsic.UI.CloseWaitDialog
				
	f.Intrinsic.Control.EndSelect	

	v.Global.sBookMarkIndex.Set("")
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.BookMarks.End

Program.Sub.BookMarksRightClick.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sPart17.Declare
	v.Local.sRev.Declare	
	v.Local.sPart.Declare
	v.Local.sSQL.Declare
	v.Local.sHold1.Declare
	v.Local.sHold2.Declare

	f.Intrinsic.Control.SelectCase(v.Args.ItemName)

		f.Intrinsic.Control.Case("DELETEALL")
			f.Data.DataTable.DeleteRow("BookMarks")
			f.Data.DataTable.AcceptChanges("BookMarks")
			f.Intrinsic.UI.InvokeWaitDialog("Deleting bookmarks from database...")
			f.Intrinsic.String.Build("Delete from GCG_4986_Bookmarks where UserID = '{0}' and CCC =  '{1}'",v.Caller.User,v.Caller.CompanyCode,v.Local.sSQL)
			f.ODBC.Connection!conx.Execute(v.Local.sSQL)
			f.Intrinsic.UI.CloseWaitDialog			
		
		f.Intrinsic.Control.Case("ADDBOOKMARK")
			f.Intrinsic.Control.If(v.Global.bFirstLoadQuickNonInv)
				gui.QuickNonInv..Position(2000,2000)
				v.Global.bFirstLoadQuickNonInv.Set(False)
			f.Intrinsic.Control.EndIf		
			f.Intrinsic.Control.CallSub(ClearQuickNonInv)
			gui.QuickNonInv..Visible(True)
			gui.QuickNonInv.txtQPart17.SetFocus
			gui.QuickNonInv..WaitForDismiss
			f.Intrinsic.Control.If(v.Args.sOK,=,"N")				
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.Else
				v.Local.sHold1.Set(v.Screen.QuickNonInv!txtQPart17.Text.Trim)
				v.Local.sHold2.Set(v.Screen.QuickNonInv!txtQRev.Text.Trim)
				f.Intrinsic.String.GSSPartString(v.Local.sHold1.UCase,v.Local.sHold2.UCase,v.Local.sPart)
				f.Intrinsic.Control.CallSub(AddToBookMarks,"sPart",v.Local.sPart,"sDescr",v.Screen.QuickNonInv!txtQDescription.Text.Trim)	
			f.Intrinsic.Control.EndIf		
	
	f.Intrinsic.Control.EndSelect

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.BookMarksRightClick.End

Program.Sub.picToggleBookmarks_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sTop.Declare
	v.Local.sLeft.Declare
	v.Local.sHeight.Declare
	v.Local.sWidth.Declare
	v.Local.sWidthGrid.Declare
	
	gui.Form.picToggleBookmarks.Enabled(False)
	
	f.Intrinsic.Control.If(v.Screen.BookM.Visible,=,False)	
		f.Intrinsic.Control.If(v.Global.bFirstBookmarks2Load)
			f.Intrinsic.Math.Add(v.Screen.Form!frameTree.Top,v.Screen.Form!frameTreeBottom.Top,v.Local.sTop)
			f.Intrinsic.Math.Add(v.Local.sTop,480,v.Local.sTop)
			f.Intrinsic.Math.Sub(v.Screen.Form!frameHeader.Width,v.Screen.BookM.Width,v.Local.sLeft)			
			v.Local.sWidth.Set(v.Screen.BookM.Width)
			f.Intrinsic.Math.Sub(v.Screen.Form!frameTreeBottom.Height,250,v.Local.sHeight)				
			Gui.BookM..Position(v.Local.sLeft,v.Local.sTop)	
			v.Global.bFirstBookmarks2Load.Set(False)		
			
			Gui.BookM..Visible(True)
			Gui.BookM..Size(v.Local.sWidth,v.Local.sHeight)	
		f.Intrinsic.Control.EndIf

		gui.Form.gsBookMarks.Visible(False)
		Gui.BookM..Visible(True)
		
		f.Intrinsic.Control.CallSub(Process_StayOnTop,"FM","BookM","Chk","chkStayOnTop")
		
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(BookM_Unload)	
	f.Intrinsic.Control.EndIf
	
	gui.Form.picToggleBookmarks.Enabled(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picToggleBookmarks_Click.End

Program.Sub.BookM_Unload.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	
	Gui.BookM..AlwaysOnTop(False)
	f.Intrinsic.Control.CallSub(Delete_OnTop,"FM","BookM")
	Gui.BookM..Visible(False)
	gui.Form.gsBookMarks.Visible(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.BookM_Unload.End

Program.Sub.chkStayOnTop_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	f.Intrinsic.Control.CallSub(Process_StayOnTop,"FM","BookM","Chk","chkStayOnTop")	
		
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.chkStayOnTop_Click.End

Program.Sub.gsBookM_RowCellClick.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sColIndex.Declare
	V.Local.iX.Declare
	v.Local.iY.Declare
	v.Local.sSQL.Declare
	v.Local.sPart.Declare
	
	f.Intrinsic.Control.If(v.Args.Column.UCase,=,"DELETE")
		v.Local.sPart.Set(v.DataTable.BookMarks(v.Args.RowIndex).Part!FieldValString)
		F.Data.DataTable.DeleteRow("BookMarks",V.Args.RowIndex)
		f.Data.DataTable.AcceptChanges("BookMarks")	
		f.Intrinsic.UI.InvokeWaitDialog("Deleting bookmark from database...")
		f.Intrinsic.String.Build("Delete from GCG_4986_Bookmarks where UserID = '{0}' and CCC =  '{1}' and Part = '{2}'",v.Caller.User,v.Caller.CompanyCode,v.Local.sPart,v.Local.sSQL)
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)
		f.Intrinsic.UI.CloseWaitDialog
			
		Gui.BookM.gsBookM.GetColumnIndexByName("Gv_BookM","Part",v.Local.sColIndex)
		f.Intrinsic.Control.If(v.DataTable.Bookmarks.RowCount--,>,0)
			gui.BookM.gsBookM.FocusCell("Gv_BookM",v.DataTable.Bookmarks.RowCount--,v.Local.sColIndex)
			Gui.Form.gsBookMarks.GetColumnIndexByName("Gv_BookMarks","Part",v.Local.sColIndex)
			gui.Form.gsBookMarks.FocusCell("Gv_BookMarks",v.DataTable.Bookmarks.RowCount--,v.Local.sColIndex)			
		f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.ElseIf(v.Args.Column.UCase,=,"PART")
		v.Global.sBookMarkIndex.Set(v.Args.RowIndex)
		Gui.Form.gsBookMarks.GetColumnIndexByName("Gv_BookMarks","Part",v.Local.sColIndex)
		gui.Form.gsBookMarks.FocusCell("Gv_BookMarks",v.Args.RowIndex,v.Local.sColIndex)	
		f.Intrinsic.API.GetMousePosition(v.Local.iX,v.Local.iY)
		f.Intrinsic.Math.Add(v.Local.iY,10,v.Local.iY)
		gui.Form..ContextMenuShow("BOOKMARKS",v.Local.iX,v.Local.iY)
	f.Intrinsic.Control.EndIf		
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.gsBookM_RowCellClick.End

Program.Sub.cmdCancelQuickNonInv_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	
	f.Intrinsic.Variable.AddRV("sOK","N")
	gui.QuickNonInv..Visible(False)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdCancelQuickNonInv_Click.End

Program.Sub.cmdOKQuickNonInv_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	
	f.Intrinsic.Control.If(v.Screen.QuickNonInv!txtQPart17.Text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please enter a Part number.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.QuickNonInv.txtQPart17.SetFocus
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Variable.AddRV("sOK","Y")
	gui.QuickNonInv..Visible(False)	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdOKQuickNonInv_Click.End

Program.Sub.ClearQuickNonInv.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	gui.QuickNonInv.txtQPart17.Text("")
	gui.QuickNonInv.txtQRev.Text("")
	gui.QuickNonInv.txtQDescription.Text("")
		
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry		
Program.Sub.ClearQuickNonInv.End

Program.Sub.gsBookMarks_CellValueChanged.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sPart.Declare
	v.Local.sDescr.Declare
	v.Local.sSQL.Declare
	
	v.Local.sPart.Set(v.DataTable.BookMarks(v.Args.RowIndex).Part!FieldValString)
	v.Local.sDescr.Set(v.DataTable.BookMarks(v.Args.RowIndex).Descr!FieldValString)

	f.Intrinsic.Control.If(v.Args.Column.UCase,=,"DESCR")
		F.Intrinsic.String.Build("Update GCG_4986_BookMarks set Descr = '{0}' where UserID = '{1}' and CCC = '{2}' and Part = '{3}'",v.Local.sDescr.PSQLFriendly,v.Caller.User,v.Caller.CompanyCode,v.Local.sPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)
	f.Intrinsic.Control.EndIf
		
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.gsBookMarks_CellValueChanged.End

Program.Sub.gsBookM_CellValueChanged.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sPart.Declare
	v.Local.sDescr.Declare
	v.Local.sSQL.Declare
	
	v.Local.sPart.Set(v.DataTable.BookMarks(v.Args.RowIndex).Part!FieldValString)
	v.Local.sDescr.Set(v.DataTable.BookMarks(v.Args.RowIndex).Descr!FieldValString)

	f.Intrinsic.Control.If(v.Args.Column.UCase,=,"DESCR")
		F.Intrinsic.String.Build("Update GCG_4986_BookMarks set Descr = '{0}' where UserID = '{1}' and CCC = '{2}' and Part = '{3}'",v.Local.sDescr.PSQLFriendly,v.Caller.User,v.Caller.CompanyCode,v.Local.sPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)
	f.Intrinsic.Control.EndIf
		
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.gsBookM_CellValueChanged.End

Program.Sub.Bind_CutList.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSQL.Declare
	v.Local.sParent.Declare
	
	'Delete old data
	f.Intrinsic.String.Build("Delete from GCG_4986_CutList where UserID = '{0}' and CCC = '{1}'",v.Caller.User,v.Caller.CompanyCode,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)

	f.Data.DataTable.DeleteRow("CHILD$CUTLIST")
	f.Data.DataTable.AcceptChanges("CHILD$CUTLIST")	

	'Generate Serie
	f.Data.DataTable.SetSeries("CHILD","Serie",0,1)	
	
	'Propagate Part and Serie
	f.Data.DataView.Create("Child","vShape",22,"Trim(Shape) <> '' and LMO = 'M' and (RTR_Seq > '000000' and RTR_Seq < '990000')","RTR_Seq")
	f.Data.DataView.ToDataTableDistinct("Child","vShape","Temp_Shape","BParent*!*Part*!*Serie",True)
	f.Data.DataView.Close("Child","vShape")
	
	f.Intrinsic.Control.If(V.DataTable.Temp_Shape.RowCount,>,0)
		f.Data.DataTable.AddColumn("Temp_Shape","USERID","String",v.Caller.User)
		f.Data.DataTable.AddColumn("Temp_Shape","CCC","String",v.Caller.CompanyCode)
		f.Data.DataTable.SaveToDB("Temp_Shape","conx","GCG_4986_CutList","",128,"UserID@!@UserID*!*CCC@!@CCC*!*BParent@!@BParent*!*Part@!@Component*!*Serie@!@Serie")
	
		f.Intrinsic.String.Build("Select CUTLIST_ITEM,g.BParent,g.COMPONENT as Part,LOCATION,PROPERTY_CODE,WORKCENTER,NEXT_WORKCTR,DRAWING_NO,TAG_NO,PIECES,SCRAP_PERCENT,EST_UM_UNITS,USQL_2ND_UM_UNITS,g.Serie  from GCG_4986_CutList g inner join RTR_CutList r on g.BParent = r.Part and g.Component = r.Component and g.UserID = '{0}' and g.CCC = '{1}'",v.Caller.User,v.Caller.CompanyCode,v.Local.sSQL)
		f.Data.DataTable.CreateFromSQL("Temp_Cut","conx",v.Local.sSQL,True)
		f.Data.DataTable.Merge("Temp_Cut","CHILD$CUTLIST",False,2)
		f.Data.DataTable.Close("Temp_Cut")
	
	f.Intrinsic.Control.EndIf

	F.Data.DataTable.Close("Temp_Shape")	

	'Bind GV_CutList
	f.Intrinsic.Control.if(v.DataView.CHILD$CUTLIST!v_CutList.Exists)
		f.Data.DataView.Close("CHILD$CUTLIST","v_CutList")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("CHILD$CUTLIST","v_CutList")
	gui.Form.GGC_Bom.AddGridviewFromDataview("GV_CutList","CHILD","v_CutList")
	gui.Form.GGC_Bom.AddRelation("GV_CHILD","GV_CutList","Serie","Serie","CutListRelation")	
	
	f.Intrinsic.Control.CallSub(BuildV_Cutlist)
	
	gui.Form.GGC_Bom.MainView("GV_Child")	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.Bind_CutList.End

Program.Sub.Recreate_Table_Grid_Child.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	f.Data.DataTable.Close("CHILD$CUTLIST")
	f.Data.DataTable.Close("CHILD")	
	f.Intrinsic.Control.CallSub(Create_Child_Table,"sTable","Child")		
	F.Intrinsic.Control.CallSub(Create_CutList_Table)
	f.Intrinsic.Control.CallSub(BuildV_Child)
	gui.Form.GGC_Bom.MainView("GV_Child")
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.Recreate_Table_Grid_Child.End

Program.Sub.Bind_AddedMaterial_Cutlist.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSQL.Declare
	
	f.Intrinsic.String.Build("Delete from GCG_4986_CutList where UserID = '{0}' and CCC = '{1}'",v.Caller.User,v.Caller.CompanyCode,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)
	
	f.Data.DataTable.DeleteRow("Temp_AddMaterial_CutList")
	f.Data.DataTable.AcceptChanges("Temp_AddMaterial_CutList")
	f.Data.DataTable.AddRow("Temp_AddMaterial_CutList","BParent",v.Args.BParent,"Part",v.Args.Part,"Serie",v.Args.Serie)
	f.Data.DataTable.SaveToDB("Temp_AddMaterial_CutList","conx","GCG_4986_CutList","",128,"UserID@!@UserID*!*CCC@!@CCC*!*BParent@!@BParent*!*Part@!@Component*!*Serie@!@Serie")
	
	f.Intrinsic.String.Build("Select CUTLIST_ITEM,g.BParent,g.COMPONENT as Part,LOCATION,PROPERTY_CODE,WORKCENTER,NEXT_WORKCTR,DRAWING_NO,TAG_NO,PIECES,SCRAP_PERCENT,EST_UM_UNITS,USQL_2ND_UM_UNITS,g.Serie  from GCG_4986_CutList g inner join RTR_CutList r on g.BParent = r.Part and g.Component = r.Component and g.UserID = '{0}' and g.CCC = '{1}'",v.Caller.User,v.Caller.CompanyCode,v.Local.sSQL)
	f.Data.DataTable.CreateFromSQL("Temp_Cut","conx",v.Local.sSQL,True)
	f.Data.DataTable.Merge("Temp_Cut","CHILD$CUTLIST",False,2)
	f.Data.DataTable.Close("Temp_Cut")
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	

Program.Sub.Bind_AddedMaterial_Cutlist.End

Program.Sub.picCutList_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRow.Declare
	v.Local.sSeq.Declare
	v.Local.sRet.Declare
	v.Local.bExit.Declare
	v.Local.bRunning.Declare
	v.Local.sPID.Declare
	v.Local.sPart.Declare
	v.Local.sPartTrim.Declare
	v.Local.sComponent.Declare
	v.Local.sComponentTrim.Declare
	v.Local.sSQL.Declare
	v.Local.bBrandNew.Declare
	v.Local.iSerie.Declare
	v.Local.iCnt.Declare
	v.Local.sHold.Declare
	v.Local.sNow.Declare
	v.Local.sTimeStamp.Declare
	v.Local.sFilter.Declare
	v.Local.sRef.Declare
	v.Local.iRet.Declare
	v.Local.iSeqSort.Declare
	v.Local.sWC.Declare
	v.Local.sNextWC.Declare
	v.Local.sWCDescr.Declare
	v.Local.sNextWCDescr.Declare
	v.Local.sTargetSeq.Declare
	v.Local.bInserted.Declare
	v.Local.sComment.Declare
	v.Local.fCost.Declare
	V.Local.fQty.Declare
	
	gui.Form.picCutList.Enabled(False)		
				
	f.Intrinsic.Control.If(v.Global.iRights,=,0)
		gui.Form.picCutList.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		
	
	f.Intrinsic.Control.If(v.Global.bReadOnly,=,True,or,v.Global.iRights,<=,0,v.DataTable.CHILD.Exists,=,False)
		gui.Form.picCutList.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'Validate if Router header is created
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No router or parent part in focus.","Cannot Use Cutlist")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picCutList.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	gui.Form.GGC_Bom.GetSelectedRows("GV_Child",v.Local.sRow)
	f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please select a Normal Material sequence.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picCutList.Enabled(True)
		f.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Split(v.Local.sRow,"*!*",v.Local.sRow)	
	v.Local.sRow.Set(v.Local.sRow(0))
	v.Local.sSeq.Set(v.DataTable.CHILD(V.Local.sRow).RTR_Seq!FieldValString)
	f.Intrinsic.Control.If(v.Local.sSeq,>=,"990000",or,v.DataTable.Child(v.Local.sRow).LMO!FieldValTrim,<>,"M")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please select a Normal Material sequence.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picCutList.Enabled(True)
		f.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(V.DataTable.Child(v.Local.sRow).Shape!FieldValTrim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Material does not have a Shape Code.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picCutList.Enabled(True)
		f.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf	
	
	'f.Intrinsic.UI.InvokeWaitDialog("Opening Cutlist. Please wait...")	
	'gui.Form.lblResult.Visible(True)
	
	'Check Cutlist item to see if there is already cutlist items
	v.Local.sPart.Set(v.DataTable.Child(0).BParent!FieldValString)
	v.Local.sPartTrim.Set(v.Local.sPart.Trim)
	f.Intrinsic.String.RPad(v.Local.sPart," ",20,v.Local.sPart)
	v.Local.sComponentTrim.Set(v.DataTable.Child(v.Local.sRow).Part!FieldVAlTrim)
	f.Intrinsic.String.RPad(v.Local.sComponentTrim," ",20,v.Local.sComponent)	
	
	f.Intrinsic.String.Build("SELECT Part,Component FROM RTR_CutList where Part = '{0}' and Component = '{1}'",v.Local.sPart.PSQLFriendly,v.Local.sComponent.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		v.Local.bBrandNew.Set(True)	
		f.Intrinsic.String.Build("Insert into RTR_Cutlist (Part,Component,Job,Suffix,Seq,Cutlist_item,PROPERTY_CODE,DIMENSION_1,DIMENSION_2,DIMENSION_3,DIMENSION_4,DIMENSION_5,ANGLE_A,ANGLE_B,ANGLE_C,PIECES,SCRAP_PERCENT,EST_UM_UNITS,USQL_2ND_UM_UNITS) values ('{0}','{1}','','','000000','0001','{2}',0,0,0,0,0,0,0,1,1,0,0,0)",v.Local.sPart.PSQLFriendly,v.Local.sComponent.PSQLFriendly,V.DataTable.Child(v.Local.sRow).Shape!FieldValTrim,v.Local.sSQL)
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)
	f.Intrinsic.Control.EndIf	
	
	F.Global.Callwrapper.New("CutlistScreen","Manufacturing.OpenCutList")
	F.Global.Callwrapper.SetProperty("CutlistScreen","Company",v.Caller.CompanyCode)
	F.Global.Callwrapper.SetProperty("CutlistScreen","ParentPart",v.Local.sPart)
	F.Global.Callwrapper.SetProperty("CutlistScreen","ComponentPart",v.Local.scomponent)
	F.Global.CallWrapper.Run("CutlistScreen")
	
	
	'f.Global.General.LaunchMenuTask(519,1,v.Local.sPID)
	'f.Intrinsic.ui.CloseWaitDialog
	'Within Wait_For_PID, we disable the form, wait until the Cutlist closes, then return the control to the form. We create this loop to give the same effect of Synchronous
'	f.Intrinsic.Control.DoUntil(v.Local.bExit)
'		
'		f.Intrinsic.UI.Sleep(1)		
'		Function.Intrinsic.Task.PIDRunning(v.Local.sPID,v.Local.bRunning)
'		f.Intrinsic.Control.If(v.Local.bRunning.Not)
'			v.Local.bExit.Set(True)
'			f.Intrinsic.Control.ExitDo
'		f.Intrinsic.Control.EndIf	
'	f.Intrinsic.Control.Loop
		
	gui.Form.lblResult.Visible(True)	
			
	'Incase the labor seq is above the material, this will now shift the row
	gui.Form.GGC_Bom.GetSelectedRows("GV_Child",v.Local.sRow)
	f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Invalid row selected","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picCutList.Enabled(True)
		f.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Split(v.Local.sRow,"*!*",v.Local.sRow)	
	v.Local.sRow.Set(v.Local.sRow(0))
	v.Local.sSeq.Set(v.DataTable.CHILD(V.Local.sRow).RTR_Seq!FieldValString)
	f.Intrinsic.Control.If(v.Local.sSeq,>=,"990000",or,v.DataTable.Child(v.Local.sRow).LMO!FieldValTrim,<>,"M")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please select a Normal Material sequence.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picCutList.Enabled(True)
		f.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf	
			
	v.Local.sTargetSeq.Set(v.DataTable.Child(v.Local.sRow).RTR_Seq!FieldValTrim)

	'Delete current Row
	v.Local.iSerie.Set(v.DataTable.Child(v.Local.sRow).Serie!FieldValString)
	
	f.Intrinsic.String.Build("Serie = '{0}'",v.Local.iSerie,v.Local.sFilter)
	f.Data.DataTable.Select("CHILD$CUTLIST",v.Local.sFilter,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		f.Intrinsic.Control.For(v.Local.iCnt,v.Local.sRet.UBound,0,-1)
			f.Data.DataTable.DeleteRow("CHILD$CUTLIST",v.Local.sRet(v.Local.iCnt))
		f.Intrinsic.Control.Next(v.Local.iCnt)
	f.Intrinsic.Control.EndIf
	
	F.Data.DataTable.AcceptChanges("CHILD$CUTLIST")
	
	'Bind cutlist
	f.Intrinsic.Control.CallSub(Bind_AddedMaterial_Cutlist,"BParent",v.Local.sPart,"Part",v.Local.sComponent,"Serie",V.Local.iSerie)

	'Update Qty
	f.Intrinsic.String.Build("SELECT Sum(EST_UM_UNITS) FROM RTR_CutList where Part = '{0}' and Component = '{1}'",v.Local.sPart.PSQLFriendly,v.Local.sComponent.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,<>,"")
		f.Intrinsic.Control.CallSub(Get_Consump_Convert,"sPart",v.Local.sComponent)
		f.Intrinsic.Math.Div(v.Local.sRet,v.Args.fConvert,v.Local.sRet)		
		f.Data.DataTable.SetValue("CHILD",V.Local.sRow,"Qty",v.Local.sRet)	
		f.Data.DataTable.AcceptChanges("Child")
	f.Intrinsic.Control.EndIf
	
	gui.Form.GGC_Bom.ResumeLayout
	gui.Form.GGC_Bom.ExpandMasterRow("GV_Child",v.Local.sRow)
	
	'cmdCommit_click
	gui.Form.lblResult.Visible(True)
	f.Intrinsic.Control.CallSub(Update_Header_To_Child_Bom)
	f.Intrinsic.Control.CallSub(Commit_MainGrid_To_Bom,"bFromCutlistReturn",True)	
	'cmdSaveBomToGSS
	f.Intrinsic.Control.CallSub(cmdSaveBomToGSS_click)
	
	gui.Form.GGC_Bom.ExpandMasterRow("GV_Child",v.Local.sRow)
	
	gui.Form.lblResult.Visible(False)
	
	gui.Form.picCutList.Enabled(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	

Program.Sub.picCutList_Click.End

Program.Sub.Process_OK_BomCutBySelectSeq.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sPart.Declare
	v.Local.sCat_Code.Declare
	V.Local.sParent.Declare	
	v.Local.sHold.Declare
	v.Local.iSerie.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sRTR_Seq_ColIndex.Declare	
	v.Local.sSource_Code.Declare
	v.Local.iCnt.Declare
	v.Local.sSort.Declare
	v.Local.fCost.Declare
	v.Local.fQty.Declare
	v.Local.sSQL.Declare
	
	'made the part has a valid source and category
	f.Intrinsic.Control.If(v.Screen.NonInv!ddlSource.text,=,"SOURCE",Or,V.Screen.NonInv!ddlCategory.TEXT,=,"CATEGORY")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select a category and source","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.ddlSource.SetFocus
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate UM
	f.Intrinsic.Control.If(v.Screen.NonInv!txtUM.text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select a UM and source","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.txtUM.SetFocus
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate PL
	f.Intrinsic.Control.If(v.Screen.NonInv!txtPL.text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select a PL and source","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.txtPL.SetFocus
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(v.Screen.NonInv!ddlSource.text,<>,"MFG-STOCK",and,v.Screen.NonInv!ddlSource.Text,<>,"MFG-JOB")
		F.Intrinsic.UI.Msgbox("Bom Component must be MFG-STOCK or MFG-JOB.","Invalid Source")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.ddlSource.SetFocus
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	
	v.Global.bPassedNonInvScreen.Set(True)
	
	'Prepare: Parent and Part
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.Text,V.Screen.Form!txtFocusRev.text,v.Local.sParent)
	f.Intrinsic.String.GSSPartString(v.Screen.NonInv!txtPart.text,V.Screen.NonInv!txtRev.text,v.Local.sPart)		
	
	'Get the target seq	
	f.Data.DataView.Create("CHILD","vNext99",22,"RTR_Seq >= '990000'","RTR_Seq desc")
	f.Intrinsic.Control.If(v.DataView.Child!vNext99.RowCount,>,0)
		f.Intrinsic.Math.Add(v.DataView.Child!vNext99(0).RTR_Seq!FieldValTrim,v.Global.iRSeq,v.Local.sTargetSeq)
	f.Intrinsic.Control.Else
		v.Local.sTargetSeq.Set("990000")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Close("CHILD","vNext99")
	
	'Source Code and Category
	f.Data.Dictionary.ReturnKeyFromValue("SOURCE",V.Screen.NonInv!ddlSource.TEXT,False,v.local.sSource_Code)	
	F.Data.Dictionary.ReturnKeyFromValue("CATEGORY",V.Screen.NonInv!ddlCategory.Text,False,v.local.sCat_Code)	

	'Get next Serie
	f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
	f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)		
	
	'Add 99 record to the current Router
	v.Local.fCost.Set(v.Screen.NonInv!txtCost.Text.Trim)
	v.Local.fQty.Set(v.Screen.NonInv!txtQty.Text.Trim)	
	f.Data.DataTable.AddRow("CHILD","BPARENT",v.Local.sParent,"DESCR_BP",V.Screen.Form!txtFocusDescr.text, "RTR_SEQ",v.Local.sTargetSeq, "PART", v.Local.sPart, "DESCRIPTION", v.Screen.NonInv!txtDescr.text, "DESCRIPTION_2", V.Screen.NonInv!txtDescr2.TEXT, "DESCRIPTION_3", V.Screen.NonInv!txtDescr3.TEXT, "UM", v.Screen.NonInv!txtUM.text,"PL",V.Screen.NonInv!txtPL.text,"LMO","M","SOURCE_CODE",v.local.sSource_Code,"SOURCE",v.Screen.NonInv!ddlSource.Text.Trim,"Category",v.Screen.NonInv!ddlCategory.Text.Trim,"CAT_CODE",v.local.sCat_Code,"Serie",v.Local.iSerie,"SeqSort",0,"Cost",v.Local.fCost,"Qty",v.Local.fQty)
	
	'Create parent record 000000 for subcomponent
	f.Data.DataTable.AddRow("CHILDCUT","BPARENT",v.Local.sPart,"DESCR_BP",v.Screen.NonInv!txtDescr.text, "RTR_SEQ","000000", "PART", v.Local.sPart, "DESCRIPTION", v.Screen.NonInv!txtDescr.text, "DESCRIPTION_2", V.Screen.NonInv!txtDescr2.TEXT, "DESCRIPTION_3", V.Screen.NonInv!txtDescr3.TEXT, "UM", v.Screen.NonInv!txtUM.text,"PL",V.Screen.NonInv!txtPL.text,"LMO","M","SOURCE_CODE",v.local.sSource_Code,"SOURCE",v.Screen.NonInv!ddlSource.Text.Trim,"Category",v.Screen.NonInv!ddlCategory.Text.Trim,"CAT_CODE",v.local.sCat_Code,"Serie",v.Local.iSerie,"SeqSort",0)	
	f.Data.DataTable.MoveRow("CHILDCut",v.DataTable.ChildCut.RowCount--,0)
	f.Data.DataTable.AcceptChanges("ChildCut")
	
	f.Data.DataTable.SetValue("ChildCut",-1,"BParent",v.Local.sPart,"Descr_BP",v.Screen.NonInv!txtDescr.text)
	
	'Create Router

	'Resequence ChildCut before saving
	f.Data.DataView.Create("ChildCut","vChildCut99",22,"RTR_SEQ <> '000000' and ((Source_Code is not null and Source_Code = 'F') or (Source_Code is not null and Source_Code = 'M'))","")
	f.Data.DataView.SetSeries("ChildCut","vChildCut99","RTR_Seq_Num","990000",v.Global.iRSeq)
	f.Data.DataView.Close("ChildCut","vChildCut99")
	
	f.Data.DataView.Create("ChildCut","vChildCutNormal",22,"RTR_SEQ <> '000000' and (Source_Code is Null or (Source_Code is NOT null and (Source_Code <> 'F' and Source_Code <> 'M')))","")
	f.Data.DataView.SetSeries("ChildCut","vChildCutNormal","RTR_Seq_Num",v.Global.iRSeq,v.Global.iRSeq)
	f.Data.DataView.Close("ChildCut","vChildCutNormal")	
	
	f.Data.DataTable.SetValueFormat("ChildCut",-1,"RTR_SEQ_NUM","RTR_SEQ","000000")
	F.Data.DataTable.AcceptChanges("ChildCut")	

	'Save Cutlist Router Core side
	f.Intrinsic.Control.CallSub(BuildCutListRouter_CoreSide,"sPart",v.Local.sPart)
	f.Intrinsic.Control.If(v.Args.sRouterUpload,=,"Failed")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Router Upload for Move Seq failed","")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		
	
	'Double update for some header fields, as the 6021 does not update correctly
	f.Intrinsic.String.Build("UPDATE ROUTER_HEADER SET Part_Customer = '{1}' where Router = '{0}' and Router_Type = 'H'",v.Local.sPart,v.Screen.NonInv!ddlNewPartLoc.Text.Trim,V.Local.sSql)
	F.ODBC.Connection!conx.execute(v.Local.sSql)	
	
	'Create Bom
	f.Intrinsic.String.Build("Creating Bom {0}...",v.Local.sPart,v.Local.sHold)
	f.Intrinsic.UI.InvokeWaitDialog(v.Local.sHold)	
	f.Intrinsic.Control.CallSub(Commit_BomCut)
	f.Intrinsic.UI.CloseWaitDialog	
	
	gui.Form..Enabled(True)

	Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
	gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)

	'pass required values to create inventory part
	f.Intrinsic.String.Split(v.Screen.NonInv!cboSort.Text.Trim,"|",v.Local.sSort)
	v.Local.sSort.Set(v.Local.sSort(0).Trim)	
	F.Intrinsic.Control.CallSub(createInventory_Part,"PART",v.Local.sPart,"UM",v.Screen.NonInv!txtUM.text,"DESC",v.Screen.NonInv!txtDescr.text,"PL",V.Screen.NonInv!txtPL.text,"SOURCE",v.local.sSource_Code,"ALT1",V.Screen.NonInv!txtDescr2.TEXT,"ALT2",V.Screen.NonInv!txtDescr3.TEXT,"PRICE","0.00","Location",v.Screen.NonInv!ddlNewPartLoc.Text.Trim,"Code_Sort",v.Local.sSort,"ExtraText",v.Screen.NonInv!txtExtra.Text)	
	
	'Delete Sequences from current router	
	'Delete sequences
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.Child!vSelectSeq.RowCount--,0,-1)
		f.Data.DataView.DeleteRow("Child","vSelectSeq",v.Local.iCnt)
	f.Intrinsic.Control.Next(v.Local.iCnt)
	f.Data.DataTable.AcceptChanges("Child")
	
	'Resequence normal for current Router => I think no need
	
	'Expand Master row	
	
	'Save Main Router and Commit to Bom
	f.Intrinsic.Control.CallSub(Update_Header_To_Child_Bom)
	f.Intrinsic.Control.CallSub(Commit_MainGrid_To_Bom,"bFromCreateSubcomponent",True)
	'Save Bom to GSS	
	f.Intrinsic.Control.CallSub(cmdSaveBomToGSS_Click)							
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Process_OK_BomCutBySelectSeq.End

Program.Sub.Process_OK_BomCutBySelectSeq_WithCutlist_Option.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sPart.Declare
	v.Local.sCat_Code.Declare
	V.Local.sParent.Declare
	V.Local.sFilter.Declare	
	v.Local.sHold.Declare
	v.Local.iSerie.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sRTR_Seq_ColIndex.Declare	
	v.Local.sSource_Code.Declare
	v.Local.fQty.Declare
	v.Local.sSQL.Declare
	v.Local.iCnt.Declare
	v.Local.iInner.Declare	
	v.Local.fHold.Declare
	v.Local.sSerieSubCompList.Declare
	v.Local.sComponentList.Declare
	v.Local.sRow.Declare
	v.Local.sSort.Declare
	v.Local.fCost.Declare
	
	'made the part has a valid source and category
	f.Intrinsic.Control.If(v.Screen.NonInv!ddlSource.text,=,"SOURCE",Or,V.Screen.NonInv!ddlCategory.TEXT,=,"CATEGORY")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select a category and source","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.ddlSource.SetFocus
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate UM
	f.Intrinsic.Control.If(v.Screen.NonInv!txtUM.text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select a UM and source","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.txtUM.SetFocus
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate PL
	f.Intrinsic.Control.If(v.Screen.NonInv!txtPL.text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select a PL and source","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.txtPL.SetFocus
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.Control.If(v.Screen.NonInv!ddlSource.text,<>,"MFG-STOCK",and,v.Screen.NonInv!ddlSource.Text,<>,"MFG-JOB")
		F.Intrinsic.UI.Msgbox("Bom Component must be MFG-STOCK or MFG-JOB.","Invalid Source")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.NonInv.ddlSource.SetFocus
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	
	v.Global.bPassedNonInvScreen.Set(True)
	
	'Prepare: Parent and Part
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.Text,V.Screen.Form!txtFocusRev.text,v.Local.sParent)
	f.Intrinsic.String.GSSPartString(v.Screen.NonInv!txtPart.text,V.Screen.NonInv!txtRev.text,v.Local.sPart)		
	
	'Get the target seq	
	f.Data.DataView.Create("CHILD","vNext99",22,"RTR_Seq >= '990000'","RTR_Seq desc")
	f.Intrinsic.Control.If(v.DataView.Child!vNext99.RowCount,>,0)
		f.Intrinsic.Math.Add(v.DataView.Child!vNext99(0).RTR_Seq!FieldValTrim,v.Global.iRSeq,v.Local.sTargetSeq)
	f.Intrinsic.Control.Else
		v.Local.sTargetSeq.Set("990000")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Close("CHILD","vNext99")
	
	'Source Code and Category
	f.Data.Dictionary.ReturnKeyFromValue("SOURCE",V.Screen.NonInv!ddlSource.TEXT,False,v.local.sSource_Code)	
	F.Data.Dictionary.ReturnKeyFromValue("CATEGORY",V.Screen.NonInv!ddlCategory.Text,False,v.local.sCat_Code)	

	'Get next Serie
	f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
	f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)		
	
	'Add 99 record to the current Router
	v.Local.fCost.Set(v.Screen.NonInv!txtCost.Text.Trim)
	v.Local.fQty.Set(v.Screen.NonInv!txtQty.Text.Trim)	
	f.Data.DataTable.AddRow("CHILD","BPARENT",v.Local.sParent,"DESCR_BP",V.Screen.Form!txtFocusDescr.text, "RTR_SEQ",v.Local.sTargetSeq, "PART", v.Local.sPart, "DESCRIPTION", v.Screen.NonInv!txtDescr.text, "DESCRIPTION_2", V.Screen.NonInv!txtDescr2.TEXT, "DESCRIPTION_3", V.Screen.NonInv!txtDescr3.TEXT, "UM", v.Screen.NonInv!txtUM.text,"PL",V.Screen.NonInv!txtPL.text,"LMO","M","SOURCE_CODE",v.local.sSource_Code,"SOURCE",v.Screen.NonInv!ddlSource.Text.Trim,"Category",v.Screen.NonInv!ddlCategory.Text.Trim,"CAT_CODE",v.local.sCat_Code,"Serie",v.Local.iSerie,"SeqSort",0,"Cost",v.Local.fCost,"Qty",v.Local.fQty)
	
	'Create parent record 000000 for subcomponent
	f.Data.DataTable.AddRow("CHILDCUT","BPARENT",v.Local.sPart,"DESCR_BP",v.Screen.NonInv!txtDescr.text, "RTR_SEQ","000000", "PART", v.Local.sPart, "DESCRIPTION", v.Screen.NonInv!txtDescr.text, "DESCRIPTION_2", V.Screen.NonInv!txtDescr2.TEXT, "DESCRIPTION_3", V.Screen.NonInv!txtDescr3.TEXT, "UM", v.Screen.NonInv!txtUM.text,"PL",V.Screen.NonInv!txtPL.text,"LMO","M","SOURCE_CODE",v.local.sSource_Code,"SOURCE",v.Screen.NonInv!ddlSource.Text.Trim,"Category",v.Screen.NonInv!ddlCategory.Text.Trim,"CAT_CODE",v.local.sCat_Code,"Serie",v.Local.iSerie,"SeqSort",0)	
	f.Data.DataTable.MoveRow("CHILDCut",v.DataTable.ChildCut.RowCount--,0)
	f.Data.DataTable.AcceptChanges("ChildCut")
	
	f.Data.DataTable.SetValue("ChildCut",-1,"BParent",v.Local.sPart,"Descr_BP",v.Screen.NonInv!txtDescr.text)
	
	'Create Router

	'Resequence ChildCut before saving
	f.Data.DataView.Create("ChildCut","vChildCut99",22,"RTR_SEQ <> '000000' and ((Source_Code is not null and Source_Code = 'F') or (Source_Code is not null and Source_Code = 'M'))","")
	f.Data.DataView.SetSeries("ChildCut","vChildCut99","RTR_Seq_Num","990000",v.Global.iRSeq)
	f.Data.DataView.Close("ChildCut","vChildCut99")
	
	f.Data.DataView.Create("ChildCut","vChildCutNormal",22,"RTR_SEQ <> '000000' and (Source_Code is Null or (Source_Code is NOT null and (Source_Code <> 'F' and Source_Code <> 'M')))","")
	f.Data.DataView.SetSeries("ChildCut","vChildCutNormal","RTR_Seq_Num",v.Global.iRSeq,v.Global.iRSeq)
	f.Data.DataView.Close("ChildCut","vChildCutNormal")	
	
	f.Data.DataTable.SetValueFormat("ChildCut",-1,"RTR_SEQ_NUM","RTR_SEQ","000000")
	F.Data.DataTable.AcceptChanges("ChildCut")	

	'Save SubComponent Router Core side
	f.Intrinsic.Control.CallSub(BuildCutListRouter_CoreSide,"sPart",v.Local.sPart)
	f.Intrinsic.Control.If(v.Args.sRouterUpload,=,"Failed")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Router Upload for Move Seq failed","")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		
	
	f.Intrinsic.String.Build("UPDATE ROUTER_HEADER SET Part_Customer = '{1}' where Router = '{0}' and Router_Type = 'H'",v.Local.sPart,v.Screen.NonInv!ddlNewPartLoc.Text.Trim,V.Local.sSql)
	F.ODBC.Connection!conx.execute(v.Local.sSql)		
	
	'Create Bom
	f.Intrinsic.String.Build("Creating Bom {0}...",v.Local.sPart,v.Local.sHold)
	f.Intrinsic.UI.InvokeWaitDialog(v.Local.sHold)	
	f.Intrinsic.Control.CallSub(Commit_BomCut)
	f.Intrinsic.UI.CloseWaitDialog	
	
	gui.Form..Enabled(True)

	Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
	gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)

	'pass required values to create inventory part
	f.Intrinsic.String.Split(v.Screen.NonInv!cboSort.Text.Trim,"|",v.Local.sSort)
	v.Local.sSort.Set(v.Local.sSort(0).Trim)	
	F.Intrinsic.Control.CallSub(createInventory_Part,"PART",v.Local.sPart,"UM",v.Screen.NonInv!txtUM.text,"DESC",v.Screen.NonInv!txtDescr.text,"PL",V.Screen.NonInv!txtPL.text,"SOURCE",v.local.sSource_Code,"ALT1",V.Screen.NonInv!txtDescr2.TEXT,"ALT2",V.Screen.NonInv!txtDescr3.TEXT,"PRICE","0.00","Location",v.Screen.NonInv!ddlNewPartLoc.Text.Trim,"Code_Sort",v.Local.sSort,"ExtraText",v.Screen.NonInv!txtExtra.Text)	
	
	'Delete Sequences from current router
	
	'First delete relating serie for CHILD$CUTLIST	
	f.Intrinsic.Control.For(v.Local.iInner,v.DataView.Child$CutList!vGetSerie.RowCount--,0,-1)
		f.Data.DataView.deleteRow("CHILD$CUTLIST","vGetSerie",v.Local.iInner)
	f.Intrinsic.Control.Next(v.Local.iInner)			
	f.Data.DataTable.AcceptChanges("CHILD$CUTLIST")	


	'Move Cutlist Total or Partial
	'Get selected Seq
	f.Intrinsic.Control.If(v.Global.sCutlistSeries,<>,"")
	
		f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.TotalOrPartial.RowCount--,1)
			f.Intrinsic.String.Build("Select PART,COMPONENT,JOB,SUFFIX,SEQ,CUTLIST_ITEM,Property_Code,DIMENSION_1,DIMENSION_2,DIMENSION_3,DIMENSION_4,DIMENSION_5,ANGLE_A,ANGLE_B,ANGLE_C,PIECES,SCRAP_PERCENT,DRAWING_NO,TAG_NO,WORKCENTER,EST_UM_UNITS,USQL_2ND_UM_UNITS,SCHEDULE_NO,SCHEDULE_SUFFIX,PIECES_COMPLETE,LOCATION,NEXT_WORKCTR,BUILT_FROM_BOM,FILLER from RTR_Cutlist where Part = '{0}' and Component = '{1}' and Cutlist_item in ('{2}')",v.Local.sParent,v.DataTable.TotalOrPartial(v.Local.iCnt).Component!FieldValString,v.DataTable.TotalOrPartial(v.Local.iCnt).CutListItemMove!FieldValString,v.Local.sSQL)
			f.Data.DataTable.CreateFromSQL("CutTemp","conx",v.Local.sSQL,True)
			f.Intrinsic.Control.If(v.DataTable.CutTemp.RowCount,>,0)
				f.Intrinsic.String.Build("Delete from RTR_Cutlist where Part = '{0}' and Component = '{1}' and Cutlist_item in ('{2}')",v.Local.sParent,v.DataTable.TotalOrPartial(v.Local.iCnt).Component!FieldValString,v.DataTable.TotalOrPartial(v.Local.iCnt).CutListItemMove!FieldValString,v.Local.sSQL)
				f.ODBC.Connection!conx.Execute(v.Local.sSQL)
				f.Data.DataTable.SetValue("CutTemp",-1,"Part",v.Local.sPart)
				f.Data.DataTable.SaveToDB("CutTemp","conx","RTR_Cutlist","",128,"PART@!@PART*!*COMPONENT@!@COMPONENT*!*JOB@!@JOB*!*SUFFIX@!@SUFFIX*!*SEQ@!@SEQ*!*CUTLIST_ITEM@!@CUTLIST_ITEM*!*Property_Code@!@Property_Code*!*DIMENSION_1@!@DIMENSION_1*!*DIMENSION_2@!@DIMENSION_2*!*DIMENSION_3@!@DIMENSION_3*!*DIMENSION_4@!@DIMENSION_4*!*DIMENSION_5@!@DIMENSION_5*!*ANGLE_A@!@ANGLE_A*!*ANGLE_B@!@ANGLE_B*!*ANGLE_C@!@ANGLE_C*!*PIECES@!@PIECES*!*SCRAP_PERCENT@!@SCRAP_PERCENT*!*DRAWING_NO@!@DRAWING_NO*!*TAG_NO@!@TAG_NO*!*WORKCENTER@!@WORKCENTER*!*EST_UM_UNITS@!@EST_UM_UNITS*!*USQL_2ND_UM_UNITS@!@USQL_2ND_UM_UNITS*!*SCHEDULE_NO@!@SCHEDULE_NO*!*SCHEDULE_SUFFIX@!@SCHEDULE_SUFFIX*!*PIECES_COMPLETE@!@PIECES_COMPLETE*!*LOCATION@!@LOCATION*!*NEXT_WORKCTR@!@NEXT_WORKCTR*!*BUILT_FROM_BOM@!@BUILT_FROM_BOM*!*FILLER@!@FILLER")			
			f.Intrinsic.Control.EndIf
			f.Data.DataTable.Close("CutTemp")
		
		f.Intrinsic.Control.Next(v.Local.iCnt)
		
	f.Intrinsic.Control.EndIf
	
	'Delete sequences
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.Child!vSelectSeq.RowCount--,0,-1)
		v.Local.iSerie.Set(v.DataView.Child!vSelectSeq(v.Local.iCnt).Serie!FieldValString)
		f.Intrinsic.String.Build("Serie = '{0}'",v.Local.iSerie,v.Local.sFilter)
		f.Data.DataTable.Select("TotalorPartial",v.Local.sFilter,v.Local.sRow)
		'Material with Cutlist selected
		f.Intrinsic.Control.If(v.Local.sRow,<>,"***NORETURN***")
			'All to move
			f.Intrinsic.Control.If(v.DataTable.TotalOrPartial(v.Local.sRow).TotalCountPerSerie!FieldValString,=,v.DataTable.TotalOrPartial(v.Local.sRow).TotalCountCutListMove!FieldValString)
				f.Data.DataView.DeleteRow("Child","vSelectSeq",v.Local.iCnt)
			'Partial move, so reset the material seq	
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.If(v.DataTable.TotalOrPartial(v.Local.sRow).DifferenceQty!FieldValString,>,0)
					f.Data.DataView.SetValue("Child","vSelectSeq",v.Local.iCnt,"Qty",v.DataTable.TotalOrPartial(v.Local.sRow).DifferenceQty!FieldValString)
				f.Intrinsic.Control.Else
					f.Data.DataView.SetValue("Child","vSelectSeq",v.Local.iCnt,"Qty",0)
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
			
		'Other sequences type	
		f.Intrinsic.Control.Else
			f.Data.DataView.DeleteRow("Child","vSelectSeq",v.Local.iCnt)		
		f.Intrinsic.Control.EndIf
		
		
	f.Intrinsic.Control.Next(v.Local.iCnt)
	f.Data.DataTable.AcceptChanges("Child")
	
	'Resequence normal for current Router => I think no need
	
	'Expand Master row	
	
	'Save Main Router and Commit to Bom
	f.Intrinsic.Control.CallSub(Update_Header_To_Child_Bom)
	f.Intrinsic.Control.CallSub(Commit_MainGrid_To_Bom,"bFromCreateSubcomponent",True)
	'Save Bom to GSS	
	f.Intrinsic.Control.CallSub(cmdSaveBomToGSS_Click)								
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Process_OK_BomCutBySelectSeq_WithCutlist_Option.End

Program.Sub.BuildCutListRouter_CoreSide.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iCount.Declare
	v.Local.iLine.Declare
	v.Local.sMapLab.Declare
	v.Local.sMapMat.Declare
	v.Local.sMapOutside.Declare	
	V.Local.sMapCmt.Declare
	V.Local.sMapTask.Declare
	v.Local.sSql.Declare
	v.Local.sPart.Declare
	v.Local.iField.Declare
	v.Local.sField.Declare
	v.Local.bExists.Declare
	v.Local.sRet.Declare
	v.Local.bBom.Declare
	v.Local.iRet.Declare
	v.Local.iBaseRow.Declare(Long,0)
	v.Local.sHold.Declare
	v.Local.fLead.Declare
	v.Local.bHeaderOnly.Declare
	v.Local.sBPDescr.Declare
	v.Local.sBPDescr2.Declare
	v.Local.sBPDescr3.Declare
	v.Local.sBPPL.Declare	
	
	v.Local.sDesc2.Declare
	v.Local.sDesc3.Declare
	v.Local.sDescription.Declare
	
	v.Local.sPart.Set(v.Args.sPart)
	'CUST
'	'this first section is to see if the router already exists and then give the user the opportunity to decide if they want to overwrite it.
'	f.Intrinsic.String.Build("select distinct router from v_router_header where router = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
'	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
'	
'	f.Intrinsic.Control.If(v.Local.sRet.Trim,=,v.Local.sPart.Trim)
'		f.Intrinsic.String.Build("Router {0} already exists. Overwrite?",v.Local.sPart.Trim,v.Local.sRet)
'		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
'		f.Intrinsic.UI.Msgbox(v.Local.sRet,"Router Exists",4,v.Local.iRet)
'		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
'		'last chance here - if user says yes, the old router is deleted before it's saved again
'		f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxNo)
'			F.Intrinsic.Control.CallSub(optBomView_Click)
'			f.Intrinsic.Control.ExitSub
'		f.Intrinsic.Control.EndIf
'	f.Intrinsic.Control.EndIf
		'PL
		
	F.Data.DataTable.Acceptchanges("CHILDCUT")
	
	'Check Header Only: In case only Router header, add a fake sequence for callwraper to save router
	f.Intrinsic.Control.CallSub(Add_Fake_Router_Line,"sPart",v.Local.sPart,"sTable","ChildCut")
	v.Local.bHeaderOnly.Set(v.Args.bHeaderOnly)		
	
	'MAP FOR LABOR RECORDS
	f.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}*!*{25}","RouterNum","RouterDesc","Seq","LineType","WC","PartStepDesc","SetupQty","RuntimeMatlQty","CustID","OperationCodeVend","RateUC","UM","ExtraDesc1","ExtraDesc2","Freq","Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","SortCode","SignOffGroupUser","SignOffType",V.Local.sMapLab)
	'MAP FOR  MATERIAL
	F.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}*!*{25}*!*{26}","RouterNum","RouterDesc","Seq","LineType","PartNum","PartStepDesc","SetupQty","RuntimeMatlQty","CustID","OperationCodeVend","RateUC","UM","ExtraDesc1","ExtraDesc2","Freq","Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","SortCode","LeadTime","MinFlag","MinOutside",V.Local.sMapMat)
	'MAP FOR OUTSIDE
	F.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}*!*{25}*!*{26}","RouterNum","RouterDesc","Seq","LineType","PartNum","PartStepDesc","SetupQty","RuntimeMatlQty","CustID","OperationCodeVend","RateUC","UM","ExtraDesc1","ExtraDesc2","Freq","Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","SortCode","LeadTime","MinFlag","MinOutside",V.Local.sMapOutside)	
	'MAP FOR COMMENT LINES
	f.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}","RouterNum","RouterDesc","Seq","LineType","WC","PartStepDesc","SetupQty","RuntimeMatlQty","CustID","OperationCodeVend","RateUC","UM","ExtraDesc1","ExtraDesc2","Freq", "Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","MainCommentFlag","SortCode",V.Local.sMapCmt)
	'MAP FOR TASK LINES
	f.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}*!*{25}*!*{26}","RouterNum","RouterDesc","Seq","LineType","WC","PartStepDesc","SetupQty","RuntimeMatlQty","CustID", "OperationCodeVend","RateUC","UM","ExtraDesc1", "ExtraDesc2","Freq","Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","MainCommentFlag","SignOffGroupUser","SignOffType","SortCode",V.Local.sMapTask)
	
	
	'Using the long value of the router sequence because the filter was not accepting 2 string values for the same column ( > 'x' and < 'y')
	F.Data.DataView.Create("CHILDCut","V_UPDATE",22,"","RTR_SEQ ASC")	

	f.Intrinsic.Control.If(v.DataTable.ChildCut.RowCount,>,0)
		f.Intrinsic.String.RTrim(v.DataTable.ChildCut(0).Descr_BP!FieldValString,v.Local.sBPDescr)		
		f.Intrinsic.String.RTrim(v.DataTable.ChildCut(0).Description_2!FieldValString,v.Local.sBPDescr2)		
		f.Intrinsic.String.RTrim(v.DataTable.ChildCut(0).Description_3!FieldValString,v.Local.sBPDescr3)		
		f.Intrinsic.String.RTrim(v.DataTable.ChildCut(0).PL!FieldValString,v.Local.sBPPL)
	f.Intrinsic.Control.EndIf
	
	
	'adding records using different maps based on LMO C or T
	f.Intrinsic.Control.For(v.Local.iCount,0,v.DataView.CHILDCut!V_UPDATE.RowCount--,1)
		F.Intrinsic.Control.If(V.DataView.CHILDCut!V_UPDATE(V.Local.iCount).RTR_SEQ!FIELDVALLONG,>,0,AND,V.DataView.CHILDCut!V_UPDATE(V.Local.iCount).RTR_SEQ!FIELDVALLONG,<,990000)
			F.Intrinsic.Control.If(V.DataView.CHILDCut!V_UPDATE(V.Local.iCount).CATEGORY!FIELDVALTRIM,<>,"EXCLUDE")
				v.Local.fLead.Set(v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).Lead!FIELDVALString)
				f.Intrinsic.String.RTrim(v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).DESCRIPTION_2!FIELDVALString,v.Local.sDesc2)
				f.Intrinsic.String.RTrim(v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).DESCRIPTION_3!FIELDVALString,v.Local.sDesc3)
				f.Intrinsic.String.RTrim(v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).DESCRIPTION!FIELDVALString,v.Local.sDescription)
				f.Intrinsic.Control.SelectCase(v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM)
					'labor lines
					f.Intrinsic.Control.Case("L")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapLab,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sBPDescr.Left30,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,"",v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","",v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).WC_Factor!FIELDVALTRIM,"",v.Local.sBPDescr.Left30,v.local.sBPDescr2.Left71,v.local.sBPDescr3.Left71,v.Local.sBPPL,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).SIGNOFF_GRPUSR!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).SIGNOFF_TYPE!FIELDVALTRIM)
					'material lines
					f.Intrinsic.Control.Case("M")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapMat,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sBPDescr.Left30,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,"",v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","","","",v.Local.sBPDescr.Left30,v.local.sBPDescr2.Left71,v.local.sBPDescr3.Left71,v.Local.sBPPL,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM,v.local.fLead,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).MinFlag!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).Amt_Minimum!FIELDVALTRIM)
					'material lines
					f.Intrinsic.Control.Case("O")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapMat,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sBPDescr.Left30,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,"",v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","","","",v.Local.sBPDescr.Left30,v.local.sBPDescr2.Left71,v.local.sBPDescr3.Left71,v.Local.sBPPL,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM,v.local.fLead,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).MinFlag!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).Amt_Minimum!FIELDVALTRIM)
					'comment lines
					f.Intrinsic.Control.Case("C")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapCmt,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sBPDescr.Left30,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,"",v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","","","",v.Local.sBPDescr.Left30,v.local.sBPDescr2.Left71,v.local.sBPDescr3.Left71,v.Local.sBPPL,"Y",v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM)
					'task lines
					F.Intrinsic.Control.Case("T")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapTask,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sBPDescr.Left30,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,"L",v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,"",v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","","","",v.Local.sBPDescr.Left30,v.local.sBPDescr2.Left71,v.local.sBPDescr3.Left71,v.Local.sBPPL,"T",v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).SIGNOFF_GRPUSR!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).SIGNOFF_TYPE!FIELDVALTRIM,v.DataView.CHILDCut!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM)
				
				f.Intrinsic.Control.EndSelect
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.iCount)

	
	F.Data.DataView.Close("CHILDCut","V_UPDATE")

	f.Intrinsic.Control.CallSub(Backup_CHILDCut_Router)


	
	'query quantity and update
	f.Intrinsic.String.Build("Select Router from V_RTR_PRICE_1_4 where ROUTER = '{0}' and (QUANTITY_1 <> 0 or QUANTITY_2 <> 0 or QUANTITY_3 <> 0 or QUANTITY_4 <> 0 )",V.Local.sPart.PSQLFriendly,V.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		F.Intrinsic.String.Build("Select Router from V_RTR_PRICE_5_8 where ROUTER = '{0}' and (QUANTITY_5 <> 0 or QUANTITY_6 <> 0 or QUANTITY_7 <> 0 or QUANTITY_8 <> 0)",V.Local.sPart.PSQLFriendly,V.Local.sSql)
		f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
			f.Intrinsic.String.Build("Select Router from V_RTR_PRICE_9_10 where ROUTER = '{0}' and (QUANTITY_9 <> 0 or QUANTITY_10 <> 0)",V.Local.sPart.PSQLFriendly,V.Local.sSql)
			f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
			f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
				f.Data.DataTable.SetValue("6021",-1,"Qty1",1)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf			
	
	f.Intrinsic.Control.CallSub(6021Sync,"sRouter",v.Local.sPart)
	
	'In case only Router header.
	f.Intrinsic.Control.If(v.Local.bHeaderOnly)
		F.Intrinsic.Control.CallSub(Delete_Fake_Line,"sPart",v.Local.sPart,"sTable","ChildCut")
	f.Intrinsic.Control.EndIf			
	
	'In case only Router header.
	f.Intrinsic.Control.If(v.Local.bHeaderOnly)
		F.Intrinsic.Control.CallSub(Delete_Fake_Line,"sPart",v.Local.sPart,"sTable","Child")
	f.Intrinsic.Control.EndIf

	'Return: IsForcedToStopped, IsStillBusyAtTimeOut, ErrorAtCheck_Queue, ErrorAt6021, IsGoodToGo
	f.Intrinsic.Control.If(v.Args.s6021Status,<>,"IsGoodToGo")		
	
		f.Intrinsic.Control.If(v.Args.s6021Status,<>,"NoRecordFound")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Router Upload is unsuccessful. You can verify from core Router or your version in backup database.","Router Upload Fail")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("No Router Record founds","Router Upload Fail")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)			
		f.Intrinsic.Control.EndIf		
		
		f.Intrinsic.Variable.AddRV("sRouterUpload","Failed")
		
		F.Data.DataTable.DeleteRow("6021")
		f.Data.DataTable.AcceptChanges("6021")		
		
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'once this upload completes, we need to add in the "line comments" via savetoDB and the "complete flag" via udpate query

	'there is also a possibility that the BOM hasn't been saved to GSS yet, in this case args.bom would have already set bBOM to true
	v.Local.sHold.Set(V.DataTable.CHILDCut(v.Local.iBaseRow).BPARENT!FIELDVALTRIM)
	f.Intrinsic.String.Build("UPDATE ROUTER_LINE SET BUILT_FROM_BOM = 'Y' WHERE ROUTER = '{0}' AND LMO = 'M'",v.Local.sHold.PSQLFriendly,V.Local.sSql)
	F.ODBC.Connection!conx.execute(v.Local.sSql)
	
	'Double update for some header fields, as the 6021 does not update correctly
	f.Intrinsic.String.Build("UPDATE ROUTER_HEADER SET UM_Inventory = '{0}',Prod_Line = '{2}' where Router = '{1}' and Router_Type = 'H'",v.Screen.NonInv!txtUM.Text,v.Local.sPart.PSQLFriendly,v.Screen.NonInv!txtPL.Text.Trim,V.Local.sSql)
	F.ODBC.Connection!conx.execute(v.Local.sSql)

	'create a filter then datatable for the comments
	f.Data.DataView.Create("CHILDCut","V_COMMENTS",22,"TRIM(COMMENTS) > ''","RTR_SEQ ASC")
	F.Data.DataView.ToDataTable("CHILDCut","V_COMMENTS","TEMP_COMMENTS",True)
	f.Data.DataView.Close("CHILDCut","V_COMMENTS")
	
	'tochange 3
	'save the comments
	f.Data.DataTable.SaveToDB("TEMP_COMMENTS","conx","RTR_SEQ_COMMENTS","BPARENT*!*RTR_SEQ",128,"BPARENT@!@RTR_NUMBER*!*RTR_SEQ@!@RTR_SEQ*!*COMMENTS@!@TEXT")
	F.Data.DataTable.Close("TEMP_COMMENTS")
	
	f.Intrinsic.Variable.AddRV("sRouterUpload","Successful")
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.BuildCutListRouter_CoreSide.End

Program.Sub.Commit_BomCut.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sParent.Declare
	v.Local.sRet.Declare
	v.Local.sRefDescr.Declare
	v.Local.sDate.Declare
	v.Local.sTime.Declare
	v.Local.sMap.Declare
	v.Local.sSQL.Declare
	v.Local.sDescr.Declare
	
	f.Intrinsic.String.RPad("","-",30,v.Local.sRefDescr)	
	
	f.Intrinsic.Control.If(v.DataTable.CHILDCut.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Nothing to Save as new Subcomponent Bom","Error")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.RPad(v.DataTable.ChildCut(0).BParent!FieldValString," ",20,v.Local.sParent)

	v.Local.sDescr.Set(v.DataTable.ChildCut(0).Descr_BP!FieldValString)

	F.Data.DataTable.SetValue("CHILDCut",0,"BOM_SEQ","0000","RTR_SEQ","000000","PART",v.Local.sParent,"LMO","M","QTY","1")
		
	'Create a temporary filtered view of CHILDCut
	f.Data.DataView.Create("CHILDCut","V_COMMIT",22,"LMO = 'M' ","RTR_Seq Asc")	
	

	F.Intrinsic.Control.If(V.DataTable.Bom1stLevelToSave.Exists)
		f.Data.DataTable.Close("Bom1stLevelToSave")
	F.Intrinsic.Control.EndIf
	
	F.Data.DataView.ToDataTable("CHILDCut","V_COMMIT","Bom1stLevelToSave",True)
	F.DatA.DataView.Close("CHILDCut","V_COMMIT")

	
	v.Local.sDate.Set(v.Ambient.Date.FormatYYYYMMDD)
	f.Intrinsic.String.Build("{0}00",v.Ambient.Now.FormatHHNNSS,v.Local.sTime)	
	
	'Set timestamp
	f.Data.DataTable.SetValue("Bom1stLevelToSave",-1,"Date_Maintenance",v.Local.sDate.right6,"Date_Last_Chg",v.Local.sDate.Right6,"Time_Last_Chg",v.Local.sTime,"Last_Chg_By",v.Caller.User,"Last_Chg_Prog","ESTIMATE")	
	'Set Seq
	f.Data.DataTable.AddColumn("Bom1stLevelToSave","SeqLong","Long",0)
	f.Data.DataTable.SetSeries("Bom1stLevelToSave","SeqLong",0,v.Global.iBSeq)	
	f.Data.DataTable.AddExpressionColumn("Bom1stLevelToSave","BomSeqString","String","SubString('0000' + Convert(SeqLong,System.String),len('0000' + Convert(SeqLong,System.String)) - 3,4)")
	
	f.Intrinsic.String.Build("Delete from Bom_MSTR Where Parent = '{0}'",v.Local.sParent.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)
	
	v.Local.sMap.Set("BPARENT@!@PARENT*!*BomSeqString@!@SEQUENCE_BOM*!*INSERT_BOM@!@INSERT_BOM*!*DATE_MAINTENANCE@!@DATE_MAINTENANCE*!*COST@!@COST*!*QTY@!@QUANTITY*!*PART@!@PART*!*DATE_START@!@DATE_START*!*DATE_STOP@!@DATE_STOP*!*BM_SERIAL_START@!@BM_SERIAL_START*!*BM_SERIAL_STOP@!@BM_SERIAL_STOP*!*UM@!@UM_INVENTORY*!*PURGE_FLAG@!@PURGE_FLAG*!*ORDR_USR_FLAG@!@ORDR_USR_FLAG*!*QUANTITY_6@!@QUANTITY_6*!*DRAWING@!@DRAWING*!*TAG@!@TAG*!*CAT_CODE@!@CATEGORY*!*SOURCE_CODE@!@SOURCE*!*FREQUENCY@!@FREQUENCY*!*DATE_LAST_CHG@!@DATE_LAST_CHG*!*TIME_LAST_CHG@!@TIME_LAST_CHG*!*LAST_CHG_BY@!@LAST_CHG_BY*!*LAST_CHG_PROG@!@LAST_CHG_PROG*!*DRAWING_SIZE@!@DRAWING_SIZE*!*REQ_TRACE@!@REQ_TRACE*!*COST_DATE@!@COST_DATE*!*COMPLETE@!@BOM_COMPLETE*!*INACTIVE@!@INACTIVE*!*SETUP_QTY@!@SETUP_QTY")
	f.Data.DataTable.SaveToDB("Bom1stLevelToSave","conx","Bom_MSTR","",128,v.Local.sMap)
	f.Data.DataTable.Close("Bom1stLevelToSave")
	
	'Save to Bom_Eng
	f.Intrinsic.String.Build("Select * from Bom_Eng where Part = '{0}' and Location = ''",v.Local.sParent.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		f.Intrinsic.String.Build("Update Bom_Eng set Description = '{1}', Is_Parent = 'Y' where Part = '{0}' and Location = ''",v.Local.sParent.PSQLFriendly,v.Local.sDescr.PSQLFriendly,v.Local.sSQL)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("Insert into Bom_Eng (Part,Location,Description,Is_Parent,Date_Revision) values ('{0}','','{1}','Y','000000')",v.Local.sParent.PSQLFriendly,v.Local.sDescr.PSQLFriendly,v.Local.sSQL)	
	f.Intrinsic.Control.EndIf
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)	
	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.Commit_BomCut.End

Program.Sub.picCreateSubComponent_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	gui.Form.picCreateSubComponent.Enabled(False)

	'Get Series to expand later
	f.Intrinsic.Control.If(v.DataView.CHILD$CUTLIST!vGetSerieToExpand.Exists)
		f.Data.DataView.Close("CHILD$CUTLIST","vGetSerieToExpand")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("CHILD$CUTLIST","vGetSerieToExpand",22,"SELECT_CUTLIST = 1","")
	f.Data.DataView.ToString("Child$Cutlist","vGetSerieToExpand","Serie","","','",v.Global.sSeriesToExpand)	

	f.Intrinsic.Control.If(v.Global.bBindCutList)
		f.Intrinsic.Control.CallSub(picCreateSubComponent_WithCutlist_Option)
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.CallSub(picCreateSubComponent)
	f.Intrinsic.Control.EndIf

	'Expand Material sequences	
	
	gui.Form.picCreateSubComponent.Enabled(True)	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picCreateSubComponent_Click.End

Program.Sub.picCreateSubComponent.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sHold.Declare
	v.Local.sRet.Declare
	v.Local.sSQL.Declare
	v.Local.sRefList.Declare
	v.Local.sMatSeq.Declare
	v.Local.sFilter.Declare
	v.Local.iCnt.Declare
	v.Local.fItemQty.Declare
	v.Local.sParent.Declare
	v.Local.sComponent.Declare	

	'Get selected Seq
	f.Intrinsic.Control.If(v.DataView.Child!vSelectSeq.Exists)
		f.Data.DataView.Close("Child","vSelectSeq")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("Child","vSelectSeq",22,"SelectSeq = 1","RTR_Seq")
	f.Intrinsic.Control.If(v.DataView.Child!vSelectSeq.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No sequence selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)		
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
			
	'Move records to ChildCut
	f.Intrinsic.Control.If(v.DataTable.ChildCut.Exists)
		f.Data.DataTable.Close("ChildCut")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.ToDataTable("Child","vSelectSeq","ChildCut",True)	
	
	gui.Form..Enabled(False)

	f.Intrinsic.Control.CallSub(Prompt_Enter_Subcomponent_Header)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.picCreateSubComponent.End

Program.Sub.Prompt_Enter_Subcomponent_Header.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	gui.NonInv..Caption("Create Subcomponent from sequences")
	'set the values to the form before we open it
	GUI.NonInv.txtPart.Text("")
	GUI.NonInv.txtRev.Text("")
	GUI.NonInv.txtDescr.Text("")
	GUI.NonInv.txtDescr2.Text("")
	GUI.NonInv.txtDescr3.Text("")
	GUI.NonInv.txtUM.Text("")
	GUI.NonInv.txtPL.Text("")
	gui.NonInv.txtExtra.Text("")
	'Gui.NonInv.cmdBrowseInv.Visible(False)		

	'set controls in the form
	GUI.NonInv.txtType.Text("BOMCUTBySelectSeq")
	
	'setting form values that have  "change" events active
	f.Intrinsic.Control.BlockEvents
	'Clear dropdown before adding new items
	gui.NonInv.ddlSource.ClearItems
	gui.NonInv.ddlSource.AddItem("MFG-JOB")
	gui.NonInv.ddlSource.AddItem("MFG-STOCK")	
	gui.NonInv.ddlSource.ListIndex(0)
	
	'Clear dropdown before adding new items
	gui.NonInv.ddlCategory.ClearItems
	gui.NonInv.ddlCategory.AddItem("NORMAL")
	gui.NonInv.ddlCategory.ListIndex(0)
	
	gui.NonInv.ddlNewPartLoc.ListIndex(0)
	
	'Clear dropdown before adding new items
	gui.NonInv.cboSort.ClearItems
	gui.NonInv.cboSort.AddItems("DICTIONARY","DICTSORT")
	gui.NonInv.cboSort.Additem("SORT CODE")
	
	'Set default value
	gui.NonInv.cboSort.Text("SORT CODE")
	gui.NonInv.txtNoSave.Text("")
	
	f.Intrinsic.Control.CallSub(Visible_Cost_Qty,"bVisible",True)
	f.Intrinsic.Control.CallSub(Default_Cost_Quantity)
	
	f.Intrinsic.Control.UnBlockEvents
	
	'Resize form NonInv
	gui.NonInv..Size(10260, 4300)

	gui.Form.frInsertType.Visible(False)
	gui.NonInv.txtPart.SetFocus
	
	gui.NonInv..Visible(True)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Prompt_Enter_Subcomponent_Header.End

Program.Sub.picCreateSubComponent_WithCutlist_Option.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sHold.Declare
	v.Local.sRet.Declare
	v.Local.sSQL.Declare
	v.Local.sRefList.Declare
	v.Local.sMatSeq.Declare
	v.Local.sFilter.Declare
	v.Local.iCnt.Declare
	v.Local.fItemQty.Declare
	v.Local.sSumCutlist.Declare
	v.Local.sRowToSet.Declare
	v.Local.sMaterialParentQty.Declare
	v.Local.sTotalCountCutlistMove.Declare
	v.Local.sTotalCountPerSerie.Declare
	v.Local.sCutlistItemMove.Declare
	v.Local.sCutlistItemPerSerie.Declare
	v.Local.sParentPart.Declare
	v.Local.sComponent.Declare
	v.Local.iSerie.Declare
	v.Local.sSumCutlistConverted.Declare
	
	'Get Series of cutlist selected and build filter
	f.Intrinsic.Control.If(v.DataView.CHILD$CUTLIST!vGetSerie.Exists)
		f.Data.DataView.Close("CHILD$CUTLIST","vGetSerie")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("CHILD$CUTLIST","vGetSerie",22,"SELECT_CUTLIST = 1","")
	f.Data.DataView.ToString("Child$Cutlist","vGetSerie","Serie","",",",v.Global.sCutlistSeries)
	
	f.Intrinsic.Control.If(v.DataView.Child$Cutlist!vGetSerie.RowCount,>,0)
		f.Intrinsic.String.Build("SelectSeq = 1 or Serie in ({0})",v.Global.sCutlistSeries,v.Local.sFilter)
	f.Intrinsic.Control.Else
		v.Global.sCutlistSeries.Set("")
		v.Local.sFilter.Set("SelectSeq = 1")
	f.Intrinsic.Control.EndIf


	'Get selected Seq: these include Material sequences that has cutlist selected
	f.Intrinsic.Control.If(v.DataView.Child!vSelectSeq.Exists)
		f.Data.DataView.Close("Child","vSelectSeq")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("Child","vSelectSeq",22,v.Local.sFilter,"RTR_Seq")
	f.Intrinsic.Control.If(v.DataView.Child!vSelectSeq.RowCount,=,0)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'Move cutlist that tied to Parent to now the subcomponent???????????????????????????????????
		
	'Move records to ChildCut
	f.Intrinsic.Control.If(v.DataTable.ChildCut.Exists)
		f.Data.DataTable.Close("ChildCut")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.ToDataTable("Child","vSelectSeq","ChildCut",True)	
	
	f.Intrinsic.Control.If(v.DataTable.TotalOrPartial.Exists)
		f.Data.DataTable.Close("TotalOrPartial")
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.Create("TotalOrPartial",True)
	'Parent part
	f.Data.DataTable.AddColumn("TotalOrPartial","Serie","Float",0)
	f.Data.DataTable.AddColumn("TotalorPartial","ParentPart","String","")
	f.Data.DataTable.AddColumn("TotalorPartial","MaterialParentQty","Float",0)
	f.Data.DataTable.AddColumn("TotalOrPartial","TotalCountPerSerie","Long",0)
	f.Data.DataTable.AddColumn("TotalOrPartial","CutlistItemPerSerie","String","")
	'Component
	f.Data.DataTable.AddColumn("TotalorPartial","Component","String","")
	f.Data.DataTable.AddColumn("TotalorPartial","TotalCutlistQtyMoved","Float",0)	
	f.Data.DataTable.AddColumn("TotalOrPartial","TotalCountCutlistMove","Long",0)
	f.Data.DataTable.AddColumn("TotalOrPartial","CutlistItemMove","String","")
	'Difference
	f.Data.DataTable.AddExpressionColumn("TotalOrPartial","DifferenceQty","Float","[MaterialParentQty] - [TotalCutlistQtyMoved]")
	
	
	'Set the quantity for the Material sequences that are in the CutlistSeries collection	
	f.Intrinsic.Control.If(v.DataView.Child$Cutlist!vGetSerie.RowCount,>,0)
		f.Data.DataView.ToDataTableDistinct("CHILD","vGetSerie","CutlistSerieCollection","Serie",True)
		f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.CutlistSerieCollection.RowCount--,1)
			f.Intrinsic.String.Build("Serie = {0} and Select_Cutlist = 1",v.DataTable.CutListSerieCollection(v.Local.iCnt).Serie!FieldValString,v.Local.sFilter)
			'Cutlist Item selected
			f.Data.DataView.Create("Child$Cutlist","vCutListSelected",22,v.Local.sFilter,"")
			f.Data.DataView.ToString("Child$Cutlist","vCutListSelected","Cutlist_Item",",","','",v.Local.sCutlistItemMove)
			f.Data.DataView.Close("Child$Cutlist","vCutListSelected")			
			f.Data.DataTable.Compute("CHILD$CUTLIST","SUM([Est_UM_Units])",v.Local.sFilter,v.Local.sSumCutlist)
			f.Data.DataTable.Compute("CHILD$CUTLIST","Count([CUTLIST_ITEM])",v.Local.sFilter,v.Local.sTotalCountCutlistMove)
			
			'Cutlist Item in Total per Serie
			f.Intrinsic.String.Build("Serie = {0}",v.DataTable.CutListSerieCollection(v.Local.iCnt).Serie!FieldValString,v.Local.sFilter)
			f.Data.DataView.Create("Child$Cutlist","vCutListSelected",22,v.Local.sFilter,"")
			f.Data.DataView.ToString("Child$Cutlist","vCutListSelected","Cutlist_Item",",","','",v.Local.sCutlistItemPerSerie)
			f.Data.DataView.Close("Child$Cutlist","vCutListSelected")				
			f.Data.DataTable.Compute("CHILD$CUTLIST","Count([CUTLIST_ITEM])",v.Local.sFilter,v.Local.sTotalCountPerSerie)
			
			f.Intrinsic.Control.If(v.Local.sSumCutlist,<>,"")
				f.Intrinsic.String.Build("Serie = {0}",v.DataTable.CutListSerieCollection(v.Local.iCnt).Serie!FieldValString,v.Local.sFilter)
				f.Data.DataTable.Select("ChildCut",v.Local.sFilter,v.Local.sRowToSet)
				f.Intrinsic.Control.If(v.Local.sRowToSet,<>,"***NORETURN***")
					v.Local.sMaterialParentQty.Set(v.DataTable.ChildCut(v.Local.sRowToSet).Qty!FieldValString)
					v.Local.sParentPart.Set(v.DataTable.ChildCut(v.Local.sRowToSet).BParent!FieldValString)
					v.Local.sComponent.Set(v.DataTable.ChildCut(v.Local.sRowToSet).Part!FieldValString)
					v.Local.iSerie.Set(v.DataTable.ChildCut(v.Local.sRowToSet).Serie!FieldValString)					
					'Convert used Consumption Convertion
					f.Intrinsic.Control.CallSub(Get_Consump_Convert,"sPart",v.DataTable.ChildCut(v.Local.sRowToSet).Part!FieldValString)
					f.Intrinsic.Math.Div(v.Local.sSumCutlist,v.Args.fConvert,v.Local.sSumCutlistConverted)
					F.Data.DataTable.SetValue("ChildCut",v.Local.sRowToSet,"Qty",v.Local.sSumCutlistConverted)	
					f.Data.DataTable.AddRow("TotalOrPartial","Serie",v.Local.iSerie,"ParentPart",v.Local.sParentPart,"MaterialParentQty",v.Local.sMaterialParentQty,"TotalCountPerSerie",v.Local.sTotalCountPerSerie,"CutlistItemPerSerie",v.Local.sCutlistItemPerSerie,"Component",v.Local.sComponent,"TotalCutlistQtyMoved",v.Local.sSumCutlistConverted,"TotalCountCutlistMove",v.Local.sTotalCountCutlistMove,"CutlistItemMove",v.Local.sCutlistItemMove)
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.Next(v.Local.iCnt)		
		f.Data.DataTable.Close("CutlistSerieCollection")		
	f.Intrinsic.Control.EndIf
	
	gui.Form..Enabled(False)

	f.Intrinsic.Control.CallSub(Prompt_Enter_Subcomponent_Header)	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.picCreateSubComponent_WithCutlist_Option.End

Program.Sub.optNonInvInsertAbove_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	gui.Form.optInsertAbove.Value(1)
	gui.Form.txtManualSeq.Enabled(False)
	gui.Form.txtManualSeq.BackColor(v.Color.LtGray)
	
	gui.NonInv.optNonInvInsertAbove.Value(1)
	gui.NonInv.txtNonInvManualSeq.Enabled(False)
	gui.NonInv.txtNonInvManualSeq.BackColor(v.Color.LtGray)	

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.optNonInvInsertAbove_Click.End

Program.Sub.optNonInvInsertBelow_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	gui.Form.optInsertBelow.Value(1)	
	gui.Form.txtManualSeq.Enabled(False)
	gui.Form.txtManualSeq.BackColor(v.Color.LtGray)
	
	gui.NonInv.optNonInvInsertBelow.Value(1)
	gui.NonInv.txtNonInvManualSeq.Enabled(False)
	gui.NonInv.txtNonInvManualSeq.BackColor(v.Color.LtGray)

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.optNonInvInsertBelow_Click.End

Program.Sub.optNonInvInsertManual_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	gui.Form.optInsertManual.Value(1)
	gui.Form.txtManualSeq.Enabled(True)
	gui.Form.txtManualSeq.BackColor(v.Color.White)
	gui.Form.txtManualSeq.SetFocus
	
	gui.NonInv.optNonInvInsertManual.Value(1)
	gui.NonInv.txtNonInvManualSeq.Enabled(True)
	gui.NonInv.txtNonInvManualSeq.BackColor(v.Color.White)
	gui.NonInv.txtNonInvManualSeq.SetFocus

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.optNonInvInsertManual_Click.End

Program.Sub.txtNonInvManualSeq_LostFocus.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSeq.Declare
	
	f.Intrinsic.Control.If(v.Screen.NonInv!txtNonInvManualSeq.Text.Trim,<>,"")
		f.Intrinsic.String.LPad(v.Screen.NonInv!txtNonInvManualSeq.Text.Trim,"0",6,v.Local.sSeq)
		gui.NonInv.txtNonInvManualSeq.Text(v.Local.sSeq)
		gui.Form.txtManualSeq.Text(v.Local.sSeq)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.UnBlockEvents
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtNonInvManualSeq_LostFocus.End

Program.Sub.Add_OnTop.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sFilter.Declare
	v.Local.sRet.Declare
	
	f.Intrinsic.String.Build("Fm = '{0}'",v.Args.FM.UCase,v.Local.sFilter)
	f.Data.DataTable.Select("OnTop",v.Local.sFilter,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,=,"***NORETURN***")
		f.Data.DataTable.AddRow("OnTop","FM",v.Args.FM.UCase)
		f.Data.DataTable.AcceptChanges("OnTop")
	f.Intrinsic.Control.EndIf	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Add_OnTop.End

Program.Sub.Delete_OnTop.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sFilter.Declare
	v.Local.sRet.Declare
	v.Local.iCnt.Declare
	
	f.Intrinsic.String.Build("Fm = '{0}'",v.Args.FM.UCase,v.Local.sFilter)
	f.Data.DataTable.Select("OnTop",v.Local.sFilter,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		f.Intrinsic.Control.For(v.Local.iCnt,v.Local.sRet.UBound,0,-1)
			f.Data.DataTable.DeleteRow("OnTop",v.Local.sRet(v.Local.iCnt))
		f.Intrinsic.Control.Next(v.Local.iCnt)
		f.Data.DataTable.AcceptChanges("OnTop")
	f.Intrinsic.Control.EndIf	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Delete_OnTop.End

Program.Sub.Deal_OnTop.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iCnt.Declare
	v.Local.sFM.Declare

	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.OnTop.RowCount--,1)
		v.Local.sFM.Set(v.DataTable.OnTop(v.Local.iCnt).FM!FieldValString)
		gui.[v.Local.sFM]..AlwaysOnTop(v.Args.Flag)
	f.Intrinsic.Control.Next(v.Local.iCnt)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.Deal_OnTop.End

Program.Sub.Update_Header_To_Child_Bom.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	
	f.Intrinsic.Control.If(v.DataTable.Child.RowCount,>,0)
		f.Data.DataTable.SetValue("Child",0,"Description_2",v.Screen.Form!txtDescr2.Text.Trim,"Description_3",v.Screen.Form!txtDescr3.Text,"PL",v.Screen.Form!txtPL.Text,"UM",v.Screen.Form!txtUM.Text.Trim)
		f.Data.DataTable.SetValue("Child",-1,"DESCR_BP",v.Screen.Form!txtFocusDescr.Text)
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Update_Header_To_Child_Bom.End

Program.Sub.GetRouter_For_MoveSeq.Start
'This sub is called from GetRouter_If_HasBom_GetBom
'Parent Part 20 chars is passed as arguments
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	v.Local.iCount.Declare
	v.Local.fExt.Declare
	v.Local.sPart.Declare
	
	V.Local.fCost.Declare
	v.Local.fPurch_Factor.Declare
	v.Local.fPurch.Declare	
	v.Local.iIndex.Declare	
	
	v.Local.sPart.Set(v.Args.PART.Trim)	
	'Create ChildCut Table
	f.Intrinsic.Control.If(v.DataTable.ChildCut.Exists)
		F.Data.DataTable.Close("ChildCut")
	f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.CallSub(Create_Child_Table,"sTable","ChildCut")

	f.Data.DataTable.AddRow("CHILDCUT","BPARENT",v.Local.sPart,"BOM_SEQ","0000","RTR_SEQ","000000","PART",v.Local.sPart,"LMO","M","TIER",0,"CTIER",0)
	
	f.Intrinsic.Control.If(v.DataTable.TEMP_CHILD.Exists,=,True)
		f.Data.DataTable.Close("TEMP_CHILD")
	f.Intrinsic.Control.EndIf
	
	'calling sub passing args.part
	f.Intrinsic.String.Build("SELECT RL.ROUTER AS BPARENT, RL.LINE_ROUTER AS RTR_SEQ, IF(RL.FLAG_MAIN_COMMENT = 'T','T',RL.LMO) AS LMO, IF(RL.LMO = 'M', 'N', RL.LMO) AS CAT_CODE, RL.PART_WC_OUTSIDE AS PART, RL.DESC_RT_LINE AS DESCRIPTION, RL.OPERATION AS OP_CODE, RL.SET_UP, RL.FREQUENCY, RL.SIGNOFF_GRPUSR, RL.SIGNOFF_TYPE, RL.RUN_TIME AS QTY, RL.RATE AS COST, C.TEXT AS COMMENTS, RL.UM_INVENTORY AS UM, '' AS SOURCE_CODE, rl.sort_code,Lead_Time as Lead,Amt_Minimum,WC_Factor FROM ROUTER_LINE RL LEFT JOIN V_RTR_SEQ_COMMENTS C ON RL.ROUTER = C.RTR_NUMBER AND RL.LINE_ROUTER = C.RTR_SEQ WHERE RL.ROUTER = '{0}' and IsNull(Router_Type,'') = 'L' ",v.Local.sPart.PSQLFriendly,V.Local.sSql)	
	f.Data.DataTable.CreateFromSQL("TEMP_CHILD","conx",V.Local.sSql,True)
	'Removed joining with I2 with location = sdefaultloc, instead use dictionary to find Source_Code
	f.Data.DataTable.AddExpressionColumn("TEMP_CHILD","PartTrim2","String","Trim([Part])")
	f.Data.DataTable.FillFromDictionary("TEMP_CHILD","Part_SourceCode","PartTrim2","SOURCE_CODE")
	
	'New version will auto calculate extended
	
	f.Data.DataTable.AddColumn("TEMP_CHILD","BOM_SEQ","STRING","0000")
	F.Data.DataTable.AddColumn("TEMP_CHILD","DESCR_BP","STRING"," ")
	f.Data.DataTable.SetValue("TEMP_CHILD",-1,"DESCR_BP",v.Screen.Form!txtFocusDescr.Text)
	f.Data.DataTable.Merge("TEMP_CHILD","CHILDCUT",FALSE,2)
	
	'extend the cost for material sequences only
	f.Data.DataTable.SetValueFormat("ChildCut",-1,"PurchCost2","Purch_Cost","0.00000000")	
	
	f.Data.DataTable.Close("TEMP_CHILD")
		
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GetRouter_For_MoveSeq.End

Program.Sub.Add_Fake_Router_Line.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iSerie.Declare
	v.Local.bHeaderOnly.Declare

	'In case only Router header, add a fake sequence for callwraper to save router
	F.Data.DataView.Create(v.Args.sTable,"vCheckOnlyHeader",22,"RTR_SEQ > '000000' and RTR_SEQ < '990000'","")
	F.Intrinsic.Control.If(V.DataView.[v.Args.sTable]!vCheckOnlyHeader.RowCount,=,0)
		v.Local.bHeaderOnly.Set(True)	
		f.Data.DataTable.Compute(v.Args.sTable,"Max(Serie)","",v.Local.iSerie)
		f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)			
		
		'add the fake non inventory line		
		F.Data.DataTable.AddRow(v.Args.sTable,"BPARENT",v.Args.sPart,"DESCR_BP","","RTR_SEQ","000100","SeqSort",0,"PART","~~~@!@~~~@!@","DESCRIPTION","~~~@!@~~~@!@","LMO","M","CATEGORY","NORMAL","CAT_CODE","N","SOURCE","PUR-JOB","SOURCE_CODE","J","UM","EA","COST",0,"PURCHASE_FACTOR",0,"PURCH_COST",0,"Issue_UM","EA","Consump_Conv",0,"Consump_Cost",0,"Weight",0,"DISPLAY_PART","","Serie",v.Local.iSerie,"Shape","")	
	F.Intrinsic.Control.EndIf
	f.Data.DataView.Close(v.Args.sTable,"vCheckOnlyHeader")
	
	f.Intrinsic.Variable.AddRV("bHeaderOnly",v.Local.bHeaderOnly)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.Add_Fake_Router_Line.End

Program.Sub.DELETE_FAKE_LINE.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSQL.Declare
	v.Local.sPart.Declare

	v.Local.sPart.Set(v.Args.sPart)

	'Delete the fake sequence
	F.Data.DataView.Create(v.Args.sTable,"vCheckOnlyHeader",22,"RTR_SEQ = '000100' and Part = '~~~@!@~~~@!@' and Description = '~~~@!@~~~@!@'","")
	f.Intrinsic.Control.If(v.DataView.[v.Args.sTable]!vCheckOnlyHeader.RowCount,>,0)
		f.Data.DataView.DeleteRow(v.Args.sTable,"vCheckOnlyHeader",0)
		f.Data.DataTable.AcceptChanges(v.Args.sTable)
		f.Intrinsic.String.Build("Delete from Router_Line where Router = '{0}' and Router_Type = 'L' and Part_WC_Outside = '~~~@!@~~~@!@'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
		f.ODBC.Connection!conx.Execute(v.Local.sSql)
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Close(v.Args.sTable,"vCheckOnlyHeader")

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.DELETE_FAKE_LINE.End

Program.Sub.CLEARALLSELECT.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
		
	f.Data.DataTable.SetValue("Child",-1,"SELECTSEQ",False)
	f.Intrinsic.Control.If(v.Global.bBindCutList)
		f.Data.DataTable.SetValue("Child$Cutlist",-1,"select_cutlist",False)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.CLEARALLSELECT.End

Program.Sub.MfgPart_UnLoad.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
		
	gui.MFGPart..Visible(False)
	gui.Form..Enabled(True)
	gui.Form..AlwaysOnTop(True)
	gui.Form..AlwaysOnTop(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.MfgPart_UnLoad.End

Program.Sub.txtMfgPart_LostFocus.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sHold.Declare
	
	v.Local.sHold.Set(v.Screen.MFGPart!txtMfgPart.Text.Trim)
	gui.MFGPart.txtMfgPart.Text(v.Local.sHold.UCase)
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtMfgPart_LostFocus.End

Program.Sub.txtMfgRev_LostFocus.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sHold.Declare
	
	v.Local.sHold.Set(v.Screen.MFGPart!txtMfgRev.Text.Trim)
	gui.MFGPart.txtMfgRev.Text(v.Local.sHold.UCase)
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtMfgRev_LostFocus.End

Program.Sub.txtMfgUM_LostFocus.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sUM.Declare
	v.Local.sRet.Declare
	v.Local.sSQL.Declare	
	
	v.Local.sUM.Set(v.Screen.MFGPart!txtMfgUM.TEXT.Trim)
	v.Local.sUM.Set(v.Local.sUM.UCase)
	gui.MFGPart.txtMfgUM.Text(v.local.sUM.left2)
	
	'Validate UM
	f.Intrinsic.String.Build("select Top 1 CODE from V_UM_CODES where rtrim(CODE) = '{0}'",v.Local.sUM.PSQLFriendly,V.Local.sSql)
	f.ODBC.Connection!conx.executeandreturn(V.Local.sSql,V.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"",or,v.Local.sRet.UCase,<>,v.Local.sUM)
		f.Intrinsic.UI.Browser("UNIT OF MEASURE","conx","SELECT CODE, DESCR from V_UM_CODES","CODE*!*DESCRIPTION","60*!*300",V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			gui.MFGPart.txtMfgUM.text(V.Local.sRet(0).Trim)
		f.Intrinsic.Control.Else
			gui.MFGPart.txtMfgUM.text("")
			gui.MFGPart.txtMfgUM.SetFocus
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.UnBlockEvents
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.txtMfgUM_LostFocus.End

Program.Sub.txtMfgPL_LostFocus.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSql.Declare
	v.Local.sRet.Declare
	V.Local.sPL.Declare	
		
	v.Local.sPL.Set(v.Screen.MFGPart!txtMfgPL.Text.Trim)
	v.Local.sPL.Set(v.Local.sPL.UCase)
	gui.MFGPart.txtMfgPL.Text(v.Local.sPL)	
	
	'build a statement to validate the product line
	f.Intrinsic.Control.If(v.Caller.GSSVersion,<,"2019.1")
		F.Intrinsic.String.Build("SELECT Top 1 PRODUCT_LINE FROM V_PRODUCT_LINE WHERE rtrim(PRODUCT_LINE) = '{0}'",v.Local.sPL.PSQLFriendly,V.Local.sSql)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("SELECT Top 1 PROD_LINE FROM V_PL_MASTER WHERE rtrim(PROD_LINE) = '{0}'",v.Local.sPL.PSQLFriendly,V.Local.sSql)
	f.Intrinsic.Control.EndIf	
	
	f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.sRet)
	v.Local.sRet.Set(v.Local.sRet.Trim)
	f.Intrinsic.Control.If(v.Local.sRet,=,"",or,v.Local.sRet.UCase,<>,v.Local.sPL)
		f.Intrinsic.UI.CommonBrowser(130,"",v.Local.sRet)
		f.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			gui.MFGPart.txtMfgPL.Text(v.Local.sRet(0).Trim)
		F.Intrinsic.Control.Else
			gui.MFGPart.txtMfgPL.Text("")
			gui.MFGPart.txtMfgPL.SetFocus
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtMfgPL_LostFocus.End

Program.Sub.cmdMfgPartOk_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sPart.Declare
	v.Local.sLoc.Declare
	v.Local.sDescription.Declare
	v.Local.sUM.Declare
	v.Local.sPL.Declare
	v.Local.sSource.Declare
	v.Local.sSource_Code.Declare
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.sBomSeq.Declare
	v.Local.sDate.Declare
	v.Local.sTime.Declare
	v.Local.sFilter.Declare
	v.Local.sMap.Declare
	v.Local.fCost.Declare
	v.Local.fQty.Declare
	v.Local.iRet.Declare
	
	v.Local.Cost.Declare(String,"0")
	v.Local.fCost.Set(v.Screen.MFGPart!txtMfgUnitCost.Text.Trim)
	v.Local.Cost.Set(v.Local.fCost)
	v.Local.Quantity.Declare(String,"1")
	v.Local.fQty.Set(v.Screen.MFGPart!txtMfgQty.Text.Trim)
	v.Local.Quantity.Set(v.Local.fQty)
	v.Local.Date_Start.Declare(String,"000000")
	v.Local.Date_Stop.Declare(String,"000000")
	v.Local.BM_SERIAL_START.Declare(String,"")
	v.Local.BM_SERIAL_STOP.Declare(String,"")
	v.local.UM_INVENTORY.Declare(String,"")
	v.local.PURGE_FLAG.Declare(String,"")
	v.local.ORDR_USR_FLAG.Declare(String,"")
	v.local.QUANTITY_6.Declare(String,"1")
	v.local.DRAWING.Declare(String,"")
	v.local.TAG.Declare(String,"")
	v.local.CATEGORY.Declare(String,"N")
	v.local.SOURCE.Declare(String,"")	
	v.local.FREQUENCY.Declare(String,"0")
	v.local.DATE_LAST_CHG.Declare(String,"")	
	v.local.TIME_LAST_CHG.Declare(String,"")	
	v.local.LAST_CHG_BY.Declare(String,"")	
	v.local.LAST_CHG_PROG.Declare(String,"ETINSERT")	
	v.local.DRAWING_SIZE.Declare(String,"")
	v.local.REQ_TRACE.Declare(String,"")
	v.local.COST_DATE.Declare(String,"")
	v.local.BOM_COMPLETE.Declare(String,"")
	v.local.INACTIVE.Declare(String,"0")
	v.local.CHG_REV.Declare(String,"")
	v.local.SETUP_QTY.Declare(String,"0")
	v.Local.sSort.Declare
	v.Local.sExtra.Declare
	v.Local.sDesc2.Declare
	v.Local.sDesc3.Declare
	v.Local.bIsBom.Declare
	v.Local.bIsRouter.Declare
	v.Local.sParent.Declare
	v.Local.sMsg.Declare
	
	f.Intrinsic.String.Split(v.Screen.MFGPart!cboCodeSort.Text.Trim,"|",v.Local.sSort)
	v.Local.sSort.Set(v.Local.sSort(0).Trim)
	
	f.Intrinsic.String.GSSPartString(v.Screen.MFGPart!txtMfgPart.Text.Trim,v.Screen.MFGPart!txtMfgRev.Text.Trim,v.Local.sPart)
	'Check if the same as Parent
	f.Intrinsic.String.GSSPartString(V.Screen.Form!txtFocusParent.text,v.Screen.Form!txtFocusRev.text,v.Local.sParent)
	f.Intrinsic.Control.If(v.Local.sParent.Trim,=,v.Local.sPart.Trim)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("The Part is the same as the Parent!","Invalid")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.MFGPart.txtMfgPart.SetFocus
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'Check if the Bom has a child is also a parent which causes infinite loop
	f.Intrinsic.String.Build(" = '{0}'",v.Global.sParentInsertNewMfgPart.PSQLFriendly,v.Local.sFilter)
	f.Intrinsic.Control.CallSub(Check_Child_Is_Parent,"sFilter",v.Local.sFilter)
	f.Intrinsic.Control.If(v.Args.iChildIsParent,>,1)
		f.Intrinsic.String.Build("Bom '{0}' has child the same as parent. Please contact GSS to fix at database level.",v.Local.sParentInsertNewMfgPart,v.Local.sMsg)
		f.Intrinsic.UI.Msgbox(v.Local.sMsg,"Fatal Issue")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	v.Local.sLoc.Set(v.Screen.MFGPart!ddlMfgLoc.Text)
	v.Local.sDescription.Set(v.Screen.MFGPart!txtMfgDescr.Text.Trim)
	v.Local.sUM.Set(v.Screen.MFGPart!txtMfgUM.Text.Trim)
	v.Local.sPL.Set(v.Screen.MFGPart!txtMfgPL.text.Trim)
	v.Local.sSource.Set(v.Screen.MFGPart!ddlMfgSource.Text.Trim)
	f.Data.Dictionary.ReturnKeyFromValue("SOURCE",v.Local.sSource,False,V.Local.sSource_Code)
	
	'Validate
	F.Intrinsic.Control.If(v.Screen.MFGPart!txtMfgPart.Text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Part number is blank.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.If(V.Local.sUM,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please enter Unit of Measure.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Local.sPL,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please enter Product Line.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.If(v.Local.fQty,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please enter Quantity.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf		
	
	gui.MFGPart..Enabled(False)
	gui.Form.lblResult.Visible(True)
	
	'Insert MFG Part
	f.Intrinsic.Control.If(v.Screen.MFGPart!txtType.Text,=,"Insert")	
	
		f.ODBC.Connection!conx.Execute(v.Global.sDeleteExplodeStageSQL)
		f.Intrinsic.String.Build("Insert Into GCG_4986_Stge (UserID,TRMNL,OldParent,Part,Tier,CTier,CH_Index) values ('{0}','{1}','{2}','{2}','',0,'')",v.Caller.User,v.Caller.Terminal,v.Global.sParentInsertNewMfgPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)	
		f.Intrinsic.String.Build(" = '{0}'",v.Global.sParentInsertNewMfgPart.PSQLFriendly,v.Local.sFilter)
		f.Intrinsic.Control.CallSub(Get_Bom_Mstr,"sTargetTable","Bom_Temp","sFilter",v.Local.sFilter)
		f.Intrinsic.Control.If(v.DataTable.Bom_Temp.RowCount,=,0)
			F.Data.DataTable.AddRow("Bom_Temp","BPARENT",v.Global.sParentInsertNewMfgPart,"DESCR_BP",v.Global.sParentInsertNewMfgDescr,"RTR_SEQ","000000","BOM_SEQ","0000", "PART",v.Global.sParentInsertNewMfgPart,"DESCRIPTION",v.Global.sParentInsertNewMfgDescr,"PL",v.Global.sParentInsertNewMfgPL,"UM",v.Global.sParentInsertNewMfgUM,"TIER","0","CTIER","0","SOURCE_CODE",v.Global.sParentInsertNewMfgSourceCode,"CAT_CODE",v.Local.CATEGORY,"Qty",1,"Set_up",0,"Cost",0,"Frequency",0,"Date_Start","000000","Date_Stop","000000","Cost_Date","00000000","Insert_Bom","00","Setup_Qty",0,"Inactive",False)	
		f.Intrinsic.Control.EndIf
		
		'Get Bom Seq
		f.Data.DataTable.Compute("Bom_Temp","Max(Bom_Seq)","",v.Local.sBomSeq)
		f.Intrinsic.Math.Add(v.Local.sBomSeq,v.Global.iBSeq,v.Local.sBomSeq)
		f.Intrinsic.String.LPad(v.Local.sBomSeq,"0",4,v.Local.sBomSeq)
		
		F.Data.DataTable.AddRow("Bom_Temp","BPARENT",v.Global.sParentInsertNewMfgPart,"DESCR_BP",v.Global.sParentInsertNewMfgDescr,"RTR_SEQ","000000","BOM_SEQ",v.Local.sBomSeq, "PART",V.Local.sPart,"DESCRIPTION",v.Local.sDescription,"PL",v.Local.sPL,"UM",v.Local.sUM.left2,"TIER","0","CTIER","0","SOURCE_CODE",V.Local.sSource_Code,"CAT_CODE",v.Local.CATEGORY,"Qty",v.Local.Quantity,"Set_up",0,"Cost",v.Local.Cost,"Frequency",0,"Date_Start","000000","Date_Stop","000000","Cost_Date","00000000","Insert_Bom","00","Setup_Qty",0,"Inactive",False)
		
		''''''''''''''
		v.Local.sDate.Set(v.Ambient.Date.FormatYYYYMMDD)
		f.Intrinsic.String.Build("{0}00",v.Ambient.Now.FormatHHNNSS,v.Local.sTime)	
	
		'Set timestamp
		f.Data.DataTable.SetValue("Bom_Temp",-1,"Date_Maintenance",v.Local.sDate.right6,"Date_Last_Chg",v.Local.sDate,"Time_Last_Chg",v.Local.sTime,"Last_Chg_By",v.Caller.User,"Last_Chg_Prog","ESTIMATE")
		'Create Bomclicked
		f.Intrinsic.Control.If(v.DataTable.BomClicked.Exists)
			F.Data.DataTable.Close("BomClicked")
		f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.CallSub(Create_Bom_Table,"sTable","BomClicked")
		f.Data.DataTable.Merge("Bom_Temp","BomClicked",False,2)
		
		f.Intrinsic.String.Build("Delete from Bom_MSTR Where Parent = '{0}'",v.Global.sParentInsertNewMfgPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)
		
		v.Local.sMap.Set("BPARENT@!@PARENT*!*Bom_seq@!@SEQUENCE_BOM*!*INSERT_BOM@!@INSERT_BOM*!*DATE_MAINTENANCE@!@DATE_MAINTENANCE*!*COST@!@COST*!*QTY@!@QUANTITY*!*DATE_START@!@DATE_START*!*DATE_STOP@!@DATE_STOP*!*BM_SERIAL_START@!@BM_SERIAL_START*!*BM_SERIAL_STOP@!@BM_SERIAL_STOP*!*PURGE_FLAG@!@PURGE_FLAG*!*ORDR_USR_FLAG@!@ORDR_USR_FLAG*!*QUANTITY_6@!@QUANTITY_6*!*DRAWING@!@DRAWING*!*TAG@!@TAG*!*UM@!@UM_INVENTORY*!*PART@!@PART*!*CAT_CODE@!@CATEGORY*!*SOURCE_CODE@!@SOURCE*!*FREQUENCY@!@FREQUENCY*!*DATE_LAST_CHG@!@DATE_LAST_CHG*!*TIME_LAST_CHG@!@TIME_LAST_CHG*!*LAST_CHG_BY@!@LAST_CHG_BY*!*LAST_CHG_PROG@!@LAST_CHG_PROG*!*DRAWING_SIZE@!@DRAWING_SIZE*!*REQ_TRACE@!@REQ_TRACE*!*COST_DATE@!@COST_DATE*!*COMPLETE@!@BOM_COMPLETE*!*INACTIVE@!@INACTIVE*!*SETUP_QTY@!@SETUP_QTY")
	
		f.Data.DataTable.SaveToDB("BomClicked","conx","Bom_MSTR","",128,v.Local.sMap)
		f.Data.DataTable.Close("BomClicked")
		f.Data.DataTable.Close("Bom_Temp")
		
		'Save to Bom_Eng for parent part
		f.Intrinsic.String.Build("Select * from Bom_Eng where Part = '{0}' and Location = ''",v.Global.sParentInsertNewMfgPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.String.Build("Update Bom_Eng set Description = '{1}', Is_Parent = 'Y' where Part = '{0}' and Location = ''",v.Global.sParentInsertNewMfgPart.PSQLFriendly,v.Global.sParentInsertNewMfgDescr.PSQLFriendly,v.Local.sSQL)
		f.Intrinsic.Control.Else
			f.Intrinsic.String.Build("Insert into Bom_Eng (Part,Location,Description,Is_Parent,Date_Revision) values ('{0}','','{1}','Y','000000')",v.Global.sParentInsertNewMfgPart.PSQLFriendly,v.Global.sParentInsertNewMfgDescr.PSQLFriendly,v.Local.sSQL)	
		f.Intrinsic.Control.EndIf
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)	
		
		'For the Part inserted
		f.Intrinsic.String.Build("Select * from Bom_Eng where Part = '{0}' and Location = ''",v.local.sPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.String.Build("Update Bom_Eng set Description = '{1}', Is_Parent = 'Y' where Part = '{0}' and Location = ''",v.Local.sPart.PSQLFriendly,v.Local.sDescription.PSQLFriendly,v.Local.sSQL)
		f.Intrinsic.Control.Else
			f.Intrinsic.String.Build("Insert into Bom_Eng (Part,Location,Description,Is_Parent,Date_Revision) values ('{0}','','{1}','Y','000000')",v.Local.sPart.PSQLFriendly,v.Local.sDescription.PSQLFriendly,v.Local.sSQL)	
		f.Intrinsic.Control.EndIf
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)	
	
		v.Local.UM_INVENTORY.Set(v.Local.sUM.left2)
		v.Local.SOURCE.Set(v.Local.sSource_Code)
		v.Local.DATE_LAST_CHG.Set(v.Local.sDate)
		v.Local.TIME_LAST_CHG.Set(v.Local.sTime)
		v.Local.LAST_CHG_BY.Set(v.Caller.User)
		
		'Check if Bom_MSTR has records
		f.Intrinsic.String.Build("Select * from Bom_Mstr where Parent = '{0}' and Sequence_Bom = '0000' and Insert_Bom = '00'",v.Local.sPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.String.Build("Update Bom_MSTR set Date_Maintenance = '{1}', UM_Inventory = '{2}',Category = 'N',Source = '{3}', Date_Last_Chg = '{4}', Time_Last_Chg = '{5}', Last_chg_By = '{6}', Last_Chg_Prog = 'ETINSERT'  where Parent = '{0}' and Sequence_Bom = '0000' and Insert_Bom = '00'",v.Local.sPart.PSQLFriendly,V.Local.sDate.Right6,V.Local.sUM.Left2,V.Local.sSource_Code,V.Local.sDate,V.Local.sTime,V.Caller.User,v.Local.sSQL)
		f.Intrinsic.Control.Else
			f.Intrinsic.String.Build("Insert into Bom_MSTR (PARENT,SEQUENCE_BOM,INSERT_BOM,DATE_MAINTENANCE,COST,QUANTITY,PART,DATE_START,DATE_STOP,BM_SERIAL_START,BM_SERIAL_STOP,UM_INVENTORY,PURGE_FLAG,ORDR_USR_FLAG,QUANTITY_6,DRAWING,TAG,CATEGORY,SOURCE,FREQUENCY,DATE_LAST_CHG,TIME_LAST_CHG,LAST_CHG_BY,LAST_CHG_PROG,DRAWING_SIZE,REQ_TRACE,COST_DATE,BOM_COMPLETE,INACTIVE,CHG_REV,SETUP_QTY) values ('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}','{22}','{23}','{24}','{25}','{26}','{27}',{28},'{29}','{30}')",v.Local.sPart.PSQLFriendly,"0000","00",v.Local.sDate.Right6,v.Local.Cost,v.Local.Quantity,v.Local.sPart.PSQLFriendly,v.Local.Date_Start,v.Local.Date_Stop,v.local.BM_SERIAL_START,v.local.BM_SERIAL_STOP,v.local.UM_INVENTORY,v.local.PURGE_FLAG,v.local.ORDR_USR_FLAG,v.local.QUANTITY_6,v.local.DRAWING,v.local.TAG,v.local.CATEGORY,v.local.SOURCE,v.local.FREQUENCY,v.local.DATE_LAST_CHG,v.local.TIME_LAST_CHG,v.local.LAST_CHG_BY,v.local.LAST_CHG_PROG,v.local.DRAWING_SIZE,v.local.REQ_TRACE,v.local.COST_DATE,v.local.BOM_COMPLETE,v.local.INACTIVE,v.local.CHG_REV,v.local.SETUP_QTY,v.Local.sSQL)	
		f.Intrinsic.Control.EndIf
		f.ODBC.Connection!conx.Execute(v.Local.sSQL)
		
		gui.Form..AlwaysOnTop(True)
		gui.Form..AlwaysOnTop(False)
		'Check if this part has a Router
		f.Intrinsic.String.Build("select distinct router from v_router_header where router = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
			'Create Router Header for this part
			f.Data.DataTable.Clone("Child","ChildInsert",True)
			gui.Form..AlwaysOnTop(True)
			gui.Form..AlwaysOnTop(False)
			F.Data.DataTable.AddRow("CHILDINSERT","BPARENT",V.Local.sPart,"DESCR_BP",V.Local.sDescription,"RTR_SEQ","000000","BOM_SEQ","0000", "PART",V.Local.sPart,"DESCRIPTION",V.Local.sDescription, "DESCRIPTION_2",v.Screen.MFGPart!txtMfgDescr2.Text,"DESCRIPTION_3",v.Screen.MFGPart!txtMfgDescr3.Text,"COMMENTS","", "PL",V.Local.sPL,"UM",V.Local.sUM.Left2, "LMO","M","TIER","0","CTIER","0","SOURCE_CODE",V.Local.sSource_Code,"CAT_CODE",V.Local.CATEGORY,"SOURCE",v.Local.sSource_Code,"Category","")	
		
			f.Intrinsic.Control.CallSub(BuildInsertPartRouter_CoreSide,"sPart",v.Local.spart,"sUM",v.Local.sUM.Left2,"sPL",v.Local.sPL,"sLoc",v.Screen.MFGPart!ddlMfgLoc.Text.Trim)
			gui.Form..AlwaysOnTop(True)
			gui.Form..AlwaysOnTop(False)
			f.Data.DataTable.Close("ChildInsert")
		f.Intrinsic.Control.EndIf
		
		gui.Form..AlwaysOnTop(True)
		gui.Form..AlwaysOnTop(False)
		
		gui.Form.chkActivateNodeMenu.Value(0)
		f.Intrinsic.Control.CallSub(txtParentRev_LostFocus)		
		f.Intrinsic.Control.CallSub(MfgPart_UnLoad)
		gui.Form.chkActivateNodeMenu.Value(1)
		
		F.Intrinsic.Control.CallSub(createInventory_Part,"PART",v.Local.sPart,"UM",v.Local.UM_INVENTORY,"DESC",v.Local.sDescription,"PL",V.Screen.MFGPart!txtMfgPL.text,"SOURCE",V.Local.sSource_Code,"ALT1",v.Screen.MFGPart!txtMfgDescr2.Text,"ALT2",v.Screen.MFGPart!txtMfgDescr3.Text,"PRICE","0","Location",v.Local.sLoc,"Code_Sort",v.Local.sSort,"ExtraText",v.Screen.MFGPart!txtMfgExtra.Text)	
	
	'Edit Router/Bom/Inventory
	f.Intrinsic.Control.ElseIf(v.Screen.MFGPart!txtType.Text,=,"Edit")	
		'Check Source if this Part is Bom or a Router
		'Check is Router
		f.Intrinsic.String.Build("Select Router from Router_Header where Router = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			v.Local.bIsRouter.Set(True)
		f.Intrinsic.Control.EndIf
		'Check is Bom
		f.Intrinsic.String.Build("Select Part from Bom_Eng where Part = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			v.Local.bIsBom.Set(True)
		f.Intrinsic.Control.EndIf	
		
		F.Intrinsic.Control.If(v.Screen.MFGPart!ddlMfgSource.Text,<>,"MFG-STOCK",AND,v.Screen.MFGPart!ddlMfgSource.Text,<>,"MFG-JOB")
			F.Intrinsic.Control.If(V.Local.bIsBom,=,True,or,v.Local.bIsRouter,=,True)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("This part is a Bom/Router so Source code must be MFG.","Attention")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)				
				gui.MFGPart..Enabled(True)
				gui.Form.lblResult.Visible(False)					
				F.Intrinsic.Control.ExitSub				
			F.Intrinsic.Control.EndIf	

		F.Intrinsic.Control.EndIf			
	
		v.Local.sDesc2.Set(v.Screen.MFGPart!txtMfgDescr2.Text)
		v.Local.sDesc3.Set(v.Screen.MFGPart!txtMfgDescr3.Text)		
		v.Local.sExtra.Set(v.Screen.MFGPart!txtMfgExtra.Text)
		'Inventory
		f.Intrinsic.Control.If(v.Screen.MFGPart!chkEditInv.Value,=,1)
			'I1: Description,UM_Inventory,Product_Line,Code_Sort
			f.Intrinsic.String.Build("Select Part from Inventory_mstr where Part = '{0}' and Location = '{1}'",v.Local.sPart.PSQLFriendly,v.Local.sLoc,v.Local.sSQL)
			f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
				F.Intrinsic.Control.CallSub(createInventory_Part,"PART",v.Local.sPart,"UM",v.Local.UM_INVENTORY,"DESC",v.Local.sDescription,"PL",V.Screen.MFGPart!txtMfgPL.text,"SOURCE",V.Local.sSource_Code,"ALT1",v.Screen.MFGPart!txtMfgDescr2.Text,"ALT2",v.Screen.MFGPart!txtMfgDescr3.Text,"PRICE","0","Location",v.Local.sLoc,"Code_Sort",v.Local.sSort,"ExtraText",v.Screen.MFGPart!txtMfgExtra.Text)			
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("Update Inventory_Mstr set Description = '{0}',UM_Inventory = '{1}',Product_Line = '{2}', Code_Sort = '{3}' where Part = '{4}' and Location = '{5}'",v.Local.sDescription.PSQLFriendly,v.Local.sUM.left2,v.Local.sPL,v.Local.sSort.PSQLFriendly,v.Local.sPart.PSQLFriendly,v.Local.sLoc,v.Local.sSQL)
				f.ODBC.Connection!conx.Execute(v.Local.sSQL)			
				'I2: Code_Source,Description_2,Description_3
				f.Intrinsic.String.Build("Update Inventory_Mst2 set Code_Source = '{2}',Description_2 = '{3}',Description_3 = '{4}' where Part = '{0}' and Location = '{1}'",v.Local.sPart.PSQLFriendly,v.Local.sLoc,v.Local.sSource_Code,v.Local.sDesc2.PSQLFriendly,v.Local.sDesc3.PSQLFriendly,v.Local.sSQL)
				f.ODBC.Connection!conx.Execute(v.Local.sSQL)		
				'Inv_Extra_Text Extra Description			
				f.Intrinsic.String.Build("Update Inv_Extra_Text set Text = '{0}' where Part = '{1}'",v.Local.sExtra.PSQLFriendly,v.Local.sPart.PSQLFriendly,v.Local.sSQL)
				f.ODBC.Connection!conx.Execute(v.Local.sSQL)		
			f.Intrinsic.Control.EndIf		
			
		f.Intrinsic.Control.EndIf
		'Router
		f.Intrinsic.Control.If(v.Screen.MFGPart!chkEditRouter.Value,=,1)
			'Description,UM,PL,location
			f.Intrinsic.String.Build("Update Router_Header set Description_router = '{1}',UM_Inventory = '{2}',Prod_Line = '{3}',Part_customer = '{4}' where Router = '{0}' and Router_Type = 'H'",v.Local.sPart.PSQLFriendly,v.Local.sDescription.PSQLFriendly,v.Local.sUM.left2,v.Local.sPL,v.Local.sLoc,v.Local.sSQL)
			f.ODBC.Connection!conx.Execute(v.Local.sSQL)
			'Alt1,Alt2
			f.Intrinsic.String.Build("Update Router_desc set Desc_Router_2 = '{1}',Desc_Router_3 = '{2}' where Router = '{0}' and Router_Type = 'I'",v.Local.sPart.PSQLFriendly,v.Local.sDesc2.PSQLFriendly,v.Local.sDesc3.PSQLFriendly,v.Local.sSQL)
			f.ODBC.Connection!conx.Execute(v.Local.sSQL)			
		f.Intrinsic.Control.EndIf
		'Bom
		f.Intrinsic.Control.If(v.Screen.MFGPart!chkEditBom.Value,=,1)
			'Description,um,source,cost,qty
			f.Intrinsic.String.Build("Update Bom_Mstr set UM_Inventory = '{2}',Source = '{3}',Cost = '{4}',Quantity = '{5}',Quantity_6 = '{5}' where Parent = '{0}' and Part = '{1}'",v.Global.sEditRouterBomInvParent.PSQLFriendly,v.Local.sPart.PSQLFriendly,v.Local.sUM.left2,v.Local.sSource_Code,v.Local.fCost,v.Local.fQty,v.Local.sSQL)
			f.ODBC.Connection!conx.Execute(v.Local.sSQL)
			'Update Bom header of this part
			F.Intrinsic.String.Build("Update Description, UM, Source, Cost for Bom header of this part: {0} ?",v.Local.sPart.Trim,v.Local.sRet)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox(v.Local.sRet,"Invalid Entry",4,v.Local.iRet)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxYes)	
				f.Intrinsic.String.Build("Update Bom_Mstr set UM_Inventory = '{1}',Source = '{2}',Cost = '{3}' where Parent = '{0}' and Sequence_Bom = '0000'",v.Local.sPart.PSQLFriendly,v.Local.sUM.left2,v.Local.sSource_Code,v.Local.fCost,v.Local.sSQL)
				f.ODBC.Connection!conx.Execute(v.Local.sSQL)
				f.Intrinsic.String.Build("Update Bom_Eng set Description = '{1}' where Part = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sDescription.PSQLFriendly,v.Local.sSQL)
				f.ODBC.Connection!conx.Execute(v.Local.sSQL)				
			f.Intrinsic.Control.EndIf
			'Update Bom Node where this part is referenced in all boms
			F.Intrinsic.String.Build("Update UM, Source, Cost for all Bom nodes where this part ({0}) is referenced in all boms?",v.Local.sPart.Trim,v.Local.sRet)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox(v.Local.sRet,"Invalid Entry",4,v.Local.iRet)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			f.Intrinsic.Control.If(v.Local.iRet,=,v.Ambient.MsgBoxYes)	
				f.Intrinsic.String.Build("Update Bom_Mstr set UM_Inventory = '{1}',Source = '{2}',Cost = '{3}' where Part = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sUM.left2,v.Local.sSource_Code,v.Local.fCost,v.Local.sSQL)
				f.ODBC.Connection!conx.Execute(v.Local.sSQL)			
			f.Intrinsic.Control.EndIf			
		f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.CallSub(MfgPart_UnLoad)
		gui.Form..AlwaysOnTop(True)
		gui.Form..AlwaysOnTop(False)
		f.Intrinsic.Control.CallSub(cmdRefreshBomTreeLoad_Click)
	
	f.Intrinsic.Control.EndIf	
	
	gui.Form.lblResult.Visible(False)
	gui.MFGPart..Enabled(True)	
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdMfgPartOk_Click.End

Program.Sub.BuildInsertPartRouter_CoreSide.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iCount.Declare
	v.Local.iLine.Declare
	v.Local.sMapLab.Declare
	v.Local.sMapMat.Declare
	v.Local.sMapOutside.Declare	
	V.Local.sMapCmt.Declare
	V.Local.sMapTask.Declare
	v.Local.sSql.Declare
	v.Local.sPart.Declare
	v.Local.iField.Declare
	v.Local.sField.Declare
	v.Local.bExists.Declare
	v.Local.sRet.Declare
	v.Local.bBom.Declare
	v.Local.iRet.Declare
	v.Local.iBaseRow.Declare(Long,0)
	v.Local.sHold.Declare
	v.Local.fLead.Declare
	v.Local.bHeaderOnly.Declare
	v.Local.sBPDescr.Declare
	v.Local.sBPDescr2.Declare
	v.Local.sBPDescr3.Declare
	v.Local.sBPPL.Declare	
	v.Local.sDesc2.Declare
	v.Local.sDesc3.Declare
	v.Local.sDescription.Declare
	
	v.Local.sPart.Set(v.Args.sPart)
	'cUST

	'Check Header Only: In case only Router header, add a fake sequence for callwraper to save router
	f.Intrinsic.Control.CallSub(Add_Fake_Router_Line,"sPart",v.Local.sPart,"sTable","ChildInsert")
	v.Local.bHeaderOnly.Set(v.Args.bHeaderOnly)		
	
	'MAP FOR LABOR RECORDS
	f.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}*!*{25}","RouterNum","RouterDesc","Seq","LineType","WC","PartStepDesc","SetupQty","RuntimeMatlQty","CustID","OperationCodeVend","RateUC","UM","ExtraDesc1","ExtraDesc2","Freq","Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","SortCode","SignOffGroupUser","SignOffType",V.Local.sMapLab)
	'MAP FOR  MATERIAL
	F.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}*!*{25}*!*{26}","RouterNum","RouterDesc","Seq","LineType","PartNum","PartStepDesc","SetupQty","RuntimeMatlQty","CustID","OperationCodeVend","RateUC","UM","ExtraDesc1","ExtraDesc2","Freq","Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","SortCode","LeadTime","MinFlag","MinOutside",V.Local.sMapMat)
	'MAP FOR OUTSIDE
	F.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}*!*{25}*!*{26}","RouterNum","RouterDesc","Seq","LineType","PartNum","PartStepDesc","SetupQty","RuntimeMatlQty","CustID","OperationCodeVend","RateUC","UM","ExtraDesc1","ExtraDesc2","Freq","Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","SortCode","LeadTime","MinFlag","MinOutside",V.Local.sMapOutside)	
	'MAP FOR COMMENT LINES
	f.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}","RouterNum","RouterDesc","Seq","LineType","WC","PartStepDesc","SetupQty","RuntimeMatlQty","CustID","OperationCodeVend","RateUC","UM","ExtraDesc1","ExtraDesc2","Freq", "Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","MainCommentFlag","SortCode",V.Local.sMapCmt)
	'MAP FOR TASK LINES
	f.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}*!*{7}*!*{8}*!*{9}*!*{10}*!*{11}*!*{12}*!*{13}*!*{14}*!*{15}*!*{16}*!*{17}*!*{18}*!*{19}*!*{20}*!*{21}*!*{22}*!*{23}*!*{24}*!*{25}*!*{26}","RouterNum","RouterDesc","Seq","LineType","WC","PartStepDesc","SetupQty","RuntimeMatlQty","CustID", "OperationCodeVend","RateUC","UM","ExtraDesc1", "ExtraDesc2","Freq","Machine","Overlap","WCFactor","CrewSize","ExtraDesc1","ExtraDesc2","ExtraDesc3","PL","MainCommentFlag","SignOffGroupUser","SignOffType","SortCode",V.Local.sMapTask)
	
	
	'Using the long value of the router sequence because the filter was not accepting 2 string values for the same column ( > 'x' and < 'y')
	F.Data.DataView.Create("ChildInsert","V_UPDATE",22,"","RTR_SEQ ASC")	

	f.Intrinsic.Control.If(v.DataTable.ChildInsert.RowCount,>,0)
		f.Intrinsic.String.RTrim(v.DataTable.ChildInsert(0).Descr_BP!FieldValString,v.Local.sBPDescr)
		f.Intrinsic.String.RTrim(v.DataTable.ChildInsert(0).Description_2!FieldValString,v.Local.sBPDescr2)
		f.Intrinsic.String.RTrim(v.DataTable.ChildInsert(0).Description_3!FieldValString,v.Local.sBPDescr3)
		f.Intrinsic.String.RTrim(v.DataTable.ChildInsert(0).PL!FieldValString,v.Local.sBPPL)
	f.Intrinsic.Control.EndIf
	
	
	'adding records using different maps based on LMO C or T
	f.Intrinsic.Control.For(v.Local.iCount,0,v.DataView.ChildInsert!V_UPDATE.RowCount--,1)
		F.Intrinsic.Control.If(V.DataView.ChildInsert!V_UPDATE(V.Local.iCount).RTR_SEQ!FIELDVALLONG,>,0,AND,V.DataView.ChildInsert!V_UPDATE(V.Local.iCount).RTR_SEQ!FIELDVALLONG,<,990000)
			F.Intrinsic.Control.If(V.DataView.ChildInsert!V_UPDATE(V.Local.iCount).CATEGORY!FIELDVALTRIM,<>,"EXCLUDE")
				v.Local.fLead.Set(v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).Lead!FIELDVALString)
				f.Intrinsic.String.RTrim(v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).DESCRIPTION_2!FIELDVALString,v.Local.sDesc2)
				f.Intrinsic.String.RTrim(v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).DESCRIPTION_3!FIELDVALString,v.Local.sDesc3)				
				f.Intrinsic.String.RTrim(v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).DESCRIPTION!FIELDVALString,v.Local.sDescription)				
				
				f.Intrinsic.Control.SelectCase(v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM)
					'labor lines
					f.Intrinsic.Control.Case("L")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapLab,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sBPDescr.Left30,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,"",v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","",v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).WC_Factor!FIELDVALTRIM,"",v.Local.sBPDescr.Left30,v.local.sBPDescr2.Left71,v.local.sBPDescr3.Left71,v.Local.sBPPL,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).SIGNOFF_GRPUSR!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).SIGNOFF_TYPE!FIELDVALTRIM)
					'material lines
					f.Intrinsic.Control.Case("M")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapMat,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sBPDescr.Left30,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,"",v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","","","",v.Local.sBPDescr.Left30,v.local.sBPDescr2.Left71,v.local.sBPDescr3.Left71,v.Local.sBPPL,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM,v.local.fLead,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).MinFlag!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).Amt_Minimum!FIELDVALTRIM)
					'material lines
					f.Intrinsic.Control.Case("O")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapMat,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sBPDescr.Left30,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,"",v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","","","",v.Local.sBPDescr.Left30,v.local.sBPDescr2.Left71,v.local.sBPDescr3.Left71,v.Local.sBPPL,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM,v.local.fLead,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).MinFlag!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).Amt_Minimum!FIELDVALTRIM)
					'comment lines
					f.Intrinsic.Control.Case("C")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapCmt,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sBPDescr.Left30,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).LMO!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,"",v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","","","",v.Local.sBPDescr.Left30,v.local.sBPDescr2.Left71,v.local.sBPDescr3.Left71,v.Local.sBPPL,"Y",v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM)
					'task lines
					F.Intrinsic.Control.Case("T")
						f.Data.DataTable.AddRowByMap("6021",v.Local.sMapTask,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).BPARENT!FIELDVALTRIM,v.Local.sBPDescr.Left30,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).RTR_SEQ!FIELDVALTRIM,"L",v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).PART!FIELDVALTRIM,v.Local.sDescription.Left30,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).SET_UP!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).QTY!FIELDVALFLOAT,"",v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).OP_CODE!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).COST!FIELDVALFLOAT,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).UM!FIELDVALTRIM,v.Local.sDesc2.Left71,v.Local.sDesc3.Left71,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).FREQUENCY!FIELDVALTRIM,"","","","",v.Local.sBPDescr.Left30,v.local.sBPDescr2.Left71,v.local.sBPDescr3.Left71,v.Local.sBPPL,"T",v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).SIGNOFF_GRPUSR!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).SIGNOFF_TYPE!FIELDVALTRIM,v.DataView.ChildInsert!V_UPDATE(v.Local.iCount).Sort_Code!FIELDVALTRIM)
				
				f.Intrinsic.Control.EndSelect
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.iCount)

	
	F.Data.DataView.Close("ChildInsert","V_UPDATE")

	f.Intrinsic.Control.CallSub(Backup_ChildInsert_Router)

	'working updateBuildQuantity
	f.Data.DataTable.SetValue("6021",-1,"Qty1",1)

	f.Intrinsic.Control.CallSub(6021Sync,"sRouter",V.Local.sPart)
	
	f.Data.DataTable.AcceptChanges("6021")
	'once this upload completes, we need to add in the "line comments" via savetoDB and the "complete flag" via udpate query
	
	'In case only Router header.
	f.Intrinsic.Control.If(v.Local.bHeaderOnly)
		F.Intrinsic.Control.CallSub(Delete_Fake_Line,"sPart",v.Local.sPart,"sTable","ChildInsert")
	f.Intrinsic.Control.EndIf		

	'there is also a possibility that the BOM hasn't been saved to GSS yet, in this case args.bom would have already set bBOM to true
	v.Local.sHold.Set(V.DataTable.ChildInsert(v.Local.iBaseRow).BPARENT!FIELDVALTRIM)
	f.Intrinsic.String.Build("UPDATE ROUTER_LINE SET BUILT_FROM_BOM = 'Y' WHERE ROUTER = '{0}' AND LMO = 'M'",v.Local.sHold.PSQLFriendly,V.Local.sSql)
	F.ODBC.Connection!conx.execute(v.Local.sSql)
	
	'Double update for some header fields, as the 6021 does not update correctly
	f.Intrinsic.String.Build("UPDATE ROUTER_HEADER SET UM_Inventory = '{0}',Prod_Line = '{2}',Part_Customer = '{3}' where Router = '{1}' and Router_Type = 'H'",v.Args.sUM,v.Local.sPart.PSQLFriendly,v.Args.sPL,v.Args.sLoc,V.Local.sSql)
	F.ODBC.Connection!conx.execute(v.Local.sSql)
	
	'Update Extra description
	f.Intrinsic.String.RTrim(v.Screen.MFGPart!txtMfgExtra.Text,v.Local.sHold)
	f.Intrinsic.String.Build("Select Text from Inv_Extra_Text where Part = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSql,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		f.Intrinsic.String.Build("Insert into INV_EXTRA_TEXT (Part,Text) values ('{0}','{1}')",v.Local.sPart.PSQLFriendly,v.Local.sHold.PSQLFriendly,V.Local.sSql)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("UPDATE INV_EXTRA_TEXT SET TEXT = '{1}' Where Part = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sHold.PSQLFriendly,V.Local.sSql)
	f.Intrinsic.Control.EndIf	
	F.ODBC.Connection!conx.execute(v.Local.sSql)	
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.BuildInsertPartRouter_CoreSide.End

Program.Sub.cmdFromInventory_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	V.Local.sSource_code.Declare
	v.Local.sPart.Declare
	v.Local.sSQL.Declare
	v.Local.sHold.Declare

	'Only browse Manufacture parts
	F.Intrinsic.Control.If(V.Global.bLongPart)
		f.Intrinsic.UI.Browser("Select Inventory Part","conx","select Left(i1.Part,17) as Part,substring(i1.Part,18,3) as Rev,i1.Description, i1.UM_Inventory as UM,i1.Product_Line,Case when i1.Flag_Inactive = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Inactive,x.Display_Part,x.Display_Rev,i2.Code_Source as Source,Description_2 as Alt1,Description_3 as Alt2,Code_Sort as Sort  from INVENTORY_MSTR i1 left join Inv_Lxr x on i1.Part = x.GSS_PART left join Inventory_mst2 i2 on i1.Part = i2.Part and i1.Location = i2.Location  where i2.Code_Source in ('M','F') order by i1.Part","Part*!*Rev*!*Description*!*UM*!*PL*!*Inactive*!*Long Part*!*Rev Long Part*!*Source*!*Alt1*!*Alt2*!*Sort","500*!*200*!*700*!*130*!*130*!*200*!*500*!*200*!*150*!*200*!*200*!*200","15000","10000",v.Local.sRet)
	F.Intrinsic.Control.Else
		f.Intrinsic.UI.Browser("Select Inventory Part","conx","select Left(i1.Part,17) as Part,substring(i1.Part,18,3) as Rev, i1.Description, i1.UM_Inventory as UM,i1.Product_Line,Case when i1.Flag_Inactive = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Inactive,i2.Code_Source as Source,Description_2 as Alt1,Description_3,Code_Sort as Sort  from INVENTORY_MSTR i1 left join Inventory_mst2 i2 on i1.Part = i2.Part and i1.Location = i2.Location  where i2.Code_Source in ('M','F') order by i1.Part","Part*!*Rev*!*Description*!*UM*!*PL*!*Inactive*!*Source*!*Alt1*!*Alt2*!*Sort","500*!*200*!*700*!*130*!*130*!*200*!*150*!*200*!*200*!*200","15000","10000",v.Local.sRet)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)	
		f.Intrinsic.Control.BlockEvents
		gui.MFGPart.txtMfgPart.Text(v.Local.sRet(0))
		gui.MFGPart.txtMfgRev.Text(v.Local.sRet(1))
		gui.MFGPart.txtMfgDescr.Text(v.Local.sRet(2))
		gui.MFGPart.txtMfgUM.Text(v.Local.sRet(3))
		gui.MFGPart.txtMfgPL.Text(v.Local.sRet(4))
		
		f.Intrinsic.Control.If(v.Global.bLongPart)
			v.Local.sSource_code.Set(v.Local.sRet(8).Trim)
			gui.MFGPart.txtMfgDescr2.Text(v.Local.sRet(9))
			gui.MFGPart.txtMfgDescr3.Text(v.Local.sRet(10))
			gui.MFGPart.cboCodeSort.Text(v.Local.sRet(11))
		f.Intrinsic.Control.Else
			v.Local.sSource_code.Set(v.Local.sRet(6).Trim)
			gui.MFGPart.txtMfgDescr2.Text(v.Local.sRet(7))
			gui.MFGPart.txtMfgDescr3.Text(v.Local.sRet(8))
			gui.MFGPart.cboCodeSort.Text(v.Local.sRet(9))
		f.Intrinsic.Control.EndIf		
	
		f.Intrinsic.Control.If(v.Local.sSource_code,=,"F")
			gui.MFGPart.ddlMfgSource.Text("MFG-JOB")
		F.Intrinsic.Control.ElseIf(v.Local.sSource_code,=,"M")	
			gui.MFGPart.ddlMfgSource.Text("MFG-STOCK")
		f.Intrinsic.Control.EndIf
		
		'Get Cost
		f.Intrinsic.String.GSSPartString(v.Local.sRet(0),v.Local.sRet(1),v.Local.sPart)
		f.Intrinsic.String.Build("Select top 1 Cost from Inventory_Cost where Part = '{0}' and Locn = '{1}'",v.Local.sPart.PSQLFriendly,v.Screen.MFGPart!ddlMfgLoc.Text,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.Control.CallSub(Build_Mask_Cost)
			f.Intrinsic.String.Format(v.Local.sRet,v.Args.sMaskCost,v.Local.sHold)
			gui.MFGPart.txtMfgUnitCost.Text(v.Local.sRet)			
		f.Intrinsic.Control.EndIf
		
		'Get Extra Text
		f.Intrinsic.String.Build("select Top 1 text from inv_extra_text where part = '{0}' ",v.Local.sPart.PSQLFriendly,v.Local.sSql)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			gui.MFGPart.txtMfgExtra.Text(v.Local.sRet)
		f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.UnBlockEvents
		
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdFromInventory_Click.End

Program.Sub.cmdFromRouter_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sPart.Declare
	v.Local.sSQL.Declare
	v.Local.sHold.Declare
	v.Local.sPL.Declare
	v.Local.sSource_Code.Declare
	
	F.Intrinsic.Control.If(V.Global.bLongPart)
		f.Intrinsic.UI.Browser("Select Router","conx","select Left(h.Router,17) as Router,Substring(h.Router,18,3) as Rev,rtrim(h.DESCRIPTION_ROUTER) as Description,h.UM_INVENTORY as UM_Inventory ,h.PROD_LINE as Product_Line,s.Inactive,s.Complete, x.DISPLAY_PART,x.DISPLAY_REV  from v_router_header h left join v_router_desc d on h.Router = d.Router and h.Router_Suffix = d.Router_Suffix left join v_ROUTER_SUPP_HDR s on h.Router = s.Rtr_Num and h.Router_Suffix = s.Suffix  left join Inv_lxr x on h.Router = x.GSS_Part order by h.Router","Router*!*Rev*!*Description*!*UM*!*PL*!*Inactive*!*Compl.*!*Long Part*!*Rev Long Part","500*!*200*!*700*!*200*!*200*!*300*!*300*!*500*!*200","15000","10000",v.Local.sRet)
	F.Intrinsic.Control.Else
		f.Intrinsic.UI.Browser("Select Router","conx","select Left(h.Router,17) as Router,Substring(h.Router,18,3) as Rev,rtrim(h.DESCRIPTION_ROUTER) as Description,h.UM_INVENTORY as UM_Inventory ,h.PROD_LINE as Product_Line,s.Inactive,s.Complete  from v_router_header h left join v_router_desc d on h.Router = d.Router and h.Router_Suffix = d.Router_Suffix left join v_ROUTER_SUPP_HDR s on h.Router = s.Rtr_Num and h.Router_Suffix = s.Suffix order by h.Router","Router*!*Rev*!*Description*!*UM*!*PL*!*Inactive*!*Compl.","500*!*200*!*700*!*200*!*200*!*300*!*400","15000","10000",v.Local.sRet)
	F.Intrinsic.Control.EndIf	
		
	f.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		f.Intrinsic.Control.BlockEvents
		gui.MFGPart.txtMfgPart.Text(v.Local.sRet(0))
		gui.MFGPart.txtMfgRev.Text(v.Local.sRet(1))
		gui.MFGPart.txtMfgDescr.Text(v.Local.sRet(2))
		gui.MFGPart.txtMfgUM.Text(v.Local.sRet(3))
		gui.MFGPart.txtMfgPL.Text(v.Local.sRet(4).Trim)
		v.Local.sPL.Set(v.Local.sRet(4).Trim)
		
		f.Intrinsic.String.GSSPartString(v.Local.sRet(0),v.Local.sRet(1),v.Local.sPart)
		'Get Alt1, Alt2, Cost
		f.Intrinsic.String.Build("Select top 1 Desc_Router_2,Desc_Router_3 from V_Router_Desc where Router = '{0}' ",v.Local.sPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			f.Intrinsic.Control.If(v.Local.sRet(0).Trim,<>,"",or,v.Local.sRet(1).Trim,<>,"")
				gui.MFGPart.txtMfgDescr2.Text(v.Local.sRet(0))
				gui.MFGPart.txtMfgDescr3.Text(v.Local.sRet(1))
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("Select top 1 Description_2,Description_3,Code_Source from Inventory_Mst2 where Part = '{0}' and Location = '{1}' ",v.Local.sPart.PSQLFriendly,v.Screen.MFGPart!ddlMfgLoc.Text,v.Local.sSQL)
				f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
				f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
					f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
					gui.MFGPart.txtMfgDescr2.Text(v.Local.sRet(0))
					gui.MFGPart.txtMfgDescr3.Text(v.Local.sRet(1))	
					v.Local.sSource_Code.Set(v.Local.sRet(2).Trim)					
				f.Intrinsic.Control.EndIf				
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.Else
			'Look in Inventory
			f.Intrinsic.String.Build("Select top 1 Description_2,Description_3,Code_Source from Inventory_Mst2 where Part = '{0}' and Location = '{1}' ",v.Local.sPart.PSQLFriendly,v.Screen.MFGPart!ddlMfgLoc.Text,v.Local.sSQL)
			f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
			f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
				f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
				gui.MFGPart.txtMfgDescr2.Text(v.Local.sRet(0))
				gui.MFGPart.txtMfgDescr3.Text(v.Local.sRet(1))	
				v.Local.sSource_Code.Set(v.Local.sRet(2).Trim)
			f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.EndIf	
		
		f.Intrinsic.Control.If(v.Local.sSource_Code.Trim,=,"")
			f.Intrinsic.String.Build("Select top 1 Code_Source from Inventory_Mst2 where Part = '{0}' and Location = '{1}' ",v.Local.sPart.PSQLFriendly,v.Screen.MFGPart!ddlMfgLoc.Text,v.Local.sSQL)
			f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
			f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
				v.Local.sSource_Code.Set(v.Local.sRet.Trim)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.Control.If(v.Local.sSource_code,=,"F")
			gui.MFGPart.ddlMfgSource.Text("MFG-JOB")
		F.Intrinsic.Control.ElseIf(v.Local.sSource_code,=,"M")	
			gui.MFGPart.ddlMfgSource.Text("MFG-STOCK")
		f.Intrinsic.Control.EndIf		
		
		'Get Cost
		f.Intrinsic.String.Build("Select top 1 Cost from Inventory_Cost where Part = '{0}' and Locn = '{1}'",v.Local.sPart.PSQLFriendly,v.Screen.MFGPart!ddlMfgLoc.Text,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.Control.CallSub(Build_Mask_Cost)
			f.Intrinsic.String.Format(v.Local.sRet,v.Args.sMaskCost,v.Local.sHold)
			gui.MFGPart.txtMfgUnitCost.Text(v.Local.sRet)			
		f.Intrinsic.Control.EndIf		
		
		'extra description
		f.Intrinsic.String.Build("select Top 1 text from inv_extra_text where part = '{0}' ",v.Local.sPart.PSQLFriendly,v.Local.sSql)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			gui.MFGPart.txtMfgExtra.Text(v.Local.sRet)
		f.Intrinsic.Control.EndIf	
		
		'Get Sort Code
		f.Intrinsic.String.Build("select Top 1 code_sort,Product_Line from inventory_mstr where part = '{0}' and location = '{1}' ",v.Local.sPart.PSQLFriendly,v.Screen.MFGPart!ddlMfgLoc.Text,v.Local.sSql)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			gui.MFGPart.cboCodeSort.Text(v.Local.sRet(0))
			f.Intrinsic.Control.If(v.Local.sPL,=,"")
				gui.MFGPart.txtMfgPL.Text(v.Local.sRet(1).Trim)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.UnBlockEvents
		
	f.Intrinsic.Control.EndIf		

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdFromRouter_Click.End

Program.Sub.cmdFromBom_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sPart.Declare
	v.Local.sSQL.Declare
	v.Local.sHold.Declare	
	v.Local.sSource_Code.Declare

	f.Intrinsic.Control.If(v.Global.bLongPart)
		f.Intrinsic.UI.Browser("Select Bill of Material","conx","SELECT Left(A.PARENT,17) as Part,Substring(A.PARENT,18,3) as Rev, B.Description,A.UM_Inventory as UM,'' as PL,A.Inactive,Case When a.Bom_Complete = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Complete, x.DISPLAY_PART,x.DISPLAY_REV FROM  V_BOM_ENG B LEFT JOIN V_BOM_MSTR A ON B.PART = A.PARENT Left Join INV_LXR x ON x.GSS_PART = b.Part WHERE b.Location = '' and B.IS_PARENT = 'Y' AND A.SEQUENCE_BOM = '0000'","Parent*!*Rev*!*Description*!*UM*!*PL*!*Inactive*!*Compl.*!*Long Part*!*Rev Long Part","500*!*200*!*700*!*200*!*100*!*200*!*200*!*500*!*200","15000","10000",v.Local.sRet)
	f.Intrinsic.Control.Else
		f.Intrinsic.UI.Browser("Select Bill of Material","conx","SELECT Left(A.PARENT,17) as Part,Substring(A.PARENT,18,3) as Rev, B.Description,A.UM_Inventory as UM,'' as PL,A.Inactive,Case When a.Bom_Complete = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Complete FROM  V_BOM_ENG B LEFT JOIN V_BOM_MSTR A ON B.PART = A.PARENT WHERE b.Location = '' and B.IS_PARENT = 'Y' AND A.SEQUENCE_BOM = '0000'","Parent*!*Rev*!*Description*!*UM*!*PL*!*Inactive*!*Compl.","500*!*200*!*700*!*200*!*100*!*200*!*200","15000","10000",v.Local.sRet)
	f.Intrinsic.Control.EndIf		
		
	f.Intrinsic.Control.If(v.Local.sRet.IsCancel,=,False)
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)	
		f.Intrinsic.Control.BlockEvents
		gui.MFGPart.txtMfgPart.Text(v.Local.sRet(0))
		gui.MFGPart.txtMfgRev.Text(v.Local.sRet(1))
		gui.MFGPart.txtMfgDescr.Text(v.Local.sRet(2))
		gui.MFGPart.txtMfgUM.Text(v.Local.sRet(3))
		gui.MFGPart.txtMfgPL.Text(v.Local.sRet(4))
		
		f.Intrinsic.String.GSSPartString(v.Local.sRet(0),v.Local.sRet(1),v.Local.sPart)
		'Get Alt1, Alt2, Cost
		f.Intrinsic.String.Build("Select top 1 Desc_Router_2,Desc_Router_3 from V_Router_Desc where Router = '{0}' ",v.Local.sPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			f.Intrinsic.Control.If(v.Local.sRet(0).Trim,<>,"",or,v.Local.sRet(1).Trim,<>,"")
				gui.MFGPart.txtMfgDescr2.Text(v.Local.sRet(0))
				gui.MFGPart.txtMfgDescr3.Text(v.Local.sRet(1))
			f.Intrinsic.Control.Else
				f.Intrinsic.String.Build("Select top 1 Description_2,Description_3,Code_Source from Inventory_Mst2 where Part = '{0}' and Location = '{1}' ",v.Local.sPart.PSQLFriendly,v.Screen.MFGPart!ddlMfgLoc.Text,v.Local.sSQL)
				f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
				f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
					f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
					gui.MFGPart.txtMfgDescr2.Text(v.Local.sRet(0))
					gui.MFGPart.txtMfgDescr3.Text(v.Local.sRet(1))	
					v.Local.sSource_Code.Set(v.Local.sRet(2).Trim)					
				f.Intrinsic.Control.EndIf				
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.Else
			'Look in Inventory
			f.Intrinsic.String.Build("Select top 1 Description_2,Description_3,Code_Source from Inventory_Mst2 where Part = '{0}' and Location = '{1}' ",v.Local.sPart.PSQLFriendly,v.Screen.MFGPart!ddlMfgLoc.Text,v.Local.sSQL)
			f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
			f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
				f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
				gui.MFGPart.txtMfgDescr2.Text(v.Local.sRet(0))
				gui.MFGPart.txtMfgDescr3.Text(v.Local.sRet(1))	
				v.Local.sSource_Code.Set(v.Local.sRet(2).Trim)
			f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.EndIf	
		
		f.Intrinsic.Control.If(v.Local.sSource_Code.Trim,=,"")
			f.Intrinsic.String.Build("Select top 1 Code_Source from Inventory_Mst2 where Part = '{0}' and Location = '{1}' ",v.Local.sPart.PSQLFriendly,v.Screen.MFGPart!ddlMfgLoc.Text,v.Local.sSQL)
			f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
			f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
				v.Local.sSource_Code.Set(v.Local.sRet.Trim)
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
		
		f.Intrinsic.Control.If(v.Local.sSource_code,=,"F")
			gui.MFGPart.ddlMfgSource.Text("MFG-JOB")
		F.Intrinsic.Control.ElseIf(v.Local.sSource_code,=,"M")	
			gui.MFGPart.ddlMfgSource.Text("MFG-STOCK")
		f.Intrinsic.Control.EndIf
		
		'Get Cost
		f.Intrinsic.String.Build("Select top 1 Cost from Inventory_Cost where Part = '{0}' and Locn = '{1}'",v.Local.sPart.PSQLFriendly,v.Screen.MFGPart!ddlMfgLoc.Text,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.Control.CallSub(Build_Mask_Cost)
			f.Intrinsic.String.Format(v.Local.sRet,v.Args.sMaskCost,v.Local.sHold)
			gui.MFGPart.txtMfgUnitCost.Text(v.Local.sRet)			
		f.Intrinsic.Control.EndIf		
		
		'extra description
		f.Intrinsic.String.Build("select Top 1 text from inv_extra_text where part = '{0}' ",v.Local.sPart.PSQLFriendly,v.Local.sSql)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			gui.MFGPart.txtMfgExtra.Text(v.Local.sRet)
		f.Intrinsic.Control.EndIf	
		
		'Get Sort Code
		f.Intrinsic.String.Build("select Top 1 code_sort,Product_Line from inventory_mstr where part = '{0}' and location = '{1}' ",v.Local.sPart.PSQLFriendly,v.Screen.MFGPart!ddlMfgLoc.Text,v.Local.sSql)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			gui.MFGPart.cboCodeSort.Text(v.Local.sRet(0))
			gui.MFGPart.txtMfgPL.Text(v.Local.sRet(1))
		f.Intrinsic.Control.EndIf	

		'Get Product Line
		f.Intrinsic.String.Build("select Top 1 Prod_Line from v_router_header where router = '{0}'",v.Local.sPart.PSQLFriendly,v.Local.sSql)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not,=,True,and,v.Local.sRet.Trim,<>,"")
			gui.MFGPart.txtMfgPL.Text(v.Local.sRet.Trim)
		f.Intrinsic.Control.EndIf		
		
		f.Intrinsic.Control.UnBlockEvents
	f.Intrinsic.Control.EndIf	
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdFromBom_Click.End

Program.Sub.txtSimilar_LostFocus.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	
	v.Local.sRet.Set(v.Screen.Form!txtSimilar.Text.Trim)
	gui.Form.txtSimilar.Text(v.Local.sRet.UCase)
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtSimilar_LostFocus.End

Program.Sub.txtSimilarRev_LostFocus.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	
	v.Local.sRet.Set(v.Screen.Form!txtSimilarRev.Text.Trim)
	gui.Form.txtSimilarRev.Text(v.Local.sRet.UCase)
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtSimilarRev_LostFocus.End

Program.Sub.picGV_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iX.Declare
	v.Local.iY.Declare
	
	gui.Form.picGV.Enabled(False)
	f.Intrinsic.Control.If(v.Global.bGVSettingsFirstLoad)
		f.Intrinsic.Math.Add(v.Screen.Form!frameRtrHead.Height,3000,v.Local.iY)
		v.Local.iX.Set(0)		
		f.Intrinsic.Control.If(v.Screen.Form!frameSource.Visible,=,True)
			f.Intrinsic.Math.Add(v.Screen.Form!frameSource.Width,v.Local.iX,v.Local.iX)
		f.Intrinsic.Control.EndIf	
		gui.GVSettings..Position(v.Local.iX,v.Local.iY)
		v.Global.bGVSettingsFirstLoad.Set(False)
	f.Intrinsic.Control.EndIf
	
	gui.GVSettings..Visible(True)
	gui.GVSettings..AlwaysOnTop(True)
	gui.Form.picGV.Enabled(True)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picGV_Click.End

Program.Sub.GVSettings_UnLoad.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	
	gui.GVSettings..AlwaysOnTop(False)
	gui.GVSettings..Visible(False)
	gui.Form..SetFocus
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GVSettings_UnLoad.End

'DEAL ON TOP.......................................................
Program.Sub.SaveGridLayouts.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sSerialize.Declare
	V.Local.sSQL.Declare
	v.Local.iUserID.Declare
	v.Local.sFilter.Declare
	v.Local.sName.Declare
	
	F.Intrinsic.UI.Inputbox("Enter Name","Name for Gridview Settings","",v.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,True)
		f.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	v.Local.sName.Set(v.Local.sRet.Trim)
	f.Intrinsic.Control.If(v.Local.sName.Length,>,50)
		f.Intrinsic.UI.Msgbox("Name max length is 50 chars.","Invalid Name")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.UI.InvokeWaitDialog("Saving...")
	
	'Reset apply
	f.Data.DataTable.SetValue("GVRTR",-1,"Apply",False)
	f.Data.DataTable.SetValue("GVQUOTE",-1,"Apply",False)
	f.Data.DataTable.SetValue("GVMAT",-1,"Apply",False)
	f.Data.DataTable.SetValue("GVWC",-1,"Apply",False)
	f.Data.DataTable.SetValue("GVOUT",-1,"Apply",False)
	f.Data.DataTable.SetValue("GVOPC",-1,"Apply",False)
	
	f.Global.Security.GetUserId(v.Caller.User,v.Caller.CompanyCode,v.Local.iUserID)
	f.Intrinsic.String.Build("Update GS_Registry Set BVAl = 0 where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq in ('101','102','103','104','105','106') ",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sSQL)
	f.ODBC.Connection!conC.OpenCommonConnection
	f.ODBC.Connection!conC.Execute(v.Local.sSQL)		
	f.ODBC.Connection!ConC.Close
	
	'GVRTR	
	gui.Form.GGC_Bom.Serialize("GV_CHILD",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,v.local.sName,4986,101,False,"GV_CHILD",True,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)

	f.Intrinsic.String.Build("Trim(Name) = '{0}'",v.Local.sName,v.Local.sFilter)
	f.Data.DataTable.Select("GVRTR",v.Local.sFilter,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,=,"***NORETURN***")
		f.Data.DataTable.AddRow("GVRTR","Name",v.Local.sName,"APPLY",True,"DEL","DEL","SerVal",v.Local.sSerialize)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		v.Local.sRet.Set(v.Local.sRet(0))
		f.Data.DataTable.SetValue("GVRTR",v.Local.sRet,"APPLY",True)
	f.Intrinsic.Control.EndIf
	
	'GVQUOTE
	gui.Form.GGC_Quote.Serialize("GV_QLINES",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,v.local.sName,4986,102,False,"GV_QLINES",True,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	
	f.Intrinsic.String.Build("Trim(Name) = '{0}'",v.Local.sName,v.Local.sFilter)
	f.Data.DataTable.Select("GVQUOTE",v.Local.sFilter,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,=,"***NORETURN***")
		f.Data.DataTable.AddRow("GVQUOTE","Name",v.Local.sName,"APPLY",True,"DEL","DEL","SerVal",v.Local.sSerialize)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		v.Local.sRet.Set(v.Local.sRet(0))
		f.Data.DataTable.SetValue("GVQUOTE",v.Local.sRet,"APPLY",True)
	f.Intrinsic.Control.EndIf	
	
	'GVMAT
	gui.Form.GGC_Mat.Serialize("GV_MATERIAL",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,v.local.sName,4986,103,False,"GV_MATERIAL",True,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	
	f.Intrinsic.String.Build("Trim(Name) = '{0}'",v.Local.sName,v.Local.sFilter)
	f.Data.DataTable.Select("GVMAT",v.Local.sFilter,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,=,"***NORETURN***")
		f.Data.DataTable.AddRow("GVMAT","Name",v.Local.sName,"APPLY",True,"DEL","DEL","SerVal",v.Local.sSerialize)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		v.Local.sRet.Set(v.Local.sRet(0))
		f.Data.DataTable.SetValue("GVMAT",v.Local.sRet,"APPLY",True)
	f.Intrinsic.Control.EndIf		
	
	'GVWC
	gui.Form.GGC_WC.Serialize("GV_WCENTER",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,v.local.sName,4986,104,False,"GV_WCENTER",True,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	
	f.Intrinsic.String.Build("Trim(Name) = '{0}'",v.Local.sName,v.Local.sFilter)
	f.Data.DataTable.Select("GVWC",v.Local.sFilter,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,=,"***NORETURN***")
		f.Data.DataTable.AddRow("GVWC","Name",v.Local.sName,"APPLY",True,"DEL","DEL","SerVal",v.Local.sSerialize)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		v.Local.sRet.Set(v.Local.sRet(0))
		f.Data.DataTable.SetValue("GVWC",v.Local.sRet,"APPLY",True)
	f.Intrinsic.Control.EndIf		
	
	'GVOUT
	gui.Form.GGC_Outs.Serialize("GV_OUTS",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,v.local.sName,4986,105,False,"GV_OUTS",True,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	
	f.Intrinsic.String.Build("Trim(Name) = '{0}'",v.Local.sName,v.Local.sFilter)
	f.Data.DataTable.Select("GVOUT",v.Local.sFilter,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,=,"***NORETURN***")
		f.Data.DataTable.AddRow("GVOUT","Name",v.Local.sName,"APPLY",True,"DEL","DEL","SerVal",v.Local.sSerialize)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		v.Local.sRet.Set(v.Local.sRet(0))
		f.Data.DataTable.SetValue("GVOUT",v.Local.sRet,"APPLY",True)
	f.Intrinsic.Control.EndIf	
	
	'GVOPC
	gui.Form.GGC_OPCODE.Serialize("GV_OPERATIONS",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,v.local.sName,4986,106,False,"GV_OPERATIONS",True,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	
	f.Intrinsic.String.Build("Trim(Name) = '{0}'",v.Local.sName,v.Local.sFilter)
	f.Data.DataTable.Select("GVOPC",v.Local.sFilter,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,=,"***NORETURN***")
		f.Data.DataTable.AddRow("GVOPC","Name",v.Local.sName,"APPLY",True,"DEL","DEL","SerVal",v.Local.sSerialize)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		v.Local.sRet.Set(v.Local.sRet(0))
		f.Data.DataTable.SetValue("GVOPC",v.Local.sRet,"APPLY",True)
	f.Intrinsic.Control.EndIf		
	
	f.Intrinsic.UI.CloseWaitDialog
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.SaveGridLayouts.End

Program.Sub.cmdSaveGVRTR_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSerialize.Declare
	v.Local.sName.Declare
	v.Local.sFilter.Declare
	v.Local.sRet.Declare
	
	v.Local.sName.Set(v.Screen.GVSettings!txtRTR.Text.Trim)
	f.Intrinsic.Control.If(v.Local.sName,=,"")
		f.Intrinsic.UI.Msgbox("Please enter a name.","Attention")
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("Trim(Name) = '{0}'",v.Local.sName.PSQLFriendly,v.Local.sFilter)
	f.Data.DataTable.Select("GVRTR",v.Local.sFilter,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
		F.Intrinsic.UI.Msgbox("Name already exists.","Attention")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.UI.InvokeWaitDialog("Saving...")
	gui.Form.GGC_Bom.Serialize("GV_CHILD",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,v.Screen.GVSettings!txtRTR.Text.Trim,4986,101,False,"GV_CHILD",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)	
	
	F.Data.DataTable.AddRow("GVRTR","GVType","GV_CHILD","Name",v.Local.sName,"SerVal",v.Local.sSerialize,"Apply",False)
	gui.GVSettings.gsGVRTR.GetColumnIndexByName("gvGVRTR","Name",v.Local.sRet)
	gui.GVSettings.gsGVRTR.FocusCell("gvGVRTR",v.DataTable.GVRTR.RowCount--,v.Local.sRet)	
	gui.GVSettings.txtRTR.Text("")
	F.Intrinsic.UI.CloseWaitDialog

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdSaveGVRTR_Click.End

Program.Sub.cmdSaveGVQuote_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSerialize.Declare
	v.Local.sName.Declare
	v.Local.sFilter.Declare
	v.Local.sRet.Declare
	
	v.Local.sName.Set(v.Screen.GVSettings!txtQuote.Text.Trim)
	f.Intrinsic.Control.If(v.Local.sName,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please enter a name.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("Trim(Name) = '{0}'",v.Local.sName.PSQLFriendly,v.Local.sFilter)
	f.Data.DataTable.Select("GVQUOTE",v.Local.sFilter,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Name already exists.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.UI.InvokeWaitDialog("Saving...")
	gui.Form.GGC_Quote.Serialize("GV_QLINES",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,v.Screen.GVSettings!txtQuote.Text.Trim,4986,102,False,"GV_QLINES",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	
	F.Data.DataTable.AddRow("GVQUOTE","GVType","GV_QLINES","Name",v.Local.sName,"SerVal",v.Local.sSerialize,"Apply",False)
	gui.GVSettings.gsGVQuote.GetColumnIndexByName("gvGVQUOTE","Name",v.Local.sRet)
	gui.GVSettings.gsGVQuote.FocusCell("gvGVQUOTE",v.DataTable.GVQUOTE.RowCount--,v.Local.sRet)	
	gui.GVSettings.txtQuote.Text("")
	F.Intrinsic.UI.CloseWaitDialog

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdSaveGVQuote_Click.End

Program.Sub.cmdSaveGVMat_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSerialize.Declare
	v.Local.sName.Declare
	v.Local.sFilter.Declare
	v.Local.sRet.Declare
	
	v.Local.sName.Set(v.Screen.GVSettings!txtMat.Text.Trim)
	f.Intrinsic.Control.If(v.Local.sName,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please enter a name.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("Trim(Name) = '{0}'",v.Local.sName.PSQLFriendly,v.Local.sFilter)
	f.Data.DataTable.Select("GVMAT",v.Local.sFilter,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Name already exists.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		
	
	F.Intrinsic.UI.InvokeWaitDialog("Saving...")
	gui.Form.GGC_Mat.Serialize("GV_MATERIAL",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,v.Screen.GVSettings!txtMat.Text.Trim,4986,103,False,"GV_MATERIAL",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	
	F.Data.DataTable.AddRow("GVMAT","GVType","GV_MATERIAL","Name",v.Local.sName,"SerVal",v.Local.sSerialize,"Apply",False)
	gui.GVSettings.gsGVMat.GetColumnIndexByName("gvGVMAT","Name",v.Local.sRet)
	gui.GVSettings.gsGVMat.FocusCell("gvGVMAT",v.DataTable.GVMAT.RowCount--,v.Local.sRet)	
	gui.GVSettings.txtMat.Text("")
	F.Intrinsic.UI.CloseWaitDialog

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdSaveGVMat_Click.End

Program.Sub.cmdSaveGVWC_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSerialize.Declare
	v.Local.sName.Declare
	v.Local.sFilter.Declare
	v.Local.sRet.Declare
	
	v.Local.sName.Set(v.Screen.GVSettings!txtWC.Text.Trim)
	f.Intrinsic.Control.If(v.Local.sName,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please enter a name.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("Trim(Name) = '{0}'",v.Local.sName.PSQLFriendly,v.Local.sFilter)
	f.Data.DataTable.Select("GVWC",v.Local.sFilter,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Name already exists.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.UI.InvokeWaitDialog("Saving...")
	gui.Form.GGC_WC.Serialize("GV_WCENTER",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,v.Screen.GVSettings!txtWC.Text.Trim,4986,104,False,"GV_WCENTER",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)

	F.Data.DataTable.AddRow("GVWC","GVType","GV_WCENTER","Name",v.Local.sName,"SerVal",v.Local.sSerialize,"Apply",False)
	gui.GVSettings.gsGVWC.GetColumnIndexByName("gvGVWC","Name",v.Local.sRet)
	gui.GVSettings.gsGVWC.FocusCell("gvGVWC",v.DataTable.GVWC.RowCount--,v.Local.sRet)
	gui.GVSettings.txtWC.Text("")
	F.Intrinsic.UI.CloseWaitDialog

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdSaveGVWC_Click.End

Program.Sub.cmdSaveGVOut_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSerialize.Declare
	v.Local.sName.Declare
	v.Local.sFilter.Declare
	v.Local.sRet.Declare
	
	v.Local.sName.Set(v.Screen.GVSettings!txtOut.Text.Trim)
	f.Intrinsic.Control.If(v.Local.sName,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please enter a name.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("Trim(Name) = '{0}'",v.Local.sName.PSQLFriendly,v.Local.sFilter)
	f.Data.DataTable.Select("GVOUT",v.Local.sFilter,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Name already exists.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.UI.InvokeWaitDialog("Saving...")
	gui.Form.GGC_Outs.Serialize("GV_OUTS",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,v.Screen.GVSettings!txtOut.Text.Trim,4986,105,False,"GV_OUTS",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	
	F.Data.DataTable.AddRow("GVOUT","GVType","GV_OUTS","Name",v.Local.sName,"SerVal",v.Local.sSerialize,"Apply",False)
	gui.GVSettings.gsGVOut.GetColumnIndexByName("gvGVOUT","Name",v.Local.sRet)
	gui.GVSettings.gsGVOut.FocusCell("gvGVOUT",v.DataTable.GVOUT.RowCount--,v.Local.sRet)
	gui.GVSettings.txtOut.Text("")
	F.Intrinsic.UI.CloseWaitDialog

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdSaveGVOut_Click.End

Program.Sub.cmdSaveOp_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSerialize.Declare
	v.Local.sName.Declare
	v.Local.sFilter.Declare
	v.Local.sRet.Declare
	
	v.Local.sName.Set(v.Screen.GVSettings!txtOp.Text.Trim)
	f.Intrinsic.Control.If(v.Local.sName,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please enter a name.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("Trim(Name) = '{0}'",v.Local.sName.PSQLFriendly,v.Local.sFilter)
	f.Data.DataTable.Select("GVOPC",v.Local.sFilter,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Name already exists.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.UI.InvokeWaitDialog("Saving...")
	gui.Form.GGC_OPCODE.Serialize("GV_OPERATIONS",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,v.Screen.GVSettings!txtOp.Text.Trim,4986,106,False,"GV_OPERATIONS",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	F.Data.DataTable.AddRow("GVOPC","GVType","GV_OPERATIONS","Name",v.Local.sName,"SerVal",v.Local.sSerialize,"Apply",False)
	gui.GVSettings.gsGVOpc.GetColumnIndexByName("gvGVOPC","Name",v.Local.sRet)
	gui.GVSettings.gsGVOpc.FocusCell("gvGVOPC",v.DataTable.GVOPC.RowCount--,v.Local.sRet)	
	gui.GVSettings.txtOp.Text("")
	F.Intrinsic.UI.CloseWaitDialog

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdSaveOp_Click.End

Program.Sub.gsGVRTR_RowCellClick.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.iUserID.Declare
	v.Local.bFlag.Declare
	v.Local.iFlag.Declare
	v.Local.iFlag.Set(0)
	v.Local.sName.Declare	
	
	f.Global.Security.GetUserId(v.Caller.User,v.Caller.CompanyCode,v.Local.iUserID)
	v.Local.sName.Set(v.DataTable.GVRTR(v.Args.RowIndex).Name!FieldValString)
	
	f.Intrinsic.Control.If(v.Args.Column.UCase,=,"DEL")		
		f.Intrinsic.String.Build("Delete from GS_Registry where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '101' and Program = '{2}'",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sName.UCase,v.Local.sSQL)
		f.ODBC.Connection!conC.OpenCommonConnection
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)
		f.ODBC.Connection!ConC.Close
		f.Data.DataTable.DeleteRow("GVRTR",v.Args.RowIndex)
		f.Data.DataTable.AcceptChanges("GVRTR")
	f.Intrinsic.Control.ElseIf(v.Args.Column.UCase,=,"APPLY")
		v.Local.bFlag.Set(v.DataTable.GVRTR(v.Args.RowIndex).Apply!FieldValString)
		F.Data.DataTable.SetValue("GVRTR",-1,"Apply",False)
		F.Data.DataTable.SetValue("GVRTR",v.Args.RowIndex,"Apply",v.Local.bFlag.Not)
		f.ODBC.Connection!conC.OpenCommonConnection
		f.Intrinsic.String.Build("Update GS_Registry Set BVAl = 0 where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '101' ",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sSQL)
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)	
		f.Intrinsic.Control.If(v.Local.bFlag.Not)
			v.Local.iFlag.Set(1)		
		f.Intrinsic.Control.EndIf
		f.Intrinsic.String.Build("Update GS_Registry Set BVAl = '{3}' where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '101' and Program = '{2}'",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sName.UCase,v.Local.iFlag,v.Local.sSQL)
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)
		f.ODBC.Connection!ConC.Close
		
		f.Intrinsic.Control.If(v.Local.bFlag.Not)
			gui.Form.GGC_Bom.Deserialize(V.DataTable.GVRTR(v.Args.RowIndex).SerVal!FieldValString)
		f.Intrinsic.Control.EndIf		
	
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.gsGVRTR_RowCellClick.End

Program.Sub.gsGVQuote_RowCellClick.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.iUserID.Declare
	V.Local.bFlag.Declare
	v.Local.iFlag.Declare
	v.Local.sName.Declare
	
	f.Global.Security.GetUserId(v.Caller.User,v.Caller.CompanyCode,v.Local.iUserID)
	v.Local.sName.Set(v.DataTable.GVQUOTE(v.Args.RowIndex).Name!FieldValString)
	
	f.Intrinsic.Control.If(v.Args.Column.UCase,=,"DEL")		
		f.Intrinsic.String.Build("Delete from GS_Registry where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '102' and Program = '{2}'",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sName.UCase,v.Local.sSQL)
		f.ODBC.Connection!conC.OpenCommonConnection
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)
		f.ODBC.Connection!ConC.Close
		f.Data.DataTable.DeleteRow("GVQUOTE",v.Args.RowIndex)
		f.Data.DataTable.AcceptChanges("GVQUOTE")
	
	f.Intrinsic.Control.ElseIf(v.Args.Column.UCase,=,"APPLY")
		v.Local.bFlag.Set(v.DataTable.GVQUOTE(v.Args.RowIndex).Apply!FieldValString)
		F.Data.DataTable.SetValue("GVQUOTE",-1,"Apply",False)
		F.Data.DataTable.SetValue("GVQUOTE",v.Args.RowIndex,"Apply",v.Local.bFlag.Not)
		f.ODBC.Connection!conC.OpenCommonConnection
		f.Intrinsic.String.Build("Update GS_Registry Set BVAl = 0 where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '102' ",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sSQL)
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)	
		f.Intrinsic.Control.If(v.Local.bFlag.Not)
			v.Local.iFlag.Set(1)		
		f.Intrinsic.Control.EndIf
		f.Intrinsic.String.Build("Update GS_Registry Set BVAl = '{3}' where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '102' and Program = '{2}'",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sName.UCase,v.Local.iFlag,v.Local.sSQL)
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)
		f.ODBC.Connection!ConC.Close
		
		f.Intrinsic.Control.If(v.Local.bFlag.Not)
			gui.Form.GGC_Quote.Deserialize(V.DataTable.GVQUOTE(v.Args.RowIndex).SerVal!FieldValString)
		f.Intrinsic.Control.EndIf		
		
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.gsGVQuote_RowCellClick.End

Program.Sub.gsGVMat_RowCellClick.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.iUserID.Declare
	V.Local.bFlag.Declare
	v.Local.iFlag.Declare	
	v.Local.sName.Declare
	
	f.Global.Security.GetUserId(v.Caller.User,v.Caller.CompanyCode,v.Local.iUserID)
	v.Local.sName.Set(v.DataTable.GVMAT(v.Args.RowIndex).Name!FieldValString)
	
	f.Intrinsic.Control.If(v.Args.Column.UCase,=,"DEL")		
		f.Intrinsic.String.Build("Delete from GS_Registry where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '103' and Program = '{2}'",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sName.UCase,v.Local.sSQL)
		f.ODBC.Connection!conC.OpenCommonConnection
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)
		f.ODBC.Connection!ConC.Close
		f.Data.DataTable.DeleteRow("GVMAT",v.Args.RowIndex)
		f.Data.DataTable.AcceptChanges("GVMAT")
	f.Intrinsic.Control.ElseIf(v.Args.Column.UCase,=,"APPLY")
		v.Local.bFlag.Set(v.DataTable.GVMAT(v.Args.RowIndex).Apply!FieldValString)
		F.Data.DataTable.SetValue("GVMAT",-1,"Apply",False)
		F.Data.DataTable.SetValue("GVMAT",v.Args.RowIndex,"Apply",v.Local.bFlag.Not)
		f.ODBC.Connection!conC.OpenCommonConnection
		f.Intrinsic.String.Build("Update GS_Registry Set BVAl = 0 where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '103' ",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sSQL)
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)	
		f.Intrinsic.Control.If(v.Local.bFlag.Not)
			v.Local.iFlag.Set(1)		
		f.Intrinsic.Control.EndIf
		f.Intrinsic.String.Build("Update GS_Registry Set BVAl = '{3}' where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '103' and Program = '{2}'",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sName.UCase,v.Local.iFlag,v.Local.sSQL)
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)
		f.ODBC.Connection!ConC.Close
		
		f.Intrinsic.Control.If(v.Local.bFlag.Not)
			gui.Form.GGC_Mat.Deserialize(V.DataTable.GVMAT(v.Args.RowIndex).SerVal!FieldValString)
		f.Intrinsic.Control.EndIf	

	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.gsGVMat_RowCellClick.End

Program.Sub.gsGVWC_RowCellClick.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.iUserID.Declare
	V.Local.bFlag.Declare
	v.Local.iFlag.Declare
	v.Local.sName.Declare
	
	f.Global.Security.GetUserId(v.Caller.User,v.Caller.CompanyCode,v.Local.iUserID)
	v.Local.sName.Set(v.DataTable.GVWC(v.Args.RowIndex).Name!FieldValString)
	
	f.Intrinsic.Control.If(v.Args.Column.UCase,=,"DEL")		
		f.Intrinsic.String.Build("Delete from GS_Registry where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '104' and Program = '{2}'",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sName.UCase,v.Local.sSQL)
		f.ODBC.Connection!conC.OpenCommonConnection
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)
		f.ODBC.Connection!ConC.Close
		f.Data.DataTable.DeleteRow("GVWC",v.Args.RowIndex)
		f.Data.DataTable.AcceptChanges("GVWC")
	f.Intrinsic.Control.ElseIf(v.Args.Column.UCase,=,"APPLY")
		v.Local.bFlag.Set(v.DataTable.GVWC(v.Args.RowIndex).Apply!FieldValString)
		F.Data.DataTable.SetValue("GVWC",-1,"Apply",False)
		F.Data.DataTable.SetValue("GVWC",v.Args.RowIndex,"Apply",v.Local.bFlag.Not)
		f.ODBC.Connection!conC.OpenCommonConnection
		f.Intrinsic.String.Build("Update GS_Registry Set BVAl = 0 where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '104' ",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sSQL)
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)	
		f.Intrinsic.Control.If(v.Local.bFlag.Not)
			v.Local.iFlag.Set(1)		
		f.Intrinsic.Control.EndIf
		f.Intrinsic.String.Build("Update GS_Registry Set BVAl = '{3}' where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '104' and Program = '{2}'",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sName.UCase,v.Local.iFlag,v.Local.sSQL)
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)
		f.ODBC.Connection!ConC.Close
		
		f.Intrinsic.Control.If(v.Local.bFlag.Not)
			gui.Form.GGC_WC.Deserialize(V.DataTable.GVWC(v.Args.RowIndex).SerVal!FieldValString)
		f.Intrinsic.Control.EndIf		
		
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.gsGVWC_RowCellClick.End

Program.Sub.gsGVOut_RowCellClick.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.iUserID.Declare
	V.Local.bFlag.Declare
	v.Local.iFlag.Declare	
	v.Local.sName.Declare
	
	f.Global.Security.GetUserId(v.Caller.User,v.Caller.CompanyCode,v.Local.iUserID)
	v.Local.sName.Set(v.DataTable.GVOUT(v.Args.RowIndex).Name!FieldValString)
	
	f.Intrinsic.Control.If(v.Args.Column.UCase,=,"DEL")		
		f.Intrinsic.String.Build("Delete from GS_Registry where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '105' and Program = '{2}'",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sName.UCase,v.Local.sSQL)
		f.ODBC.Connection!conC.OpenCommonConnection
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)
		f.ODBC.Connection!ConC.Close
		f.Data.DataTable.DeleteRow("GVOUT",v.Args.RowIndex)
		f.Data.DataTable.AcceptChanges("GVOUT")
	f.Intrinsic.Control.ElseIf(v.Args.Column.UCase,=,"APPLY")
		v.Local.bFlag.Set(v.DataTable.GVOUT(v.Args.RowIndex).Apply!FieldValString)
		F.Data.DataTable.SetValue("GVOUT",-1,"Apply",False)
		F.Data.DataTable.SetValue("GVOUT",v.Args.RowIndex,"Apply",v.Local.bFlag.Not)
		f.ODBC.Connection!conC.OpenCommonConnection
		f.Intrinsic.String.Build("Update GS_Registry Set BVAl = 0 where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '105' ",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sSQL)
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)	
		f.Intrinsic.Control.If(v.Local.bFlag.Not)
			v.Local.iFlag.Set(1)		
		f.Intrinsic.Control.EndIf
		f.Intrinsic.String.Build("Update GS_Registry Set BVAl = '{3}' where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '105' and Program = '{2}'",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sName.UCase,v.Local.iFlag,v.Local.sSQL)
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)
		f.ODBC.Connection!ConC.Close
		
		f.Intrinsic.Control.If(v.Local.bFlag.Not)
			gui.Form.GGC_Outs.Deserialize(V.DataTable.GVOUT(v.Args.RowIndex).SerVal!FieldValString)
		f.Intrinsic.Control.EndIf			
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.gsGVOut_RowCellClick.End

Program.Sub.gsGVOpc_RowCellClick.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.iUserID.Declare
	V.Local.bFlag.Declare
	v.Local.iFlag.Declare	
	v.Local.sName.Declare
	
	f.Global.Security.GetUserId(v.Caller.User,v.Caller.CompanyCode,v.Local.iUserID)
	v.Local.sName.Set(v.DataTable.GVOPC(v.Args.RowIndex).Name!FieldValString)
	
	f.Intrinsic.Control.If(v.Args.Column.UCase,=,"DEL")		
		f.Intrinsic.String.Build("Delete from GS_Registry where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '106' and Program = '{2}'",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sName.UCase,v.Local.sSQL)
		f.ODBC.Connection!conC.OpenCommonConnection
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)
		f.ODBC.Connection!ConC.Close
		f.Data.DataTable.DeleteRow("GVOPC",v.Args.RowIndex)
		f.Data.DataTable.AcceptChanges("GVOPC")
	f.Intrinsic.Control.ElseIf(v.Args.Column.UCase,=,"APPLY")
		v.Local.bFlag.Set(v.DataTable.GVOPC(v.Args.RowIndex).Apply!FieldValString)
		F.Data.DataTable.SetValue("GVOPC",-1,"Apply",False)
		F.Data.DataTable.SetValue("GVOPC",v.Args.RowIndex,"Apply",v.Local.bFlag.Not)
		f.ODBC.Connection!conC.OpenCommonConnection
		f.Intrinsic.String.Build("Update GS_Registry Set BVAl = 0 where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '106' ",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sSQL)
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)	
		f.Intrinsic.Control.If(v.Local.bFlag.Not)
			v.Local.iFlag.Set(1)		
		f.Intrinsic.Control.EndIf
		f.Intrinsic.String.Build("Update GS_Registry Set BVAl = '{3}' where User_ID =  '{0}' and Company = '{1}' and Reg_ID = '4986' and Seq = '106' and Program = '{2}'",v.Local.iUserID,v.Caller.CompanyCode,v.Local.sName.UCase,v.Local.iFlag,v.Local.sSQL)
		f.ODBC.Connection!conC.Execute(v.Local.sSQL)
		f.ODBC.Connection!ConC.Close
		
		f.Intrinsic.Control.If(v.Local.bFlag.Not)
			gui.Form.GGC_OPCODE.Deserialize(V.DataTable.GVOPC(v.Args.RowIndex).SerVal!FieldValString)
		f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.gsGVOpc_RowCellClick.End

Program.Sub.Get_Consump_Convert.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sSQL.Declare
	v.Local.fConvert.Declare
	v.Local.sPart.Declare
	
	v.Local.sPart.Set(v.Args.sPart)

	f.Intrinsic.String.Build("Select  Top 1 Consump_Conv from Inventory_Mst3 where Part = '{0}'",v.Args.sPart.PSQLFriendly,v.Local.sSQL)	
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		v.Local.fConvert.Set(1)
	f.Intrinsic.Control.Else
		v.Local.fConvert.Set(v.Local.sRet)
		f.Intrinsic.Control.If(v.Local.fConvert,=,0)
			v.Local.fConvert.Set(1)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Variable.AddRV("fConvert",v.Local.fConvert)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Get_Consump_Convert.End

Program.Sub.BLOCMENU.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sFilter.Declare
	v.Local.sPhantomPart.Declare
	v.Local.sRTR_Seq.Declare
	v.Local.sRow.Declare
	
	v.Local.iCnt.Declare
	v.Local.sCurrentSeq.Declare
	v.Local.sPreviousSeq.Declare
	v.Local.sNextSeq.Declare
	v.Local.iPrevious.Declare
	v.Local.iRow.Declare
	v.Local.sHold.Declare
	
	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.IF(V.DataTable.CHILD.RowCount,<=,1)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf

	gui.Form.GGC_Bom.GetSelectedRows("GV_Child",v.Local.sRow)
	f.Intrinsic.Control.If(v.Local.sRow,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please highlight a row from the Router grid.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Split(v.Local.sRow,"*!*",v.Local.sRow)
	v.Local.sRow.Set(v.Local.sRow(0))	
	
	v.Local.sPhantomPart.Set(v.DataTable.Child(v.Local.sRow).PhantomPart!FieldValTrim)
	v.Local.sRTR_Seq.Set(v.DataTable.Child(v.Local.sRow).RTR_Seq!FieldValTrim)	

	f.Intrinsic.Control.If(v.Local.sRTR_Seq,>=,"990000")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Phantom bloc applied to Normal sequences Only.","Invalid Seq Selected")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub	
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.SelectCase(v.Args.ItemName)
		f.Intrinsic.Control.Case("SELECTPHANTOMBLOC")
		
			f.Intrinsic.Control.If(v.Local.sPhantomPart,=,"")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("This row does not belong to a Phantom bloc","No Phantom Bloc Found")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.ExitSub	
			f.Intrinsic.Control.EndIf				

			f.Intrinsic.String.Build("Trim(PhantomPart) = '{0}' and RTR_Seq <> '000000' and RTR_Seq < '990000'",v.Local.sPhantomPart.PSQLFriendly,v.Local.sFilter)
			f.Data.DataView.Create("Child","vSelectP",22,v.Local.sFilter,"")
			f.Data.DataView.SetValue("Child","vSelectP",-1,"SelectSeq",True)
			f.Data.DataView.Close("Child","vSelectP")	
			
		F.Intrinsic.Control.CaseAny("PLACEBLOCABOVE","PLACEBLOCBELOW")
		
			f.Intrinsic.Control.CallSub(Check_Continuous_Seq_Bloc)
			f.Intrinsic.Control.If(v.Args.bContinuous,=,False)
				f.Intrinsic.Control.ExitSub
			f.Intrinsic.Control.EndIf
			
			'Check if Target seq is inside the bloc
			f.Intrinsic.Control.If(v.DataTable.Child(v.Local.sRow).SelectSeq!FieldValString,=,"True")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("Target sequences is inside the block","Invalid Target Sequence")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
				f.Intrinsic.Control.ExitSub	
			f.Intrinsic.Control.EndIf
	
	
			f.Data.DataTable.SetValue("Child",-1,"SeqSort",0)
			
			f.Data.DataView.Create("Child","vMS",22,"SelectSeq = 1 and RTR_Seq <> '000000' and RTR_Seq < '990000'","RTR_Seq")		
			f.Intrinsic.Control.If(v.Args.ItemName,=,"PLACEBLOCABOVE")
				v.Local.iRow.Set(v.DataView.Child!vMS.RowCount)
				f.Intrinsic.Math.Mult(v.Local.iRow,-1,v.Local.iRow)
				f.Data.DataView.SetSeries("Child","vMS","SeqSort",v.Local.iRow,1)			
			f.Intrinsic.Control.Else
				f.Data.DataView.SetSeries("Child","vMS","SeqSort",1,1)
			f.Intrinsic.Control.EndIf
			
			f.Data.DataView.SetSort("Child","vMS","SeqSort")
			f.Data.DataView.SetValue("Child","vMS",-1,"RTR_Seq",v.Local.sRTR_Seq)
			
			f.Data.DataView.SetFilter("Child","vMS","RTR_Seq <> '000000' and RTR_Seq < '990000'")
			f.Data.DataView.SetSort("Child","vMS","RTR_SEQ,SeqSort")				
			f.Data.DataView.SetSeries("Child","vMS","RTR_Seq_Num",v.Global.iRSeq,v.Global.iRSeq)
			f.Data.DataView.SetSort("Child","vMS","RTR_SEQ_Num")
			f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataView.Child!vMS.RowCount--,1)
				f.Intrinsic.String.LPad(v.DataView.child!vMS(v.Local.iCnt).RTR_Seq_Num!FieldValString,"0",6,v.Local.sHold)
				f.Data.DataView.SetValue("Child","vMS",v.Local.iCnt,"RTR_Seq",v.Local.sHold)
			f.Intrinsic.Control.Next(v.Local.iCnt)
			
			f.Data.DataView.Close("Child","vMS")
			F.Data.DataView.SetSort("CHILD","V_CHILD","RTR_SEQ ASC, BOM_SEQ ASC")
			gui.Form.GGC_Bom.MainView("GV_CHILD")	
		
	F.Intrinsic.Control.EndSelect	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.BLOCMENU.End

Program.Sub.Check_Continuous_Seq_Bloc.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sFilter.Declare
	v.Local.iCnt.Declare
	v.Local.sCurrentSeq.Declare
	v.Local.sPreviousSeq.Declare
	v.Local.sNextSeq.Declare
	v.Local.iPrevious.Declare

	'Check if any seq selected
	f.Data.DataView.Create("Child","vBloc",22,"SelectSeq = 1 and RTR_Seq <> '000000' and RTR_Seq < '990000'","RTR_Seq")
	f.Intrinsic.Control.If(v.DataView.Child!vBloc.RowCount,=,0)
		f.Data.DataView.Close("Child","vBloc")
		f.Intrinsic.Variable.AddRV("bContinuous",False)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Normal sequences selected.","Invalid Seq Selected")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)		
		f.Intrinsic.Control.ExitSub				
	f.Intrinsic.Control.EndIf
	
	F.Data.DataView.Create("Child","vLookup",22,"RTR_Seq > '000000'","RTR_Seq")
	
	'Check if it is a continuous block
	f.Intrinsic.Control.If(v.DataView.Child!vBloc.RowCount,>=,2)
		f.Intrinsic.Control.For(v.Local.iCnt,1,v.DataView.Child!vBloc.RowCount--,1)
			v.Local.sCurrentSeq.Set(v.DataView.Child!vBloc(v.Local.iCnt).RTR_Seq!FieldValString)
			f.Intrinsic.Math.Sub(v.Local.iCnt,1,v.Local.iPrevious)
			v.Local.sPreviousSeq.Set(v.DataView.Child!vBloc(v.Local.iPrevious).RTR_Seq!FieldValString)
			f.Intrinsic.String.Build("RTR_Seq > '000000' and RTR_SEQ > '{0}'",V.Local.sPreviousSeq,v.Local.sFilter)
			f.Data.DataView.SetFilter("Child","vLookup",v.Local.sFilter)
			f.Data.DataView.SetSort("Child","vLookup","RTR_Seq")
			f.Intrinsic.Control.If(v.DataView.Child!vLookup.RowCount,>,0)
				v.Local.sNextSeq.Set(v.DataView.Child!vLookup(0).RTR_Seq!FieldValString)
			f.Intrinsic.Control.Else
				v.Local.sNextSeq.Set("")
			f.Intrinsic.Control.EndIf
			
			f.Intrinsic.Control.If(v.Local.sNextSeq,<>,v.Local.sCurrentSeq)
				f.Data.DataView.Close("Child","vBloc")
				f.Data.DataView.Close("Child","vLookup")				
				f.Intrinsic.Variable.AddRV("bContinuous",False)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("This is not a continuous bloc.","Invalid Seq Bloc")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)						
				f.Intrinsic.Control.ExitSub					
			f.Intrinsic.Control.EndIf
							
		f.Intrinsic.Control.Next(v.Local.iCnt)
	
	f.Intrinsic.Control.EndIf
				
	f.Data.DataView.Close("Child","vBloc")
	f.Data.DataView.Close("Child","vLookup")
	
	f.Intrinsic.Variable.AddRV("bContinuous",True)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.Check_Continuous_Seq_Bloc.End

Program.Sub.Check_Target_Seq_Move_Bloc.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	


f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Check_Target_Seq_Move_Bloc.End

Program.Sub.cmdCreateRouterFromBom_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	'Prevent double cycle
	f.Intrinsic.Control.IF(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	

	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveCreateRouter)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveCreateRouter.Set(True)
	
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
	f.Intrinsic.UI.Msgbox("This feature is in development.","Attention")
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
	
	v.Global.bActiveCreateRouter.Set(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdCreateRouterFromBom_Click.End

Program.Sub.picLabor_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sScript.Declare
	v.Local.iPIDReturn.Declare
	v.Local.bEx.Declare
	v.Local.sParam.Declare

	gui.Form.picLabor.Enabled(False)
	
	f.Intrinsic.String.Build("{0}\GCG_4986_BomWC.g2u",v.Caller.GasDir,v.Local.sScript)
	'v.Local.sScript.Set("D:\WORKING\MY\4986\GCG_4986_BomWC.g2u")
	f.Intrinsic.File.Exists(v.Local.sScript,v.Local.bEx)
	f.Intrinsic.Control.If(v.Local.bEx.Not)
		f.Intrinsic.String.Build("File {0} does not exist.",v.Local.sScript,v.Local.sScript)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox(v.Local.sScript,"Invalid Call")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picLabel.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.If(v.DataTable.Child.RowCount,>,0)
		f.Intrinsic.String.Build("{0}@!@{1}@!@{2}",v.Screen.Form!txtFocusParent.Text.Trim,v.Screen.Form!txtFocusRev.Text.Trim,v.Screen.Form!txtFocusDescr.Text.Trim,v.Local.sParam)
	f.Intrinsic.Control.EndIf
	
	function.Global.General.CallAsyncGAS(v.Local.sScript,v.Local.sParam,v.Local.iPIDReturn)			
	
	gui.Form.picLabor.Enabled(True)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picLabor_Click.End

Program.Sub.picMQD_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRow.Declare
	v.Local.sPart.Declare
	v.Local.sRev.Declare
	
	gui.Form.picMQD.Enabled(False)	

	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		F.Intrinsic.Task.LaunchGSSsync("RE0190","-c","")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf

	gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sRow)
	f.Intrinsic.Control.If(v.Local.sRow.Trim,=,"")
		F.Intrinsic.Task.LaunchGSSsync("RE0190","-c","")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'The grid is not in multi-selection mode, but to be safe, we take the first row selected.
	f.Intrinsic.String.Split(v.Local.sRow,"*!*",v.Local.sRow)
	v.Local.sRow.Set(v.Local.sRow(0))
	f.Intrinsic.Control.If(v.DataTable.Child(v.Local.sRow).LMO!FieldValTrim,=,"M",or,v.DataTable.Child(v.Local.sRow).LMO!FieldValTrim,=,"O")
		v.Local.sPart.Set(v.DataTable.Child(v.Local.sRow).Part!FieldValString)
		F.Global.Callwrapper.New("MQD","Manufacturing.Estimating.OpenMaterialQuantityDiscount")
		F.Global.Callwrapper.SetProperty("MQD","Company",v.Caller.CompanyCode)
		F.Global.Callwrapper.SetProperty("MQD","PartNumber",v.Local.sPart.Left17)
		f.Intrinsic.String.Mid(v.Local.sPart,18,3,v.Local.sRev)
		F.Global.Callwrapper.SetProperty("MQD","Revision",v.Local.sRev)
		F.Global.CallWrapper.Run("MQD")			
	f.Intrinsic.Control.Else
		F.Intrinsic.Task.LaunchGSSsync("RE0190","-c","")
	f.Intrinsic.Control.EndIf
	
	gui.Form.picMQD.Enabled(True)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("Please apply hotfixes","Attention")
	f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
f.Intrinsic.Control.EndTry
Program.Sub.picMQD_Click.End

Program.Sub.InsertPhantomBlockComments_AltBom.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sPart.Declare
	v.Local.sLines.Declare
	v.Local.iCount.Declare
	v.Local.iSerie.Declare
	v.Local.sParent.Declare
	v.Local.sParentAlternative.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sRTR_Seq_ColIndex.Declare	
	v.Local.sFilter.Declare
	v.Local.sTargetRow.Declare
	v.Local.sUbound.Declare
	v.Local.sHold.Declare
	v.Local.bAboveException.Declare	
	v.Local.sRet.Declare
	v.Local.sPart17.Declare
	v.Local.sRev.Declare
	v.Local.sPhantomPart.Declare
	v.Local.iStartSeries.Declare
	V.Local.sUM.Declare
	v.Local.sCat_Code.Declare
	v.Local.sSource_Code.Declare
	v.Local.fCost.Declare
	v.Local.sSourceOfRef.Declare
	v.Local.sPL.Declare
	v.Local.sRow.Declare
	v.Local.sSQL.Declare

	f.Intrinsic.Control.If(v.DataTable.LEVEL.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	Gui.POPBOM.GGC_BOMDTL.GetSelectedRows("GV_0",V.Local.sLines)
	f.Intrinsic.Control.If(v.Local.sLines.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No row selected from Alt Bom Grid.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Split(v.Local.sLines,"*!*",v.Local.sLines)
	f.Intrinsic.Control.If(v.Local.sLines.UBound,>,0)		
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("This feature only works on single selected row.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf
	v.Local.sRow.Set(v.Local.sLines(0))
	
	'check to see if there is a router in view to add these materials to
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)	
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("There is no router in focus at Router grid.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'Check: must be right click, bom complete flag not completed, user right (normal,estimator,engineer),datatable Child exist
	f.Intrinsic.Control.If(v.Global.bReadOnly,=,True,or,v.Global.iRights,<=,0)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'If Insert Manual, change to Insert below
	f.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,True)
		gui.Form.optInsertBelow.Value(1)
		f.Intrinsic.Control.CallSub(optInsertBelow_click)
	f.Intrinsic.Control.EndIf	
	
	gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sTargetRow)
	
	'User does not select a router row
	f.Intrinsic.Control.If(v.Local.sTargetRow.Trim,=,"")
		f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,1)
			f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","No Router Sequence Selected","MainLine","Router sequence is not selected.","FirstLine","Select a Normal seq from the Router grid.","SecondLine","Select Above/Below radio button.","ThirdLine","Right click, Insert Phantom as Block of Comments.")
			f.Intrinsic.Control.ExitSub	
			
		'This case CHILD Rowcount = 1	
		f.Intrinsic.Control.Else
			v.Local.sTargetRow.Set(0)
			f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)
		f.Intrinsic.Control.EndIf
		
	'User currently select a router row	
	f.Intrinsic.Control.Else	
		f.Intrinsic.String.Split(v.Local.sTargetRow,"*!*",v.Local.sTargetRow)
		v.Local.sUbound.Set(v.Local.sTargetRow.UBound)
		v.Local.sTargetRow.Set(v.Local.sTargetRow(v.Local.sUbound))
		v.Local.sTargetSeq.Set(v.DataTable.CHILD(V.Local.sTargetRow).RTR_SEQ!FieldValString)
		f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,=,"99")
			f.Data.DataView.Create("Child","vNor",22,"RTR_Seq > '000000' and RTR_Seq < '990000'","")
			f.Intrinsic.Control.If(v.DataView.Child!vNor.RowCount,=,0)			
				f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)					
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","Invalid Router Sequence Selected","MainLine","Invalid Router sequence selected.","FirstLine","Select a Normal seq from the Router grid.","SecondLine","Select Above/Below radio button.","ThirdLine","Right click, Insert Phantom as Block of Comments.")
				f.Data.DataView.Close("Child","vNor")
				f.Intrinsic.Control.ExitSub	
			f.Intrinsic.Control.EndIf
			f.Data.DataView.Close("Child","vNor")					
		f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.EndIf	

	
	gui.Form.GGC_Bom.SuspendLayout
	f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)			
		
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.text,v.Screen.Form!txtFocusRev.text,v.Local.sParent)
	'Exception Above
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1,or,v.DataTable.CHILD.RowCount,=,2)
		v.Local.bAboveException.Set(True)
	f.Intrinsic.Control.EndIf	
	
	'Get Phantom part
	v.Local.sPhantomPart.Set(v.DataTable.LEVEL(v.Local.sRow).PART!FIELDVALSTRING)
	f.Intrinsic.String.RPad(v.Local.sPhantomPart," ",20,v.Local.sPhantomPart)	
	v.Local.sPart17.Set(v.Local.sPhantomPart.left17)
	v.Local.sRev.Set(v.Local.sPhantomPart.Right3)
	
	f.Intrinsic.String.Build("SELECT Top 1 Left(A.PARENT,17) as Part,Substring(A.PARENT,18,3) as Rev, B.Description,A.UM_Inventory as UM,a.Cost as Cost,A.Inactive,Case When a.Bom_Complete = 'Y' then Convert(1,SQL_Bit) Else Convert(0,SQL_Bit) End as Complete, x.DISPLAY_PART,x.DISPLAY_REV FROM  V_BOM_ENG B LEFT JOIN V_BOM_MSTR A ON B.PART = A.PARENT Left Join INV_LXR x ON x.GSS_PART = b.Part WHERE b.Part = '{0}' and B.IS_PARENT = 'Y' AND A.SEQUENCE_BOM = '0000'",v.Local.sPhantomPart,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("The part selected is not a bom.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
	
	'Source Code
	v.Local.sSource_Code.Set(v.DataTable.LEVEL(v.Local.sRow).SOURCE_CODE!FIELDVALTrim)
	f.Intrinsic.Control.If(v.Local.sSource_Code,=,"")
		v.Local.sSource_Code.Set(v.Dictionary.Part_SourceCode![V.Local.sPhantomPart.Trim])	
	f.Intrinsic.Control.EndIf	
	'PL UM
	v.Local.sPL.Set(v.Dictionary.PROD_LINES![v.Local.sPhantomPart.Trim])
	v.Local.sUM.Set(v.Local.sRet(3).Trim)
	f.Intrinsic.Control.If(v.Local.sUM,=,"")
		v.Local.sUM.Set(v.DataTable.LEVEL(v.Local.sRow).UM!FIELDVALTrim)
	f.Intrinsic.Control.EndIf
	'Cost
	v.Local.fCost.Set(v.Local.sRet(4).Trim)
	f.Intrinsic.Control.If(v.Local.fCost,=,0)
		v.Local.fCost.Set(v.DataTable.LEVEL(v.Local.sRow).Cost!FIELDVALString)
	f.Intrinsic.Control.EndIf
	
	'Last resort pulling from Inventory
	'PL and UM
	f.Intrinsic.Control.If(v.Local.sPL.Trim,=,"",or,v.Local.sUM.Trim,=,"")
		f.Intrinsic.String.Build("Select Top 1 Product_Line,UM_Inventory from Inventory_Mstr where Part = '{0}' and rtrim(ltrim(Product_Line)) <> ''",v.Local.sPhantomPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			f.Intrinsic.Control.If(v.Local.sPL.Trim,=,"")
				v.Local.sPL.Set(v.Local.sRet(0).Trim)
			f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.If(v.Local.sUM.Trim,=,"")
				v.Local.sUM.Set(v.Local.sRet(1).Trim)
			f.Intrinsic.Control.EndIf				
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf	
	'Source
	f.Intrinsic.Control.If(v.Local.sSource_Code.Trim,=,"")
		f.Intrinsic.String.Build("Select Top 1 Code_Source from Inventory_Mst2 where Part = '{0}' and rtrim(ltrim(Code_Source)) <> ''",v.Local.sPhantomPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			v.Local.sSource_Code.Set(v.Local.sRet.Trim)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf	
	'After All, set Source = M if blank
	f.Intrinsic.Control.If(v.Local.sSource_Code.Trim,=,"")
		v.Local.sSource_Code.Set("M")
	f.Intrinsic.Control.EndIf		
	
	'Cost
	f.Intrinsic.Control.If(v.Local.sSource_Code.Trim,=,"")
		f.Intrinsic.String.Build("Select Top 1 Cost from INVENTORY_COST  where Part = '{0}' and Cost <> 0",v.Local.sPhantomPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			v.Local.fCost.Set(v.Local.sRet.Trim)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf	
	
	'Create BomPhantom table
	f.Intrinsic.Control.If(v.DataTable.BomPhantom.Exists)
		F.Data.DataTable.Close("BomPhantom")
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.CallSub(Create_Bom_Table,"sTable","BomPhantom")	
	
	f.Intrinsic.Control.CallSub(GetPhantomBom,"Parent",v.Local.sPart17,"Rev",v.Local.sRev,"TIER",0,"CTIER",0,"PL",v.Local.sPL,"UM",v.local.sUM.left2,"CAT_CODE","P","Category","PHANTOM","COST",v.Local.fCost,"Source",v.Local.sSource_Code)			
	
	F.Data.DataTable.AddColumn("BomPhantom","Source","String","")
	F.Data.DataTable.AddColumn("BomPhantom","Category","String","")
	f.Data.DataTable.FillFromDictionary("BomPhantom","SOURCE","SOURCE_CODE","SOURCE")
	f.Data.DataTable.FillFromDictionary("BomPhantom","CATEGORY","CAT_CODE","CATEGORY")
	
	'Refine BomPhantom to BomPhantomFinal which remove the '0000' Bom_Seq
	f.Data.DataView.Create("BomPhantom","vBFinal",22,"BOM_SEQ is Null or Bom_Seq <> '0000'","")
	f.Intrinsic.Control.If(v.DataTable.BomPhantomFinal.Exists)
		f.Data.DataTable.Close("BomPhantomFinal")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.ToDataTable("BomPhantom","vBFinal","BomPhantomFinal",True)
	
	f.Data.DataTable.AddExpressionColumn("BomPhantomFinal","LMO","STRING","IIF((DESCRIPTION like '* START' or DESCRIPTION like '* END') or (Cat_Code is not null and Cat_Code = 'R'),'C','M')")		
	f.Data.DataTable.SetValue("BomPhantomFinal",-1,"PhantomPart",v.Local.sPhantomPart)
	f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value,=,True)
		f.Data.DataTable.SetSeries("BomPhantomFinal","SeqSort",1,1)
	f.Intrinsic.Control.Else
		f.Intrinsic.Math.Mult(-1,v.DataTable.BomPhantomFinal.RowCount,v.Local.iStartSeries)
		f.Data.DataTable.SetSeries("BomPhantomFinal","SeqSort",v.Local.iStartSeries,1)	
	f.Intrinsic.Control.EndIf	
	
	f.Data.DataTable.SetValue("BomPhantomFinal",-1,"RTR_Seq",v.Local.sTargetSeq)
	
	f.Intrinsic.String.Build("Bom_Seq is not null and RTR_Seq = '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
	f.Data.DataView.Create("Child","vMaxBomSeq",22,v.Local.sFilter,"Bom_Seq desc")
	f.Intrinsic.Control.If(v.DataView.Child!vMaxBomSeq.RowCount,>,0)
		v.Local.sHold.Set(v.DataView.Child!vMaxBomSeq(0).Bom_Seq!FieldValString)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.LPad(v.Global.iBSeq,"0",4,v.Local.sHold)
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Close("Child","vMaxBomSeq")
	
	f.Data.DataTable.SetValue("BomPhantomFinal",-1,"Bom_Seq",v.Local.sHold)
	'Set Serie unique
	f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
	f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)
	f.Data.DataTable.AddColumn("BomPhantomFinal","Serie","Long",0)
	f.Data.DataTable.SetSeries("BomPhantomFinal","Serie",v.Local.iSerie,1)
	
	F.Data.DataTable.AcceptChanges("BomPhantomFinal")
	
	gui.Form.GGC_Bom.Visible(False)
	
	f.Data.DataTable.SetValue("BomPhantomFinal",-1,"BParent",v.Local.sParent,"Descr_BP",v.DataTable.Child(0).Descr_BP!FieldValsTring)
	f.Intrinsic.Control.If(v.DataTable.BomPhantomFinal.RowCount,>,0)
		f.Data.DataTable.SetValue("BomPhantomFinal",0,"Description_2",v.Local.sSource_Code)
	f.Intrinsic.Control.EndIf
	
	'Set Reference Part to Comment
	f.Data.DataView.Create("BomPhantomFinal","vRef",22,"Cat_Code is not null and Cat_Code = 'R'","")
	f.Intrinsic.Control.For(v.Local.iCount,v.DataView.BomPhantomFinal!vRef.RowCount--,0,-1)
		v.Local.sSourceOfRef.Set(v.DataView.BomPhantomFinal!vRef(v.Local.iCount).Source_Code!FieldValString)
		F.Data.DataView.SetValue("BomPhantomFinal","vRef",v.Local.iCount,"Description_2",v.Local.sSourceOfRef,"Source","","Source_Code","")
	f.Intrinsic.Control.Next(v.Local.iCount)
	f.Data.DataView.Close("BomPhantomFinal","vRef")	
	
	f.Data.DataTable.AcceptChanges("BomPhantomFinal")

	f.Data.DataTable.AddExpressionColumn("BomPhantomFinal","PartTrim3","String","Trim([Part])")
	F.Data.DataTable.FillFromDictionary("BomPhantomFinal","LEADHOURS","PartTrim3","Lead")
	F.Data.DataTable.Merge("BomPhantomFinal","CHILD",True,2)
	f.Data.DataTable.AcceptChanges("Child")
	
	'RESEQUENCE
	'Insert Below case we will ReseqStartFrom_Normal
	f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value)
		f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.Local.sTargetSeq)		
	'Insert Above case
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.If(v.Local.bAboveException.Not)

			F.Intrinsic.String.Build("RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
			f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
			F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
				f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
					f.Intrinsic.Control.CallSub(ReSeqNormals)						
				f.Intrinsic.Control.Else	
					f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
				f.Intrinsic.Control.EndIf					
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.CallSub(ReSeqNormals)
			F.Intrinsic.Control.EndIf
			f.Data.DataView.Close("CHILD","vAbove")		
		
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.CallSub(ReSeqNormals)
		f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.EndIf

	'move the focus to last row
	Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
	gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)
	
	f.Data.DataView.SetFilter("Child","V_Child","RTR_SEq <> '000000' AND Part <> '~~~@!@~~~@!@'")
	f.Data.DataView.SetSort("Child","V_Child","RTR_Seq")

	f.Data.DataTable.SetValueFormat("Child",-1,"Ext2","Extended","0.00000000")
	gui.Form.GGC_Bom.Visible(True)	
		
	gui.Form.GGC_Bom.ResumeLayout
		
	gui.Form..Enabled(True)
	gui.Form..AlwaysOnTop(True)
	gui.Form..AlwaysOnTop(False)	
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.InsertPhantomBlockComments_AltBom.End

Program.Sub.InsertReferencePartAsComment_AltBom.Start
f.Intrinsic.Control.Try
	v.Local.sParent.Declare
	V.Local.sPart.Declare
	v.Local.sPart17.Declare
	v.Local.sRev.Declare
	v.Local.sFilter.Declare
	v.Local.sTargetRow.Declare
	v.Local.sTargetSeq.Declare
	v.Local.sUbound.Declare
	v.Local.iSeqSort.Declare
	v.Local.sRTR_Seq_ColIndex.Declare
	v.Local.sHold.Declare
	v.Local.bAboveException.Declare	
	v.Local.iSerie.Declare
	v.Local.sPartDesc.Declare
	v.Local.sUM.Declare
	v.Local.sPL.Declare
	v.Local.sSource.Declare
	v.Local.sSource_Code.Declare
	v.Local.sRet.Declare
	
	v.Local.sLines.Declare
	v.Local.iCount.Declare
	v.Local.fCost.Declare
	v.Local.sRow.Declare
	v.Local.sSQL.Declare

	f.Intrinsic.Control.If(v.DataTable.LEVEL.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	Gui.POPBOM.GGC_BOMDTL.GetSelectedRows("GV_0",V.Local.sLines)
	f.Intrinsic.Control.If(v.Local.sLines.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No row selected from Alt Bom Grid.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Split(v.Local.sLines,"*!*",v.Local.sLines)
	f.Intrinsic.Control.If(v.Local.sLines.UBound,>,0)		
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("This feature only works on single selected row.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub		
	f.Intrinsic.Control.EndIf
	v.Local.sRow.Set(v.Local.sLines(0))
	
	'check to see if there is a router in view to add these materials to
	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,0)	
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("There is no router in focus at Router grid.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
		
	gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sTargetRow)
	
	'User does not select a router row
	f.Intrinsic.Control.If(v.Local.sTargetRow.Trim,=,"")
		f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,1)
			f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","No Router Sequence Selected","MainLine","Router sequence is not selected.","FirstLine","Select a Normal seq from the Router grid.","SecondLine","Select Above/Below radio button.","ThirdLine","Right click, Insert Phantom as Block of Comments.")
			f.Intrinsic.Control.ExitSub	
			
		'This case CHILD Rowcount = 1	
		f.Intrinsic.Control.Else
			v.Local.sTargetRow.Set(0)
			f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)
		f.Intrinsic.Control.EndIf
		
	'User currently select a router row	
	f.Intrinsic.Control.Else	
		f.Intrinsic.String.Split(v.Local.sTargetRow,"*!*",v.Local.sTargetRow)
		v.Local.sUbound.Set(v.Local.sTargetRow.UBound)
		v.Local.sTargetRow.Set(v.Local.sTargetRow(v.Local.sUbound))
		v.Local.sTargetSeq.Set(v.DataTable.CHILD(V.Local.sTargetRow).RTR_SEQ!FieldValString)
		f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,=,"99")
			f.Data.DataView.Create("Child","vNor",22,"RTR_Seq > '000000' and RTR_Seq < '990000'","")
			f.Intrinsic.Control.If(v.DataView.Child!vNor.RowCount,=,0)			
				f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)					
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","Invalid Router Sequence Selected","MainLine","Invalid Router sequence selected.","FirstLine","Select a Normal seq from the Router grid.","SecondLine","Select Above/Below radio button.","ThirdLine","Right click, Insert Phantom as Block of Comments.")
				f.Data.DataView.Close("Child","vNor")
				f.Intrinsic.Control.ExitSub	
			f.Intrinsic.Control.EndIf
			f.Data.DataView.Close("Child","vNor")					
		f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.EndIf	
	
	'Check: must be right click, bom complete flag not completed, user right (normal,estimator,engineer),datatable Child exist
	f.Intrinsic.Control.If(v.Global.bReadOnly,=,True,or,v.Global.iRights,<=,0,v.DataTable.CHILD.Exists,=,False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'If Insert Manual option is selected we don't need the user to select a row
	f.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,True)
		'Validate the sequence entered by user. If it does not exists in the current router, it is valid. Then check if is a 99XXXX sequence
		f.Intrinsic.String.LPad(v.Screen.Form!txtManualSeq.Text.Trim,"0",6,v.Local.sTargetSeq)
		f.Intrinsic.Control.If(v.Local.sTargetSeq,=,"",or,v.Local.sTargetSeq,=,"000000",v.Local.sTargetSeq,>=,990000)
			f.Intrinsic.Control.CallSub(Msg2LinesSoccer,"Title","Invalid Manual Sequence Entered","MainLine","Comment seq must be a Normal seq (0 < Seq < 990000).","FirstLine","Type in a Normal seq at the Manual textbox.","SecondLine","Right click, select Comment.")	
			gui.Form.txtManualSeq.SetFocus			
			f.Intrinsic.Control.ExitSub	
		f.Intrinsic.Control.EndIf
		'Check if target sequence exists
		f.Intrinsic.String.Build("RTR_Seq = '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
		f.Data.DataView.Create("CHILD","vSeqExist",22,v.Local.sFilter,"")
		f.Intrinsic.Control.If(v.DataView.CHILD!vSeqExist.RowCount,>,0)
			f.Data.DataView.Close("CHILD","vSeqExist")
			f.Intrinsic.String.Build("Sequence {0} already exists in the current Router.",v.Local.sTargetSeq,v.Local.sHold)				
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			F.Intrinsic.UI.Msgbox(v.Local.sHold,"Invalid Manual Sequence Entered")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			gui.Form.txtManualSeq.SetFocus		
			f.Intrinsic.Control.ExitSub	
		f.Intrinsic.Control.EndIf
		f.Data.DataView.Close("CHILD","vSeqExist")
		
	'Insert Manual option is not selected, we need user to select a row from Router grid
	f.Intrinsic.Control.Else	
		gui.Form.GGC_Bom.GetSelectedRows("GV_CHILD",v.Local.sTargetRow)
		
		'User does not select a router row
		f.Intrinsic.Control.If(v.Local.sTargetRow.Trim,=,"")
			f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,>,1)
				f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","No Router Sequence Selected","MainLine","Router sequence is not selected.","FirstLine","Select a Normal seq from the Router grid.","SecondLine","Select Above/Below/Manual radio button.","ThirdLine","Right click, select Comment.")
				f.Intrinsic.Control.ExitSub	
				
			'This case CHILD Rowcount = 1	
			f.Intrinsic.Control.Else
				v.Local.sTargetRow.Set(0)
				f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)
			f.Intrinsic.Control.EndIf

		'User currently select a router row	
		f.Intrinsic.Control.Else	
			f.Intrinsic.String.Split(v.Local.sTargetRow,"*!*",v.Local.sTargetRow)
			v.Local.sUbound.Set(v.Local.sTargetRow.UBound)
			v.Local.sTargetRow.Set(v.Local.sTargetRow(v.Local.sUbound))
			v.Local.sTargetSeq.Set(v.DataTable.CHILD(V.Local.sTargetRow).RTR_SEQ!FieldValString)
			f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,=,"99")
			
				f.Data.DataView.Create("Child","vNor",22,"RTR_Seq > '000000' and RTR_Seq < '990000'","")
				f.Intrinsic.Control.If(v.DataView.Child!vNor.RowCount,=,0)			
					f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)					
				f.Intrinsic.Control.Else						
					f.Intrinsic.Control.CallSub(Msg3LinesSoccer,"Title","Invalid Router Sequence Selected","MainLine","Invalid Router sequence selected.","FirstLine","Select a Normal seq from the Router grid.","SecondLine","Select Above/Below/Manual radio button.","ThirdLine","Right click, select Comment.")
					f.Data.DataView.Close("Child","vNor")
					gui.Form.txtManualSeq.SetFocus	
					f.Intrinsic.Control.ExitSub		
				f.Intrinsic.Control.EndIf
				f.Data.DataView.Close("Child","vNor")
				
			f.Intrinsic.Control.EndIf			
			
		f.Intrinsic.Control.EndIf	
		
	f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1,or,v.DataTable.CHILD.RowCount,=,2)
		v.Local.bAboveException.Set(True)
	f.Intrinsic.Control.EndIf
	
	'iSeqSort
	f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value,=,True)
		v.Local.iSeqSort.Set(1)
	f.Intrinsic.Control.ElseIf(v.Screen.Form!optInsertAbove.Value,=,True)
		v.Local.iSeqSort.Set(-1)
	f.Intrinsic.Control.ElseIf(v.Screen.Form!optInsertManual.Value,=,True)
		v.Local.iSeqSort.Set(0)
	f.Intrinsic.Control.EndIf	
	
	'Get Phantom part
	v.Local.sPart.Set(v.DataTable.LEVEL(v.Local.sRow).PART!FIELDVALSTRING)
	f.Intrinsic.String.RPad(v.Local.sPart," ",20,v.Local.sPart)	
	v.Local.sPart17.Set(v.Local.sPart.left17)
	v.Local.sRev.Set(v.Local.sPart.Right3)
	v.Local.sPartDesc.Set(v.DataTable.LEVEL(v.Local.sRow).Description!FIELDVALSTRING)
	
	'Source Code
	v.Local.sSource_Code.Set(v.DataTable.LEVEL(v.Local.sRow).SOURCE_CODE!FIELDVALTrim)
	f.Intrinsic.Control.If(v.Local.sSource_Code,=,"")
		v.Local.sSource_Code.Set(v.Dictionary.Part_SourceCode![V.Local.sPart.Trim])
	f.Intrinsic.Control.EndIf	
	'PL UM
	v.Local.sPL.Set(v.Dictionary.PROD_LINES![v.Local.sPart.Trim])
	v.Local.sUM.Set(v.DataTable.LEVEL(v.Local.sRow).UM!FIELDVALTrim)
	
	'Last resort pulling from Inventory
	'PL and UM
	f.Intrinsic.Control.If(v.Local.sPL.Trim,=,"",or,v.Local.sUM.Trim,=,"")
		f.Intrinsic.String.Build("Select Top 1 Product_Line,UM_Inventory from Inventory_Mstr where Part = '{0}' and rtrim(ltrim(Product_Line)) <> ''",v.Local.sPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
			f.Intrinsic.Control.If(v.Local.sPL.Trim,=,"")
				v.Local.sPL.Set(v.Local.sRet(0).Trim)
			f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.If(v.Local.sUM.Trim,=,"")
				v.Local.sUM.Set(v.Local.sRet(1).Trim)
			f.Intrinsic.Control.EndIf			
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf	
	'Source
	f.Intrinsic.Control.If(v.Local.sSource_Code.Trim,=,"")
		f.Intrinsic.String.Build("Select Top 1 Code_Source from Inventory_Mst2 where Part = '{0}' and rtrim(ltrim(Code_Source)) <> ''",v.Local.sPart.PSQLFriendly,v.Local.sSQL)
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
			v.Local.sSource_Code.Set(v.Local.sRet.Trim)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf		
	
	
	gui.Form.GGC_Bom.SuspendLayout
	f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)			
		
	f.Intrinsic.String.GSSPartString(v.Screen.Form!txtFocusParent.text,v.Screen.Form!txtFocusRev.text,v.Local.sParent)
	f.Intrinsic.String.GSSPartString(v.Local.sPart17,v.Local.sRev,v.Local.sPart)
	f.Intrinsic.String.Build("Part: {0}",v.Local.sPart,v.Local.sPartDesc)	

	'Get next Serie
	f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
	f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)			
	
	'add the non-inventory line item
	f.Data.DataTable.AddRow("CHILD","BPARENT",v.Local.sParent,"DESCR_BP",V.Screen.Form!txtFocusDescr.text,"RTR_SEQ",V.Local.sTargetSeq,"SeqSort",v.Local.iSeqSort,"PART",v.Local.sPart,"DESCRIPTION",v.Local.sPartDesc,"DESCRIPTION_2",v.Local.sSource_Code,"COMMENTS","","Cat_Code","R","CATEGORY","REFERENCE","LMO","C","PL",v.Local.sPL,"UM",v.local.sUM.left2,"RefPart",v.Local.sPart,"Serie",v.Local.iSerie)
	v.Global.bRouterChanged.Set(True)
	
	'No need to resequence if it is Manual Insert
	F.Intrinsic.Control.If(v.Screen.Form!optInsertManual.Value,=,False)
		'Insert Below case we will ReseqStartFrom_Normal
		f.Intrinsic.Control.If(v.Screen.Form!optInsertBelow.Value)
			f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.Local.sTargetSeq)		
		'Insert Above case
		f.Intrinsic.Control.Else
			f.Intrinsic.Control.If(v.Local.bAboveException.Not)
	
				F.Intrinsic.String.Build("RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
				f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
				F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
					f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
						f.Intrinsic.Control.CallSub(ReSeqNormals)						
					f.Intrinsic.Control.Else	
						f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
					f.Intrinsic.Control.EndIf					
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.CallSub(ReSeqNormals)
				F.Intrinsic.Control.EndIf
				f.Data.DataView.Close("CHILD","vAbove")		
			
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.CallSub(ReSeqNormals)
			f.Intrinsic.Control.EndIf

		f.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.EndIf	

	'@holder1			
	f.Data.DataTable.AcceptChanges("CHILD")

	'If there is a row added, move the focus to that row
	Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
	gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)
		
	gui.Form.GGC_Bom.ResumeLayout

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry

Program.Sub.InsertReferencePartAsComment_AltBom.End

Program.Sub.Populate_Loc_Part_ID.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sPartList.Declare
	v.Local.sSQL.Declare

	f.Data.DataView.Create("Bom","vLoc",22,"","")
	f.Data.DataView.ToString("Bom","vLoc","Part","","#@$",v.Local.sPartList)
	f.Intrinsic.String.Replace(v.Local.sPartList,"'","''",v.Local.sPartList)
	f.Intrinsic.String.Replace(v.Local.sPartList,"#@$","','",v.Local.sPartList)
	f.Data.DataView.Close("Bom","vLoc")
	f.Intrinsic.String.Build("Select rtrim(Router) as Router,rtrim(Part_Customer) as PartID from v_Router_Header where Router in ('{0}')",v.Local.sPartList,v.Local.sSQL)
	f.Data.Dictionary.CreateFromSQL("dictPartID","conx",v.Local.sSQL)
	f.Data.Dictionary.SetDefaultReturn("dictPartID","")
	f.Data.DataTable.FillFromDictionary("Bom","dictPartID","PartTrim2","PartID")
	f.Data.Dictionary.Close("dictPartID")	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Populate_Loc_Part_ID.End

Program.Sub.gsNewInvPart_RowCellClick.Start
Program.Sub.gsNewInvPart_RowCellClick.End

Program.Sub.gsNewInvPart_CellValueChanged.Start
Program.Sub.gsNewInvPart_CellValueChanged.End

Program.Sub.NewInvPart_UnLoad.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	
	gui.NewInvPart..Visible(False)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.NewInvPart_UnLoad.End

Program.Sub.cmdCreateNewInvParts_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iCnt.Declare
	v.Local.sPart.Declare
	v.Local.sUM.Declare
	v.Local.sDescr.Declare
	v.Local.sLocation.Declare
	v.Local.sPL.Declare
	v.Local.sSource.Declare
	v.Local.sAlt1.Declare
	v.Local.sAlt2.Declare
	v.Local.sPrice.Declare
	v.Local.sText.Declare
	v.Local.sCost.Declare
	v.Local.sHold.Declare
	v.Local.sFilter.Declare
	
	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveCreateNewInvParts)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveCreateNewInvParts.Set(True)	
	
	f.Data.DataView.Create("NewInv","vUMPL",22,"(UM is Null or Trim(UM) = '') or (PL is null or Trim(PL) = '')","")
	f.Intrinsic.Control.If(v.DataView.NewInv!vUMPL.RowCount,>,0)
		f.Data.DataView.Close("NewInv","vUMPL")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Please enter UM/PL using Bom left click, then select Edit Router\Bom\Inventory.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		v.Global.bActiveCreateNewInvParts.Set(False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Close("NewInv","vUMPL")
		
	f.Data.DataView.Create("NewInv","vNP",22,"PartLocExisted = 'No' or PartParentLocExisted = 'No'","")
	f.Intrinsic.Control.If(v.DataView.NewInv!vNP.RowCount,=,0)
		f.Data.DataView.Close("NewInv","vNP")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("No part to create.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		v.Global.bActiveCreateNewInvParts.Set(False)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	gui.NewInvPart.lblResult.Caption("Please wait...")
	gui.NewInvPart.lblResult.Visible(True)
	
	f.Intrinsic.Control.For(v.Local.iCnt,v.DataView.NewInv!vNP.RowCount--,0,-1)
	
		v.Local.sPart.Set(v.DataView.NewInv!vNP(v.local.iCnt).Part!FieldValString)
		v.Local.sUM.Set(v.DataView.NewInv!vNP(v.local.iCnt).UM!FieldValString)
		v.Local.sDescr.Set(v.DataView.NewInv!vNP(v.local.iCnt).Description!FieldValString)
		
		v.Local.sPL.Set(v.DataView.NewInv!vNP(v.local.iCnt).PL!FieldValString)
		v.Local.sSource.Set(v.DataView.NewInv!vNP(v.local.iCnt).Source_Code!FieldValString)
		v.Local.sAlt1.Set(v.DataView.NewInv!vNP(v.local.iCnt).Description_2!FieldValString)
		v.Local.sAlt2.Set(v.DataView.NewInv!vNP(v.local.iCnt).Description_3!FieldValString)
		v.Local.sPrice.Set("0")
		v.Local.sCost.Set(v.DataView.NewInv!vNP(v.local.iCnt).Cost!FieldValString)

		f.Intrinsic.Control.If(v.DataView.NewInv!vNP(v.local.iCnt).ParentPartID!FieldValTrim,=,v.DataView.NewInv!vNP(v.local.iCnt).PartID!FieldValTrim)
			v.Local.sLocation.Set(v.DataView.NewInv!vNP(v.local.iCnt).ParentPartID!FieldValString)
			F.Global.Inventory.CreatePart(v.Local.sPart,v.Local.sUM,v.Local.sDescr,v.Local.sLocation,v.Local.sPL,v.Local.sSource,v.Local.sAlt1,v.Local.sAlt2,v.Local.sPrice, "4986")
			v.Local.sHold.Set(v.Local.sPart.Trim)
			f.Intrinsic.String.Build("Trim(Part) = '{0}' and Trim(Location) = '{1}'",v.Local.sHold.PSQLFriendly,v.Local.sLocation,v.Local.sFilter)
			F.Data.DataView.Create("Material","vFindMaterial",22,v.Local.sFilter,"")
			f.Intrinsic.Control.If(v.DataView.Material!vFindMaterial.RowCount,=,0)
				f.Data.DataTable.AddRow("MATERIAL","PART",V.Local.sPart,"Location",v.Local.sLocation,"DESCRIPTION",v.Local.sDescr,"Sort_Code","","UM",v.Local.sUM,"PL",v.Local.sPL,"DESCRIPTION_2",v.Local.sAlt1,"DESCRIPTION_3",v.Local.sAlt2,"SOURCE_CODE",v.Local.sSource,"Source",v.Dictionary.Source![v.Local.sSource],"COST",v.Local.sCost)			
			f.Intrinsic.Control.EndIf
			f.Data.DataView.Close("Material","vFindMaterial")
			f.Data.DataView.SetValue("NewInv","vNP",v.Local.iCnt,"PartLocExisted","Created","PartParentLocExisted","Created")			
			
		f.Intrinsic.Control.Else
			'Self
			f.Intrinsic.Control.If(v.DataView.NewInv!vNP(v.local.iCnt).PartLocExisted!FieldValTrim,=,"No")
				v.Local.sLocation.Set(v.DataView.NewInv!vNP(v.local.iCnt).PartID!FieldValString)
				F.Global.Inventory.CreatePart(v.Local.sPart,v.Local.sUM,v.Local.sDescr,v.Local.sLocation,v.Local.sPL,v.Local.sSource,v.Local.sAlt1,v.Local.sAlt2,v.Local.sPrice, "4986")
				v.Local.sHold.Set(v.Local.sPart.Trim)
				f.Intrinsic.String.Build("Trim(Part) = '{0}' and Trim(Location) = '{1}'",v.Local.sHold.PSQLFriendly,v.Local.sLocation,v.Local.sFilter)
				F.Data.DataView.Create("Material","vFindMaterial",22,v.Local.sFilter,"")
				f.Intrinsic.Control.If(v.DataView.Material!vFindMaterial.RowCount,=,0)
					f.Data.DataTable.AddRow("MATERIAL","PART",V.Local.sPart,"Location",v.Local.sLocation,"DESCRIPTION",v.Local.sDescr,"Sort_Code","","UM",v.Local.sUM,"PL",v.Local.sPL,"DESCRIPTION_2",v.Local.sAlt1,"DESCRIPTION_3",v.Local.sAlt2,"SOURCE_CODE",v.Local.sSource,"Source",v.Dictionary.Source![v.Local.sSource],"COST",v.Local.sCost)			
				f.Intrinsic.Control.EndIf
				f.Data.DataView.Close("Material","vFindMaterial")
				f.Data.DataView.SetValue("NewInv","vNP",v.Local.iCnt,"PartLocExisted","Created")
			f.Intrinsic.Control.EndIf
	
			F.Intrinsic.Control.If(v.DataView.NewInv!vNP.RowCount--,>=,v.Local.iCnt)			
			
				'Parent
				f.Intrinsic.Control.If(v.DataView.NewInv!vNP(v.local.iCnt).PartParentLocExisted!FieldValTrim,=,"No")
					v.Local.sLocation.Set(v.DataView.NewInv!vNP(v.local.iCnt).ParentPartID!FieldValString)
					F.Global.Inventory.CreatePart(v.Local.sPart,v.Local.sUM,v.Local.sDescr,v.Local.sLocation,v.Local.sPL,v.Local.sSource,v.Local.sAlt1,v.Local.sAlt2,v.Local.sPrice, "4986")
					v.Local.sHold.Set(v.Local.sPart.Trim)
					f.Intrinsic.String.Build("Trim(Part) = '{0}' and Trim(Location) = '{1}'",v.Local.sHold.PSQLFriendly,v.Local.sLocation,v.Local.sFilter)
					F.Data.DataView.Create("Material","vFindMaterial",22,v.Local.sFilter,"")
					f.Intrinsic.Control.If(v.DataView.Material!vFindMaterial.RowCount,=,0)
						f.Data.DataTable.AddRow("MATERIAL","PART",V.Local.sPart,"Location",v.Local.sLocation,"DESCRIPTION",v.Local.sDescr,"Sort_Code","","UM",v.Local.sUM,"PL",v.Local.sPL,"DESCRIPTION_2",v.Local.sAlt1,"DESCRIPTION_3",v.Local.sAlt2,"SOURCE_CODE",v.Local.sSource,"Source",v.Dictionary.Source![v.Local.sSource],"COST",v.Local.sCost)			
					f.Intrinsic.Control.EndIf
					f.Data.DataView.Close("Material","vFindMaterial")
					f.Data.DataView.SetValue("NewInv","vNP",v.Local.iCnt,"PartParentLocExisted","Created")			
				f.Intrinsic.Control.EndIf					
			
			F.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.Next(v.Local.iCnt)
	
	f.Data.DataView.Close("NewInv","vNP")
	gui.NewInvPart.lblResult.Visible(False)
	v.Global.bActiveCreateNewInvParts.Set(False)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdCreateNewInvParts_Click.End

Program.Sub.cmdCreateMfgPartsForBomNode_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.iX.Declare
	v.Local.iY.Declare
	v.Local.sPartList.Declare
	v.Local.sPartList2.Declare
	v.Local.sSQL.Declare
	v.Local.fLead.Declare

	'Prevent double cycle
	f.Intrinsic.Control.IF(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	

	'Prevent double click
	f.Intrinsic.Control.IF(v.Global.bActiveCreateParts)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	v.Global.bActiveCreateParts.Set(True)
	
	f.Intrinsic.Control.If(v.Global.bNewPartFirstLoad)
		f.Intrinsic.Math.Add(v.Screen.Form!frameRtrHead.Height,3000,v.Local.iY)
		v.Local.iX.Set(0)		
		f.Intrinsic.Control.If(v.Screen.Form!frameSource.Visible,=,True)
			f.Intrinsic.Math.Add(v.Screen.Form!frameSource.Width,v.Local.iX,v.Local.iX)
		f.Intrinsic.Control.EndIf	
		gui.NewInvPart..Position(v.Local.iX,v.Local.iY)
		v.Global.bNewPartFirstLoad.Set(False)
	f.Intrinsic.Control.EndIf	

	'Loop through the Bom tree
	f.Data.DataView.Create("Bom","vMfg",22,"(Source_Code = 'F' or Source_Code = 'M') and Trim(BParent) <> Trim(Part)","")
	f.Intrinsic.Control.If(v.DataTable.NewInv.Exists)
		f.Data.DataTable.Close("NewInv")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.ToDataTableDistinct("Bom","vMfg","NewInv","CH_Index*!*BParent*!*Part*!*Description*!*Description_2*!*Description_3*!*UM*!*PL*!*Source_Code*!*Lead*!*Cost*!*PartID",True)
	f.Data.DataView.Close("Bom","vMfg")
	
	f.Intrinsic.Control.If(v.DataTable.BOM.RowCount,>,0)
		v.Local.fLead.Set(v.Datatable.Bom(0).Lead!FieldValString)
		f.Data.DataTable.AddRow("NewInv","CH_Index",v.Datatable.Bom(0).CH_Index!FieldValString,"BParent",v.Datatable.Bom(0).BParent!FieldValString,"Part",v.Datatable.Bom(0).Part!FieldValString,"Description",v.Datatable.Bom(0).Description!FieldValString,"Description_2",v.Datatable.Bom(0).Description_2!FieldValString,"Description_3",v.Datatable.Bom(0).Description_3!FieldValString,"UM",v.Datatable.Bom(0).UM!FieldValString,"PL",v.Datatable.Bom(0).PL!FieldValString,"Source_Code",v.Datatable.Bom(0).Source_Code!FieldValString,"Lead",v.Local.fLead,"Cost",v.Datatable.Bom(0).Cost!FieldValString,"PartID",v.Datatable.Bom(0).PartID!FieldValString)
		f.Data.DataTable.MoveRow("NewInv",v.DataTable.NewInv.RowCount--,0)
		f.Intrinsic.Control.If(v.DataTable.NewInv(0).Part!FieldValTrim,=,"")
			f.Data.DataTable.SetValue("NewInv",0,"Part",v.DataTable.NewInv(0).BParent!FieldValString)
		f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.AcceptChanges("NewInv")
	
	f.Data.DataTable.AddColumn("NewInv","ParentPartID","String","")
	f.Data.DataTable.AddExpressionColumn("NewInv","BParentTrim","String","Trim([BParent])")
	f.Data.DataTable.AddExpressionColumn("NewInv","PartTrim","String","Trim([Part])")
	
	'PartList1
	f.Data.DataView.Create("NewInv","vLoc",22,"","")
	f.Data.DataView.ToString("NewInv","vLoc","Part","","#@$",v.Local.sPartList)
	f.Intrinsic.String.Replace(v.Local.sPartList,"'","''",v.Local.sPartList)
	f.Intrinsic.String.Replace(v.Local.sPartList,"#@$","','",v.Local.sPartList)
	'PartList2
	f.Data.DataView.ToString("NewInv","vLoc","BParent","","#@$",v.Local.sPartList2)	
	f.Intrinsic.String.Replace(v.Local.sPartList2,"'","''",v.Local.sPartList2)
	f.Intrinsic.String.Replace(v.Local.sPartList2,"#@$","','",v.Local.sPartList2)
	
	f.Intrinsic.String.Build("{0}','{1}",v.Local.sPartList,v.Local.sPartList2,v.Local.sPartList)	
	f.Data.DataView.Close("NewInv","vLoc")
	
	f.Intrinsic.String.Build("Select rtrim(Router) as Router,rtrim(Part_Customer) as PartID from v_Router_Header where Router in ('{0}')",v.Local.sPartList,v.Local.sSQL)
	f.Data.Dictionary.CreateFromSQL("dictPartIDNewPart","conx",v.Local.sSQL)
	f.Data.Dictionary.SetDefaultReturn("dictPartIDNewPart","")
	f.Data.DataTable.FillFromDictionary("NewInv","dictPartIDNewPart","PartTrim","PartID")
	f.Data.DataTable.FillFromDictionary("NewInv","dictPartIDNewPart","BParentTrim","ParentPartID")
	f.Data.Dictionary.Close("dictPartIDNewPart")
	
	f.Data.DataTable.AddExpressionColumn("NewInv","PartLoc","String","Trim([Part]) + Trim([PartID])")
	f.Data.DataTable.AddExpressionColumn("NewInv","PartParentLoc","String","Trim([Part]) + Trim([ParentPartID])")
	f.Data.DataTable.AddColumn("NewInv","PartLocExisted","String","No")
	f.Data.DataTable.AddColumn("NewInv","PartParentLocExisted","String","No")
	
	f.Intrinsic.String.Build("Select rtrim(Part) + rtrim(Location) as PartLoc,'Yes' as Existed from Inventory_MSTR where Part in ('{0}')",v.Local.sPartList,v.Local.sSQL)
	f.Data.Dictionary.CreateFromSQL("dictPartLoc","conx",v.Local.sSQL)
	f.Data.Dictionary.SetDefaultReturn("dictPartLoc","No")
	f.Data.DataTable.FillFromDictionary("NewInv","dictPartLoc","PartLoc","PartLocExisted")
	f.Data.DataTable.FillFromDictionary("NewInv","dictPartLoc","PartParentLoc","PartParentLocExisted")
	f.Data.Dictionary.Close("dictPartLoc")	
	
	gui.NewInvPart.gsNewInvPart.AddGridviewFromDatatable("gvNewInv","NewInv")
	f.Intrinsic.Control.CallSub(Format_gvNewInv)	
	gui.NewInvPart.gsNewInvPart.MainView("gvNewInv")

	gui.NewInvPart..Visible(True)
	v.Global.bActiveCreateParts.Set(False)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdCreateMfgPartsForBomNode_Click.End

Program.Sub.Format_gvNewInv.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)	
		
	gui.NewInvPart.gsNewInvPart.SetGridviewProperty("gvNewInv","OptionsViewShowAutoFilterRow",True)
	gui.NewInvPart.gsNewInvPart.SetGridviewProperty("gvNewInv","OptionsFindAlwaysVisible",True)
	gui.NewInvPart.gsNewInvPart.SetGridViewProperty("gvNewInv","AllowSort",False)
	gui.NewInvPart.gsNewInvPart.SetGridviewProperty("gvNewInv","AllowColumnResizing",True)
	gui.NewInvPart.gsNewInvPart.SetGridviewProperty("gvNewInv","OptionsViewColumnAutoWidth",False)	
	GUI.NewInvPart.gsNewInvPart.SetGridViewProperty("gvNewInv","OptionsSelectionEnableAppearanceFocusedRow",False)
	GUI.NewInvPart.gsNewInvPart.SetGridViewProperty("gvNewInv","ColumnPanelRowHeight","35")
		
	'HeaderWordWrap	
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","CH_index","HeaderWordWrap","wrap")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","BParent","HeaderWordWrap","wrap")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Part","HeaderWordWrap","wrap")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description","HeaderWordWrap","wrap")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description_2","HeaderWordWrap","wrap")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description_3","HeaderWordWrap","wrap")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","UM","HeaderWordWrap","wrap")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PL","HeaderWordWrap","wrap")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Source_Code","HeaderWordWrap","wrap")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Lead","HeaderWordWrap","wrap")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Cost","HeaderWordWrap","wrap")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartID","HeaderWordWrap","wrap")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","ParentPartID","HeaderWordWrap","wrap")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartLocExisted","HeaderWordWrap","wrap")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartParentLocExisted","HeaderWordWrap","wrap")
	
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","CH_index","HeaderVAlignment","top")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","BParent","HeaderVAlignment","top")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Part","HeaderVAlignment","top")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description","HeaderVAlignment","top")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description_2","HeaderVAlignment","top")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description_3","HeaderVAlignment","top")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","UM","HeaderVAlignment","top")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PL","HeaderVAlignment","top")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Source_Code","HeaderVAlignment","top")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Lead","HeaderVAlignment","top")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Cost","HeaderVAlignment","top")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartID","HeaderVAlignment","top")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","ParentPartID","HeaderVAlignment","top")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartLocExisted","HeaderVAlignment","top")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartParentLocExisted","HeaderVAlignment","top")	
	'Visible Index
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","CH_index","VisibleIndex",0)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","BParent","VisibleIndex",1)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Part","VisibleIndex",2)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description","VisibleIndex",3)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description_2","VisibleIndex",4)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description_3","VisibleIndex",5)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","UM","VisibleIndex",6)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PL","VisibleIndex",7)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Source_Code","VisibleIndex",8)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Lead","VisibleIndex",9)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Cost","VisibleIndex",10)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartID","VisibleIndex",11)	
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartLocExisted","VisibleIndex",12)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","ParentPartID","VisibleIndex",13)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartParentLocExisted","VisibleIndex",14)	
	
	'headerfontbold	
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","CH_index","HeaderFontBold",True)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","BParent","HeaderFontBold",True)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Part","HeaderFontBold",True)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description","HeaderFontBold",True)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description_2","HeaderFontBold",True)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description_3","HeaderFontBold",True)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","UM","HeaderFontBold",True)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PL","HeaderFontBold",True)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Source_Code","HeaderFontBold",True)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Lead","HeaderFontBold",True)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Cost","HeaderFontBold",True)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartID","HeaderFontBold",True)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","ParentPartID","HeaderFontBold",True)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartLocExisted","HeaderFontBold",True)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartParentLocExisted","HeaderFontBold",True)	
	
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","BParent","Visible",False)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartTrim","Visible",False)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","BParentTrim","Visible",False)	
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description_2","Visible",False)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description_3","Visible",False)		
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartTrim","AllowShowHide",False)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","BParentTrim","AllowShowHide",False)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartLoc","Visible",False)		
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartLoc","AllowShowHide",False)	
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartParentLoc","Visible",False)		
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartParentLoc","AllowShowHide",False)		
	
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","UM","HeaderHAlignment","center")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PL","HeaderHAlignment","center")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Source_Code","HeaderHAlignment","center")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Lead","HeaderHAlignment","far")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Cost","HeaderHAlignment","far")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartID","HeaderHAlignment","center")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","ParentPartID","HeaderHAlignment","center")	
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartLocExisted","HeaderHAlignment","center")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartParentLocExisted","HeaderHAlignment","center")
	
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","UM","CellHAlignment","center")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PL","CellHAlignment","center")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Source_Code","CellHAlignment","center")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Lead","CellHAlignment","far")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartID","CellHAlignment","center")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","ParentPartID","CellHAlignment","center")	
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartLocExisted","CellHAlignment","center")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartParentLocExisted","CellHAlignment","center")

	'column width
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","CH_Index","MinWidth",50)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","BParent","MinWidth",120)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Part","MinWidth",120)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description","MinWidth",120)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description_2","MinWidth",50)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description_3","MinWidth",50)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","UM","MinWidth",30)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PL","MinWidth",30)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Source_Code","MinWidth",30)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Lead","MinWidth",30)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Cost","MinWidth",45)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartID","MinWidth",30)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","ParentPartID","MinWidth",30)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartLocExisted","MinWidth",40)
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartParentLocExisted","MinWidth",40)
	
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","CH_Index","Caption","Level")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","BParent","Caption","Parent")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Part","Caption","Part")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description","Caption","Description")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description_2","Caption","Alt Descr 1")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Description_3","Caption","Alt Descr 2")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","UM","Caption","UM")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PL","Caption","PL")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Source_Code","Caption","Source")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Lead","Caption","Lead")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","Cost","Caption","Cost")	
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartID","Caption","Loc")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","ParentPartID","Caption","Parent Loc")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartLocExisted","Caption","Self Loc Existed")
	gui.NewInvPart.gsNewInvPart.SetColumnProperty("gvNewInv","PartParentLocExisted","Caption","Parent Loc Existed")
	
	gui.NewInvPart.gsNewInvPart.AddStyleFormatCondition("gvNewInv","PartLocExisted","Yes","Equal","Yes")
	gui.NewInvPart.gsNewInvPart.SetStyleFormatConditionProperty("gvNewInv","PartLocExisted","Yes","ForeColor","Blue")	
	gui.NewInvPart.gsNewInvPart.AddStyleFormatCondition("gvNewInv","PartLocExisted","No","Equal","No")
	gui.NewInvPart.gsNewInvPart.SetStyleFormatConditionProperty("gvNewInv","PartLocExisted","No","ForeColor","Red")
	
	gui.NewInvPart.gsNewInvPart.AddStyleFormatCondition("gvNewInv","PartParentLocExisted","Yes","Equal","Yes")
	gui.NewInvPart.gsNewInvPart.SetStyleFormatConditionProperty("gvNewInv","PartParentLocExisted","Yes","ForeColor","Blue")	
	gui.NewInvPart.gsNewInvPart.AddStyleFormatCondition("gvNewInv","PartParentLocExisted","No","Equal","No")
	gui.NewInvPart.gsNewInvPart.SetStyleFormatConditionProperty("gvNewInv","PartParentLocExisted","No","ForeColor","Red")	

f.Intrinsic.Control.catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry		
Program.Sub.Format_gvNewInv.End

Program.Sub.Get_Location_Input.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSQL.Declare
	v.Local.sLocList.Declare
	v.Local.sHold.Declare
	v.Local.sDefaultLoc.Declare
	v.Local.sRet.Declare
	v.Local.bValid.Declare
	v.Local.sFilter.Declare
	v.Local.sLoc.Declare
	v.Local.bCancel.Declare

	f.Intrinsic.Control.If(v.Global.bLoc)
		f.Intrinsic.Control.If(v.Global.bLocNoBlank)			
			f.Intrinsic.Control.If(v.DataTable.LocsInput.Exists,=,False)
				f.Data.DataTable.CreateFromSQL("LocsInput","conx","Select Location from V_Locations where Location <> '' Order by Location",True)
			f.Intrinsic.Control.Endif	
		f.Intrinsic.Control.Else	
			f.Intrinsic.Control.If(v.DataTable.LocsInput.Exists,=,False)
				f.Data.DataTable.CreateFromSQL("LocsInput","conx","Select Location from V_Locations where rtrim(Location) <> '' Order by Location",True)
				f.Data.Datatable.AddRow("LocsInput","Location","")
			f.Intrinsic.Control.Endif			
		f.Intrinsic.Control.EndIf
		
		f.Data.DataView.Create("LocsInput","vLocs")
		f.Data.DataView.ToString("LocsInput","vLocs","Location","",", ",v.Local.sLocList)
		f.Data.DataView.Close("LocsInput","vLocs")
		
		f.Intrinsic.String.Build("Please specify Location: {0}",v.Local.sLocList,v.Local.sHold)
		
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Inputbox("Location Input",v.Local.sHold,"",v.Local.sRet)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)	
		
		f.Intrinsic.Control.If(v.Local.sRet.IsCancel)
			v.Local.bValid.Set(False)
			v.Local.bCancel.Set(True)
		f.Intrinsic.Control.Else
			f.Intrinsic.String.Build("Trim(Location) = '{0}'",v.Local.sRet.Trim,v.Local.sFilter)
			f.Data.DataTable.Select("LocsInput",v.Local.sFilter,v.Local.sHold)
			f.Intrinsic.Control.If(v.Local.sHold,=,"***NORETURN***")
				v.Local.bValid.Set(False)
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("Invalid Location","Location Input")
				f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)					
			f.Intrinsic.Control.Else
				v.Local.sLoc.Set(v.Local.sRet.Trim)
				v.Local.sLoc.Set(v.Local.sLoc.left2)
				v.Local.bValid.Set(True)
			f.Intrinsic.Control.EndIf			
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Else
		v.Local.sLoc.Set("")
		v.Local.bValid.Set(True)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Variable.AddRV("bCancel",v.Local.bCancel)
	f.Intrinsic.Variable.AddRV("bValid",v.Local.bValid)
	f.Intrinsic.Variable.AddRV("sLoc",v.Local.sLoc.UCase)
			
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry			
Program.Sub.Get_Location_Input.End

Program.Sub.Default_Cost_Quantity.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sHold.Declare
	
	f.Intrinsic.Control.CallSub(Build_Mask)
	f.Intrinsic.String.Format("0",v.Args.sMaskCost,v.Local.sHold)
	gui.NonInv.txtCost.Text(v.Local.sHold)	
	f.Intrinsic.String.Format("1",v.Args.sMaskQty,v.Local.sHold)
	gui.NonInv.txtQty.Text(v.Local.sHold)	
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.Default_Cost_Quantity.End

Program.Sub.Visible_Cost_Qty.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	gui.NonInv.txtCost.Visible(v.Args.bVisible)
	gui.NonInv.txtQty.Visible(v.Args.bVisible)
	gui.NonInv.lblCost.Visible(v.Args.bVisible)
	gui.NonInv.lblQuantity.Visible(v.Args.bVisible)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Visible_Cost_Qty.End

Program.Sub.picPowderCoating_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.iCnt.Declare	
	v.Local.fTotal.Declare	
	v.Local.sRow.Declare
	v.Local.sSelectedSeq.Declare	

	gui.Form.picPowderCoating.Enabled(False)

	'Prevent double click
	f.Intrinsic.Control.CallSub(Validate_If_Grid_Ready)
	f.Intrinsic.Control.If(v.Args.bGridReady.Not)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)	
		gui.Form.picPowderCoating.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.IF(V.DataTable.CHILD.RowCount,=,0)
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No Router header or No row selected.","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Form.picPowderCoating.Enabled(True)
		f.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
		
	gui.Powder.ddlPowderSelectedSeq.ClearItems
	
	'Generate next Router Seq and Bom Sequence
	F.Intrinsic.Control.If(V.DataTable.CHILD.RowCount,=,1)
		
		gui.Powder.ddlPowderSelectedSeq.Text("")
		
	f.Intrinsic.Control.ElseIf(v.DataTable.CHILD.RowCount,>,1)	
		gui.Form.GGC_Bom.GetSelectedRows("GV_Child",v.Local.sRow)
		f.Intrinsic.Control.If(v.Local.sRow,=,"")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
			f.Intrinsic.UI.Msgbox("Please select a row from the Router grid.","Attention")
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
			gui.Form.picPowderCoating.Enabled(True)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		f.Intrinsic.String.Split(v.Local.sRow,"*!*",v.Local.sRow)
		v.Local.sRow.Set(v.Local.sRow(0))
		v.Local.sSelectedSeq.Set(v.DataTable.Child(v.Local.sRow).RTR_Seq!FieldValString)	
		
		F.Data.DataView.Create("CHILD","v_Seq",22,"RTR_SEQ > '000000'","RTR_SEQ Asc")
		f.Data.DataView.ToDataTableDistinct("child","v_Seq","SeqList","RTR_Seq",True)
		f.Data.DataTable.AddExpressionColumn("SeqList","RTR_Seq2","String","RTR_Seq")
		f.Data.Dictionary.CreateFromDataTable("dSeqList","SeqList","RTR_Seq","RTR_Seq2")
		f.Data.Dictionary.SetDefaultReturn("dSeqList","")
		
		gui.Powder.ddlPowderSelectedSeq.AddItems("DICTIONARY","dSeqList")
		gui.Powder.ddlPowderSelectedSeq.Text(v.Local.sSelectedSeq)
		
		f.Data.Dictionary.Close("dSeqList")
		f.Data.DataTable.Close("SeqList")		
		f.Data.DataView.Close("CHILD","v_Seq")
			
	F.Intrinsic.Control.EndIf
	
	'set the values to the form before we open it
	f.Intrinsic.Control.BlockEvents
	gui.Powder.txtPowderMaterial.Text("")
	gui.Powder.ddlPowderLoc.ListIndex(0)
	gui.Powder.txtDescription.Text("")
	gui.Powder.txtUM.Text("")
	gui.Powder.txtPL.Text("")
	gui.Powder.ddlSource.ListIndex(0)
	f.Intrinsic.Control.UnBlockEvents
	
	'Get Series of cutlist selected and build filter
	f.Intrinsic.Control.If(v.DataView.CHILD$CUTLIST!vPSerie.Exists)
		f.Data.DataView.Close("CHILD$CUTLIST","vPSerie")
	f.Intrinsic.Control.EndIf
	f.Data.DataView.Create("CHILD$CUTLIST","vPSerie",22,"SELECT_CUTLIST = 1","")
	
	f.Data.DataTable.Compute("CHILD$CUTLIST","Sum(USQL_2ND_UM_UNITS)","SELECT_CUTLIST = 1",v.Local.sRet)
	v.Local.fTotal.Set(v.Local.sRet)
	
	gui.Powder.txtPowderQty.Text(v.Local.sRet)
	
	'If first load
	f.Intrinsic.Control.If(v.Global.bPowderCoatingFirstLoad)
		f.Intrinsic.Control.For(v.Local.iCnt,0,95,5)
			f.Intrinsic.Math.Add(v.Local.iCnt,5,v.Local.iCnt)
			gui.Powder.cboPercentage.AddItem(v.Local.iCnt)			
		f.Intrinsic.Control.Next(v.Local.iCnt)		
		gui.Powder.cboPercentage.Text(100)
		f.Intrinsic.Control.CallSub(cboPercentage_LostFocus)
		f.Intrinsic.Control.CallSub("Bind_Powder_Material_List")
		
		gui.Powder.ddlSource.AddItem("PUR-STOCK")
		gui.Powder.ddlSource.AddItem("PUR-JOB")
		gui.Powder.ddlSource.AddItem("MFG-STOCK")
		gui.Powder.ddlSource.AddItem("MFG-JOB")	
		
	f.Intrinsic.Control.EndIf
	v.Global.bPowderCoatingFirstLoad.Set(False)
	
	'Insert frame
	f.Intrinsic.Control.If(v.Screen.Form!optInsertAbove.Value,=,True)
		f.Intrinsic.Control.CallSub(optPowderAbove_Click)
	f.Intrinsic.Control.ElseIf(v.Screen.Form!optInsertBelow.Value,=,True)
		f.Intrinsic.Control.CallSub(optPowderBelow_Click)
	f.Intrinsic.Control.ElseIf(v.Screen.Form!optInsertManual.Value,=,True)
		f.Intrinsic.Control.CallSub(optPowderManual_Click)
	f.Intrinsic.Control.EndIf
	
	gui.Powder..Visible(True)
	gui.Powder.txtPowderMaterial.SetFocus	

	gui.Form.picPowderCoating.Enabled(True)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.picPowderCoating_Click.End

Program.Sub.Powder_UnLoad.Start
gui.Powder..Visible(False)
Program.Sub.Powder_UnLoad.End

Program.Sub.Bind_Powder_Material_List.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
'COST
	f.Intrinsic.Control.If(v.DataTable.PowderMatList.Exists)
		f.Data.DataTable.Close("PowderMatList")
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("PowderMatList","conx","Select i.Part,i.Location as Loc,i.Description,i.UM_Inventory as UM,i.Product_Line as PL,i2.Code_Source as Source,Case when i.amt_alt_cost > 0 Then i.amt_alt_cost Else IsNull(c.cost,0) End  as COST from Inventory_Mstr i left join Inventory_Cost c on i.Part = c.Part and i.Location = c.Locn left join Inventory_mst2 i2 on i.Part = i2.Part and i.Location = i2.Location where i.Product_Line = 'PC'",True)
	f.Data.DataTable.AddColumn("PowderMatList","SelectRow","String","Select")
	gui.Powder.gsPowderMaterialList.AddGridviewFromDatatable("gvPowderMatList","PowderMatList")
	
	gui.Powder.gsPowderMaterialList.SetGridviewProperty("gvPowderMatList","OptionsViewShowAutoFilterRow",True)
	gui.Powder.gsPowderMaterialList.SetGridviewProperty("gvPowderMatList","AllowColumnResizing",True)
	gui.Powder.gsPowderMaterialList.SetGridviewProperty("gvPowderMatList","OptionsViewColumnAutoWidth",False)	
	
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","SelectRow","AllowEdit",False)
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","SelectRow","ReadOnly",True)
	
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Part","MinWidth","140")
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Loc","Width","40")
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Description","MinWidth","190")
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","UM","Width","40")
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","PL","Width","40")
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Source","Width","40")
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Cost","MinWidth","85")
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","SelectRow","MinWidth","40")	
	
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Part","Caption","Part")
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Loc","Caption","Loc")
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Description","Caption","Description")
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","UM","Caption","UM")
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","PL","Caption","PL")
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Source","Caption","Source")
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Cost","Caption","Cost")
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","SelectRow","Caption","Select")
	
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Part","HeaderFontBold",True)
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Description","HeaderFontBold",True)
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Cost","HeaderFontBold",True)
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","SelectRow","HeaderFontBold",True)	
	
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Part","HeaderFontBold",True)
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Loc","HeaderFontBold",True)
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Description","HeaderFontBold",True)
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","UM","HeaderFontBold",True)
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","PL","HeaderFontBold",True)
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Source","HeaderFontBold",True)
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Cost","HeaderFontBold",True)
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","SelectRow","HeaderFontBold",True)	
	
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","Cost","HeaderHAlignment","far")
	gui.Powder.gsPowderMaterialList.SetColumnProperty("gvPowderMatList","SelectRow","HeaderHAlignment","center")
	
	gui.Powder.gsPowderMaterialList.ColumnEdit("gvPowderMatList","SelectRow","editorbutton","Select")
	gui.Powder.gsPowderMaterialList.MainView("gvPowderMatList")
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.Bind_Powder_Material_List.End

Program.Sub.gsPowderMaterialList_RowCellClick.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sHold.Declare
	v.Local.sRev.Declare
	v.Local.sSource.Declare
	v.Local.sUM.Declare

	f.Intrinsic.Control.If(v.Args.Column.UCase,=,"SELECTROW")
		v.Local.sHold.Set(v.DataTable.PowderMatList(V.Args.RowIndex).Part!FieldValString)
		f.Intrinsic.String.Mid(v.Local.sHold,18,3,v.Local.sRev)
		GUI.Powder.txtPowderMaterial.Text(v.Local.sHold.left17)
		gui.Powder.txtRev.Text(v.Local.sRev)
		gui.Powder.ddlPowderLoc.Text(v.DataTable.PowderMatList(V.Args.RowIndex).Loc!FieldValString)
		gui.Powder.txtDescription.Text(v.DataTable.PowderMatList(V.Args.RowIndex).Description!FieldValString)
		v.Local.sUM.Set(v.DataTable.PowderMatList(V.Args.RowIndex).UM!FieldValTrim)
		gui.Powder.txtUM.Text(v.Local.sUM.left2)
		gui.Powder.txtPL.Text(v.DataTable.PowderMatList(V.Args.RowIndex).PL!FieldValString)
		v.Local.sSource.Set(v.DataTable.PowderMatList(V.Args.RowIndex).Source!FieldValTrim)
		gui.Powder.ddlSource.Text(v.dictionary.Source![v.Local.sSource])		
		gui.Powder.txtPowderCost.Text(v.DataTable.PowderMatList(V.Args.RowIndex).Cost!FieldValString)
		f.Intrinsic.Control.CallSub(txtQtybyPct_LostFocus)
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.gsPowderMaterialList_RowCellClick.End

Program.Sub.cmdBrowsePowderMaterial_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sSource.Declare
	v.Local.sUM.Declare
	
	f.Intrinsic.Control.BlockEvents
	f.Intrinsic.UI.Browser("Material","conx","Select i.Part,i.Location,i.Description,i.UM_Inventory as UM,i.Product_Line as PL,i2.Code_Source as Source,c.Cost from Inventory_Mstr i left join Inventory_Cost c on i.Part = c.Part and i.Location = c.Locn left join Inventory_mst2 i2 on i.Part = i2.Part and i.Location = i2.Location","Part*!*Loc*!*Description*!*UM*!*PL*!*Source*!*Cost","200*!*100*!*500*!*150*!*150*!*150*!*200",V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet.IsCancel,=,False)
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		gui.Powder.txtPowderMaterial.text(V.Local.sRet(0).Trim)
		gui.Powder.ddlPowderLoc.Text(v.Local.sRet(1))
		gui.Powder.txtDescription.text(V.Local.sRet(2).Trim)
		v.Local.sUM.Set(V.Local.sRet(3).Trim)
		gui.Powder.txtUM.text(v.Local.sUM.left2)
		gui.Powder.txtPL.text(V.Local.sRet(4).Trim)
		v.Local.sSource.Set(V.Local.sRet(5).Trim)
		gui.Powder.ddlSource.Text(v.Dictionary.SOURCE![v.Local.sSource])
		gui.Powder.txtPowderCost.text(V.Local.sRet(6).Trim)
	f.Intrinsic.Control.Else
		gui.Powder.txtPowderMaterial.SetFocus
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.UnBlockEvents
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.cmdBrowsePowderMaterial_Click.End

Program.Sub.cboPercentage_LostFocus.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.fQty.Declare
	v.Local.fPercentage.Declare
	v.Local.fHold.Declare
	
	v.Local.fQty.Set(v.Screen.Powder!txtPowderQty.Text.Trim)
	v.Local.fPercentage.Set(v.Screen.Powder!cboPercentage.Text.Trim)
	
	'Qty By Pct
	f.Intrinsic.Math.Mult(v.Local.fQty,v.Local.fPercentage,v.Local.fHold)
	f.Intrinsic.Math.Div(v.Local.fHold,100,v.Local.fHold)
	gui.Powder.txtQtybyPct.Text(v.Local.fHold)
	'Extended
	f.Intrinsic.Control.CallSub(Powder_Extension)	
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cboPercentage_LostFocus.End

Program.Sub.txtQtybyPct_LostFocus.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.fQtyByPct.Declare
	v.Local.fQty.Declare
	v.Local.fPercentage.Declare
	v.Local.fHold.Declare
	
	v.Local.fQtyByPct.Set(v.Screen.Powder!txtQtybyPct.Text.Trim)
	v.Local.fQty.Set(v.Screen.Powder!txtPowderQty.Text.Trim)
	
	f.Intrinsic.Control.If(v.Local.fQtyByPct,=,0)
		gui.Powder.cboPercentage.Text("")
	f.Intrinsic.Control.Else
		'Recalculate Percentage
		f.Intrinsic.Control.If(v.Local.fQty,<>,0)
			f.Intrinsic.Math.Div(v.Local.fQtyByPct,v.Local.fQty,v.Local.fHold)
			f.Intrinsic.Math.Mult(v.Local.fHold,100,v.Local.fHold)
			gui.Powder.cboPercentage.Text(v.Local.fHold)		
		
		f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.EndIf
	'Extended
	f.Intrinsic.Control.CallSub(Powder_Extension)	
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtQtybyPct_LostFocus.End

Program.Sub.txtPowderQty_LostFocus.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.fQty.Declare
	v.Local.fPercentage.Declare
	v.Local.fHold.Declare
	
	v.Local.fQty.Set(v.Screen.Powder!txtPowderQty.Text.Trim)
	v.Local.fPercentage.Set(v.Screen.Powder!cboPercentage.Text.Trim)
	
	'Qty By Pct
	f.Intrinsic.Math.Mult(v.Local.fQty,v.Local.fPercentage,v.Local.fHold)
	f.Intrinsic.Math.Div(v.Local.fHold,100,v.Local.fHold)
	gui.Powder.txtQtybyPct.Text(v.Local.fHold)
	'Extended
	f.Intrinsic.Control.CallSub(Powder_Extension)
	f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtPowderQty_LostFocus.End

Program.Sub.txtPowderCost_LostFocus.Start
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Powder_Extension)
f.Intrinsic.Control.UnBlockEvents
Program.Sub.txtPowderCost_LostFocus.End

Program.Sub.Powder_Extension.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.fQtyByPct.Declare
	v.Local.fCost.Declare
	v.Local.fHold.Declare
	
	v.Local.fQtyByPct.Set(v.Screen.Powder!txtQtybyPct.Text.Trim)
	v.Local.fCost.Set(v.Screen.Powder!txtPowderCost.Text.Trim)
	
	'Extension
	f.Intrinsic.Math.Mult(v.Local.fQtyByPct,v.Local.fCost,v.Local.fHold)
	gui.Powder.txtExtended.Text(v.Local.fHold)

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Powder_Extension.End

Program.Sub.optPowderAbove_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	gui.Form.optInsertAbove.Value(1)
	gui.Form.txtManualSeq.Enabled(False)
	gui.Form.txtManualSeq.BackColor(v.Color.LtGray)
	
	gui.Powder.optPowderAbove.Value(1)
	gui.Powder.txtPowderManualSeq.Enabled(False)
	gui.Powder.txtPowderManualSeq.BackColor(v.Color.LtGray)	

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.optPowderAbove_Click.End

Program.Sub.optPowderBelow_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	gui.Form.optInsertBelow.Value(1)
	gui.Form.txtManualSeq.Enabled(False)
	gui.Form.txtManualSeq.BackColor(v.Color.LtGray)
	
	gui.Powder.optPowderBelow.Value(1)
	gui.Powder.txtPowderManualSeq.Enabled(False)
	gui.Powder.txtPowderManualSeq.BackColor(v.Color.LtGray)	

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.optPowderBelow_Click.End

Program.Sub.optPowderManual_Click.Start
f.Intrinsic.Control.Try	
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)

	gui.Form.optInsertManual.Value(1)
	gui.Form.txtManualSeq.Enabled(True)
	gui.Form.txtManualSeq.BackColor(v.Color.White)
	gui.Form.txtManualSeq.SetFocus
	
	gui.Powder.optPowderManual.Value(1)
	gui.Powder.txtPowderManualSeq.Enabled(True)
	gui.Powder.txtPowderManualSeq.BackColor(v.Color.White)
	gui.Powder.txtPowderManualSeq.SetFocus

f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.optPowderManual_Click.End

Program.Sub.txtPowderManualSeq_LostFocus.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.BlockEvents
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSeq.Declare
	
	f.Intrinsic.Control.If(v.Screen.Powder!txtPowderManualSeq.Text.Trim,<>,"")
		f.Intrinsic.String.LPad(v.Screen.Powder!txtPowderManualSeq.Text.Trim,"0",6,v.Local.sSeq)
		gui.Powder.txtPowderManualSeq.Text(v.Local.sSeq)
		gui.Form.txtManualSeq.Text(v.Local.sSeq)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.UnBlockEvents
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.txtPowderManualSeq_LostFocus.End

Program.Sub.cmdAddPowder_Click.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	V.Local.sPart.Declare
	v.Local.sSource.Declare
	v.Local.sCategory.Declare
	v.Local.iRow.Declare
	V.Local.sParent.Declare
	V.Local.sFilter.Declare	
	v.Local.sHold.Declare
	v.Local.iSerie.Declare

	v.Local.sTargetSeq.Declare
	v.Local.iSeqSort.Declare
	v.Local.sRTR_Seq_ColIndex.Declare	
	v.Local.sSource_Code.Declare
	v.Local.bAboveException.Declare
	v.Local.fCost.Declare
	v.Local.fQty.Declare
	v.Local.sSelectedSeq.Declare
	v.Local.sUM.Declare
	v.Local.sMsg.Declare
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.sConversionFactor.Declare
		
	gui.Powder..Enabled(False)
	
	f.Intrinsic.Control.If(v.Screen.Powder!txtPowderMaterial.text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Part number is blank","Attention")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Powder.txtPowderMaterial.SetFocus
		gui.Powder..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	'made the part has a valid source and category
	f.Intrinsic.Control.If(v.Screen.Powder!ddlSource.text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select source","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Powder.ddlSource.SetFocus
		gui.Powder..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'Validate UM
	f.Intrinsic.Control.If(v.Screen.Powder!txtUM.text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select UM","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Powder.txtUM.SetFocus
		gui.Powder..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	'Validate PL
	f.Intrinsic.Control.If(v.Screen.Powder!txtPL.text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select PL","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Powder.txtPL.SetFocus
		gui.Powder..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'Validate Location
	f.Intrinsic.Control.If(v.Screen.Powder!ddlPowderLoc.text.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		F.Intrinsic.UI.Msgbox("Select Location","Missing Element")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		gui.Powder.ddlPowderLoc.SetFocus
		gui.Powder..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	
	f.Data.Dictionary.ReturnKeyFromValue("SOURCE",v.Screen.Powder!ddlSource.TEXT,False,V.Local.sSource)
	v.Local.sCategory.Set("N")	

			'insert the row where it belongs using RTR_SEQ
			f.Intrinsic.String.GSSPartString(V.Screen.Form!txtFocusParent.text,v.Screen.Form!txtFocusRev.text,v.Local.sParent)
			f.Intrinsic.String.GSSPartString(v.Screen.Powder!txtPowderMaterial.text,v.Screen.Powder!txtRev.text,v.Local.sPart)
			
			'Check if it is insert manually		
			f.Intrinsic.Control.If(v.Screen.Powder!optPowderManual.Value,=,True)
				'Validate the sequence entered by user. If it does not exists in the current router, it is valid. 
				f.Intrinsic.String.LPad(v.Screen.Powder!txtPowderManualSeq.Text.Trim,"0",6,v.Local.sTargetSeq)
				f.Intrinsic.Control.If(v.Local.sTargetSeq,=,"",or,v.Local.sTargetSeq,=,"000000",v.Local.sTargetSeq,>,999999)
					f.Intrinsic.Control.CallSub(Msg3Lines,"Title","Manually Insert Instructions","MainLine","Please enter a valid Material sequence at Manual textbox.","FirstLine","Select the right Material Source Type to insert.","SecondLine","NON-MANUFACTURE Part seq must be in range (0,990000).","ThirdLine","MANUFACTURE Part seq must be in range [990000,999999]")			
					gui.Powder.txtPowderManualSeq.SetFocus
					gui.Powder..Enabled(True)
					f.Intrinsic.Control.ExitSub	
				f.Intrinsic.Control.EndIf
				'Check if target sequence exists
				f.Intrinsic.String.Build("RTR_Seq = '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
				f.Data.DataView.Create("CHILD","vSeqExist",22,v.Local.sFilter,"")
				f.Intrinsic.Control.If(v.DataView.CHILD!vSeqExist.RowCount,>,0)
					f.Data.DataView.Close("CHILD","vSeqExist")
					f.Intrinsic.String.Build("Sequence {0} already exists in the current Router.",v.Local.sTargetSeq,v.Local.sHold)				
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
					F.Intrinsic.UI.Msgbox(v.Local.sHold,"Manually Insert Instructions")
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
					gui.Powder.txtPowderManualSeq.SetFocus	
					gui.Powder..Enabled(True)
					f.Intrinsic.Control.ExitSub				
				f.Intrinsic.Control.EndIf
				f.Data.DataView.Close("CHILD","vSeqExist")	

				'Check Source Code
				f.Intrinsic.Control.If(v.Local.sSource,=,"M",or,v.Local.sSource,=,"F")
					f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,<>,"99")
						f.Intrinsic.Control.CallSub(Msg3Lines,"Title","Manually Insert Instructions","MainLine","Please enter a valid Material sequence at Manual textbox.","FirstLine","Select the right Material Source Type to insert.","SecondLine","NON-MANUFACTURE Part seq must be in range (0,990000).","ThirdLine","MANUFACTURE Part seq must be in range [990000,999999]")	
						gui.Powder.txtPowderManualSeq.SetFocus	
						gui.Powder..Enabled(True)
						f.Intrinsic.Control.ExitSub					
					f.Intrinsic.Control.EndIf	
				f.Intrinsic.Control.Else
					f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,=,"99")
						f.Intrinsic.Control.CallSub(Msg3Lines,"Title","Manually Insert Instructions","MainLine","Please enter a valid Material sequence at Manual textbox.","FirstLine","Select the right Material Source Type to insert.","SecondLine","NON-MANUFACTURE Part seq must be in range (0,990000).","ThirdLine","MANUFACTURE Part seq must be in range [990000,999999]")	
						gui.Powder.txtPowderManualSeq.SetFocus	
						gui.Powder..Enabled(True)
						f.Intrinsic.Control.ExitSub					
					f.Intrinsic.Control.EndIf		
				f.Intrinsic.Control.EndIf
				
				'The material is the same as the Router header
				f.Intrinsic.Control.If(v.Local.sPart.Trim,=,v.Local.sParent.Trim)
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
					f.Intrinsic.UI.Msgbox("The material is the same as the Router header.","Attention")	
					f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
					gui.Powder..Enabled(True)
					f.Intrinsic.Control.ExitSub
				f.Intrinsic.Control.EndIf
				
			'Insert Manual option is not selected, we need user to select a row from Router grid
			f.Intrinsic.Control.Else
				
				'Selected Sequence is blank (there is header and no row inserted yet)
				f.Intrinsic.Control.If(v.Screen.Powder!ddlPowderSelectedSeq.Text.Trim,=,"")
	
					'The material is the same as the Router header
					f.Intrinsic.Control.If(v.Local.sPart.Trim,=,v.Local.sParent.Trim)
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
						f.Intrinsic.UI.Msgbox("The material is the same as the Router header.","Attention")	
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
						gui.Powder..Enabled(True)
						f.Intrinsic.Control.ExitSub
					f.Intrinsic.Control.EndIf
					
					'This case CHILD Rowcount = 1, meaning there is the header and no row for sequence yet
					f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1)
						f.Intrinsic.Control.If(v.Local.sSource,=,"M",or,v.Local.sSource,=,"F")
							V.Local.sTargetSeq.Set("990000")	
						F.Intrinsic.Control.Else
							f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)
						f.Intrinsic.Control.EndIf	
					f.Intrinsic.Control.Else
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
						f.Intrinsic.UI.Msgbox("Selected Seq is blank. This can be only done for empty grid. Please select a sequence to insert above/below","Attention")
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
						gui.Powder..Enabled(True)
						f.Intrinsic.Control.ExitSub					
					f.Intrinsic.Control.EndIf		
				
				'Selected Seq is not blank
				f.Intrinsic.Control.Else
					v.Local.sTargetSeq.Set(v.Screen.Powder!ddlPowderSelectedSeq.Text.Trim)
					
					'The material is the same as the Router header
					f.Intrinsic.Control.If(v.Local.sPart.Trim,=,v.Local.sParent.Trim)
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
						f.Intrinsic.UI.Msgbox("The material is the same as the Router header.","Attention")	
						f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
						gui.Powder..Enabled(True)
						f.Intrinsic.Control.ExitSub
					f.Intrinsic.Control.EndIf
					
					'Normal Seq is selected 
					f.Intrinsic.Control.If(v.Local.sTargetSeq.Left2,<>,"99")
						'If Source code is manufacture part
						f.Intrinsic.Control.If(v.Local.sSource,=,"M",or,v.Local.sSource,=,"F")
							F.Data.DataView.Create("CHILD","v99",22,"RTR_SEQ >= '990000'","")
							'Check if there is a 99XXXX seq exists
							f.Intrinsic.Control.If(v.DataView.CHILD!v99.RowCount,>,0)
								f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
								f.Intrinsic.UI.Msgbox("MFG-PART can only be inserted into 99XXXX Sequence section.","Attention")
								f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
								f.Data.DataView.Close("CHILD","v99")
								gui.Powder..Enabled(True)
								f.Intrinsic.Control.ExitSub	
							f.Intrinsic.Control.Else
								'This is the first 990000 with existing normal Seqs
								V.Local.sTargetSeq.Set("990000")
							f.Intrinsic.Control.EndIf
							f.Data.DataView.Close("CHILD","v99")													
						f.Intrinsic.Control.EndIf					
				
					'99 Seq is selected
					f.Intrinsic.Control.Else	
						'Source code is non manufacture part
						f.Intrinsic.Control.If(v.Local.sSource,<>,"M",and,v.Local.sSource,<>,"F")
							F.Data.DataView.Create("CHILD","vNormal",22,"RTR_SEQ < '990000' and RTR_Seq <> '000000'" ,"")
							'Check if there is a normal Seq exists
							f.Intrinsic.Control.If(v.DataView.CHILD!vNormal.RowCount,>,0)
								f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
								f.Intrinsic.UI.Msgbox("NON-MFG-PART can only be inserted into Normal Sequence section.","Attention")
								f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
								f.Data.DataView.Close("CHILD","vNormal")
								gui.Powder..Enabled(True)
								f.Intrinsic.Control.ExitSub	
							f.Intrinsic.Control.Else
								'This is the first normal seq with existing 99XXXX Seqs
								f.Intrinsic.String.LPad(v.Global.iRSeq,"0",6,v.Local.sTargetSeq)
							f.Intrinsic.Control.EndIf	
							f.Data.DataView.Close("CHILD","vNormal")
						f.Intrinsic.Control.EndIf
					f.Intrinsic.Control.EndIf	
					
				f.Intrinsic.Control.EndIf			
			
			f.Intrinsic.Control.EndIf
					
			'close the form
			'gui.Powder..Visible(False)			
			
			f.Intrinsic.Control.If(v.DataTable.CHILD.RowCount,=,1,or,v.DataTable.CHILD.RowCount,=,2)
				v.Local.bAboveException.Set(True)
			f.Intrinsic.Control.EndIf		
					
			gui.Form.GGC_Bom.SuspendLayout
			f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)
			f.Data.DataTable.AcceptChanges("CHILD")
			
			'now we have the target sequence
			f.Intrinsic.Control.If(v.Screen.Powder!optPowderAbove.Value,=,True)
				v.Local.iSeqSort.Set(-1)
			f.Intrinsic.Control.Else	
				v.Local.iSeqSort.Set(1)
			f.Intrinsic.Control.EndIf	
				
			'Get next Serie
			f.Data.DataTable.Compute("CHILD","Max(Serie)","",v.Local.iSerie)
			f.Intrinsic.Math.Add(v.Local.iSerie,1,v.Local.iSerie)				
			
			'Add Row
			v.Local.fCost.Set(v.Screen.Powder!txtPowderCost.Text.Trim)
			v.Local.fQty.Set(v.Screen.Powder!txtQtybyPct.Text.Trim)
			v.Local.fHold.Declare
			f.Intrinsic.String.Build("Select Consump_Conv from Inventory_Mst3 where Part = '{0}' and Location = '{1}' ",v.Local.sPart,v.Screen.Powder!ddlPowderLoc.Text,v.Local.sSQL)
			f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
			f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
				v.Local.fHold.Set(v.Local.sRet)
				f.Intrinsic.Control.If(v.Local.fHold,<>,0)
					f.Intrinsic.String.Format(v.Local.fHold,"0.000000",v.Local.sConversionFactor)
					f.Intrinsic.Math.Div(v.Local.fQty,v.Local.fHold,v.Local.fQty)
					f.Intrinsic.String.Format(v.Local.fQty,"0.00000000",v.Local.sHold)
					v.Local.fQty.Set(v.Local.sHold)
				f.Intrinsic.Control.Else
					v.Local.sConversionFactor.Set("1")
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.Else
				v.Local.sConversionFactor.Set("1")
			f.Intrinsic.Control.EndIf
			
			v.Local.sUM.Set(v.Screen.Powder!txtUM.text)
			f.Data.DataTable.AddRow("CHILD","BPARENT",v.Local.sParent,"DESCR_BP",V.Screen.Form!txtFocusDescr.text, "RTR_SEQ",v.Local.sTargetSeq, "PART", v.Local.sPart, "DESCRIPTION", v.Screen.Powder!txtDescription.text, "DESCRIPTION_2","", "DESCRIPTION_3","", "UM", v.Local.sUM.left2,"PL",v.Screen.Powder!txtPL.text,"LMO","M","SOURCE_CODE",V.Local.sSource,"SOURCE",v.Screen.Powder!ddlSource.Text.Trim,"Category","NORMAL","CAT_CODE","N","Serie",v.Local.iSerie,"SeqSort",v.Local.iSeqSort,"Cost",v.Local.fCost,"Qty",v.Local.fQty)	
			f.Data.DataTable.AcceptChanges("CHILD")					
			
			f.Intrinsic.Control.If(v.Global.bBindCutList)
				f.Intrinsic.Control.CallSub(Bind_AddedMaterial_Cutlist,"BParent",v.Local.sParent,"Part",v.Local.sPart,"Serie",V.Local.iSerie)
			f.Intrinsic.Control.EndIf
						
			'Determine to resequence
						
			'Insert case:  Non Manufacture part
			f.Intrinsic.Control.If(v.Local.sSource,<>,"M",and,v.Local.sSource,<>,"F")
				'No need to resequence if it is Manual Insert
				F.Intrinsic.Control.If(v.Screen.Powder!optPowderManual.Value,=,False)
					'Insert Below case we will ReseqStartFrom_Normal
					f.Intrinsic.Control.If(v.Screen.Powder!optPowderBelow.Value)
						f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.Local.sTargetSeq)		
					'Insert Above case
					f.Intrinsic.Control.Else
						f.Intrinsic.Control.If(v.Local.bAboveException.Not)		
							F.Intrinsic.String.Build("RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
							f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
							F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
								f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
									f.Intrinsic.Control.CallSub(ReSeqNormals)						
								f.Intrinsic.Control.Else	
									f.Intrinsic.Control.CallSub(ReseqStartFrom_Normal,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
								f.Intrinsic.Control.EndIf					
							f.Intrinsic.Control.Else
								f.Intrinsic.Control.CallSub(ReSeqNormals)
							F.Intrinsic.Control.EndIf
							f.Data.DataView.Close("CHILD","vAbove")		
						
						f.Intrinsic.Control.Else
							f.Intrinsic.Control.CallSub(ReSeqNormals)
						f.Intrinsic.Control.EndIf
			
					f.Intrinsic.Control.EndIf
					
				F.Intrinsic.Control.EndIf			
			
			'Insert case: Manufacture part at 99XXXXs
			f.Intrinsic.Control.Else
	
				'No need to resequence if it is Manual Insert
				F.Intrinsic.Control.If(v.Screen.Powder!optPowderManual.Value,=,False)
					'Insert Below case we will ReSeqStartFrom_99s
					f.Intrinsic.Control.If(v.Screen.Powder!optPowderBelow.Value)
						f.Intrinsic.Control.CallSub(ReSeqStartFrom_99s,"sFromSeq",v.Local.sTargetSeq)		
					'Insert Above case
					f.Intrinsic.Control.Else
						f.Intrinsic.Control.If(v.Local.bAboveException.Not)		
							F.Intrinsic.String.Build("RTR_Seq >= '990000' and  RTR_Seq < '{0}'",v.Local.sTargetSeq,v.Local.sFilter)
							f.Data.DataView.Create("CHILD","vAbove",22,v.Local.sFilter,"RTR_SEQ desc")
							F.Intrinsic.Control.If(V.DataView.CHILD!vAbove.RowCount,>,0)
								f.Intrinsic.Control.If(v.DataView.child!vAbove(0).RTR_Seq!FieldValString,=,"000000")
									f.Intrinsic.Control.CallSub(Reseq99s)						
								f.Intrinsic.Control.Else	
									f.Intrinsic.Control.CallSub(ReSeqStartFrom_99s,"sFromSeq",v.DataView.child!vAbove(0).RTR_Seq!FieldValString)
								f.Intrinsic.Control.EndIf					
							f.Intrinsic.Control.Else
								f.Intrinsic.Control.CallSub(Reseq99s)
							F.Intrinsic.Control.EndIf
							f.Data.DataView.Close("CHILD","vAbove")		
						
						f.Intrinsic.Control.Else
							f.Intrinsic.Control.CallSub(Reseq99s)
						f.Intrinsic.Control.EndIf
			
					f.Intrinsic.Control.EndIf
					
				F.Intrinsic.Control.EndIf			
			
			f.Intrinsic.Control.EndIf
						
			'@holder1
			f.Data.DataTable.AcceptChanges("CHILD")	
			gui.Form.GGC_Bom.ResumeLayout
			
			v.Global.bRouterChanged.Set(True)
	
	f.Data.DataView.SetFilter("Child","V_Child","RTR_SEq <> '000000' AND Part <> '~~~@!@~~~@!@'")
	f.Data.DataView.SetSort("Child","V_Child","RTR_Seq")
	gui.Form.GGC_Bom.MainView("GV_CHILD")
	
	Gui.Form.GGC_Bom.GetColumnIndexByName("GV_CHILD","RTR_SEQ",v.Local.sRTR_Seq_ColIndex)
	gui.Form.GGC_Bom.FocusCell("GV_CHILD",v.DataTable.CHILD.Rowcount--,v.Local.sRTR_Seq_ColIndex)

	'Repopulate Selected Seq List
	F.Data.DataView.Create("CHILD","v_ReSeq",22,"RTR_SEQ > '000000'","RTR_SEQ Asc")
	f.Data.DataView.ToDataTableDistinct("child","v_ReSeq","SeqList","RTR_Seq",True)
	f.Data.DataTable.AddExpressionColumn("SeqList","RTR_Seq2","String","RTR_Seq")
	f.Data.Dictionary.CreateFromDataTable("dSeqList","SeqList","RTR_Seq","RTR_Seq2")
	f.Data.Dictionary.SetDefaultReturn("dSeqList","")
	
	gui.Powder.ddlPowderSelectedSeq.ClearItems()
	gui.Powder.ddlPowderSelectedSeq.AddItems("DICTIONARY","dSeqList")
	gui.Powder.ddlPowderSelectedSeq.Text(v.Local.sSelectedSeq)
	
	f.Data.Dictionary.Close("dSeqList")
	f.Data.DataTable.Close("SeqList")		
	f.Data.DataView.Close("CHILD","v_ReSeq")
	
	gui.Powder.ddlPowderSelectedSeq.Text(v.DataTable.Child(v.DataTable.Child.RowCount--).Rtr_Seq!FieldValString)
	
	f.Intrinsic.String.Build("Part: {0} {1}Consump. Conversion: {2}{1}Quantity added: {3}",v.Local.sPart,v.Ambient.NewLine,v.Local.sConversionFactor,v.Local.fQty,v.Local.sMsg)
	gui.Form..ShowAlert("PowderAdded","Powder Coating Added",v.Local.sMsg,v.Enum.Image!Add_Plain_Black)
	gui.Powder..Enabled(True)
	gui.Powder..AlwaysOnTop(True)
	gui.Powder..AlwaysOnTop(False)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.cmdAddPowder_Click.End

Program.Sub.Get_First_Options.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sHold.Declare

	'Company Options Advanced > Estimate & Quoting > Allow Part Number Change When Creating Quotes from Routers
	f.Global.General.ReadOption("400016",0,False,"0000",v.Global.bAllowPartChgQuote)
	
	'Company Options Advanced > Estimate & Quoting > On Quote Line, Accept Non-Inventory Parts
	f.ODBC.Connection!conx.executeandreturn("select ASCII_FLAG FROM OP_HEADER WHERE ID = '020000'",v.Local.sHold)	
	f.Intrinsic.Control.If(v.Local.sHold.Trim,=,"Y")
		v.Global.bAcceptNonInvQuote.Set(True)
		gui.Form.chkAcceptNonInv.Value(1)
	f.Intrinsic.Control.Else
		gui.Form.optAddNonInvQuote.Visible(False)
	f.Intrinsic.Control.EndIf

	'this is the core method for calculating run times and estimates.
	f.ODBC.Connection!conx.executeandreturn("select ASCII_FLAG FROM OP_HEADER WHERE ID = '050500'",V.Global.sHppPph)
	f.ODBC.Connection!conx.executeandreturn("select ASCII_FLAG FROM OP_HEADER WHERE ID = '050510'",V.Global.sHppSub)
	f.ODBC.Connection!conx.executeandreturn("select ASCII_FLAG FROM OP_HEADER WHERE ID = '050520'",V.Global.sPphSub)
	
	'this is used for populating run time "type" in the main grid when a router is loaded.
	f.Intrinsic.Control.If(v.Global.sHppPph,=,"1")
		F.Intrinsic.Control.SelectCase(V.Global.sHppSub)
			'P,S,M,H
			f.Intrinsic.Control.Case("P")
				v.Global.sLaborType.Set("PPH")
			f.Intrinsic.Control.Case("S")
				V.Global.sLaborType.Set("SPP")
			F.Intrinsic.Control.Case("M")
				V.Global.sLaborType.Set("MPP")
			F.Intrinsic.Control.Case("H")
				V.Global.sLaborType.Set("HPP")
		F.Intrinsic.Control.EndSelect
		v.Global.sType.Set("PPH")
	F.Intrinsic.Control.ElseIf(v.Global.sHppPph,=,"2")
		f.Intrinsic.Control.SelectCase(v.Global.sPphSub)
			F.Intrinsic.Control.Case("H")
				V.Global.sLaborType.Set("HPP")
			F.Intrinsic.Control.Case("M")
				V.Global.sLaborType.Set("MPP")
		f.Intrinsic.Control.EndSelect
		v.Global.sType.Set("HPP")
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry		
Program.Sub.Get_First_Options.End

Program.Sub.Calculate_ChildRow_Extended.Start
F.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	
	v.Local.fSetup.Declare
	v.Local.fCost.Declare
	v.Local.fFrequency.Declare
	v.Local.fQty.Declare
	v.Local.fResult.Declare
	v.Local.fHold.Declare
	v.Local.fHold1.Declare
	v.Local.fHold2.Declare
	v.Local.fWCFactor.Declare
	
	v.Local.fSetup.Set(v.DataTable.Child(v.Args.Row).Set_Up!FieldValString)
	v.Local.fCost.Set(v.DataTable.Child(v.Args.Row).Cost!FieldValString)
	v.Local.fFrequency.Set(v.DataTable.Child(v.Args.Row).Frequency!FieldValString)
	v.Local.fQty.Set(v.DataTable.Child(v.Args.Row).Qty!FieldValString)
	v.Local.fWCFactor.Set(v.DataTable.Child(v.Args.Row).WC_Factor!FieldValString)
	
	f.Intrinsic.Control.If(v.Local.fWCFactor,=,0)
		v.Local.fWCFactor.Set(1)
	f.Intrinsic.Control.EndIf

	f.Intrinsic.Control.If(v.Local.fFrequency,=,0)
		v.Local.fFrequency.Set(1)
	f.Intrinsic.Control.EndIf	

	f.Intrinsic.Control.If(v.Global.sType,=,"HPP")		
		f.Intrinsic.Control.SelectCase(v.DataTable.Child(v.Args.Row).LMO!FieldValTrim)
			f.Intrinsic.Control.CaseAny("L","M","O")
			
				f.Intrinsic.Math.Mult(v.Local.fSetup,v.Local.fCost,v.Local.fHold1)
				f.Intrinsic.Math.Div(v.Local.fHold1,v.Local.fFrequency,v.Local.fHold1)
				
				f.Intrinsic.Math.Mult(v.Local.fQty,v.Local.fCost,v.Local.fHold2)
				'WC Factor
				f.Intrinsic.Control.If(v.Global.bIncludeWCFactorInExtended,=,True,and,v.DataTable.Child(v.Args.Row).LMO!FieldValTrim,=,"L")
					f.Intrinsic.Math.Mult(v.Local.fHold2,v.Local.fWCFactor,v.Local.fHold2)
				f.Intrinsic.Control.EndIf				
				
				f.Intrinsic.Math.Add(v.Local.fHold1,v.Local.fHold2,v.Local.fResult)

				f.Data.DataTable.SetValue("Child",v.Args.Row,"Extended",v.Local.fResult)
		f.Intrinsic.Control.EndSelect	
	f.Intrinsic.Control.Else
		
		f.Intrinsic.Control.SelectCase(v.DataTable.Child(v.Args.Row).LMO!FieldValTrim)
			f.Intrinsic.Control.CaseAny("M","O")

				f.Intrinsic.Math.Mult(v.Local.fSetup,v.Local.fCost,v.Local.fHold1)
				f.Intrinsic.Math.Div(v.Local.fHold1,v.Local.fFrequency,v.Local.fHold1)
				
				f.Intrinsic.Math.Mult(v.Local.fQty,v.Local.fCost,v.Local.fHold2)				
				
				f.Intrinsic.Math.Add(v.Local.fHold1,v.Local.fHold2,v.Local.fResult)
				f.Data.DataTable.SetValue("Child",v.Args.Row,"Extended",v.Local.fResult)
			f.Intrinsic.Control.Case("L")
			
				f.Intrinsic.Math.Mult(v.Local.fSetup,v.Local.fCost,v.Local.fHold1)
				f.Intrinsic.Math.Div(v.Local.fHold1,v.Local.fFrequency,v.Local.fHold1)			
				f.Intrinsic.Control.If(v.Local.fQty,<>,0)
					f.Intrinsic.Math.Div(v.Local.fCost,v.Local.fQty,v.Local.fHold2)
					'WC Factor
					f.Intrinsic.Control.If(v.Global.bIncludeWCFactorInExtended,=,True,and,v.DataTable.Child(v.Args.Row).LMO!FieldValTrim,=,"L")
						f.Intrinsic.Math.Mult(v.Local.fHold2,v.Local.fWCFactor,v.Local.fHold2)
					f.Intrinsic.Control.EndIf					
				f.Intrinsic.Control.Else
					v.Local.fHold2.Set(0)					
				f.Intrinsic.Control.EndIf
				f.Intrinsic.Math.Add(v.Local.fHold1,v.Local.fHold2,v.Local.fResult)	
				f.Data.DataTable.SetValue("Child",v.Args.Row,"Extended",v.Local.fResult)
		f.Intrinsic.Control.EndSelect		
	f.Intrinsic.Control.EndIf	
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry		
Program.Sub.Calculate_ChildRow_Extended.End

Program.Sub.calcLabor.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
v.local.serror.declare
V.Local.fSetup.Declare(FLOAT,0)


'for labor sequences, the main thing we need is a runtime, if there's no runtime, base the calculation off of the setup time.
f.Intrinsic.Control.If(v.DataTable.CHILD(v.Args.ROW).QTY!FIELDVALFLOAT,>,0)
	'see if we have a frequency with our setup.  If we do, we can calc that rate in to the total of the piece.  If not, we will leave it for cost build up.
	f.Intrinsic.Control.If(v.DataTable.CHILD(v.Args.ROW).FREQUENCY!FIELDVALFLOAT,>,0)
		f.Intrinsic.Math.Mult(v.DataTable.CHILD(v.Args.ROW).COST!FIELDVALFLOAT,v.DataTable.CHILD(v.Args.ROW).SET_UP!FIELDVALFLOAT,V.Local.fSetup)
		F.Intrinsic.Math.Div(V.Local.fSetup,v.DataTable.CHILD(v.Args.ROW).FREQUENCY!FIELDVALFLOAT,V.Local.fSetup)
	F.Intrinsic.Control.Else
		f.Intrinsic.Math.Mult(v.DataTable.CHILD(v.Args.ROW).COST!FIELDVALFLOAT,v.DataTable.CHILD(v.Args.ROW).SET_UP!FIELDVALFLOAT,V.Local.fSetup)
	f.Intrinsic.Control.EndIf
	''check to see what column was edited, either type or qty/runtime.
	'f.Intrinsic.Control.If(V.Args.COLUMN,=,"QTY")
	
	'check the global option for what we are setting rates to for BOM Upload and standard calculations.
	F.Intrinsic.Control.SelectCase(V.Global.sHppPph)
		f.Intrinsic.Control.Case(1)
			f.Intrinsic.Control.CallSub(CalcPPH,"ROW",V.Args.ROW,"COLUMN",V.Args.COLUMN,"TYPE",V.DataTable.CHILD(V.Args.ROW).TYPE!FIELDVALTRIM,"SETUP",V.Local.fSetup)
		f.Intrinsic.Control.Case(2)
			f.Intrinsic.Control.CallSub(CalcHPP,"ROW",V.Args.ROW,"COLUMN",V.Args.COLUMN,"TYPE",V.DataTable.CHILD(V.Args.ROW).TYPE!FIELDVALTRIM,"SETUP",V.Local.fSetup)
	f.Intrinsic.Control.EndSelect
f.Intrinsic.Control.ElseIf(v.DataTable.CHILD(v.Args.ROW).SET_UP!FIELDVALFLOAT,>,0)
	F.Intrinsic.Math.Mult(v.DataTable.CHILD(v.Args.ROW).COST!FIELDVALFLOAT,v.DataTable.CHILD(v.Args.ROW).SET_UP!FIELDVALFLOAT,V.Local.fSetup)
	'There is no frequency or quantity so there is no point calling to calculate HPP or PPH.
	f.Data.DataTable.SetValue("CHILD",v.Args.ROW,"EXTENDED",V.Local.fSetUp)
	
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.calcLabor.End

Program.Sub.Debug.Start
f.Intrinsic.Control.If(v.Caller.User,=,"SUPERVSR",OR,V.Caller.User.Trim,=,"TBOUR")
	Function.Intrinsic.Debug.InvokeDebugger
	Function.Intrinsic.Debug.Stop	
f.Intrinsic.Control.EndIf
Program.Sub.Debug.End

Program.Sub.picBrwBackupRtr_Click.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.sParent.Declare
	v.Local.iDateRef.Declare
	v.Local.iTimeRef.Declare
	v.Local.sSQL.Declare
	v.Local.sHold.Declare
	v.Local.sSerialize.Declare
	
	'Prevent double cycle
	f.Intrinsic.Control.IF(v.Global.bLoadingPleaseWait)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf		
	v.Global.bLoadingPleaseWait.Set(True)
	gui.Form.lblResult.Visible(True)
	gui.Form.picBrwBackupRtr.Enabled(False)	
	
	f.Intrinsic.Control.CallSub(Check_Work_Saved)
	f.Intrinsic.Control.If(v.Args.bStop)	
		v.Global.bLoadingPleaseWait.Set(False)
		gui.Form.lblResult.Visible(False)
		gui.Form.picBrwBackupRtr.Enabled(True)		
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf	
	
	f.ODBC.Connection!conx.ExecuteAndReturn("Select Top 1 SaveTime from GCG_4986_BkpHead ",v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
		f.Intrinsic.UI.Msgbox("No record found")
		f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)
		v.Global.bLoadingPleaseWait.Set(False)
		gui.Form.lblResult.Visible(False)
		gui.Form.picBrwBackupRtr.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.UI.Browser("Select Backup Router","conx","select  UserID,SaveDate, left(SaveTime,2) + ':' + substring(SaveTime,3,2) + ':' + substring(SaveTime,5,2) as SaveTime,left(Part,17) as Part, subString(Part,18,3) as Rev, Description, UM, PL, DateRef, TimeRef,  Similar,Customer,Comm,Scrap,PartIDLocn,RouterComplete,OmitReprice,AltDesc1,AltDesc2,ExtraDesc from GCG_4986_BkpHead order by DateRef desc,TimeRef desc,Part asc","UserID*!*SaveDate*!*SaveTime*!*Part*!*Rev*!*Description*!*UM*!*PL*!*DateRef*!*TimeRef*!*Similar*!*Customer*!*Comm*!*Scrap*!*PartIDLocn*!*RouterComplete*!*OmitReprice*!*AltDesc1*!*AltDesc2*!*ExtraDesc","300*!*200*!*200*!*500*!*100*!*500*!*100*!*100*!*200*!*200*!*200*!*200*!*200*!*200*!*200*!*200*!*200*!*200*!*200*!*200","20200","10000",v.Local.sRet)
	
	f.Intrinsic.Control.If(v.Local.sRet.IsCancel)
		v.Global.bLoadingPleaseWait.Set(False)
		gui.Form.lblResult.Visible(False)
		gui.Form.picBrwBackupRtr.Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.CallSub(Clear_Router_Side)
	f.Intrinsic.Control.CallSub(Clear_Bom_Side)
	f.Intrinsic.Control.CallSub(Enable_Disable_Router_PartHead,"ActiveFlag","Disable")
	
	F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)	
	f.Intrinsic.String.GSSPartString(v.Local.sRet(3).Trim,v.Local.sRet(4).Trim,v.Local.sParent)
	v.Local.iDateRef.Set(v.Local.sRet(8))
	v.Local.iTimeRef.Set(v.Local.sRet(9))
	gui.Form.GGC_Bom.Visible(False)
	
	'Set texboxes
	f.Intrinsic.Control.BlockEvents
	gui.Form.txtFocusParent.Text(v.Local.sRet(3).Trim)
	gui.Form.txtFocusRev.Text(v.Local.sRet(4).Trim)
	gui.Form.txtFocusDescr.Text(V.Local.sRet(5).Trim)

	gui.Form.txtUM.Text(V.Local.sRet(6).Trim)	
	gui.Form.txtPL.Text(v.Local.sRet(7).Trim)
	
	f.Intrinsic.String.Left(v.Local.sRet(10),17,v.Local.sHold)
	gui.Form.txtSimilar.Text(v.Local.sHold.Trim)
	f.Intrinsic.String.Mid(v.Local.sRet(10),18,3,v.Local.sHold)
	gui.Form.txtSimilarRev.Text(v.Local.sHold.Trim)

	gui.Form.txtRtrCust.Text(v.Local.sRet(11).Trim)
	f.Intrinsic.String.Format(v.Local.sRet(12),"0.00",v.Local.sHold)
	gui.Form.txtComm.Text(v.Local.sHold)	
	f.Intrinsic.String.Format(v.Local.sRet(13),"0.00",v.Local.sHold)
	gui.Form.txtScrap.Text(v.Local.sHold)	
	gui.Form.txtPartID.Text(v.Local.sRet(14).Trim)
	gui.Form.chkRtrComp.Value(v.Local.sRet(15))
	gui.Form.chkOmitFromRTRReprice.Value(v.Local.sRet(16))
	
	gui.Form.txtDescr2.Text(v.Local.sRet(17).Trim)
	gui.Form.txtDescr3.Text(v.Local.sRet(18).Trim)	

	gui.Form.txtBomQty.Text(1)	
	gui.Form.txtRTRExtraDescr.Text(v.Local.sRet(19))
	
	f.Intrinsic.Control.UnBlockEvents
		
	'Load Line
	f.Intrinsic.Control.If(v.DataTable.TempBkp.Exists)
		f.Data.DataTable.Close("TempBkp")
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("Select BPARENT,rtrim(DESCR_BP) as DESCR_BP,BOM_SEQ,RTR_SEQ,PART,rtrim(DESCRIPTION) as DESCRIPTION,rtrim(DESCRIPTION_2) as DESCRIPTION_2,rtrim(DESCRIPTION_3) as DESCRIPTION_3,LMO,rtrim(COMMENTS) as Comments ,PL,CATEGORY,CAT_CODE,SOURCE,SOURCE_CODE,OP_CODE,UM,TYPE,SET_UP,FREQUENCY,QTY,COST,WC_Factor,PURCHASE_FACTOR,PURCH_COST,TAG,SIGNOFF_GRPUSR,SIGNOFF_TYPE,TIER,CTIER,COMPLETE,RTR_SEQ_NUM,EXTENDED,Loc,Issue_UM,Consump_Conv,Weight,Insert_Bom,Date_Maintenance,QUANTITY_6,Date_Start,Date_Stop,BM_Serial_Start,BM_Serial_Stop,Purge_Flag,ORDR_USR_FLAG,DRAWING,Date_Last_Chg,Time_Last_Chg,Last_Chg_By,Last_Chg_Prog,Drawing_Size,REQ_TRACE,Cost_Date,Inactive,Chg_Rev,Setup_Qty,DISPLAY_PART,Shape,Serie,Sort_Code,PhantomPart,RefPart,SeqSort,Lead,PartID,Amt_Minimum from GCG_4986_BkpLine where UserID = '{0}' and DateRef = '{1}' and TimeRef = '{2}' and BParent = '{3}'",v.Caller.User,v.Local.iDateRef,v.Local.iTimeRef,v.Local.sParent.PSQLFriendly,v.Local.sSQL)
	f.Data.DataTable.CreateFromSQL("TempBkp","Conx",v.Local.sSQL,True)
	
	'For Cutlist
	f.Intrinsic.Control.If(v.Global.bBindCutList)
		'Temp Serialize		
		gui.Form.GGC_Bom.Serialize("GV_Child",V.Local.sSerialize)
		f.Intrinsic.Control.CallSub(Recreate_Table_Grid_Child)	
		gui.Form.GGC_Bom.Deserialize(V.Local.sSerialize)
	f.Intrinsic.Control.Else
		F.Data.DataTable.DeleteRow("CHILD")
		F.Data.DataTable.AcceptChanges("CHILD")
	f.Intrinsic.Control.EndIf
	
	f.Data.DataTable.Merge("TempBkp","Child",False,2)
	f.Data.DataTable.AcceptChanges("Child")

	'Get Quantities
	f.Data.DataTable.DeleteRow("BUILDQTY")
	f.Data.DataTable.AcceptChanges("BUILDQTY")

	'get qty from backup first, if there is not, get from core table
	f.Intrinsic.String.Build("Select Quantity from GCG_4986_BkpQty where UserID = '{0}' and DateRef = '{1}' and TimeRef = '{2}' and Part = '{3}' and Quantity <> 0",v.Caller.User,v.Local.iDateRef,v.Local.iTimeRef,v.Local.sParent.PSQLFriendly,v.Local.sSQL)	
	f.Data.DataTable.CreateFromSQL("Temp_BkpQty","conx",v.Local.sSql,True)
	f.Data.DataTable.Merge("Temp_BkpQty","BUILDQTY",False,2)	
	f.Data.DataTable.AcceptChanges("BUILDQTY")
	f.Data.DataTable.Close("Temp_BkpQty")
	f.Intrinsic.Control.If(v.DataTable.BuildQty.RowCount,>,0)
		f.Data.DataTable.SetValue("BUILDQTY",-1,"Part",v.Local.sParent)
		v.Global.bQtySaved.Set(True)
	f.Intrinsic.Control.Else
		'Quantity from core
		f.Intrinsic.Control.CallSub(getQuantities,"PART",V.Screen.Form!txtFocusParent.TEXT,"REV",V.Screen.Form!txtFocusRev.TEXT)
	f.Intrinsic.Control.EndIf

	
	f.Intrinsic.Control.CallSub(Populate_LongPart_Router)
	
	'For Cutlist
	f.Intrinsic.Control.If(v.Global.bBindCutList)
		f.Intrinsic.Control.CallSub(Bind_CutList)		
	f.Intrinsic.Control.EndIf	
	
	'f.Intrinsic.Control.CallSub(Process_PhantomComments)
	'f.Intrinsic.Control.CallSub(Process_Double_Reference)	
	
	'f.Intrinsic.Variable.ArgExists("bPhantom",v.Local.bPhamtomArgsExist)
	'f.Intrinsic.Variable.ArgExists("bReference",v.Local.bRefArgsExist)
'	f.Intrinsic.Control.If(v.Local.bPhamtomArgsExist,=,True,and,v.Local.bRefArgsExist,=,True)
'		f.Intrinsic.Control.If(v.Args.bPhantom,=,True,or,v.Args.bReference,=,True)		
'			f.data.Datatable.Setvalue("Child",-1,"SeqSort",0)
'			F.Intrinsic.Control.CallSub(ReSeq99s)
'			f.Data.DataTable.AcceptChanges("CHILD")	
'		
'		f.Intrinsic.Control.EndIf	
'	f.Intrinsic.Control.EndIf	
	
	'set the main view to router or bom.
	f.Intrinsic.Control.CallSub(optRouterHdr_Click)
	f.Intrinsic.Control.CallSub(Check_RTR_Doc)
	v.Global.bRouterChanged.Set(False)
	gui.Form.GGC_Bom.Visible(True)	
	
	v.Global.bLoadingPleaseWait.Set(False)
	gui.Form.lblResult.Visible(False)
	gui.Form.picBrwBackupRtr.Enabled(True)	
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.picBrwBackupRtr_Click.End

Program.Sub.Backup_Router.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.dSaveDate.Declare
	v.Local.sSaveTime.Declare
	v.Local.sPart.Declare
	v.Local.sPart17.Declare
	v.Local.sRev.Declare
	v.Local.sDescription.Declare
	v.Local.sSimilar17.Declare
	v.Local.sSimilarRev.Declare
	v.Local.sSimilar.Declare
	v.Local.sUM.Declare
	v.Local.sPL.Declare
	v.Local.sCustomer.Declare
	v.Local.fComm.Declare
	v.Local.fScrap.Declare
	v.Local.sPartIDLoc.Declare
	v.Local.bRouterComplete.Declare
	v.Local.bOmitPrice.Declare
	v.Local.sAltDesc1.Declare
	v.Local.sAltDesc2.Declare
	v.Local.sExtraDesc.Declare
	v.Local.iDateRef.Declare
	v.Local.iTimeRef.Declare
	v.Local.sSQL.Declare
	
	v.Local.sMap.Declare
	v.Local.iCnt.Declare
	v.Local.smap2.Declare	
	
	v.Local.dSaveDate.Set(v.Ambient.Date)
	v.Local.sSaveTime.Set(v.Ambient.Now.FormatHHNNSS)
	v.Local.sPart17.Set(v.Screen.Form!txtFocusParent.Text.Trim)
	v.Local.sRev.Set(v.Screen.Form!txtParentRev.Text.Trim)
	f.Intrinsic.String.GSSPartString(v.Local.sPart17,v.Local.sRev,v.Local.sPart)	
	v.Local.sDescription.Set(v.Screen.Form!txtParentDescr.Text.Trim)
	v.Local.sSimilar17.Set(v.Screen.Form!txtSimilar.Text.Trim)
	v.Local.sSimilarRev.Set(v.Screen.Form!txtSimilarRev.Text.Trim)
	f.Intrinsic.String.GSSPartString(v.Local.sSimilar17,v.Local.sSimilarRev,v.Local.sSimilar)
	v.Local.sUM.Set(v.Screen.Form!txtUM.Text.Trim)
	v.Local.sPL.Set(v.Screen.Form!txtPL.Text.Trim)
	v.Local.sCustomer.Set(v.Screen.Form!txtCustNo.Text.Trim)
	v.Local.fComm.Set(v.Screen.Form!txtComm.Text.Trim)
	v.Local.fScrap.Set(v.Screen.Form!txtScrap.Text.Trim)
	v.Local.sPartIDLoc.Set(v.Screen.Form!txtPartID.Text.Trim)
	v.Local.bRouterComplete.Set(v.Screen.Form!chkRtrComp.CheckedAsBoolean)
	v.Local.bOmitPrice.Set(v.Screen.Form!chkOmitFromRTRReprice.CheckedAsBoolean)
	v.Local.sAltDesc1.Set(v.Screen.Form!txtDescr2.Text.Trim)
	v.Local.sAltDesc2.Set(v.Screen.Form!txtDescr3.Text.Trim)
	v.Local.sExtraDesc.Set(v.Screen.Form!txtRTRExtraDescr.Text)
	v.Local.iDateRef.Set(v.Local.dSaveDate.FormatYYYYMMDD)
	v.Local.iTimeRef.Set(v.Local.sSaveTime)
	
	f.Intrinsic.Control.CallSub(Backup_Core_Router_Database,"sSaveDate",v.Local.dSaveDate.PervasiveDate,"sSaveTime",v.Local.sSaveTime,"iDateRef",v.Local.iDateRef,"iTimeRef",v.Local.iTimeRef,"sRouter",v.Local.sPart)
	
	
	f.Intrinsic.String.Build("Insert into GCG_4986_BkpHead (UserID,SaveDate,SaveTime,Part,Description,Similar,UM,PL,Customer,Comm,Scrap,PartIDLocn,RouterComplete,OmitReprice,AltDesc1,AltDesc2,ExtraDesc,DateRef,TimeRef) values ('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}',{12},{13},'{14}','{15}','{16}','{17}','{18}')",v.Caller.user,v.Local.dSaveDate.PervasiveDate,v.local.sSaveTime,v.local.sPart.PSQLFriendly,v.local.sDescription.PSQLFriendly,v.local.sSimilar.PSQLFriendly,v.local.sUM.left2,v.local.sPL.left2,v.local.sCustomer.PSQLFriendly,v.local.fComm,v.local.fScrap,v.local.sPartIDLoc.PSQLFriendly,v.Screen.Form!chkRtrComp.Value,v.Screen.Form!chkOmitFromRTRReprice.Value,v.local.sAltDesc1.PSQLFriendly,v.local.sAltDesc2.PSQLFriendly,v.local.sExtraDesc.PSQLFriendly,v.local.iDateRef,v.local.iTimeRef,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)
	
	f.Data.DataTable.AddColumn("Child","UserID","String",v.Caller.User)
	f.Data.DataTable.AddColumn("Child","DateRef","Long",v.Local.iDateRef)
	f.Data.DataTable.AddColumn("Child","TimeRef","Long",v.Local.iTimeRef)
	
	v.Local.sMap.Set("UserID@!@UserID*!*DateRef@!@DateRef*!*TimeRef@!@TimeRef*!*BPARENT@!@BPARENT*!*DESCR_BP@!@DESCR_BP*!*BOM_SEQ@!@BOM_SEQ*!*RTR_SEQ@!@RTR_SEQ*!*PART@!@PART*!*DESCRIPTION@!@DESCRIPTION*!*DESCRIPTION_2@!@DESCRIPTION_2*!*DESCRIPTION_3@!@DESCRIPTION_3*!*LMO@!@LMO*!*COMMENTS@!@COMMENTS*!*PL@!@PL*!*CATEGORY@!@CATEGORY*!*CAT_CODE@!@CAT_CODE*!*SOURCE@!@SOURCE*!*SOURCE_CODE@!@SOURCE_CODE*!*OP_CODE@!@OP_CODE*!*UM@!@UM*!*TYPE@!@TYPE*!*SET_UP@!@SET_UP*!*FREQUENCY@!@FREQUENCY*!*QTY@!@QTY*!*COST@!@COST*!*WC_Factor@!@WC_Factor*!*PURCHASE_FACTOR@!@PURCHASE_FACTOR*!*PURCH_COST@!@PURCH_COST*!*TAG@!@TAG*!*SIGNOFF_GRPUSR@!@SIGNOFF_GRPUSR*!*SIGNOFF_TYPE@!@SIGNOFF_TYPE*!*TIER@!@TIER*!*CTIER@!@CTIER*!*COMPLETE@!@COMPLETE*!*RTR_SEQ_NUM@!@RTR_SEQ_NUM*!*EXTENDED@!@EXTENDED*!*Loc@!@Loc*!*Issue_UM@!@Issue_UM*!*Consump_Conv@!@Consump_Conv*!*Weight@!@Weight*!*Insert_Bom@!@Insert_Bom*!*Date_Maintenance@!@Date_Maintenance*!*QUANTITY_6@!@QUANTITY_6*!*Date_Start@!@Date_Start*!*Date_Stop@!@Date_Stop*!*BM_Serial_Start@!@BM_Serial_Start*!*BM_Serial_Stop@!@BM_Serial_Stop*!*Purge_Flag@!@Purge_Flag*!*ORDR_USR_FLAG@!@ORDR_USR_FLAG*!*DRAWING@!@DRAWING*!*Date_Last_Chg@!@Date_Last_Chg*!*Time_Last_Chg@!@Time_Last_Chg*!*Last_Chg_By@!@Last_Chg_By*!*Last_Chg_Prog@!@Last_Chg_Prog*!*Drawing_Size@!@Drawing_Size*!*Cost_Date@!@Cost_Date*!*Inactive@!@Inactive*!*Chg_Rev@!@Chg_Rev*!*Setup_Qty@!@Setup_Qty*!*DISPLAY_PART@!@DISPLAY_PART*!*Shape@!@Shape*!*Serie@!@Serie*!*PhantomPart@!@PhantomPart*!*RefPart@!@RefPart*!*SeqSort@!@SeqSort*!*Lead@!@Lead*!*PartID@!@PartID*!*Amt_Minimum@!@Amt_Minimum*!*Sort_Code@!@Sort_Code")	
	'*!*REQ_TRACE@!@REQ_TRACE
	
	f.Data.DataTable.SaveToDB("Child","conx","GCG_4986_BkpLine","",128,v.Local.smap)	
	
	f.Data.DataTable.RemoveColumn("Child","UserID")
	f.Data.DataTable.RemoveColumn("Child","DateRef")
	f.Data.DataTable.RemoveColumn("Child","TimeRef")
	f.Data.DataTable.AcceptChanges("CHILD")	
	f.Data.DataTable.AddColumn("BUILDQTY","UserID","String",v.Caller.User)
	f.Data.DataTable.AddColumn("BUILDQTY","DateRef","Long",v.Local.iDateRef)
	f.Data.DataTable.AddColumn("BUILDQTY","TimeRef","Long",v.Local.iTimeRef)
	
	f.Data.DataTable.SaveToDB("BUILDQTY","CONX","GCG_4986_BkpQty","",128,"UserID@!@UserID*!*DateRef@!@DateRef*!*TimeRef@!@TimeRef*!*Part@!@Part*!*Quantity@!@Quantity")
	
	f.Data.DataTable.RemoveColumn("BUILDQTY","UserID")
	f.Data.DataTable.RemoveColumn("BUILDQTY","DateRef")
	f.Data.DataTable.RemoveColumn("BUILDQTY","TimeRef")
	f.Data.DataTable.AcceptChanges("BUILDQTY")	
	
	f.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch

	f.Intrinsic.UI.Msgbox("Issue with SaveToDB. Click OK to proceed troubleshooting.")
	f.Intrinsic.Control.Try	
		f.Intrinsic.String.Split(v.Local.sMap,"*!*",v.Local.sMap)
		v.Local.smap2.Set("UserID@!@UserID")
		f.Intrinsic.Control.For(v.Local.iCnt,1,v.Local.sMap.UBound)
			f.Intrinsic.String.Build("{0}*!*{1}",v.Local.smap2,v.Local.sMap(v.Local.iCnt),v.Local.smap2)
			f.Data.DataTable.SaveToDB("Child","conx","GCG_4986_BkpLine2","",128,v.Local.smap2)
		
		f.Intrinsic.Control.Next(v.Local.iCnt)
		
	f.Intrinsic.Control.Catch	
		f.Intrinsic.UI.Msgbox(v.Local.sMap(v.Local.iCnt),"Column Error found")
		f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
	f.Intrinsic.Control.EndTry
	
	
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Backup_Router.End

Program.Sub.Backup_Core_Router_Database.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sSaveDate.Declare
	v.Local.sSaveTime.Declare
	v.Local.iDateRef.Declare
	v.Local.iTimeRef.Declare
	v.Local.sRouter.Declare
	v.Local.sSQL.Declare	
	
	v.Local.sSaveDate.Set(v.Args.sSaveDate)
	v.Local.sSaveTime.Set(v.Args.sSaveTime)	
	v.Local.iDateRef.Set(v.Args.iDateRef)
	v.Local.iTimeRef.Set(v.Args.iTimeRef)
	v.Local.sRouter.Set(v.Args.sRouter)
	
	'Router_Desc4986
	f.Intrinsic.String.Build("Insert into Router_Desc4986 (UserID,SaveDate,SaveTime,DateRef,TimeRef,ROUTER,ROUTER_SUFFIX,ROUTER_TYPE,LINE_ROUTER,ROUTER_INSERT,DESC_ROUTER_1,DESC_ROUTER_2,DESC_ROUTER_3) (Select Convert('{0}',SQL_Char) as UserID,Convert('{1}',SQL_Date) as SaveDate,'{2}' as SaveTime,Convert('{3}',SQL_Integer) as DateRef,Convert('{4}',SQL_Integer) as TimeRef,ROUTER,ROUTER_SUFFIX,ROUTER_TYPE,LINE_ROUTER,ROUTER_INSERT,DESC_ROUTER_1,DESC_ROUTER_2,DESC_ROUTER_3 from v_Router_Desc where Router = '{5}') ",v.Caller.User,v.Local.sSaveDate,v.Local.sSaveTime,v.Local.iDateRef,v.Local.iTimeRef,v.Local.sRouter.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)
	
	'Router_Header4986
	f.Intrinsic.String.Build("Insert into Router_Header4986 (UserID,SaveDate,SaveTime,DateRef,TimeRef,ROUTER,ROUTER_SUFFIX,LINE_ROUTER,ROUTER_INSERT,DESCRIPTION_ROUTER,SIMILAR,PROD_LINE,NO_REPRICE,SCRAP,CUSTOMER,PART_CUSTOMER,DRAWING_CUSTOMER,DATE_CURRENT,QTY_CURRENT,PRICE_CURRENT,DATE_PRIOR,QTY_PRIOR,PRICE_PRIOR,DATE_ORIGINAL,SORT_1,SORT_2,UM_INVENTORY,COMMISSION,DATE_LAST_ACCESSED,PURGE_FLAG) (Select Convert('{0}',SQL_Char) as UserID,Convert('{1}',SQL_Date) as SaveDate,'{2}' as SaveTime,Convert('{3}',SQL_Integer) as DateRef,Convert('{4}',SQL_Integer) as TimeRef,ROUTER,ROUTER_SUFFIX,LINE_ROUTER,ROUTER_INSERT,DESCRIPTION_ROUTER,SIMILAR,PROD_LINE,NO_REPRICE,SCRAP,CUSTOMER,PART_CUSTOMER,DRAWING_CUSTOMER,DATE_CURRENT,QTY_CURRENT,PRICE_CURRENT,DATE_PRIOR,QTY_PRIOR,PRICE_PRIOR,DATE_ORIGINAL,SORT_1,SORT_2,UM_INVENTORY,COMMISSION,DATE_LAST_ACCESSED,PURGE_FLAG  from v_Router_Header where Router = '{5}')",v.Caller.User,v.Local.sSaveDate,v.Local.sSaveTime,v.Local.iDateRef,v.Local.iTimeRef,v.Local.sRouter.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)
	
	'Router_Line4986
	f.Intrinsic.String.Build("Insert into Router_Line4986 (UserID,SaveDate,SaveTime,DateRef,TimeRef,ROUTER,ROUTER_SUFFIX,ROUTER_INSERT,LMO,PART_WC_OUTSIDE,OPERATION,SET_UP,RUN_TIME,RATE,FREQUENCY,MULTIPLE,DESC_RT_LINE,UM_INVENTORY,OVERLAP,WC_FACTOR,ACTUAL_WT,FLAG_MINIMUM,AMT_MINIMUM,SEC_MIN_HR,GROUP_SEQUENCE,CREW_SIZE,RUN_TIME_D6,MES_PROCESS_ID,PRICE_PERCENT,FLAG_MAIN_COMMENT,LEAD_TIME,PART_LOCN,TOOLING_SEQ,SORT_CODE,PROJ_GROUP,SIGNOFF_GRPUSR,SIGNOFF_TYPE,BUILT_FROM_BOM,ALLOW_CHRG,OMIT_FROM_WO,FINAL_OVERRIDE_FLG,OTH_LANGUAGE) (Select Convert('{0}',SQL_Char) as UserID,Convert('{1}',SQL_Date) as SaveDate,'{2}' as SaveTime,Convert('{3}',SQL_Integer) as DateRef,Convert('{4}',SQL_Integer) as TimeRef,ROUTER,ROUTER_SUFFIX,ROUTER_INSERT,LMO,PART_WC_OUTSIDE,OPERATION,SET_UP,RUN_TIME,RATE,FREQUENCY,MULTIPLE,DESC_RT_LINE,UM_INVENTORY,OVERLAP,WC_FACTOR,ACTUAL_WT,FLAG_MINIMUM,AMT_MINIMUM,SEC_MIN_HR,GROUP_SEQUENCE,CREW_SIZE,RUN_TIME_D6,MES_PROCESS_ID,PRICE_PERCENT,FLAG_MAIN_COMMENT,LEAD_TIME,PART_LOCN,TOOLING_SEQ,SORT_CODE,PROJ_GROUP,SIGNOFF_GRPUSR,SIGNOFF_TYPE,BUILT_FROM_BOM,ALLOW_CHRG,OMIT_FROM_WO,FINAL_OVERRIDE_FLG,OTH_LANGUAGE from v_Router_Line where Router = '{5}') ",v.Caller.User,v.Local.sSaveDate,v.Local.sSaveTime,v.Local.iDateRef,v.Local.iTimeRef,v.Local.sRouter.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)	
	
	'RTR_PRICE_1_4_4986
	f.Intrinsic.String.Build("Insert into RTR_PRICE_1_4_4986 (UserID,SaveDate,SaveTime,DateRef,TimeRef,ROUTER,ROUTER_SUFFIX,ROUTER_TYPE,LINE_ROUTER,ROUTER_INSERT,PRICE_1_1,PRICE_1_2,PRICE_1_3,PRICE_1_4,PRICE_1_5,PRICE_2_1,PRICE_2_2,PRICE_2_3,PRICE_2_4,PRICE_2_5,PRICE_3_1,PRICE_3_2,PRICE_3_3,PRICE_3_4,PRICE_3_5,PRICE_4_1,PRICE_4_2,PRICE_4_3,PRICE_4_4,PRICE_4_5,QUANTITY_1,QUANTITY_2,QUANTITY_3,QUANTITY_4,PRICE_1_6,PRICE_2_6,PRICE_3_6,PRICE_4_6) (Select Convert('{0}',SQL_Char) as UserID,Convert('{1}',SQL_Date) as SaveDate,'{2}' as SaveTime,Convert('{3}',SQL_Integer) as DateRef,Convert('{4}',SQL_Integer) as TimeRef,ROUTER,ROUTER_SUFFIX,ROUTER_TYPE,LINE_ROUTER,ROUTER_INSERT,PRICE_1_1,PRICE_1_2,PRICE_1_3,PRICE_1_4,PRICE_1_5,PRICE_2_1,PRICE_2_2,PRICE_2_3,PRICE_2_4,PRICE_2_5,PRICE_3_1,PRICE_3_2,PRICE_3_3,PRICE_3_4,PRICE_3_5,PRICE_4_1,PRICE_4_2,PRICE_4_3,PRICE_4_4,PRICE_4_5,QUANTITY_1,QUANTITY_2,QUANTITY_3,QUANTITY_4,PRICE_1_6,PRICE_2_6,PRICE_3_6,PRICE_4_6 from v_RTR_PRICE_1_4 where Router = '{5}') ",v.Caller.User,v.Local.sSaveDate,v.Local.sSaveTime,v.Local.iDateRef,v.Local.iTimeRef,v.Local.sRouter.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)

	'RTR_PRICE_5_8_4986
	f.Intrinsic.String.Build("Insert into RTR_PRICE_5_8_4986 (UserID,SaveDate,SaveTime,DateRef,TimeRef,ROUTER ,ROUTER_SUFFIX,ROUTER_TYPE,LINE_ROUTER,ROUTER_INSERT,PRICE_5_1,PRICE_5_2,PRICE_5_3,PRICE_5_4,PRICE_5_5,PRICE_6_1,PRICE_6_2,PRICE_6_3,PRICE_6_4,PRICE_6_5,PRICE_7_1,PRICE_7_2,PRICE_7_3,PRICE_7_4,PRICE_7_5,PRICE_8_1,PRICE_8_2,PRICE_8_3,PRICE_8_4,PRICE_8_5,QUANTITY_5,QUANTITY_6,QUANTITY_7,QUANTITY_8,PRICE_5_6,PRICE_6_6,PRICE_7_6,PRICE_8_6) (Select Convert('{0}',SQL_Char) as UserID,Convert('{1}',SQL_Date) as SaveDate,'{2}' as SaveTime,Convert('{3}',SQL_Integer) as DateRef,Convert('{4}',SQL_Integer) as TimeRef,ROUTER,ROUTER_SUFFIX,ROUTER_TYPE,LINE_ROUTER,ROUTER_INSERT,PRICE_5_1,PRICE_5_2,PRICE_5_3,PRICE_5_4,PRICE_5_5,PRICE_6_1,PRICE_6_2,PRICE_6_3,PRICE_6_4,PRICE_6_5,PRICE_7_1,PRICE_7_2,PRICE_7_3,PRICE_7_4,PRICE_7_5,PRICE_8_1,PRICE_8_2,PRICE_8_3,PRICE_8_4,PRICE_8_5,QUANTITY_5,QUANTITY_6,QUANTITY_7,QUANTITY_8,PRICE_5_6,PRICE_6_6,PRICE_7_6,PRICE_8_6 from v_RTR_PRICE_5_8 where Router = '{5}')",v.Caller.User,v.Local.sSaveDate,v.Local.sSaveTime,v.Local.iDateRef,v.Local.iTimeRef,v.Local.sRouter.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)	
	
	'RTR_PRICE_9_10_4986
	f.Intrinsic.String.Build("Insert into RTR_PRICE_9_10_4986 (UserID,SaveDate,SaveTime,DateRef,TimeRef,ROUTER,ROUTER_SUFFIX,ROUTER_TYPE,LINE_ROUTER,ROUTER_INSERT,PRICE_9_1,PRICE_9_2,PRICE_9_3,PRICE_9_4,PRICE_9_5,PRICE_10_1,PRICE_10_2,PRICE_10_3,PRICE_10_5,QUANTITY_9,QUANTITY_10,PRICE_9_6,PRICE_10_6) (Select Convert('{0}',SQL_Char) as UserID,Convert('{1}',SQL_Date) as SaveDate,'{2}' as SaveTime,Convert('{3}',SQL_Integer) as DateRef,Convert('{4}',SQL_Integer) as TimeRef,ROUTER,ROUTER_SUFFIX,ROUTER_TYPE,LINE_ROUTER,ROUTER_INSERT,PRICE_9_1,PRICE_9_2,PRICE_9_3,PRICE_9_4,PRICE_9_5,PRICE_10_1,PRICE_10_2,PRICE_10_3,PRICE_10_5,QUANTITY_9,QUANTITY_10,PRICE_9_6,PRICE_10_6 from v_RTR_PRICE_9_10 where Router = '{5}') ",v.Caller.User,v.Local.sSaveDate,v.Local.sSaveTime,v.Local.iDateRef,v.Local.iTimeRef,v.Local.sRouter.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)
	
	'Router_Supp_Hdr4986
	f.Intrinsic.String.Build("Insert into Router_Supp_Hdr4986 (UserID,SaveDate,SaveTime,DateRef,TimeRef,RTR_NUM,SUFFIX,TYPE,LINE,F_INSERT,COMPLETE,INACTIVE,CHG_REV) (Select Convert('{0}',SQL_Char) as UserID,Convert('{1}',SQL_Date) as SaveDate,'{2}' as SaveTime,Convert('{3}',SQL_Integer) as DateRef,Convert('{4}',SQL_Integer) as TimeRef,RTR_NUM,SUFFIX,TYPE,LINE,F_INSERT,COMPLETE,INACTIVE,CHG_REV from v_Router_Supp_Hdr where RTR_NUM = '{5}') ",v.Caller.User,v.Local.sSaveDate,v.Local.sSaveTime,v.Local.iDateRef,v.Local.iTimeRef,v.Local.sRouter.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)	
	
	'Router_Supp_Line4986
	f.Intrinsic.String.Build("Insert into Router_Supp_Line4986 (UserID,SaveDate,SaveTime,DateRef,TimeRef,RTR_NUM,SUFFIX,TYPE,LINE,F_INSERT,ROLL_LENGTH,ROLL_WIDTH,FREQUENT_4) (Select Convert('{0}',SQL_Char) as UserID,Convert('{1}',SQL_Date) as SaveDate,'{2}' as SaveTime,Convert('{3}',SQL_Integer) as DateRef,Convert('{4}',SQL_Integer) as TimeRef,RTR_NUM,SUFFIX,TYPE,LINE,F_INSERT,ROLL_LENGTH,ROLL_WIDTH,FREQUENT_4 from V_Router_Supp_Line where RTR_NUM = '{5}') ",v.Caller.User,v.Local.sSaveDate,v.Local.sSaveTime,v.Local.iDateRef,v.Local.iTimeRef,v.Local.sRouter.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)	

f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Backup_Core_Router_Database.End

Program.Sub.Backup_CHILDCut_Router.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.dSaveDate.Declare
	v.Local.sSaveTime.Declare
	v.Local.sPart.Declare
	v.Local.sPart17.Declare
	v.Local.sRev.Declare
	v.Local.sDescription.Declare
	v.Local.sSimilar17.Declare
	v.Local.sSimilarRev.Declare
	v.Local.sSimilar.Declare
	v.Local.sUM.Declare
	v.Local.sPL.Declare
	v.Local.sCustomer.Declare
	v.Local.fComm.Declare
	v.Local.fScrap.Declare
	v.Local.sPartIDLoc.Declare
	v.Local.bRouterComplete.Declare
	v.Local.bOmitPrice.Declare
	v.Local.sAltDesc1.Declare
	v.Local.sAltDesc2.Declare
	v.Local.sExtraDesc.Declare
	v.Local.iDateRef.Declare
	v.Local.iTimeRef.Declare
	v.Local.sSQL.Declare
	
	v.Local.sMap.Declare
	v.Local.iCnt.Declare
	v.Local.smap2.Declare	
	
	v.Local.dSaveDate.Set(v.Ambient.Date)
	v.Local.sSaveTime.Set(v.Ambient.Now.FormatHHNNSS)
	v.Local.sPart17.Set(v.screen.NonInv!txtPart.Text.Trim)
	v.Local.sRev.Set(v.screen.NonInv!txtRev.Text.Trim)
	f.Intrinsic.String.GSSPartString(v.Local.sPart17,v.Local.sRev,v.Local.sPart)	
	v.Local.sDescription.Set(v.screen.NonInv!txtDescr.Text.Trim)
	'v.Local.sSimilar17.Set(v.screen.NonInv!txtSimilar.Text.Trim)
	'v.Local.sSimilarRev.Set(v.screen.NonInv!txtSimilarRev.Text.Trim)
	'f.Intrinsic.String.GSSPartString(v.Local.sSimilar17,v.Local.sSimilarRev,v.Local.sSimilar)
	v.Local.sUM.Set(v.screen.NonInv!txtUM.Text.Trim)
	v.Local.sPL.Set(v.screen.NonInv!txtPL.Text.Trim)
	'v.Local.sCustomer.Set(v.screen.NonInv!txtCustNo.Text.Trim)
	'v.Local.fComm.Set(v.screen.NonInv!txtComm.Text.Trim)
	'v.Local.fScrap.Set(v.screen.NonInv!txtScrap.Text.Trim)
	v.Local.sPartIDLoc.Set(v.screen.NonInv!ddlNewPartLoc.Text.Trim)
	v.Local.sAltDesc1.Set(v.screen.NonInv!txtDescr2.Text.Trim)
	v.Local.sAltDesc2.Set(v.screen.NonInv!txtDescr3.Text.Trim)
	v.Local.sExtraDesc.Set(v.screen.NonInv!txtExtra.Text)
	v.Local.iDateRef.Set(v.Local.dSaveDate.FormatYYYYMMDD)
	v.Local.iTimeRef.Set(v.Local.sSaveTime)	
	
	f.Intrinsic.Control.CallSub(Backup_Core_Router_Database,"sSaveDate",v.Local.dSaveDate.PervasiveDate,"sSaveTime",v.Local.sSaveTime,"iDateRef",v.Local.iDateRef,"iTimeRef",v.Local.iTimeRef,"sRouter",v.Local.sPart)
	
	f.Intrinsic.String.Build("Insert into GCG_4986_BkpHead (UserID,SaveDate,SaveTime,Part,Description,Similar,UM,PL,Customer,Comm,Scrap,PartIDLocn,RouterComplete,OmitReprice,AltDesc1,AltDesc2,ExtraDesc,DateRef,TimeRef) values ('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}',{12},{13},'{14}','{15}','{16}','{17}','{18}')",v.Caller.user,v.Local.dSaveDate.PervasiveDate,v.local.sSaveTime,v.local.sPart.PSQLFriendly,v.local.sDescription.PSQLFriendly,v.local.sSimilar.PSQLFriendly,v.local.sUM.left2,v.local.sPL.left2,v.local.sCustomer.PSQLFriendly,v.local.fComm,v.local.fScrap,v.local.sPartIDLoc.PSQLFriendly,"0","0",v.local.sAltDesc1.PSQLFriendly,v.local.sAltDesc2.PSQLFriendly,v.local.sExtraDesc.PSQLFriendly,v.local.iDateRef,v.local.iTimeRef,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)
	
	f.Data.DataTable.AddColumn("ChildCut","UserID","String",v.Caller.User)
	f.Data.DataTable.AddColumn("ChildCut","DateRef","Long",v.Local.iDateRef)
	f.Data.DataTable.AddColumn("ChildCut","TimeRef","Long",v.Local.iTimeRef)
	
	v.Local.sMap.Set("UserID@!@UserID*!*DateRef@!@DateRef*!*TimeRef@!@TimeRef*!*BPARENT@!@BPARENT*!*DESCR_BP@!@DESCR_BP*!*BOM_SEQ@!@BOM_SEQ*!*RTR_SEQ@!@RTR_SEQ*!*PART@!@PART*!*DESCRIPTION@!@DESCRIPTION*!*DESCRIPTION_2@!@DESCRIPTION_2*!*DESCRIPTION_3@!@DESCRIPTION_3*!*LMO@!@LMO*!*COMMENTS@!@COMMENTS*!*PL@!@PL*!*CATEGORY@!@CATEGORY*!*CAT_CODE@!@CAT_CODE*!*SOURCE@!@SOURCE*!*SOURCE_CODE@!@SOURCE_CODE*!*OP_CODE@!@OP_CODE*!*UM@!@UM*!*TYPE@!@TYPE*!*SET_UP@!@SET_UP*!*FREQUENCY@!@FREQUENCY*!*QTY@!@QTY*!*COST@!@COST*!*WC_Factor@!@WC_Factor*!*PURCHASE_FACTOR@!@PURCHASE_FACTOR*!*PURCH_COST@!@PURCH_COST*!*TAG@!@TAG*!*SIGNOFF_GRPUSR@!@SIGNOFF_GRPUSR*!*SIGNOFF_TYPE@!@SIGNOFF_TYPE*!*TIER@!@TIER*!*CTIER@!@CTIER*!*COMPLETE@!@COMPLETE*!*RTR_SEQ_NUM@!@RTR_SEQ_NUM*!*EXTENDED@!@EXTENDED*!*Loc@!@Loc*!*Issue_UM@!@Issue_UM*!*Consump_Conv@!@Consump_Conv*!*Weight@!@Weight*!*Insert_Bom@!@Insert_Bom*!*Date_Maintenance@!@Date_Maintenance*!*QUANTITY_6@!@QUANTITY_6*!*Date_Start@!@Date_Start*!*Date_Stop@!@Date_Stop*!*BM_Serial_Start@!@BM_Serial_Start*!*BM_Serial_Stop@!@BM_Serial_Stop*!*Purge_Flag@!@Purge_Flag*!*ORDR_USR_FLAG@!@ORDR_USR_FLAG*!*DRAWING@!@DRAWING*!*Date_Last_Chg@!@Date_Last_Chg*!*Time_Last_Chg@!@Time_Last_Chg*!*Last_Chg_By@!@Last_Chg_By*!*Last_Chg_Prog@!@Last_Chg_Prog*!*Drawing_Size@!@Drawing_Size*!*Cost_Date@!@Cost_Date*!*Inactive@!@Inactive*!*Chg_Rev@!@Chg_Rev*!*Setup_Qty@!@Setup_Qty*!*DISPLAY_PART@!@DISPLAY_PART*!*Shape@!@Shape*!*Serie@!@Serie*!*PhantomPart@!@PhantomPart*!*RefPart@!@RefPart*!*SeqSort@!@SeqSort*!*Lead@!@Lead*!*PartID@!@PartID*!*Amt_Minimum@!@Amt_Minimum*!*Sort_Code@!@Sort_Code")	
	'*!*REQ_TRACE@!@REQ_TRACE
	
	f.Data.DataTable.SaveToDB("ChildCut","conx","GCG_4986_BkpLine","",128,v.Local.smap)	
	
	f.Data.DataTable.RemoveColumn("ChildCut","UserID")
	f.Data.DataTable.RemoveColumn("ChildCut","DateRef")
	f.Data.DataTable.RemoveColumn("ChildCut","TimeRef")
	f.Data.DataTable.AcceptChanges("ChildCut")	
	f.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch

	f.Intrinsic.UI.Msgbox("Issue with SaveToDB. Click OK to proceed troubleshooting.")
	f.Intrinsic.Control.Try	
		f.Intrinsic.String.Split(v.Local.sMap,"*!*",v.Local.sMap)
		v.Local.smap2.Set("UserID@!@UserID")
		f.Intrinsic.Control.For(v.Local.iCnt,1,v.Local.sMap.UBound)
			f.Intrinsic.String.Build("{0}*!*{1}",v.Local.smap2,v.Local.sMap(v.Local.iCnt),v.Local.smap2)
			f.Data.DataTable.SaveToDB("ChildCut","conx","GCG_4986_BkpLine2","",128,v.Local.smap2)
		
		f.Intrinsic.Control.Next(v.Local.iCnt)
		
	f.Intrinsic.Control.Catch	
		f.Intrinsic.UI.Msgbox(v.Local.sMap(v.Local.iCnt),"Column Error found")
		f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
	f.Intrinsic.Control.EndTry
	
	
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Backup_CHILDCut_Router.End

Program.Sub.Backup_ChildInsert_Router.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.dSaveDate.Declare
	v.Local.sSaveTime.Declare
	v.Local.sPart.Declare
	v.Local.sPart17.Declare
	v.Local.sRev.Declare
	v.Local.sDescription.Declare
	v.Local.sSimilar17.Declare
	v.Local.sSimilarRev.Declare
	v.Local.sSimilar.Declare
	v.Local.sUM.Declare
	v.Local.sPL.Declare
	v.Local.sCustomer.Declare
	v.Local.fComm.Declare
	v.Local.fScrap.Declare
	v.Local.sPartIDLoc.Declare
	v.Local.bRouterComplete.Declare
	v.Local.bOmitPrice.Declare
	v.Local.sAltDesc1.Declare
	v.Local.sAltDesc2.Declare
	v.Local.sExtraDesc.Declare
	v.Local.iDateRef.Declare
	v.Local.iTimeRef.Declare
	v.Local.sSQL.Declare
	
	v.Local.sMap.Declare
	v.Local.iCnt.Declare
	v.Local.smap2.Declare	
	
	v.Local.dSaveDate.Set(v.Ambient.Date)
	v.Local.sSaveTime.Set(v.Ambient.Now.FormatHHNNSS)
	v.Local.sPart17.Set(v.screen.MFGPart!txtMfgPart.Text.Trim)
	v.Local.sRev.Set(v.screen.MFGPart!txtMfgRev.Text.Trim)
	f.Intrinsic.String.GSSPartString(v.Local.sPart17,v.Local.sRev,v.Local.sPart)	
	v.Local.sDescription.Set(v.screen.MFGPart!txtMfgDescr.Text.Trim)
	'v.Local.sSimilar17.Set(v.screen.MFGPart!txtSimilar.Text.Trim)
	'v.Local.sSimilarRev.Set(v.screen.MFGPart!txtSimilarRev.Text.Trim)
	'f.Intrinsic.String.GSSPartString(v.Local.sSimilar17,v.Local.sSimilarRev,v.Local.sSimilar)
	v.Local.sUM.Set(v.screen.MFGPart!txtMfgUM.Text.Trim)
	v.Local.sPL.Set(v.screen.MFGPart!txtMfgPL.Text.Trim)
	'v.Local.sCustomer.Set(v.screen.MFGPart!txtCustNo.Text.Trim)
	'v.Local.fComm.Set(v.screen.MFGPart!txtComm.Text.Trim)
	'v.Local.fScrap.Set(v.screen.MFGPart!txtScrap.Text.Trim)
	v.Local.sPartIDLoc.Set(v.screen.MFGPart!ddlMfgLoc.Text.Trim)
	v.Local.sAltDesc1.Set(v.screen.MFGPart!txtMfgDescr2.Text.Trim)
	v.Local.sAltDesc2.Set(v.screen.MFGPart!txtMfgDescr3.Text.Trim)
	v.Local.sExtraDesc.Set(v.screen.MFGPart!txtMfgExtra.Text)
	v.Local.iDateRef.Set(v.Local.dSaveDate.FormatYYYYMMDD)
	v.Local.iTimeRef.Set(v.Local.sSaveTime)
	
	f.Intrinsic.Control.CallSub(Backup_Core_Router_Database,"sSaveDate",v.Local.dSaveDate.PervasiveDate,"sSaveTime",v.Local.sSaveTime,"iDateRef",v.Local.iDateRef,"iTimeRef",v.Local.iTimeRef,"sRouter",v.Local.sPart)
	
	f.Intrinsic.String.Build("Insert into GCG_4986_BkpHead (UserID,SaveDate,SaveTime,Part,Description,Similar,UM,PL,Customer,Comm,Scrap,PartIDLocn,RouterComplete,OmitReprice,AltDesc1,AltDesc2,ExtraDesc,DateRef,TimeRef) values ('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}',{12},{13},'{14}','{15}','{16}','{17}','{18}')",v.Caller.user,v.Local.dSaveDate.PervasiveDate,v.local.sSaveTime,v.local.sPart.PSQLFriendly,v.local.sDescription.PSQLFriendly,v.local.sSimilar.PSQLFriendly,v.local.sUM.left2,v.local.sPL.left2,v.local.sCustomer.PSQLFriendly,v.local.fComm,v.local.fScrap,v.local.sPartIDLoc.PSQLFriendly,"0","0",v.local.sAltDesc1.PSQLFriendly,v.local.sAltDesc2.PSQLFriendly,v.local.sExtraDesc.PSQLFriendly,v.local.iDateRef,v.local.iTimeRef,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)
	
	f.Data.DataTable.AddColumn("ChildInsert","UserID","String",v.Caller.User)
	f.Data.DataTable.AddColumn("ChildInsert","DateRef","Long",v.Local.iDateRef)
	f.Data.DataTable.AddColumn("ChildInsert","TimeRef","Long",v.Local.iTimeRef)
	
	v.Local.sMap.Set("UserID@!@UserID*!*DateRef@!@DateRef*!*TimeRef@!@TimeRef*!*BPARENT@!@BPARENT*!*DESCR_BP@!@DESCR_BP*!*BOM_SEQ@!@BOM_SEQ*!*RTR_SEQ@!@RTR_SEQ*!*PART@!@PART*!*DESCRIPTION@!@DESCRIPTION*!*DESCRIPTION_2@!@DESCRIPTION_2*!*DESCRIPTION_3@!@DESCRIPTION_3*!*LMO@!@LMO*!*COMMENTS@!@COMMENTS*!*PL@!@PL*!*CATEGORY@!@CATEGORY*!*CAT_CODE@!@CAT_CODE*!*SOURCE@!@SOURCE*!*SOURCE_CODE@!@SOURCE_CODE*!*OP_CODE@!@OP_CODE*!*UM@!@UM*!*TYPE@!@TYPE*!*SET_UP@!@SET_UP*!*FREQUENCY@!@FREQUENCY*!*QTY@!@QTY*!*COST@!@COST*!*WC_Factor@!@WC_Factor*!*PURCHASE_FACTOR@!@PURCHASE_FACTOR*!*PURCH_COST@!@PURCH_COST*!*TAG@!@TAG*!*SIGNOFF_GRPUSR@!@SIGNOFF_GRPUSR*!*SIGNOFF_TYPE@!@SIGNOFF_TYPE*!*TIER@!@TIER*!*CTIER@!@CTIER*!*COMPLETE@!@COMPLETE*!*RTR_SEQ_NUM@!@RTR_SEQ_NUM*!*EXTENDED@!@EXTENDED*!*Loc@!@Loc*!*Issue_UM@!@Issue_UM*!*Consump_Conv@!@Consump_Conv*!*Weight@!@Weight*!*Insert_Bom@!@Insert_Bom*!*Date_Maintenance@!@Date_Maintenance*!*QUANTITY_6@!@QUANTITY_6*!*Date_Start@!@Date_Start*!*Date_Stop@!@Date_Stop*!*BM_Serial_Start@!@BM_Serial_Start*!*BM_Serial_Stop@!@BM_Serial_Stop*!*Purge_Flag@!@Purge_Flag*!*ORDR_USR_FLAG@!@ORDR_USR_FLAG*!*DRAWING@!@DRAWING*!*Date_Last_Chg@!@Date_Last_Chg*!*Time_Last_Chg@!@Time_Last_Chg*!*Last_Chg_By@!@Last_Chg_By*!*Last_Chg_Prog@!@Last_Chg_Prog*!*Drawing_Size@!@Drawing_Size*!*Cost_Date@!@Cost_Date*!*Inactive@!@Inactive*!*Chg_Rev@!@Chg_Rev*!*Setup_Qty@!@Setup_Qty*!*DISPLAY_PART@!@DISPLAY_PART*!*Shape@!@Shape*!*Serie@!@Serie*!*PhantomPart@!@PhantomPart*!*RefPart@!@RefPart*!*SeqSort@!@SeqSort*!*Lead@!@Lead*!*PartID@!@PartID*!*Amt_Minimum@!@Amt_Minimum*!*Sort_Code@!@Sort_Code")	
	'*!*REQ_TRACE@!@REQ_TRACE
	
	f.Data.DataTable.SaveToDB("ChildInsert","conx","GCG_4986_BkpLine","",128,v.Local.smap)	
	
	f.Data.DataTable.RemoveColumn("ChildInsert","UserID")
	f.Data.DataTable.RemoveColumn("ChildInsert","DateRef")
	f.Data.DataTable.RemoveColumn("ChildInsert","TimeRef")
	f.Data.DataTable.AcceptChanges("ChildInsert")	
	f.Intrinsic.Control.ExitSub
	
f.Intrinsic.Control.Catch

	f.Intrinsic.UI.Msgbox("Issue with SaveToDB. Click OK to proceed troubleshooting.")
	f.Intrinsic.Control.Try	
		f.Intrinsic.String.Split(v.Local.sMap,"*!*",v.Local.sMap)
		v.Local.smap2.Set("UserID@!@UserID")
		f.Intrinsic.Control.For(v.Local.iCnt,1,v.Local.sMap.UBound)
			f.Intrinsic.String.Build("{0}*!*{1}",v.Local.smap2,v.Local.sMap(v.Local.iCnt),v.Local.smap2)
			f.Data.DataTable.SaveToDB("ChildInsert","conx","GCG_4986_BkpLine2","",128,v.Local.smap2)
		
		f.Intrinsic.Control.Next(v.Local.iCnt)
		
	f.Intrinsic.Control.Catch	
		f.Intrinsic.UI.Msgbox(v.Local.sMap(v.Local.iCnt),"Column Error found")
		f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
	f.Intrinsic.Control.EndTry
	
	
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Backup_ChildInsert_Router.End

Program.Sub.GGC_Quantity_CellValueChanged.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.fQty.Declare
	f.Intrinsic.Control.If(v.Args.column.UCase,=,"QUANTITY")
		v.Local.fQty.Set(V.DataTable.BuildQty(v.Args.RowIndex).Quantity!FieldValString)
		f.Intrinsic.Control.If(v.Local.fQty,=,0)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
		F.Intrinsic.Control.If(v.Local.fQty,>=,100000000,or,v.Local.fQty,<,0.0001)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",False)
				f.Intrinsic.UI.Msgbox("Invalid Quantity.")
				f.Data.DataTable.SetValue("BUILDQTY",v.Args.RowIndex,"Quantity",0)
			f.Intrinsic.Control.CallSub(Deal_OnTop,"Flag",True)			
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.GGC_Quantity_CellValueChanged.End

Program.Sub.Delete_Duplicate_000000_RtrSeq.Start
f.Intrinsic.Control.Try
f.Intrinsic.Control.CallSub(Call_Debug,"sSub",v.Ambient.CurrentSubroutine)
	v.Local.sRet.Declare
	v.Local.iCnt.Declare
	
	f.Data.DataTable.Select("Child","IsNull(RTR_Seq,'') = '000000'",v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,<>,"***NORETURN***")
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		f.Intrinsic.Control.If(v.Local.sRet.UBound,>,0)
			f.Intrinsic.Control.For(v.Local.iCnt,v.Local.sRet.UBound,1,-1)
				f.Data.DataTable.DeleteRow(v.Local.sRet(v.Local.iCnt))
			f.Intrinsic.Control.Next(v.Local.iCnt)
			f.Data.DataTable.AcceptChanges("Child")
		f.Intrinsic.Control.EndIf
		
	f.Intrinsic.Control.EndIf	
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry
Program.Sub.Delete_Duplicate_000000_RtrSeq.End

Program.Sub.Check_Child_Is_Parent.Start
f.Intrinsic.Control.Try
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.iChildIsParent.Declare

	'Check if Bom has a child that is the same as the parent
	f.Intrinsic.String.Build("select count(parent) from BOM_MSTR where parent {0} and  rtrim(parent) = rtrim(part)",v.Args.sFilter,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		v.Local.iChildIsParent.Set(v.Local.sRet)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Variable.AddRV("iChildIsParent",v.Local.iChildIsParent)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.Check_Child_Is_Parent.End

Program.Sub.Check_GrandChildren_Is_Children.Start
f.Intrinsic.Control.Try
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.bChildrenAreParent.Declare
	v.Local.sChildrenAreParentList.Declare

	'Check ALL THE CHILDREN OF A BOM that has a GRAND CHILDREN that is the same as the Children
	f.Intrinsic.String.Build("select Parent from BOM_MSTR where parent {0} AND rtrim(parent) = rtrim(part) GROUP BY PARENT HAVING COUNT(PARENT) > 1;",v.Args.sFilter,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF.Not)
		v.Local.bChildrenAreParent.Set(True)	
		v.Local.sChildrenAreParentList.Set(v.Local.sRet)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Variable.AddRV("bChildrenAreParent",v.Local.bChildrenAreParent)
	f.Intrinsic.Variable.AddRV("sChildrenAreParentList",v.Local.sChildrenAreParentList)
	
f.Intrinsic.Control.Catch
    f.Intrinsic.Control.CallSub("Catching","sub",v.Ambient.CurrentSubroutine,"errorno",v.Ambient.ErrorNumber,"errordesc",v.Ambient.ErrorDescription)
f.Intrinsic.Control.EndTry	
Program.Sub.Check_GrandChildren_Is_Children.End
